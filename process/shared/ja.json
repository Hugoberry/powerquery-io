{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Access データベースの構造的な表現を返します。",
        "Documentation.LongDescription": "Access データベース <code>database</code> の構造表示を返します。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] などのように指定されます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "特定のホストの Analysis Services データベースを返します。",
        "Documentation.LongDescription": "Analysis Services インスタンス <code>server</code> 上のデータベースを返します。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには、次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : 多次元モデルまたは表形式モデルで指定された型が、追加されたメジャー列の型に使用されるかどうかを示す論理値。false に設定されると、型 &quot;number&quot; がすべてのメジャー列に使用されます。このオプションの既定値は false です。</li>\r\n<li><code>Culture</code> : データのカルチャを指定するカルチャ名。&#39;Locale Identifier&#39; 接続文字列プロパティに対応します。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>SubQueries</code> : 接続文字列の &quot;SubQueries&quot; プロパティの値を設定する数値 (0、1、2)。これにより、サブセレクトまたはサブキューブの計算済みのメンバーの動作が制御されます (既定値は 2 です)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale キューブ",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "AtScale からの Import/DirectQuery キューブ データ。",
        "Documentation.LongDescription": "\r\nサーバー <code>サーバー</code> の AtScale からキューブ データを返します。省略可能なレコード パラメーター <code>オプション</code> を指定して次のオプションを制御できます:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: 多次元モデルまたは表形式モデルで指定された型が、追加されたメジャー列の型に使用されるかどうかを示す論理値。false に設定されると、型 \"number\" がすべてのメジャー列に使用されます。このオプションの既定値は false です。</li>\r\n        <li><code>CommandTimeout</code>: サーバー側クエリがキャンセルされるまでにどれほど長く実行を許可されるかを制御する期間 (秒)。既定値はドライバーによって異なります。</li>\r\n        <li><code>ConnectionTimeout</code>: サーバーへの接続の試行が破棄されるまでにどれほど長く待機するかを制御する期間 (秒)。既定値はドライバーによって異なります。</li>\r\n\r\n</ul>\r\nレコード パラメーターは、[option1 = value1, option2 = value2...] と指定します。",
        "Documentation.Examples": {
          "Description": "AtScale キューブのキューブ データを一覧表示します。",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer (Kusto) からデータをインポートします",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer (Kusto) インスタンスからデータをインポートします",
        "Documentation.Examples": [
          {
            "Description": "Storm イベント情報のテーブルを返します",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"help\" クラスターの \"Samples\" データベースからの Storm イベントを含むテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics サービスの URL を入力します。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps Analytics サービス URL からダウンロードされたコンテンツをバイナリ値として返します。この関数は、組織ごとにそれぞれ異なる資格情報を使用します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services のフィード",
        "Documentation.DisplayName": "Azure DevOps Services のフィード",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps が提供する OData フィードのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "加入契約に関連付けられた Azure エンタープライズ REST API エンドポイントの URL を入力します",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Azure エンタープライズ API で使用可能なレポートと月の一覧を返します",
        "Documentation.Name": "Azure エンタープライズからデータをインポートします",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Tables 関数を使用し、特定の値に移動して結果を取得します。",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "テーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "スターター クエリのサンプルについては https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli を参照してください。",
        "Documentation.Examples": [
          {
            "Description": "ユーザー クエリ 'resources' のクエリ結果を含むテーブルを返します",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Azure Spark インスタンス内のテーブルを一覧表示します。",
        "Documentation.LongDescription": "Azure Spark インスタンス内のテーブルを一覧表示します。",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark インスタンス内のテーブルを一覧表示します。",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーの、指定されたアカウントで見つかったコンテナーを含むナビゲーション テーブルを返します。",
        "Documentation.LongDescription": "Azure ストレージ資格情報コンテナーのアカウント URL <code>account</code> で見つかった各コンテナーの行を含むナビゲーション テーブルを返します。各行には、コンテナー BLOB へのリンクが含まれます。<code>options</code> は、次のオプションを制御するために指定できます:\r\n    <ul>\r\n<li><code>BlockSize</code> : データ コンシューマーでの待機前に読み取るバイト数。既定値は 4 MB です。</li>\r\n<li><code>RequestSize</code> : サーバーに対する 1 つの HTTP 要求で読み取りを試行するバイト数。既定値は 4 MB です。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests オプションは、並列で実行する要求の数を指定することにより、メモリ使用率を抑えて、データの高速ダウンロードをサポートします。必要なメモリは (ConcurrentRequest * RequestSize) です。既定値は 16 です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Azure Data Lake Storage から、指定されたコンテナーとそのサブフォルダーにあるドキュメントを含むナビゲーション テーブルを返します。",
        "Documentation.LongDescription": "Azure Data Lake Storage ファイルシステムから、アカウントの URL <code>endpoint</code> で指定されたコンテナーとそのサブフォルダーにあるドキュメントを含むナビゲーション テーブルを返します。<code>options</code> は、次のオプションを制御するために指定できます:\r\n    <ul>\r\n<li><code>BlockSize</code> : データ コンシューマーでの待機前に読み取るバイト数。既定値は 4 MB です。</li>\r\n<li><code>RequestSize</code> : サーバーに対する 1 つの HTTP 要求で読み取りを試行するバイト数。既定値は 4 MB です。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests オプションは、並列で実行する要求の数を指定することにより、メモリ使用率を抑えて、データの高速ダウンロードをサポートします。必要なメモリは (ConcurrentRequest * RequestSize) です。既定値は 16 です。</li>\r\n<li><code>HierarchicalNavigation</code> : ファイルをツリー形式のディレクトリ ビューとフラット リストのどちらで返すかを制御する論理 (true/false)。既定値は false です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーの、指定されたアカウントで見つかったテーブルを含むナビゲーション テーブルを返します。",
        "Documentation.LongDescription": "Azure ストレージ コンテナーから、アカウント URL <code>account</code> で見つかったテーブルにつき 1 行ずつが含まれているナビゲーション テーブルを返します。各行には、Azure テーブルへのリンクが含まれています。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードに含まれていることのあるフィールドは次のとおりです:\r\n    <ul>\r\n<li><code>Timeout</code> : サーバーへの要求が破棄されるまで待機する時間を制御する期間。既定値はソース固有です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino での Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "ﾌﾞﾙｰﾑﾊﾞｰｸﾞ･ﾃﾞｰﾀ&分析機能  v1.1.3",
        "Documentation.Description": "ﾌﾞﾙｰﾑﾊﾞｰｸﾞ･ﾃﾞｰﾀ取得に使用"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "この関数は .NET 4.5 を必要とするため、使用できません。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (レガシ)",
        "Documentation.Caption": "Common Data Service (レガシ)",
        "Documentation.LongDescription": "ご使用の Common Data Service インスタンスに接続します (Dynamics 365 および PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "テーブルとして CSV ドキュメントのコンテンツを返します。",
        "Documentation.LongDescription": "CSV ドキュメントのコンテンツをテーブルとして返します。\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> には null、列数、列名の一覧、テーブル タイプ、オプション レコードを指定できます。\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> には単一文字、文字の一覧、連続した空白文字で分割する必要がある行を示す値 <code>\"\"</code> を指定できます。既定値: <code>\",\"</code>。\r\n      </li>\r\n      <li>\r\n        <code>extraValues</code> のサポートされる値については、<code>ExtraValues.Type</code> をご覧ください。\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> には、テキスト エンコードの種類を指定します。\r\n      </li>\r\n    </ul>\r\n\r\n    <code>columns</code> にレコードを指定する場合 (なおかつ <code>delimiter</code>、<code>extraValues</code>、および <code>encoding</code> が null の場合)、次のレコード フィールドを指定できます:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: 列の区切り記号。既定値: <code>\",\"</code>。\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: null、列数、列名の一覧、テーブル タイプを指定できます。この列数が入力にある列数よりも小さい場合、余分の列は無視されます。列数が入力にある列数よりも大きい場合、余分の列は null になります。指定しないと、列数は入力にある列数によって判断されます。\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: ファイルのテキスト エンコード。既定値: 65001 (UTF-8)。\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: 引用符の処理方法を指定します。\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (既定値): フィールド内の引用符は区切り記号の直後の場合にのみ意味を持ちます。\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: フィールド内の引用府は、出現場所に関係なく常に意味を持ちます。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: 引用符で囲まれた改行の処理方法を指定します。\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (既定値): 引用符で囲まれた改行は、現在の行の終わりとしてではなく、データの一部として扱われます。\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: すべての改行は、引用符で囲まれた値内で発生する場合でも、現在の行の終わりとして扱われます。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "列見出しを含む CSV テキストを処理します",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "使用できるディメンションのセットを含むテーブルを返します。",
        "Documentation.LongDescription": "<code>cube</code> 内の使用できるディメンションのセットを含むテーブルを返します。各ディメンションはディメンション属性のセットを含むテーブルであり、それぞれのディメンション属性がディメンション テーブルの列として表されます。ディメンションは、Cube.AddAndExpandDimensionColumn を使用してキューブ内で展開できます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "オブジェクト (ディメンションやメジャーなど) の表示フォルダー階層を表す入れ子になったテーブルのツリーを返します。",
        "Documentation.LongDescription": "<code>cube</code> で使用できるオブジェクトの表示フォルダー階層 (ディメンションやメジャーなど) を表すテーブルの入れ子になったツリーを返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "キューブ内に展開される利用可能なメジャー プロパティのセットを含むテーブルを返します。",
        "Documentation.LongDescription": "キューブ内に展開されるメジャーの使用可能なプロパティのセットを含むテーブルを返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "使用できるメジャーのセットを含むテーブルを返します。",
        "Documentation.LongDescription": "<code>cube</code> 内の使用できるメジャーのセットを含むテーブルを返します。\r\n    それぞれのメジャーが関数として表されます。メジャーは、Cube.AddMeasureColumn を使用してキューブに適用できます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "キューブに適用できるパラメーターのセットを含むテーブルを返します。",
        "Documentation.LongDescription": "<code>cube</code> に適用できるパラメーターのセットを含むテーブルを返します。各パラメーターは、そのパラメーターとパラメーターの引数が適用されている <code>cube</code> を取得するために呼び出すことができる関数です。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "キューブ内に展開されるディメンションの使用可能なプロパティのセットを含むテーブルを返します。",
        "Documentation.LongDescription": "キューブ内に展開されるディメンションの使用可能なプロパティのセットを含むテーブルを返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage Gen1 アカウントの URL を入力します。",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1 の <code>url</code> にあるフォルダーおよびファイルごとの行を含むテーブルを返します。各行には、フォルダーまたはファイルのプロパティと、そのコンテンツへのリンクが含まれます。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage アカウントの URL を入力します。",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1 の <code>url</code> にあるファイルごとの行を含むテーブルを返します。各行には、ファイルのプロパティと、そのコンテンツへのリンクが含まれます。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Azure Cosmos DB アカウントの URL を入力します。",
        "Documentation.LongDescription": "<code>url</code> の Azure Cosmos DB データベースのテーブルを返します。<code>database</code> が指定されている場合、コレクションのテーブルが代わりに返されます。また、<code>options</code> レコードにフィールド <code>Query</code> が指定されている場合、指定されたデータベースおよび/またはコレクションのいずれかで実行されたクエリの結果が返されます。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central (オンプレミス) OData サービス エンドポイントの URL を入力します。",
        "Documentation.DisplayName": "Dynamics 365 Business Central (オンプレミス)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (オンプレミス)",
        "Documentation.LongDescription": "関連する Dynamics 365 Business Central (オンプレミス) データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics NAV OData サービス エンドポイントの URL を入力します。",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "関連する Dynamics NAV データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Essbase サーバーによってグループ化された Essbase インスタンスのキューブを返します。",
        "Documentation.LongDescription": "APS サーバー <code>url</code> にある Essbase インスタンスから、Essbase サーバーによってグループ化されたテーブルを返します。オプションのレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Excel ブックの内容を返します。",
        "Documentation.LongDescription": "Excel ブックのコンテンツを返します。\r\n    <ul>\r\n     <li><code>useHeaders</code> は null か、返される各テーブルの先頭行をヘッダーまたはオプション レコードとして扱うかどうかを示す論理 (true/false) 値にできます。既定値: false。</li>\r\n     <li><code>delayTypes</code> は null か、または返される各テーブルの列を型指定しないままにしておくかどうかを示す論理 (true/false) 値です。既定値: false。</li>\r\n    </ul>\r\n\r\n    <code>useHeaders</code> でレコードが指定されている (そして <code>delayTypes</code> が null ) の場合、次のレコード フィールドが提供されている可能性があります:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: null か、または返される各テーブルの先頭行をヘッダーとして扱うかどうかを示す論理 (true/false) 値にできます。既定値: false。</li>\r\n     <li> <code>DelayTypes</code>: null か、または返される各テーブルの列を型指定しないでおくかどうかを示す論理 (true/false) 値にできます。既定値: false。</li>\r\n     <li> <code>InferSheetDimensions</code>: null か、またはデータを含むワークシートの領域を (ファイルからディメンションのメタデータを読み取るのではなく) ワークシート自体を読み取ることによって推論する必要があるかどうかを示す論理 (true/false) 値にできます。これは、ディメンションのメタデータが正しくない場合に役立ちます。このオプションは、従来の Excel ファイルではなく、Open XML Excel ファイルでのみサポートされているのでご注意ください。既定値: false。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Excel ブックから Sheet1 のコンテンツを返します。",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "指定されたフォルダー内にあるファイルおよびフォルダーのプロパティとコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "フォルダー <code>path</code> にあるフォルダーおよびファイルごとの行を含むテーブルを返します。各行には、フォルダーまたはファイルのプロパティと、そのコンテンツへのリンクが含まれます。 パラメーター <code>options</code> は現在、内部使用のみを目的としています。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "指定されたフォルダーおよびサブフォルダー内にあるファイルのプロパティとコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "フォルダー <code>path</code> とその全てのサブフォルダーにあるファイルごとの行を含むテーブルを返します。各行には、ファイルのプロパティと、そのコンテンツへのリンクが含まれます。 パラメーター <code>options</code> は現在、内部使用のみを目的としています。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Azure AD を使用して Google BigQuery データベースからデータをインポートします",
        "Documentation.LongDescription": "\r\n      <code>課金プロジェクト ID</code> 用 Azure AD を使用して、Google BigQuery 内の利用可能なプロジェクトを一覧表示するテーブルを返します。オプションのレコード パラメーターである <code>options</code> を指定して、次のオプションを制御できます。\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: サーバーへの接続の試行を中止するまでの待機時間を制御する期間です。既定値は、ODBC 接続のタイムアウト値です。</li>\r\n        <li><code>CommandTimeout</code>: キャンセルされるまでに許可されるサーバー側クエリの実行時間を制御する期間です。</li>\r\n        <li><code>UseStorageApi</code>: 大規模な結果セットに対して BigQuery Storage API を使用するかどうかを指定します。既定値は true で、Storage API を使用します。Storage API を使用しない場合は、false に設定します</li>\r\n        <li><code>AudienceUri</code>: これは、ODBC ドライバーがトークン交換リクエストに使用できる対象ユーザー URI です。このフィールドは完全修飾 URI (例: //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) である必要があり、pool_id はワークフォース プールを識別するグローバル固有の名前です。</li>\r\n      </ul>\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] のように指定します。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Azure AD を使用して、Google BigQuery で使用可能なプロジェクトを一覧表示します",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google スプレッドシート",
        "Documentation.Caption": "Google スプレッドシート",
        "Documentation.Description": "Google スプレッドシートからデータをインポートする",
        "Documentation.LongDescription": "Google スプレッドシートからデータをインポートする"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーの、指定されたアカウントで見つかったコンテナーを含むナビゲーション テーブルを返します。",
        "Documentation.LongDescription": "Azure ストレージ資格情報コンテナーのアカウント URL <code>account</code> で見つかった各コンテナーの行を含むナビゲーション テーブルを返します。各行には、コンテナー BLOB へのリンクが含まれます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーの、指定されたアカウントで見つかったコンテナーを含むナビゲーション テーブルを返します。",
        "Documentation.LongDescription": "Azure ストレージ資格情報コンテナーのアカウント URL <code>account</code> で見つかった各コンテナーの行を含むナビゲーション テーブルを返します。各行には、コンテナー BLOB へのリンクが含まれます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Hadoop ファイル システムの、指定されたフォルダー内にあるファイルおよびフォルダーのプロパティとコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "Hadoop ファイル システムの、フォルダー URL <code>url</code> にあるフォルダーおよびファイルごとの行を含むテーブルを返します。各行には、フォルダーまたはファイルのプロパティと、そのコンテンツへのリンクが含まれます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Hadoop ファイル システムの、指定されたフォルダーおよびサブフォルダー内にあるファイルのプロパティとコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "Hadoop ファイル システムの、フォルダー URL <code>url</code> およびサブフォルダーにあるファイルごとの行を含むテーブルを返します。各行には、ファイルのプロパティと、そのコンテンツへのリンクが含まれます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Impala クラスターからデータをインポートします",
        "Documentation.LongDescription": "Impala クラスター <code>server</code> からデータをインポートします。ポートが指定されていない場合、既定のポート 21050 を使用します。",
        "Documentation.Examples": [
          {
            "Description": "Impala クラスター内のテーブルを一覧にします。",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer (Kusto) からデータをインポートします",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer (Kusto) インスタンスからデータをインポートします",
        "Documentation.Examples": [
          {
            "Description": "Storm イベント情報のテーブルを返します",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"help\" クラスターの \"Samples\" データベースからの Storm イベントを含むテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "MailChimp エンドポイントからのデータを含むテーブルを返します。",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "MailChimp API に対する呼び出しを行い、結果のデータセットをテーブルとして返します。すべての結果のページを自動的に移動します。ルート エンドポイントと JSON 応答内のメイン entityName が一致しない API エンドポイントに対して、オプションの entityName パラメーターを使用できます。",
        "Documentation.Examples": [
          {
            "Description": "MailChimp API のリスト エンドポイントからデータのテーブルをプルします。",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "リストのデータを含むテーブル。"
          },
          {
            "Description": "MailChimp API のキャンペーン フォルダー エンドポイントからデータのテーブルをプルします。",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "キャンペーン フォルダーのデータを含むテーブル。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "MailChimp API エンドポイントから生の応答結果を返します。",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "MailChimp API に対する呼び出しを行い、生の応答を返します。",
        "Documentation.Examples": [
          {
            "Description": "指定されたキャンペーンの reports/click-details MailChimp API エンドポイントからの生データを返します。",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "指定されたキャンペーンからのクリック詳細の生データ。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "高度なクエリ関数を提供します。",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "高度なクエリ関数を提供します。",
        "Documentation.Examples": [
          {
            "Description": "今日を 2017-6-15 と仮定し、2017-5-1 から 2017-6-15 までの集計データを取得します",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ numberOfMonth = 1 ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2017-5-1 から 2017-6-15 までの集計データを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、2017 年 4 月の集計データを取得します。",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2017-4-1 から 2017-4-30 までのデータを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、2017 年 4 月から現時点までの集計データを取得します。",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2017-4-1 から 2017-6-15 までのデータを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、去年の 12 月から今年の 2 月までの集計データを取得します",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2016-12-1 から 2017-2-28 までのデータを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、過去 18 か月間の Marketplace での請求金額を取得します",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2015-12-1 から 2017-6-15 までのデータを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、2017 年 6 月と 2017 年 5 月の請求金額の詳細を取得します",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2017-5-1 から 2017-6-15 までのデータを返します"
          },
          {
            "Description": "今日を 2017-07-03 と仮定し、2016 年 7 月の請求金額の詳細を取得します",
            "Code": "\r\n      結果で    \r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ]、\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      と     \r\n          します\r\n    ",
            "Result": "関数は、2016-07-01 から 2016-07-31 までのデータを返します"
          },
          {
            "Description": "今日を 2017-7-13 と仮定し、過去 10 か月間と今月 13 日間の残高集計を取得します",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "関数は、2016-9-1 から 2017-7-13 までのデータを返します"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "ODBC データ ソースから SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "接続文字列 <code>connectionString</code> によって指定された ODBC データ ソースから、SQL テーブルとビューのテーブルを返します。<code>connectionString</code> はテキストまたはプロパティ値のペアのレコードを使用できます。プロパティ値は、テキストまたは数値のどちらかにできます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値は 15 秒です。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "指定された接続文字列から SQL テーブルとビューを返します。",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "OLE DB データ ソースから SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "接続文字列 <code>connectionString</code> によって指定された OLE DB データ ソースから、SQL テーブルとビューのテーブルを返します。<code>connectionString</code> には、テキストまたはプロパティ値のペアのレコードを使用できます。プロパティ値には、テキストまたは数字を使用できます。オプションのレコード パラメーター <code>options</code> を指定すると、追加のプロパティを指定できます。レコードには、次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定されます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Oracle Database の SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の Oracle Database の SQL テーブルとビューのテーブルを返します。ポートには、必要に応じてサーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などと指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "PDF ファイル内で見つかったテーブルを返します。",
        "Documentation.LongDescription": "<code>pdf</code> で見つかったテーブルを返します。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには、次のフィールドを含めることができます:\r\n    <ul>\r\n<li><code>Implementation</code> : テーブルを識別するときに使用するアルゴリズムのバージョンです。古いバージョンは、以前のクエリがアルゴリズムの更新によって使用できなくなることを防ぐための下位互換性のためだけに使用できます。最新バージョンでは、常に最適な結果が得られます。有効な値は、&quot;1.3&quot;、&quot;1.2&quot;、&quot;1.1&quot;、または null です。</li>\r\n<li><code>StartPage</code> : 検査するページ範囲の最初のページを指定します。既定値: 1。</li>\r\n<li><code>EndPage</code> : 検査するページ範囲の最後のページを指定します。既定値: ドキュメントの最後のページ。</li>\r\n<li><code>MultiPageTables</code> : 連続するページの類似するテーブルを 1 つのテーブルに自動的に結合するかどうかを制御します。既定値: true。</li>\r\n<li><code>EnforceBorderLines</code> : 境界線が常にセルの境界線として適用されるか (true の場合)、単にセルの境界線を決定するための多くあるうちの 1 つのヒントとして使用するかどうか (false の場合) を制御します。既定値: false。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": [
          {
            "Description": "sample.pdf に含まれているテーブルを返します。",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Planview Projectplace アカウントの URL を入力します。",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "関連する Planview Projectplace データを含むテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "啓虍衵タPython script",
        "Documentation.Description": "厓厓ミ穐Executes Python script and returns data frames",
        "Documentation.Examples": {
          "Description": "厓厓ミ穐Executes Python script and returns data frames",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "ポゼミ晙R script",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "各行に入力レコードのフィールド名と値を含むテーブルを返します。",
        "Documentation.LongDescription": "<code>record</code> 内のフィールドごとに 1 行あり、列 <code>Name</code> と <code>Value</code> を含むテーブルを返します。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "レコードからテーブルを返します。",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "SAP HANA データベース内のパッケージを返します。",
        "Documentation.LongDescription": "SAP HANA データベース <code>server</code> から多次元パッケージのテーブルを返します。省略可能なレコード パラメーター <code>options</code> を指定すると、以下のオプションを制御できます。\r\n    <ul>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>Distribution</code> : 接続文字列の &quot;分散&quot; プロパティの値を設定する SapHanaDistribution。ステートメント ルーティングは、ステートメントの実行前に分散システムの正しいサーバー ノードを評価する手段です。既定値は SapHanaDistribution.All です。</li>\r\n<li><code>Implementation</code> : 使用する SAP HANA コネクタの実装を指定します。</li>\r\n<li><code>EnableColumnBinding</code> : データをフェッチするときに、SAP HANA 結果セットの列に変数をバインドします。メモリ使用率を若干高くなることで、パフォーマンスが向上する可能性があります。既定値は false です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値は 15 秒です。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "SharePoint サイトのコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "指定された SharePoint サイト <code>url</code> で見つかったフォルダーとドキュメントごとに 1 行を格納するテーブルを返します。各行には、フォルダーまたはファイルのプロパティと、そのコンテンツへのリンクが含まれます。<code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数値 (14 または 15) またはテキスト &quot;Auto&quot; でこのサイトに使用する SharePoint API のバージョンを指定します。指定しない場合は 14 が使用されます。Auto が指定されている場合、サーバー バージョンは自動的に検出されます (可能な場合)。検出できない場合は、バージョン 14 が既定で使用されます。英語以外の SharePoint サイトには、バージョン 15 以降が必要です。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "SharePoint サイトのドキュメントを含むテーブルを返します。",
        "Documentation.LongDescription": "指定された SharePoint サイト <code>url</code> とサブフォルダーで見つかったドキュメントごとに 1 行を格納するテーブルを返します。各行には、フォルダーまたはファイルのプロパティと、そのコンテンツへのリンクが含まれます。<code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数値 (14 または 15) またはテキスト &quot;Auto&quot; でこのサイトに使用する SharePoint API のバージョンを指定します。指定しない場合は 14 が使用されます。Auto が指定されている場合、サーバー バージョンは自動的に検出されます (可能な場合)。検出できない場合は、バージョン 14 が既定で使用されます。英語以外の SharePoint サイトには、バージョン 15 以降が必要です。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "SharePoint リストのコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "指定された SharePoint リスト <code>url</code> で見つかったリスト項目ごとに 1 行を格納するテーブルを返します。各行には、リストのプロパティが含まれます。<code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数値 (14 または 15) またはテキスト &quot;Auto&quot; でこのサイトに使用する SharePoint API のバージョンを指定します。指定しない場合は 14 が使用されます。Auto が指定されている場合、サーバー バージョンは自動的に検出されます (可能な場合)。検出できない場合は、バージョン 14 が既定で使用されます。英語以外の SharePoint サイトには、バージョン 15 以降が必要です。</li>\r\n<li><code>Implementation</code> : オプションです。使用する SharePoint コネクタのバージョンを指定します。使用できる値は &quot;2.0&quot; または null です。値が &quot;2.0&quot; の場合は、SharePoint コネクタの 2.0 実装が使用されます。値が null の場合は、SharePoint コネクタの元の実装が使用されます。</li>\r\n<li><code>ViewMode</code> : オプションです。このオプションは、実装 2.0 でのみ有効です。使用できる値は &quot;All&quot; と &quot;Default&quot; です。値が指定されていない場合、値は &quot;All&quot; に設定されます。&quot;All&quot; を指定すると、ビューには、ユーザーが作成したすべての列とシステム定義の列が含まれます。&quot;Default&quot; を指定すると、ユーザーがオンラインでリストを見るときに、ユーザーが設定で既定に設定したビューで見たものと同じビューが表示されます。ユーザーが既定のビューを編集して、ユーザーが作成した列またはシステム定義の列を追加または削除した場合、または新しいビューを作成して既定として設定すると、これらの変更がコネクタ全体に反映されます。</li>\r\n<li><code>DisableAppendNoteColumns</code> : コネクタがメモの列に個別のエンドポイントを使用できないようにします。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "SODA 2.0 API に従った形式の指定された URL のコンテンツからテーブルを返します。",
        "Documentation.LongDescription": "SODA 2.0 API に従った形式の指定された URL <code>url</code> のコンテンツからテーブルを返します。URL は、.csv 拡張子で終わり、SODA に準拠している有効なソースを指している必要があります。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "この関数は SparkPost API v1 で提供される \"Lists\" エンドポイントを呼び出すために使用できます。この関数を使用して SparkPost API に呼び出しを行うときには、SparkPost API には厳密な API レートの制限があることに留意してください。SparkPost サーバーから 429 状態コードが返される場合、このレート制限に達し、さらに呼び出しを行うには数分待つ必要が生じます。",
        "Documentation.Examples": [
          {
            "Description": "いずれかの SparkPost API v1 \"Lists\" エンドポイントからのデータが取り込まれた単一列が含まれるテーブルを返します (詳細については、SparkPost のドキュメントを参照してください)。",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "ユーザーが指定した日数に関して集計されたデータが含まれる、SparkPost コネクタで公開されている組み込みテーブルを取得します。このコネクタを使用してこれらのテーブルを更新するか、SparkPost API に呼び出しを行う場合、SparkPost API には厳密な API レートの制限があることに留意してください。SparkPost サーバーから 429 状態コードが返される場合、このレート制限に達し、さらに呼び出しを行うには数分待つ必要が生じます。日数パラメーターの値を選択する際、API で格納できるのは 6 か月分のデータのみであることに注意してください。"
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "SQL Server 上のデータベースのテーブルを返します。",
        "Documentation.LongDescription": "指定した SQL Server <code>server</code> 上のデータベースのテーブルを返します。オプションのレコード パラメーター <code>options</code> を指定すると、以下のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 生成された SQL クエリ内の &quot;maxdop&quot; クエリ句の値を設定する数。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>MultiSubnetFailover</code> : 接続文字列の &quot; MultiSubnetFailover&quot; プロパティの値を設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>UnsafeTypeConversions</code> : true の場合、型変換をフォールディング処理しようとして失敗し、クエリ全体が失敗する可能性がある論理値 (true/false)。通常の使用には推奨されていません。</li>\r\n<li><code>ContextInfo</code> : 各コマンドの実行前に CONTEXT_INFO を設定するために使用されるバイナリ値です。</li>\r\n<li><code>OmitSRID</code> : true の場合、geometry および geography 型から Well-Known Text を生成するときに SRID を省略する論理値 (true/false)。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : true の場合、同じサーバー上のデータベース全体にわたるクエリの折りたたみを許可する論理値 (true/false)。既定値は false です。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] などのように指定されます。\r\n    <br>\r\n    サーバーで実行する SQL クエリの設定はサポートされません。SQL クエリを実行する代わりに、<code>Sql.Database</code> を使用する必要があります。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "API に呼び出しの数を制限するオプション付きで、Stripe API に対する呼び出しを行います。",
        "Documentation.LongDescription": "https://api.stripe.com/v1/<code>method</code> の Stripe API に対して呼び出しを行います。追加のパラメーターとして渡されるオプションのレコード <code>query</code> と、API のリクエスト数制限としてオプションの <code>pageLimit</code> を指定します。最近のデータが最初に返されます。<code>pageLimit</code> を指定しない場合、すべてのデータが返されます。Stripe バージョン 2015-10-16 が使用されます。",
        "Documentation.Examples": [
          {
            "Description": "すべての請求データを返します",
            "Code": "Stripe.Contents(\"請求額\")",
            "Result": "現在の Stripe アカウントのすべての請求データを含めたテーブル"
          },
          {
            "Description": "請求データのうち 1 ページを返します",
            "Code": "Stripe.Contents(\"請求額\"、[]、1)",
            "Result": "現在の Stripe アカウントの最近の請求データを含めたテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "テーブルをメモリ内にバッファー処理して、評価中に外部から変更されないように分離します。",
        "Documentation.LongDescription": "テーブルをメモリ内にバッファーして、評価中に外部から変更されないように分離します。\r\n    バッファー処理は浅いものです。スカラー セルのすべての値は強制的に評価されますが、スカラー値以外の値 (レコード、リスト、テーブルなど) はそのままにされます。\r\n    <br>\r\n    <br>\r\n    この関数を使用すると、クエリの実行が速くなる場合とそうでない場合があることに注意してください。場合によっては、すべてのデータを読み取ってメモリに格納するための\r\n    コストが追加され、バッファー処理によって下流のフォールディング処理が妨げられるため、クエリの実行が遅くなる場合があります。データをバッファーする必要がないが\r\n    単に下流のフォールディング処理を妨げたい場合は、<code>Table/StopFolding</code> を代わりに使用します。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "SQL テーブルのすべての行をメモリに読み込むと、ダウンストリーム操作で SQL サーバーのクエリを実行できなくなります。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "一連のテーブルを結合したテーブルを返します。",
        "Documentation.LongDescription": "テーブルの一覧 <code>tables</code> のマージ結果となるテーブルを返します。結果として返されるテーブルの行の型の構造は <code>columns</code> によって定義されますが、<code>columns</code> が指定されていない場合は、入力の型の論理和になります。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "3 つのテーブルをマージします。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "構造の異なる 3 つのテーブルをマージします。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "2 つのテーブルをマージして、指定された型に投影します。",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "列見出しを先頭行の値に降格させます。",
        "Documentation.LongDescription": "列見出し (つまり列名) を先頭行の値に降格させます。既定の列名は、\"Column1\"、\"Column2\" などです。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの値の先頭行を降格させます。",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "重複する行をテーブルから削除します。",
        "Documentation.LongDescription": "テーブルから重複する行を削除します。\r\n    省略可能なパラメーター <code>equationCriteria</code> は、重複をテストするテーブルの列を指定します。<code>equationCriteria</code> が指定されていない場合は、すべての列がテストされます。<br>\r\n    <br>\r\n    Power Query では、特定の操作がバックエンド データ ソースにオフロードされること (\"折りたたみ\" と呼ばれる) や、厳密な必要性がない操作をスキップして \r\n    クエリを最適化することがあるため、一般に、どの特定の重複が保持されるかは保証されません。\r\n    たとえば、ある一意の列値のセットを含んだ最初の行が必ず残り、テーブル内の下方にある行が削除されると仮定することはできません。\r\n    動作が予測できる形で重複の削除を実行したい場合は、最初に <code>Table.Buffer</code> を使用してテーブルをバッファー処理します。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "重複する行をテーブルから削除します。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "列 [b] が重複する行をテーブル <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> から削除します。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "列と指定した値のリストからテーブルを作成します。",
        "Documentation.LongDescription": "列名と値を含む入れ子になったリストを含むリスト <code>lists</code> から <code>columns</code> 型のテーブルを作成します。\r\n    一部の列の値が他の列よりも多い場合、NULL 許容列では足りない値が既定値の 'NULL' で埋められます。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "リストの顧客名のリストからテーブルを返します。顧客リスト項目の各値が行の値になり、各リストが列になります。",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "指定された列のリストと列名のリストからテーブルを作成します。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "行ごとの列数が異なるテーブルを作成します。不足している行の値は NULL です。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "指定された分割関数をリストの各項目に適用してリストをテーブルに変換します。",
        "Documentation.LongDescription": "省略可能な分割関数 <code>splitter</code> をリストの各アイテムに適用してリスト <code>list</code> をテーブルに変換します。既定では、リストはコンマで区切られたテキスト値のリストであると見なされます。省略可能な <code>columns</code> は、列の数、列のリスト、TableType のいずれかです。省略可能な <code>default</code> および <code>extraValues</code> を指定することもできます。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "既定のスプリッターを使用して、リストから表を作成します。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "カスタム スプリッターを使用して、リストから表を作成します。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Record.FieldValues スプリッターを使用して、リストから表を作成します。",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "レコードのリストをテーブルに変換します。",
        "Documentation.LongDescription": "レコードのリスト <code>records</code> をテーブルに変換します。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "レコード フィールド名を列名として使用して、レコードからテーブルを作成します。",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "型指定された列を使用してレコードからテーブルを作成し、数値の列を選択します。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "行の値と列 (省略可能) のリストからテーブルを作成します",
        "Documentation.LongDescription": "リスト <code>rows</code> からテーブルを作成します。リストの各要素は、1 つの行の列値を含む内側リストです。省略可能な列名のリスト、テーブル型、または列の数を <code>columns</code> に指定できます。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "列 [CustomerID] に値 {1, 2}、列 [Name] に値 {\"Bob\", \"Jim\"}、列 [Phone] に値 {\"123-4567\", \"987-6543\"} を含むテーブルを返します。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "列 [CustomerID] に値 {1, 2}、列 [Name] に値 {\"Bob\", \"Jim\"}、列 [Phone] に値 {\"123-4567\", \"987-6543\"} を含むテーブルを返します。[CustomerID] は数値型で、[Name] および [Phone] はテキスト型です。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "指定された値を列に含めたテーブルを作成します。",
        "Documentation.LongDescription": "指定された値または値リスト <code>value</code> を列に含めたテーブルを作成します。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : リストまたはスカラー値からテーブルを生成するのに使用された列名。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "値 1 からテーブルを作成します。",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "リストからテーブルを作成します。",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "カスタム列名を使用して、値 1 からテーブルを作成します。",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "テーブルをパーティション分割する方法に関する情報を返します。",
        "Documentation.LongDescription": "テーブルをパーティション分割する方法に関する情報を返します。元のテーブルで各列がパーティション列であるテーブルが返されます。各行は元のテーブル内のパーティションに対応します。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "テーブルの列のプロファイルを返します。",
        "Documentation.LongDescription": "<p><code>table</code> 内の列のプロファイルを返します。</p>\r\n<p>各列の以下の情報が返されます (該当する場合):\r\n<ul>\r\n  <li>最小値</li>\r\n  <li>最大値</li>\r\n  <li>平均</li>\r\n  <li>標準偏差</li>\r\n  <li>カウント</li>\r\n  <li>null カウント</li>\r\n  <li>個別のカウント</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "値の先頭行を新しい列見出し (つまり列名) に昇格させます。",
        "Documentation.LongDescription": "値の先頭行を新しい列見出し (つまり列名) に昇格させます。既定では、テキストと数値のみが見出しに昇格されます。有効なオプション:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : <code>true</code> に設定すると、先頭行のすべてのスカラー値が <code>Culture</code> (指定されている場合。指定されていない場合には現在のドキュメント ロケール) を使用して見出しに昇格されます。\r\n    テキストに変換できない値には、既定の列名が使用されます。\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : 対象データのカルチャを指定するカルチャ名。\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの値の先頭行を昇格させます。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "テーブルの先頭行にあるすべてのスカラー値を見出しに昇格します。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "スキップされた最初のカウント行を含むテーブルを返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> の最初の指定された数の行 (<code>countOrCondition</code>) が含まれないテーブルを返します。\r\n    削除される行の数は、省略可能なパラメーター <code>countOrCondition</code> によって決まります。\r\n    <ul>\r\n    <li> <code>countOrCondition</code> が省略された場合は、最初の行だけが削除されます。</li>\r\n    <li> <code>countOrCondition</code> が数の場合は、(先頭から) その数の行が削除されます。</li>\r\n    <li> <code>countOrCondition</code> が条件の場合は、その条件を満たす行が、条件を満たさない行まで削除されます。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの先頭行を削除します。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "テーブルの先頭の 2 行を削除します。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "テーブルの [CustomerID] <=2 である先頭行を削除します。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "最後の N 行を削除したテーブルを返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> の最後の <code>countOrCondition</code> 行が含まれないテーブルを返します。\r\n        削除される行の数は、省略可能なパラメーター <code>countOrCondition</code> によって決まります。\r\n    <ul>\r\n    <li> <code>countOrCondition</code> が省略された場合は、最後の行だけが削除されます。</li>\r\n    <li> <code>countOrCondition</code> が数の場合は、(末尾から) その数の行が削除されます。</li>\r\n    <li> <code>countOrCondition</code> が条件の場合は、その条件を満たす行が、条件を満たさない行まで削除されます。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの最終行を削除します。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "テーブルの [CustomerID] > 2 である最終行を削除します。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "少なくとも 1 つのセルにエラーがあり、入力テーブルから削除された行を含むテーブルを返します。列リストを指定した場合、指定した列のセルのみ、エラーの有無が確認されます。",
        "Documentation.LongDescription": "少なくとも 1 つのセルにエラーがあり、入力テーブルから削除された行を含むテーブルを返します。列リストを指定した場合、指定した列のセルのみ、エラーの有無が確認されます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "先頭行からエラー値を削除します。",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "行を逆順にしたテーブルを返します。",
        "Documentation.LongDescription": "入力 <code>table</code> の行を逆順にしたテーブルを返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの行を逆順にします。",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "指定したテーブルの列の説明 (つまりスキーマ) を含むテーブルを返します。",
        "Documentation.LongDescription": "<p><code>table</code> の列を説明するテーブルを返します。</p>\r\n<p>テーブル内の各行は、<code>table</code> の列のプロパティを説明しています:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Clumn Name</b></td>\r\n    <td><b>説明</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>列の名前。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code> 内の列の 0 ベースの位置。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>列の種類の名前。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>列型の種類。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>列に<code>null</code> 値を含められるかどうか。</td>\r\n  </tr>\r\n  <tr>\r\n   <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> および <code>NumericScale</code> フィールドの数値の進法 (2 進法、10 進法など)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td><code>NumericPrecisionBase</code> によって指定された進法表記での数値列の精度。この種類の値 (小数部分の桁数を含む) によって表せる最大桁数を表します。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td><code>NumericPrecisionBase</code> によって指定された進法表記での数値列の桁数。この種類の値の小数部分の桁数を表します。値 <code>0</code> は、小数桁を持たない固定桁を表します。値 <code>null</code> は、浮動小数か未定義であるため、桁数が不明であることを表します。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>date 値または time 値の seconds 部分でサポートされる小数の最大桁数。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n   <td><code>text</code> 列で使用できる最大文字数、または <code>binary</code> 列で使用できる最大バイト数。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>その列の長さが可変 (上限 <code>MaxLength</code>) であるか、固定サイズであるか。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>ソースのネイティブ型システム内の列の種類の名前 (例: SQL Server の場合、<code>nvarchar</code>)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>ソースのネイティブな記述言語で表記した場合のこの列の値の既定の表記 (例: SQL Server の場合、<code>42</code> または <code>newid()</code>)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>列の説明。</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "少なくとも 1 つのセルにエラーがある、入力テーブルの行を含むテーブルを返します。列リストを指定した場合、指定した列のセルのみ、エラーの有無が確認されます。",
        "Documentation.LongDescription": "少なくとも 1 つのセルにエラーがある、入力テーブルの行を含むテーブルを返します。列リストを指定した場合、指定した列のセルのみ、エラーの有無が確認されます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "行にエラーを含む顧客の名前を選択します。",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "スキップされた最初のカウント行を含むテーブルを返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> の最初の指定された数の行 (<code>countOrCondition</code>) が含まれないテーブルを返します。\r\n    スキップされる行の数は、省略可能なパラメーター <code>countOrCondition</code> によって決まります。\r\n    <ul>\r\n    <li> <code>countOrCondition</code> が省略された場合は、最初の行だけがスキップされます。</li>\r\n    <li> <code>countOrCondition</code> が数の場合は、(先頭から) その数の行がスキップされます。</li>\r\n    <li> <code>countOrCondition</code> が条件の場合は、その条件を満たす行が、条件を満たさない行までスキップされます。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの先頭行をスキップします。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "テーブルの先頭の 2 行をスキップします。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "テーブルの [Price] > 25 である先頭行をスキップします。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "データの元のソースに対して下流の操作が実行されないようにします。",
        "Documentation.LongDescription": "<code>table</code> のデータの元のソースに対して下流の操作が実行されないようにします。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "SQL サーバーで下流の操作がクエリとして実行されないように、SQL テーブルからデータをフェッチします。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "列を行に、行を列にします。",
        "Documentation.LongDescription": "列を行に、行を列にします。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "名前/値ペアのテーブルの行を列にします。",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "テーブルのセットからリレーションシップを取得します。",
        "Documentation.LongDescription": "テーブルのセットからリレーションシップを取得します。セット <code>tables</code> はナビゲーション テーブルと同様の構造を持つと見なされます。<code>dataColumn</code> によって定義された列には実際のデータ テーブルが含まれます。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Teradata データベースの SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の Teradata データベースの SQL テーブルとビューのテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、たとえば [option1 = value1, option2 = value2...] または [Query = \"select ...\"] のように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "取得する Twilio の履歴データの月数を入力します。",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "関連する Twilio データのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "指定したテーブルの種類の列の説明 (つまりスキーマ) を含むテーブルを返します。",
        "Documentation.LongDescription": "<p><code>tableType</code> の列を説明するテーブルを返します。</p>\r\n<p>結果として返されるテーブルの説明については、<code>Table.Schema</code> のドキュメントを参照してださい。</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services のフィード",
        "Documentation.DisplayName": "Azure DevOps Services のフィード",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps が提供する OData フィードのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Viva インサイト データに接続する",
        "Documentation.LongDescription": "Workplace Analytics から週単位のメトリックと属性データをインポートします。",
        "Documentation.Examples": [
          {
            "Description": "パーティション内の測定された従業員ごとに、表示可能な属性と週ごとのメトリックを含むテーブルを返します。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "構成要素の構造に分割された HTML ドキュメントのコンテンツと、完全なドキュメントおよびタグを削除したテキストの表現を返します。",
        "Documentation.LongDescription": "構成要素の構造に分割された HTML ドキュメントのコンテンツと、完全なドキュメントおよびタグを削除したテキストの表現を返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Webtrends の主要指標を含むテーブルを返します。",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Webtrends KeyMetrics エンドポイントへの呼び出しを実行して、すべてのデータをテーブルとして返します。",
        "Documentation.Examples": [
          {
            "Description": "過去 30 日間のテナント 98765 の主要指標のテーブルをプルします",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "主要指標のテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Webtrends アカウントに関連付けられているプロファイル IDを入力します。",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "関連する Webtrends データを含むテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Viva インサイト データに接続する",
        "Documentation.LongDescription": "Workplace Analytics から週単位のメトリックと属性データをインポートします。",
        "Documentation.Examples": [
          {
            "Description": "パーティション内の測定された従業員ごとに、表示可能な属性と週ごとのメトリックを含むテーブルを返します。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "階層テーブルとして XML ドキュメントのコンテンツを返します。",
        "Documentation.LongDescription": "階層テーブルとして XML ドキュメントのコンテンツを返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "フラット化されたテーブルの入れ子のコレクションとして XML ドキュメントのコンテンツを返します。",
        "Documentation.LongDescription": "フラット化されたテーブルの入れ子のコレクションとして XML ドキュメントのコンテンツを返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "ローカル xml ファイルの内容を取得します。",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zendesk アカウントの URL を入力します。",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "関連する Zendesk データのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "ADO.NET データ ソースのスキーマ コレクションを返します。",
        "Documentation.LongDescription": "プロバイダー名 <code>providerName</code>、接続文字列 <code>connectionString</code> の ADO.NET データ ソースのスキーマ コレクションを返します。<code>connectionString</code> にはテキスト、またはプロパティ値のペアのレコードを使用できます。プロパティ値は、テキストまたは数値のどちらかにできます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (ベータ版)",
        "Documentation.Description": "Amazon Redshift データベースからデータをインポートします。",
        "Documentation.LongDescription": "データベース <code>database</code> 内の Amazon Redshift クラスター <code>server</code> 上のテーブルを一覧表示するテーブルを返します。 省略可能なレコード パラメーター <code>options</code> は、次のオプションを制御するために指定できます:\r\n<ul>\r\n<li><code>Provider Name</code>: 接続のプロバイダー名として使用するテキスト値。これは、Microsoft 認証を使用する場合に使用されます。</li>\r\n<li><code>Batch Size</code>: サーバーへの 1 回の呼び出しで取り入れられる行の数。</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Analysis Services データベースから多次元キューブまたは表形式モデルのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の Analysis Services データベース <code>database</code> から多次元キューブまたは表形式モデルのテーブルを返します。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>Query</code> : データの取得に使用するネイティブ MDX クエリ。</li>\r\n<li><code>TypedMeasureColumns</code> : 多次元モデルまたは表形式モデルで指定された型が、追加されたメジャー列の型に使用されるかどうかを示す論理値。false に設定されると、型 &quot;number&quot; がすべてのメジャー列に使用されます。このオプションの既定値は false です。</li>\r\n<li><code>Culture</code> : データのカルチャを指定するカルチャ名。&#39;Locale Identifier&#39; 接続文字列プロパティに対応します。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>SubQueries</code> : 接続文字列の &quot;SubQueries&quot; プロパティの値を設定する数値 (0、1、2)。これにより、サブセレクトまたはサブキューブの計算済みのメンバーの動作が制御されます (既定値は 2 です)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "指定された Spark クラスター上のテーブルの一覧を示すテーブルを返します。",
        "Documentation.LongDescription": "<code>protocol</code> を使用して Spark クラスター <code>host</code> 上のテーブルの一覧を示すテーブルを返します。有効なプロトコルは次のとおりです:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "指定された Spark クラスター上のテーブルの一覧を示すテーブルを返します。",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "組織とプロジェクトの名前を入力します。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (Boards のみ)",
        "Documentation.LongDescription": "Azure DevOps が提供する Analytics ビューのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "HDInsight Interactive Query からデータをインポートします",
        "Documentation.LongDescription": "\r\nHDInsight Interactive Query <code>server</code> の <code>database</code> で指定した HDInsight Interactive Query からテーブルの一覧を返します。サーバーと一緒に、コロンで区切ってポート番号を指定することもできます (省略可能)。省略可能な <code>options</code> パラメーターを指定して、次のオプションを制御できます。\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: サーバーへの接続試行を破棄するまで待機する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n        <li><code>CommandTimeout</code>: サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n</ul>\r\n<code>options</code> パラメーターは、[option1 = value1, option2 = value2...] という形式で指定します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "データ型を含め、Common Data Model のエンティティの属性にマッピングされた列を含むテーブルを返します。",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "データ型を含め、Common Data Model のエンティティの属性にマッピングされた列を含むテーブルを返します。マッピングされていない場合はエンティティ定義からの列が追加され、マッピングされていない列はすべて削除されます。",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "パラメーターを適用後、キューブを返します。",
        "Documentation.LongDescription": "<code>arguments</code> を含む <code>parameter</code> を <code>cube</code> に適用後、キューブを返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "指定した列にマップされている属性を折りたたんで、キューブのフィルター コンテキストの次元の粒度を変更します。",
        "Documentation.LongDescription": "指定した列 <code>columnNames</code> にマップされている属性を折りたたんで、<code>cube</code> のフィルター コンテキストの次元の粒度を変更します。キューブの表形式からも列が削除されます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Cube.Dimensions から戻されるディメンジョンのセットを置き換えます。",
        "Documentation.LongDescription": "<code>Cube.Dimensions</code>によって戻されるディメンションのセットを置き換えます。\r\n    たとえば、この関数を使用して ID 列をディメンション属性に追加できるので、データ ソースは表示値ではなく ID でグループ化できます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "一連のキューブ関数を適用します。",
        "Documentation.LongDescription": "一連のキューブ関数 <code>transforms</code> を <code>cube</code> に適用します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "DB2 データベース内の使用できる SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の DB2 データベースの <code>database</code> という名前のデータベース インスタンス内の使用できる SQL テーブルとビューのテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>Implementation</code> : 使用する内部データベース プロバイダーの実装を指定します。有効な値は &quot;IBM&quot; と &quot;Microsoft&quot; です。</li>\r\n<li><code>BinaryCodePage</code> : DB2 FOR BIT バイナリ データを文字列にデコードする CCSID (コード化文字セット識別コード) の番号。Implementation = “Microsoft” に適用されます。変換を無効にするには 0 を設定します (既定)。データベース エンコードに基づいて変換するには 1 を設定します。アプリケーション エンコードに変換するには他の CCSID 番号を設定します。</li>\r\n<li><code>PackageCollection</code> : SQL ステートメントを処理するのに必要な共有パッケージの使用を有効にするパッケージ コレクションの文字列値を指定します (既定値は &quot; NULLID&quot;)。Implementation = &quot; Microsoft&quot; に適用されます。</li>\r\n<li><code>UseDb2ConnectGateway</code> : Db2 Connect ゲートウェイを使用して接続を確立しているかどうかを指定します。Implementation = &quot;Microsoft&quot; に適用されます。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Data.World からデータセットを取得します"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーの指定されたコンテナー内にある BLOB のプロパティとコンテンツを含むテーブルを返します。",
        "Documentation.LongDescription": "Azure ストレージ資格情報コンテナーのコンテナー URL <code>account</code> で見つかった各 BLOB ファイルの行を含むテーブルを返します。各行には、ファイルのプロパティとそのコンテンツへのリンクが含まれます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "指定された HTML に対して指定された CSS セレクターを実行した結果を含むテーブルを返します。",
        "Documentation.LongDescription": "提供された <code>html</code> に対して指定された CSS セレクターを実行した結果を含むテーブルを返します。省略可能なレコード パラメーター <code>options</code> が追加のプロパティを指定するために提供されることがあります。レコードには、次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": [
          {
            "Description": "サンプルの html テキスト値からテーブルを返します。",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "サンプルの html テキスト値からすべての href を抽出します。",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">テスト</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Informix データベースで利用可能な SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の Informix データベースの <code>database</code> という名前のデータベース インスタンス内の使用できる SQL テーブルとビューのテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "潜在顧客の詳細のテーブルを返します。",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/leads.json の Marketo REST API エンドポイントに対する呼び出しを行います。<code>leadIds</code> のリストに含まれるすべての潜在顧客が返されます。",
        "Documentation.Examples": [
          {
            "Description": "潜在顧客 3 名の詳細を取得します",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "提供された潜在顧客の詳細を含めたテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "アカウントに関連付けられている Marketo REST API エンドポイントの URL を入力します。",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "関連する Marketo データのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "MySQL データベース内の使用できる SQL テーブル、ビュー、およびストアド スカラー関数のテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の MySQL データベースの <code>database</code> という名前のデータベース インスタンス内の使用できる SQL テーブル、ビュー、ストアド スカラー関数のテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>Encoding</code> : サーバーに送信されるすべてのクエリのエンコードに使用される文字セットを指定する TextEncoding 値 (既定値は null)。</li>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>TreatTinyAsBoolean</code> : サーバーの tinyint 列を論理値として強制するかどうかを判断する論理値 (true/false)。既定値は true です。</li>\r\n<li><code>OldGuids</code> : char(36) 列 (false の場合) または binary(16) 列 (true の場合) が GUID として扱われるかを判断する論理値 (true/false)。既定値は false です。</li>\r\n<li><code>ReturnSingleDatabase</code> : すべてのデータベースのテーブルすべてを返す (false の場合) か指定されたデータベースのテーブルとビューを返す (true の場合) かを設定する論理値 (true/false)。既定値は false です。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "データを IBM Netezza データベースからインポートします。",
        "Documentation.LongDescription": "\r\nサーバー <code>server</code> 上の Netezza サーバー データベース <code>database</code> から Netezza テーブル、ビュー、ストアド関数のテーブルを返します。サーバーと共に、必要に応じてポートをコロンで区切って指定できます。省略可能なレコード パラメーター、<code>options</code> を指定すると、以下のオプションを制御できます:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: ナビゲーション プロパティを生成するかどうかを戻り値で設定する論理値 (true/false、既定値は true)</li>\r\n        <li><code>HierarchicalNavigation</code>: テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)</li>\r\n        <li><code>ConnectionTimeout</code>: サーバーへの接続の試行を破棄するまで待機する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n        <li><code>CommandTimeout</code>: サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n<li><code>NormalizeDatabaseName</code>: データベース名を大文字に正規化するか、文字どおりに解釈するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n</ul>\r\nレコード パラメーターは、[option1 = value1, option2 = value2...] と指定されます。",
        "Documentation.Examples": [
          {
            "Description": "IBM Netezza プロジェクトのテーブルを一覧表示します。",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "ODBC データ ソースでネイティブな クエリを実行した結果を戻します。",
        "Documentation.LongDescription": "ODBC を使用して、接続文字列 <code>connectionString</code> で <code>query</code> を実行した結果を返します。<code>connectionString</code> はテキストまたはプロパティ値のペアのレコードを使用できます。プロパティ値は、テキストまたは数値のどちらかにできます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値は 15 秒です。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "指定された接続文字列に対して単純クエリを実行した結果を返します。",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "OLE DB データ ソースでネイティブなクエリを実行した結果を戻します。",
        "Documentation.LongDescription": "OLE DB を使用して、接続文字列 <code>connectionString</code> で <code>query</code> を実行した結果を返します。<code>connectionString</code> はテキストまたはプロパティ値のペアのレコードを使用できます。プロパティ値は、テキストまたは数値のどちらかにできます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "PostgreSQL データベース内の使用できる SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の PostgreSQL データベースの <code>database</code> という名前のデータベース インスタンス内で使用できる SQL テーブルとビューのテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Snowflake コンピューティング ウェアハウスからデータをインポートします。",
        "Documentation.LongDescription": "<code>server</code> にある Snowflake Computing <code>warehouse</code> のテーブルの一覧を示すテーブルを返します。省略可能なレコード パラメーター <code>options</code> は、次のオプションを制御するために指定できます。\r\n<ul>\r\n<li><code>Role</code>: 接続のロール名として使用するテキスト値。</li>\r\n<li><code>CreateNavigationProperties</code>: 戻り値に対してナビゲーション プロパティを生成するかどうかを設定する論理 (true または false) 値 (既定値は true)。</li>\r\n<li><code>ConnectionTimeout</code>: Snowflake からのネットワーク応答を待つ秒数。</li>\r\n<li><code>CommandTimeout</code>: クエリの実行を待つ秒数。</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Snowflake ウェアハウス内のテーブルを一覧で表示します。",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "指定された Spark クラスター上のテーブルの一覧を示すテーブルを返します。",
        "Documentation.LongDescription": "<code>protocol</code> を使用して Spark クラスター <code>host</code> 上のテーブルの一覧を示すテーブルを返します。有効なプロトコルは次のとおりです:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark インスタンス内のテーブルを一覧表示します。",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "SQL Server データベースの SQL テーブル、ビュー、およびストアド関数のテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の SQL Server データベース <code>database</code> の SQL テーブル、ビュー、ストアド関数のテーブルを返します。ポートには、必要に応じて、サーバーをコロンまたはコンマで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 生成された SQL クエリ内の &quot;maxdop&quot; クエリ句の値を設定する数。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>MultiSubnetFailover</code> : 接続文字列の &quot; MultiSubnetFailover&quot; プロパティの値を設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>UnsafeTypeConversions</code> : true の場合、型変換をフォールディング処理しようとして失敗し、クエリ全体が失敗する可能性がある論理値 (true/false)。通常の使用には推奨されていません。</li>\r\n<li><code>ContextInfo</code> : 各コマンドの実行前に CONTEXT_INFO を設定するために使用されるバイナリ値です。</li>\r\n<li><code>OmitSRID</code> : true の場合、geometry および geography 型から Well-Known Text を生成するときに SRID を省略する論理値 (true/false)。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : true の場合、同じサーバー上のデータベース全体にわたるクエリの折りたたみを許可する論理値 (true/false)。既定値は false です。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] または [Query = \"select ...\"] などのように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Sybase データベース内の使用できる SQL テーブルとビューのテーブルを返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上の Sybase データベースの <code>database</code> という名前のデータベース インスタンス内の使用できる SQL テーブルとビューのテーブルを返します。ポートには、必要に応じて、サーバーをコロンで区切って指定できます。省略可能なレコード パラメーター <code>options</code> を指定して、次のオプションを制御できます:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : ナビゲーション プロパティの名前の作成に使用される関数。</li>\r\n<li><code>Query</code> : データの取得に使用するネイティブ SQL クエリ。クエリで複数の結果セットが生成される場合は、最初の結果セットのみ返されます。</li>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>ConnectionTimeout</code> : サーバーへの接続の試行を破棄するまでの待機時間を制御する期間です。既定値はドライバーによって異なります。</li>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n</ul>\r\n\r\n    レコード パラメーターは、たとえば [option1 = value1, option2 = value2...] または [Query = \"select ...\"] のように指定します。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "明示的な位置の値を含む列を追加します。",
        "Documentation.LongDescription": "<code>table</code> に明示的な位置の値を含む <code>newColumnName</code> という名前の列を追加します。\r\n    省略可能な値 <code>initialValue</code> はインデックスの初期値です。省略可能な値 <code>increment</code> には、各インデックス値の増分値を指定します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "\"Index\" という名前のインデックス列をテーブルに追加します。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "値 10 から開始し、5 ずつ増加する \"index\" という名前のインデックス列をテーブルに追加します。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "テーブル内にリスト列がある場合に、そのリスト内の値ごとに 1 行のコピーを作成します。",
        "Documentation.LongDescription": "<code>column</code> があり、<code>table</code> が値のリストである場合に、リストを値ごとに行に分割します。他の列の値は、作成された新しい各行で重複します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルのリスト列 [Name] を分割します。",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "列の下の NULL 値セルに上のセル値を反映します。",
        "Documentation.LongDescription": "指定された <code>table</code> から、指定された <code>columns</code> の下の NULL 値セルに上のセル値を反映したテーブルを返します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列 [Place] の NULL 値をその上の値で埋めたテーブルを返します。",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "列の上の NULL 値セルにセル値を反映します。",
        "Documentation.LongDescription": "指定された <code>table</code> から、指定された <code>columns</code> の上の NULL 値セルに次のセル値を反映したテーブルを返します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列 [Column2] の NULL 値をその下の値で埋めたテーブルを返します。",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "指定されたテキストを含むテーブル内のすべての行を返します。",
        "Documentation.LongDescription": "テキスト <code>text</code> を含むテーブル <code>table</code> 内の行を返します。テキストが見つからなかった場合は、空のテーブルを返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル内で \"Bob\" を含む行を探します。",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "先頭から指定された数の行を返します。",
        "Documentation.LongDescription": "<code>countOrCondition</code> の値に応じて、テーブル <code>table</code> の先頭から行を返します:\r\n    <ul>\r\n    <li> <code>countOrCondition</code> が数値の場合は、(先頭から) その数の行を返します。</li>\r\n    <li> <code>countOrCondition</code> が条件の場合は、その条件を満たさない行の手前までの条件を満たす行を返します。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの先頭の 2 行を探します。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "テーブル内の [a] > 0 である先頭行を探します。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "パーティション分割されたテーブルのセットを結合したテーブルを返します。",
        "Documentation.LongDescription": "パーティション分割されたテーブル <code>partitions</code> のセットを連結させた結果のテーブルを返します。<code>partitionColumn</code> は追加する列の名前です。既定の列の型は <code>any</code> ですが、<code>partitionColumnType</code> によって指定できます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{number}</code> からアイテム型を検索します。",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "末尾から指定された数の行を返します。",
        "Documentation.LongDescription": "<code>countOrCondition</code> の値に応じて、テーブル <code>table</code> の末尾から行を返します:\r\n    <ul>\r\n    <li> <code>countOrCondition</code> が数値の場合は、末尾 - <code>countOrCondition</code> の位置からその数の行を返します。</li>\r\n    <li> <code>countOrCondition</code> が条件の場合は、昇順位置でその条件を満たさない行の手前までの条件を満たす行を返します。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの末尾の 2 行を探します。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "テーブル内の [a] > 0 である最終行を探します。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "すべての列にプレフィックスとして指定のテキストが付いているテーブルを返します。",
        "Documentation.LongDescription": "指定された <code>table</code> からのすべての列名にプレフィックスとして指定のテキスト (<code>prefix</code>) とピリオドが <code>prefix</code><code>.ColumnName</code> という形式で付いているテーブルを返します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列に \"MyTable\" というプレフィックスを付けます。",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "指定されたオフセットで始まる行を返します。",
        "Documentation.LongDescription": "指定された <code>offset</code> で始まる <code>table</code> の行を返します。省略可能なパラメーターの <code>count</code> は、取得する行の数を指定します。既定では、オフセットの後のすべての行が返されます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルのオフセット 1 で始まるすべての行を返します。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "テーブルのオフセット 1 で始まる 1 行を返します。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "指定された列を削除します。",
        "Documentation.LongDescription": "指定された <code>table</code> から、指定された <code>columns</code> を削除します。\r\n    指定された列が存在しない場合は、省略可能なパラメーターの <code>missingField</code> で代替動作 (<code>MissingField.UseNull</code>、<code>MissingField.Ignore</code> など) が指定されていない限り、エラーが発生します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "列 [Phone] をテーブルから削除します。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "存在しない列をテーブルから削除しようとしてみてください。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "テーブルに出現する指定された行をすべて削除します。",
        "Documentation.LongDescription": "<code>table</code> に出現する指定された <code>rows</code> をすべて削除します。\r\n    省略可能なパラメーター <code>equationCriteria</code> を指定すると、テーブルの行と行の比較を制御できます。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> から [a = 1] の行をすべて削除します。",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "指定された数の行を削除します。",
        "Documentation.LongDescription": "指定された <code>offset</code> を開始位置として、<code>table</code> の先頭から <code>count</code> 行を削除します。<code>count</code> パラメーターが指定されていない場合は、既定の数である 1 が使用されます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "先頭行をテーブルから削除します。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "位置 1 の行をテーブルから削除します。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "位置 1 からの 2 行をテーブルから削除します。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "{old, new} という形式の名前の変更を適用します。",
        "Documentation.LongDescription": "指定された名前の変更をテーブル <code>table</code> の列に実行します。置換操作 <code>renames</code> は、古い列名と新しい列名という 2 つの値のリストで構成されます。これはリストで指定されます。\r\n    列が存在しない場合は、省略可能なパラメーターの <code>missingField</code> で代わりの値 (<code>MissingField.UseNull</code>、<code>MissingField.Ignore</code> など) が指定されていない限り、例外がスローされます。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列名 \"CustomerNum\" を \"CustomerID\" に置き換えます。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "テーブルの列名 \"CustomerNum\" を \"CustomerID\" に、列名 \"PhoneNum\" を \"Phone\" に置き換えます。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "テーブルの列名 \"NewCol\" を \"NewColumn\" に置き換えます。列が存在しない場合は無視します。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "指定された順序で列を含むテーブルを返します。",
        "Documentation.LongDescription": "<code>columnOrder</code> で指定された順序で列を含むテーブルを、入力 <code>table</code> から返します。リストに指定されていない列の順序は変更されません。\r\n     列が存在しない場合は、省略可能なパラメーター <code>missingField</code> で代わりの値 (<code>MissingField.UseNull</code>、<code>MissingField.Ignore</code> など) が指定されていない限り、例外がスローされます。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列 [Phone] および [Name] の順序を入れ替えます。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "テーブルの列 [Phone] および [Address] の順序を入れ替えるか、\"MissingField.Ignore\" を使用します。列 [Address] が存在しない場合は、テーブルは変更されません。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "テーブルの行を指定回数だけ繰り返します。",
        "Documentation.LongDescription": "<code>count</code> 回繰り返された行を含むテーブルを、入力 <code>table</code> から返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの行を 2 回繰り返します。",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "指定された列のエラー値を関連する指定値に置換します。",
        "Documentation.LongDescription": "指定された列 <code>table</code> のエラー値をリスト <code>errorReplacement</code> の新しい値に置換します。リストのフォーマットは {{column1, value1}, …} です。置換する値は 1 列につき 1 つのみです。列を 2 回以上指定するとエラーになります。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルで、エラー値をテキスト \"world\" に置換します。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "テーブルで、列 A のエラー値をテキスト \"hello\" に、列 B のエラー値をテキスト \"world\" に置換します。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "指定されたテーブルのキーを置き換えます。",
        "Documentation.LongDescription": "指定されたテーブルのキーを置き換えます。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルの既存のキーを置き換えます。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "指定されたすべての行を指定された行に置き換えます。",
        "Documentation.LongDescription": "<code>table</code> の指定されたすべての行を指定された行に置き換えます。置き換え前の行と置き換え後の行は、{old, new} という形式を使用して <code>replacements</code> で指定されます。\r\n    省略可能な <code>equationCriteria</code> パラメーターを指定すると、テーブルの行と行の比較を制御できます。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブルの行 [a = 1, b = 2] と [a = 2, b = 3] を、[a = -1, b = -2] と [a = -2, b = -3] に置き換えます。",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "指定された列のみを含むテーブルを返します。",
        "Documentation.LongDescription": "指定された <code>columns</code> のみを含む <code>table</code> を返します。\r\n    <ul>\r\n       <li><code>table</code>: 指定のテーブル。</li>\r\n       <li><code>columns</code>: 返されるテーブル <code>table</code> の列の一覧。返されるテーブル内の列は、<code>columns</code> に一覧表示されている順序になります。</li>\r\n       <li><code>missingField</code>: <i>(Optional)</i> 列が存在しない場合の処理。例: <code>MissingField.UseNull</code> または <code>MissingField.Ignore</code>。\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "列 [Name] のみを含めます。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "列 [CustomerID] と [Name] を含めます。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "付加列が存在しない場合、既定の結果はエラーです。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "付加列が存在しない場合、オプション <code>MissingField.UseNull</code> によって、NULL 値の列が作成されます。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "条件関数を満たす行を選択します。",
        "Documentation.LongDescription": "選択 <code>condition</code> と一致する行のテーブルを <code>table</code> から返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "[CustomerID] 列の値が 2 より大きい行をテーブルで選択します。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "名前に \"B\" が含まれない行をテーブルで選択します。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "1 つ以上の列名と比較条件を使用してテーブルを並べ替えます。",
        "Documentation.LongDescription": "1 つ以上の列名と省略可能な <code>comparisonCriteria</code> の一覧 (形式は { { col1, comparisonCriteria }, {col2} }) を使用して <code>table</code> を並べ替えます。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "テーブルを列 \"OrderID\" で並べ替えます。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "テーブルを列 \"OrderID で降順に並べ替えます。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "テーブルを列 \"CustomerID\" で並べ替え、次に列 \"OrderID\" で並べ替えます。列 \"CustomerID\" は、昇順で並べ替えます。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "指定された関数を使用して列の名前を変換します。",
        "Documentation.LongDescription": "与えられた <code>nameGenerator</code> 関数を使用して列の名前を変換します。有効なオプション:\r\n    <div>\r\n      <code>MaxLength</code> は新規の列名の最大長を指定します。与えられた関数の結果が、これより長い列名になる場合、その長い名前はトリミングされます。\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> は、新しい列名を生成するとき、比較を制御します。比較関数を使用すると、大文字小文字を区別しない比較、およびカルチャとロケールに対応した比較を行えます。\r\n    </div>\r\n    <div>\r\n      命令文で以下の標準で用意された比較関数を使用できます。\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n      <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "列の名前から <code>#(tab)</code> 文字を削除する",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "列名を変換して、長さ 6 文字の大文字小文字を区別しない名前を生成します。",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "特定のカルチャを使用して、{ column, type } という形式の型変換を適用します。",
        "Documentation.LongDescription": "省略可能なパラメーター <code>culture</code> で指定されたカルチャ (例: \"en-US\") を使用して、パラメーター <code>typeTransformations</code> で指定された列に変換操作を適用する (形式は { column name, type name}) ことで、入力 <code>table</code> からテーブルを返します。\r\n    列が存在しない場合、例外がスローされます。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> から列 [a] の数値をテキスト値に変換します。",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "1 つ以上の列の値を変換します。",
        "Documentation.LongDescription": "<code>transformOperations</code> に一覧表示されている各列操作を適用して <code>table</code> を変換します (形式は { column name, transformation } または { column name, transformation, new column type })。\r\n    <code>defaultTransformation</code> を指定すると、<code>transformOperations</code> に一覧表示されていないすべての列に適用されます。\r\n    <code>transformOperations</code> に一覧表示されている列が存在しない場合は、省略可能なパラメーター <code>missingField</code> が代替を指定しない限り、例外がスローされます (例: <code>MissingField.UseNull</code> または <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "列 [A] のテキスト値を数値に変換し、列 [B] の数値をテキスト値に変換します。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "存在しない列 [X] の数値をテキスト値に変換します。存在しない列は無視されます。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "存在しない列 [X] の数値をテキスト値に変換します。存在しない列には既定で NULL が設定されます。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "列 [B] 内の数値を増分してテキスト値に変換し、他のすべての列を数値に変換します。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "ユーザー定義のハンドラーを使用して、クエリ処理およびアクション処理用にテーブルを作成または拡張します。",
        "Documentation.LongDescription": "<p>操作がビューに適用される際に、<code>table</code> で指定された関数が既定動作の代わりに使用される <code>handlers</code> のビューを返します。</p>\r\n<p><code>table</code> が指定されると、ハンドラー関数は省略可能です。<code>table</code> が指定されないと、<code>GetType</code> と <code>GetRows</code> ハンドラー関数が必要です。ハンドラー関数が操作に指定されない場合、操作の既定の動作は代わりに <code>table</code> に適用されます (<code>GetExpression</code> の場合を除く)。</p>\r\n<p>ハンドラー関数は、<code>table</code> に対する操作を適用した結果 (または <code>GetExpression</code> の場合は結果ビュー) と意味的に同等の値を返す必要があります。</p>\r\n<p>ハンドラー関数でエラーが発生する場合は、操作の既定動作がビューに適用されます。</p>\r\n<p><code>Table.View</code> は、データ ソースへの圧縮の実装、M クエリからソース固有のクエリへの変換 (M クエリから T-SQL ステートメントを作成する場合など) に使用できます。</p>\r\n<p><code>Table.View</code> の詳細な説明に関しては、公開されている Power Query カスタム コネクタのドキュメントを参照してください。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "型または行数を決定するために、行にアクセスする必要のない基本的なビューを作成します。",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "組織とプロジェクトの名前を入力します。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Boards のみ)",
        "Documentation.LongDescription": "Azure DevOps が提供する Analytics ビューのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "データを Vertica からインポートします",
        "Documentation.LongDescription": "<code>database</code> パラメーターで指定されたデータベースの、<code>server</code> パラメーターで指定されたサーバー上で使用できるスキーマのテーブルを返します。\r\n省略可能なレコード パラメーター、<code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: サーバーへの接続の試行を破棄するまで待機する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n    <li><code>CommandTimeout </code>: サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Vertica 内のテーブルを一覧表示します"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Webtrends からレポート コンテンツを含むテーブルを返します。",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "指定された Webtrends レポート エンドポイントへの呼び出しを実行して、すべてのデータをテーブルとして返します。",
        "Documentation.Examples": [
          {
            "Description": "過去 30 日間のデータを得るために Webtrends 訪問者のレポート エンドポイントへの呼び出しを実行する",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "訪問者データのテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "指定されたドメイン (指定されなかった場合は現在のコンピューターのドメイン) と同じフォレスト内の Active Directory ドメインの一覧を返します。",
        "Documentation.LongDescription": "指定されたドメイン (指定されなかった場合は現在のコンピューターのドメイン) と同じフォレスト内の Active Directory ドメインの一覧を返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "ADO.NET データ ソースでネイティブ クエリを実行した結果を戻します。",
        "Documentation.LongDescription": "ADO.NET プロバイダー <code>providerName</code> を使用して、接続文字列 <code>connectionString</code> で <code>query</code> を実行した結果を返します。<code>connectionString</code> にはテキスト、またはプロパティ値のペアのレコードを使用できます。プロパティ値は、テキストまたは数値のどちらかにできます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>CommandTimeout</code> : サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値は 10 分です。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows 認証のために SQL Server 互換の接続文字列オプションを生成するかどうかを決める論理値 (True/False)。既定値は True です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Adobe Analytics でレポートのスイートを返します。",
        "Documentation.LongDescription": "Adobe Analytics から多次元パッケージのテーブルを返します。省略可能なレコード パラメーター <code>options</code> を指定すると、次のオプションを制御できます。\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : テーブルをそのスキーマ名でグループ化して表示するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>MaxRetryCount</code> : クエリの結果をポーリングするときに実行する再試行の回数。既定値は 120 です。</li>\r\n<li><code>RetryInterval</code> : 1 つの再試行から次の再試行までの時間。既定値は 1 秒です。</li>\r\n<li><code>Implementation</code> : Adobe Analytics API のバージョンを指定します。有効な値は &quot;2.0&quot; です。既定では API バージョン 1.4 が使用されます。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Hive LLAP からデータをインポートします",
        "Documentation.LongDescription": "\r\nHive LLAP <code>server</code> 上の <code>database</code> で指定した Hive LLAP から、選択した <code>protocol</code> を使用してテーブルの一覧を返します。サーバーと一緒に、コロンで区切ってポート番号を指定することもできます (省略可能)。Thrift トランスポート プロトコルは、値 \"Standard\"、\"HTTP\" を使用した列挙型です。省略可能な <code>options</code> パラメーターを指定して、次のオプションを制御できます。\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: サーバーに対する接続の試行を破棄するまでに待機する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n        <li><code>CommandTimeout</code>: サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。既定値はドライバーによって異なります。</li>\r\n</ul>\r\n<code>options</code> パラメーターは、[option1 = value1, option2 = value2...] という形式で指定します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "今日を 2017-6-15 と仮定し、2017-5-1 から 2017-6-15 までの集計データを取得します",
            "Code": "結果で\r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ numberOfMonth = 1 ]、\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      と\r\n          します",
            "Result": "関数は、2017-5-1 から 2017-6-15 までの集計データを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、2017 年 4 月の集計データを取得します。",
            "Code": "結果で\r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ]、\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      と\r\n          します",
            "Result": "関数は、2017-4-1 から 2017-4-30 までのデータを返します"
          },
          {
            "Description": "今日を 2017-6-15 と仮定し、2017 年 4 月から現時点までの集計データを取得します。",
            "Code": "結果で\r\n          enrollmentNumber = \"100\"、\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ]、\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      と\r\n          します",
            "Result": "関数は、2017-4-1 から 2017-6-15 までのデータを返します"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "組織とプロジェクトの名前を入力します。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps が提供する OData フィードのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "ご使用の Dataverse インスタンスに接続します (Dynamics 365 および PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "指定したディメンション テーブルをキューブのフィルター コンテキストにマージし、指定したディメンション属性のセットを展開してフィルター コンテキストの次元の粒度を変更します。",
        "Documentation.LongDescription": "指定したディメンション テーブル <code>dimensionSelector</code> をキューブ <code>cube</code> のフィルター コンテキストにマージし、指定したディメンション属性のセット <code>attributeNames</code> を展開して次元の粒度を変更します。ディメンション属性は、表形式の <code>newColumnNames</code> (指定しない場合は <code>attributeNames</code>) という名前の列に追加されます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "各行の行コンテキストに適用されるメジャーの結果を返す列をキューブに追加します。",
        "Documentation.LongDescription": "各行の行コンテキストに適用されるメジャー <code>measureSelector</code> の結果を返す <code>column</code> という名前の列を <code>cube</code> に追加します。次元の粒度やスライスの変更はメジャーの適用に影響します。特定のキューブ操作を実行すると、メジャーの値が調整されます。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central の環境と会社を入力します。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "関連する Dynamics 365 Business Central データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central の環境と会社を入力します。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "関連する Dynamics 365 Business Central データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central の環境と会社を入力します。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "関連する Dynamics 365 Business Central データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central の環境と会社を入力します。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "関連する Dynamics 365 Business Central データの入ったテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "現在の Excel ブックの内容を返します。",
        "Documentation.LongDescription": "現在の Excel ブックの内容を返します。テーブル、名前付き範囲、動的配列を返します。<code>Excel.Workbook</code> と異なり、シートは返しません。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Microsoft Exchange アカウントからコンテンツのテーブルを返します。",
        "Documentation.LongDescription": "Microsoft Exchange アカウント <code>mailboxAddress</code> からコンテンツのテーブルを返します。<code>mailboxAddress</code> が指定されない場合、資格情報の既定のアカウントが使用されます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "ウェアハウス",
        "Documentation.Caption": "ウェアハウス",
        "Documentation.Description": "ウェアハウスからデータをインポートします",
        "Documentation.LongDescription": "ウェアハウスからデータをインポートします"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Google Analytics アカウントを返します。",
        "Documentation.LongDescription": "現在の資格情報からアクセス可能な Google Analytics アカウントを返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Google BigQuery データベースからデータをインポートします。",
        "Documentation.LongDescription": "\r\n      Google BigQuery 内の利用可能なプロジェクトを一覧表示するテーブルを返します。オプションのレコード パラメーターである <code>options</code> を指定して、次のオプションを制御できます。\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: サーバーへの接続の試行を中止するまでの待機時間を制御する期間です。既定値は、ODBC 接続のタイムアウト値です。</li>\r\n        <li><code>CommandTimeout</code>: キャンセルされるまでに許可されるサーバー側クエリの実行時間を制御する期間です。</li>\r\n        <li><code>BillingProject</code>: 課金プロジェクト名 ID です。既定値は、最初の利用可能なプロジェクトです。</li>\r\n        <li><code>UseStorageApi</code>: 大規模な結果セットに対して BigQuery Storage API を使用するかどうかを指定します。既定値は true で、Storage API を使用します。Storage API を使用しない場合は、false に設定します</li>\r\n      </ul>\r\n    レコード パラメーターは、[option1 = value1, option2 = value2...] のように指定します。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Google BigQuery で使用可能なプロジェクトを一覧表示します",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "レイクハウス",
        "Documentation.Caption": "レイクハウスからデータをインポートします",
        "Documentation.Description": "レイクハウスからデータをインポートします",
        "Documentation.LongDescription": "アクセスできるすべてのレイクハウスに接続して、使用するエンティティを選択します"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "MailChimp のキー データを含むテーブルを返します。",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "MailChimp のキー データを含むテーブルを返します。",
        "Documentation.Examples": [
          {
            "Description": "MailChimp のキー データを含むテーブルを返します。",
            "Code": "MailChimp.Tables()",
            "Result": "MailChimp のキー データを含むテーブル。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "潜在顧客のアクティビティを含めたテーブルを返します。",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/activities.json の Marketo REST API エンドポイントに対する呼び出しを行います。<code>activityIds</code> に含まれるアクティビティのうち、<code>startTime</code>以降に発生したすべてのアクティビティは返されます。",
        "Documentation.Examples": [
          {
            "Description": "2015 年 11 月 1 日以降の \"ウェブページ訪問\" アクティビティのテーブルを取得します",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "2015 年 11 月 1 日以降のすべての \"ウェブページ訪問\" アクティビティの詳細を示したテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI データフロー (レガシ)",
        "Documentation.Caption": "Power BI データフローからデータをインポートします",
        "Documentation.LongDescription": "アクセス権があるすべての Power BI データフローに接続して、使用するエンティティを選択してください。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "データマート",
        "Documentation.Caption": "データマート",
        "Documentation.Description": "データマートからデータをインポートします",
        "Documentation.LongDescription": "データマートからデータをインポートします"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "データフロー",
        "Documentation.Caption": "データフローからデータをインポートします",
        "Documentation.Description": "データフローからデータをインポートします",
        "Documentation.LongDescription": "アクセスできるすべてのデータフローに接続して、使用するエンティティを選択します"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "QuickBooks Online からデータをインポートします。",
        "Documentation.LongDescription": "\r\n        QuickBooks Online で使用可能なテーブルをリストしたテーブルを返します。省略可能なオプション レコード パラメーター <code>options</code> を指定して、以下のオプションを制御できます。\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: サーバーへの接続の試行を破棄するまで待機する長さを制御する期間。</li>\r\n        <li><code>CommandTimeout</code>: サーバー側クエリがキャンセルされるまでに実行を許可する長さを制御する期間。</li>\r\n</ul>\r\n        レコード パラメーターは、[option1 = value1, option2 = value2...] という形式で指定します。\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Salesforce アカウントからオブジェクトを返します。",
        "Documentation.LongDescription": "資格情報で指定された Salesforce アカウントのオブジェクトを返します。アカウントは指定された環境 <code>loginUrl</code> を通じて接続されます。環境が指定されていない場合、アカウントは運用環境 (https://login.salesforce.com) に接続されます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには、次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 戻り値についてナビゲーション プロパティを生成するかどうかを設定する論理値 (true/false、既定値は false)。</li>\r\n<li><code>ApiVersion</code> : このクエリに使用される Salesforce API のバージョン。指定しない場合は API バージョン 29.0 が使用されます。</li>\r\n<li><code>Timeout</code> : サーバーへの要求が破棄されるまで待機する時間を制御する期間。既定値はソース固有です。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Salesforce アカウントからレポートを返します。",
        "Documentation.LongDescription": "資格情報で指定された Salesforce アカウントのレポートを返します。アカウントは指定された環境 <code>loginUrl</code> を通じて接続されます。環境が指定されていない場合、アカウントは運用環境 (https://login.salesforce.com) に接続されます。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには、次のフィールドを含めることができます。\r\n    <ul>\r\n<li><code>ApiVersion</code> : このクエリに使用される Salesforce API のバージョン。指定しない場合は API バージョン 29.0 が使用されます。</li>\r\n<li><code>Timeout</code> : サーバーへの要求が破棄されるまで待機する時間を制御する期間。既定値はソース固有です。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "SAP Business Warehouse システム内の InfoCubes とクエリを InfoArea ごとにグループ化して返します。",
        "Documentation.LongDescription": "サーバー <code>server</code> 上のシステム番号 <code>systemNumberOrSystemId</code>、クライアント ID <code>clientId</code> の SAP Business Warehouse インスタンスから、InfoArea ごとにグループ化した InfoCubes とクエリのテーブルを返します。省略可能なレコード パラメーター <code>optionsOrLogonGroup</code> を指定すると、以下のオプションを制御できます。\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Smartsheet API からシート、レポート、フォルダー、ワークスペースのテーブルを返します",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Smartsheet API から利用可能なシート、レポート、フォルダー、およびワークスペースの入れ子になったテーブルを返します。",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet 階層の最上位レベルで利用可能なシート、フォルダー、レポート、ワークスペースを返します",
            "Code": "Smartsheet.Tables()",
            "Result": "Smartsheet 階層の最上位レベルからのフォルダー、レポート、ワークスペースのテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "SparkPost API v1 から利用可能な指標のテーブルを返します",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "この関数は、SparkPost API v1 の特定の \"Metrics\" エンドポイントからデータを取得するときに使用できます。このコネクタを使用してこれらのテーブルを更新するか、SparkPost API に呼び出しを行う場合、SparkPost API には厳密な API レートの制限があることに留意してください。SparkPost サーバーから 429 状態コードが返される場合、このレート制限に達し、さらに呼び出しを行うには数分待つ必要が生じます。日数パラメーターの値を選択する際、API で格納できるのは 6 か月分のデータのみであることに注意してください。",
        "Documentation.Examples": [
          {
            "Description": "過去 3 日間に集計されたすべての campaign_ids に関して count_sent と count_rejected 配信メトリックを取得します。 ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "テーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Stripe API に対して呼び出しを行います。",
        "Documentation.LongDescription": "https://api.stripe.com/v1/<code>method</code> の Stripe API に対して呼び出しを行います。追加のパラメーターとして渡されるオプションのレコード <code>additionalParameters</code> と、予測される列名のリスト <code>ColumnNames</code> を指定します。Stripe バージョン 2015-10-16 が使用されます。",
        "Documentation.Examples": [
          {
            "Description": "2015 年 11 月 1 日より後に作成されたイベントを含めたテーブルを返します",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "現在の Stripe アカウントについて、指定されたイベントを含めたテーブル"
          },
          {
            "Description": "すべての SKU を含めたテーブルを返します",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "現在の Stripe アカウントのためのすべての SKU を含めたテーブル"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "利用可能な Stripe テーブルと関数を一覧したテーブルを返します。",
        "Documentation.LongDescription": "利用可能な Stripe テーブルと関数を一覧したテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics ワークスペース",
        "Documentation.Caption": "Azure Synapse Analytics ワークスペース",
        "Documentation.LongDescription": "Azure Synapse Analytics ワークスペース用の PQ コネクタ",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "指定された名前の列を追加します。入力として受け取った行ごとに、指定された選択関数を使用して値を計算します。",
        "Documentation.LongDescription": "テーブル <code>table</code> に <code>newColumnName</code> という名前の列を追加します。入力として受け取った行ごとに、指定された選択関数 <code>columnGenerator</code> を使用して列の値を計算します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "値が [Price] 列と [Shipping] 列の合計である \"TotalPrice\" という名前の数値列をテーブルに追加します。",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "テーブル内の指定された列の値のあいまいグループ化によって得られた代表値が入った新しい列を追加します。",
        "Documentation.LongDescription": "<code>columnName</code> の代表値を持つ <code>table</code> に新しい列 <code>newColumnName</code> を追加します。代表値は、各行に対して <code>columnName</code> の値のあいまい一致を実行することによって取得されます。\r\n    <p><code>options</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。オプションには次が含まれます。\r\n    <ul>\r\n<li><code>Culture</code> : カルチャ固有のルールに基づくレコードのグループ化を許可します。任意の有効なカルチャ名を指定できます。たとえば、&quot;ja-JP&quot; のカルチャ オプションは、日本語カルチャに基づいてレコードをグループ化します。既定値は &quot;&quot; で、英語のインバリアント カルチャに基づいてグループ化します。</li>\r\n<li><code>IgnoreCase</code> : 大文字と小文字を区別しないキーのグループ化を許可する論理値 (true/false) です。true の場合、たとえば &quot;Grapes&quot; は &quot;grapes&quot; と共にグループ化されます。既定値は true です。</li>\r\n<li><code>IgnoreSpace</code> : グループを検索するために、テキストの一部の結合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Gra pes&quot; は &quot;Grapes&quot; と共にグループ化されます。既定値は true です。</li>\r\n<li><code>SimilarityColumnName</code> : 入力値とその入力の代表的な値の間の類似性を示す列の名前です。既定値は null で、類似性の新しい列は追加されません。</li>\r\n<li><code>Threshold</code> : 2 つの値がグループ化される類似度スコアを指定する、0.00 - 1.00 の数値です。\r\n    たとえば、このオプションが 0.90 未満に設定されている場合、&quot;Grapes&quot; と &quot;Graes&quot; (&quot;p&quot; がない) は共にグループ化されます。\r\n    しきい値 1.00 は、完全一致の場合のみ許可されます。\r\n    (あいまいな「完全一致」は、大文字/小文字の指定、文字の順序、句読点などの違いを無視する場合があることに注意してください。)\r\n    既定値は 0.80 です。</li>\r\n<li><code>TransformationTable</code> : カスタム値のマッピングに基づくレコードのグループ化を許可するテーブルです。&quot;From&quot; 列と &quot;To&quot; 列が含まれている必要があります。たとえば、&quot;From&quot; 列に &quot;Grapes&quot;、&quot;To&quot; 列に &quot;Raisins&quot; が含まれる変換テーブルが指定されている場合、&quot;Grapes&quot; は &quot;Raisins&quot; と共にグループ化されます。変換は、変換テーブルに含まれるテキストの出現すべてに対して適用されることにご注意ください。上述の変換テーブルの場合、&quot;Grapes are sweet&quot; も &quot;Raisins are sweet&quot; と共にグループ化されます。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "従業員の場所の代表値を検索します。",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "指定された列でテーブルを結合し、結合結果を新しい列に生成します。",
        "Documentation.LongDescription": "<code>table1</code> の行と <code>table2</code> の行を、(<code>table1</code> の) <code>key1</code> と (<code>table2</code> の) <code>key2</code> で選択されたキー列の値の等値に基づいて結合します。結果は <code>newColumnName</code> という名前の列に入力されます。\r\nこの関数は JoinKind に LeftOuter を指定した Table.Join と同じように動作します。ただし、結合結果は、フラット化された形式ではなく、入れ子になります。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[saleID] で結合したテーブル ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) から ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) に \"price/stock\" という名前の結合列を追加します。",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "指定されたテーブル型にキーを追加します。",
        "Documentation.LongDescription": "<code>table</code> にキーを追加します。なお、<code>columns</code> は、キーを定義する列名のリストで、<code>isPrimary</code> はキーが主キーかどうかを指定します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "単一列の主キーをテーブルに追加します。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "1 つ以上の他の列のランキングが入った列を追加します。",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> によって説明されている 1 つ以上の他の列のランキングが入った <code>newColumnName</code> という名前の列を、<code>table</code> に追加します。\r\n上級ユーザーは <code>options</code> の RankKind オプションを使用することで、より具体的なランキング方法を選択することができます。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "\"Revenue\" 列に対して最高から最低までのランク付けをする \"RevenueRank\" という名前の列を、テーブルに追加します。",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "テーブル列を親テーブルの複数の列に集計します。",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] 内のテーブルをテーブルの集計値を含む複数の列に集計します。<code>aggregations</code> を使用して、集計するテーブルを含む列、値を生成するためにテーブルに適用する集計関数、および作成する集計列の名前を指定します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> 内の <code>[t]</code> のテーブル列を集計して、<code>[t.a]</code> の合計、<code>[t.b]</code> の最小値と最大値、および <code>[t.a]</code> の値のカウントを計算します。",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "初期オフセットを保持し、それ以降の行を交互に保持またはスキップします。",
        "Documentation.LongDescription": "初期オフセットを保持し、それ以降の行を交互に保持またはスキップします。\r\n    <ul>\r\n       <li><code>table</code>: 入力テーブル。</li>\r\n       <li><code>offset</code>: 繰り返しを開始する前に保持する行数。</li>\r\n       <li><code>skip</code>: 繰り返しごとに削除する行数。</li>\r\n       <li><code>take</code>: 繰り返しごとに保持する行数。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルから、最初の行から開始し 1 行おきにスキップと保持を繰り返したテーブルを返します。",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "指定された結合関数を使用して、指定された列を新しい列に結合します。",
        "Documentation.LongDescription": "指定された結合関数を使用して、指定された列を新しい列に結合します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "姓と名を新しい列に結合し、コンマで区切ります。",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "指定された列を新しいレコード値の列に結合します。各レコードは、結合された列の名前と列の値に対応するフィールド名と値になります。",
        "Documentation.LongDescription": "指定された <code>table</code> の列を <code>newColumnName</code> という名前の新しいレコード値の列に結合します。各レコードには、結合された列の列名と値に対応するフィールド名と値があります。<code>options</code> にレコードが指定されると、次のオプションを指定できます:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: テキストとして指定された場合、指定された列名がレコードの表示名として扱われることを示します。これは、レコード自体に含まれる列の 1 つである必要はありません。</li>\r\n     <li> <code>TypeName</code>: テキストとして指定された場合、結果として得られるレコードの論理型名となります。これは、データの読み込み中に、読み込み環境による動作を促進するために使用できます。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "指定された名前の列が重複しています。値と型が基になる列からコピーされます。",
        "Documentation.LongDescription": "テーブル <code>table</code> に対して <code>columnName</code> という名前の列が重複しています。列 <code>newColumnName</code> の値と型が列 <code>columnName</code> からコピーされます。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 内の \"copied column\" という名前の列に対して列 \"a\" が重複しています。",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "レコード列を値ごとに列に展開します。",
        "Documentation.LongDescription": "入力 <code>table</code> 内にレコードの <code>column</code> がある場合に、レコード内の各フィールドを列にしたテーブルを作成します。必要に応じて、<code>newColumnNames</code> を指定して、新しいテーブルの列名を一意にすることができます。\r\n    <ul>\r\n        <li><code>table</code>: 展開するレコード列を含む元のテーブル。</li>\r\n        <li><code>column</code>: 展開する列。</li>\r\n        <li><code>fieldNames</code>: テーブルの列に展開するフィールドのリスト。</li>\r\n        <li><code>newColumnNames</code>: 新しい列に付ける列名のリスト。新しいテーブルの列に重複する新しい列名を付けることはできません。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> の列 [a] を \"aa\"、\"bb\"、\"cc\" の 3 つの列に展開します。",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "レコード列またはテーブル列を親テーブルの複数の列に展開します。",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] 内のテーブルを複数の行と列に展開します。<code>columnNames</code> を使用して、入れ子のテーブルから展開する列を選択します。既存の列と新しい列が競合しないように、<code>newColumnNames</code> を指定してください。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> の <code>[a]</code> のテーブル列を <code>[t.a]</code>、<code>[t.b]</code>、<code>[t.c]</code> の 3 つの列に展開します。",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "キーのあいまい一致に基づいて、テーブルの行をグループ化します。",
        "Documentation.LongDescription": "各行に対して、指定された列 <code>key</code> の値のあいまい一致を実行することにより、<code>table</code> の行をグループ化します。\r\n    グループごとに、キー列 (およびその値) と、<code>aggregatedColumns</code> によって指定された集計列を含むレコードが構築されます。\r\n    この関数は、決まった順序の行を返すことを保証しません。\r\n    <p><code>options</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。オプションには次が含まれます。\r\n    <ul>\r\n<li><code>Culture</code> : カルチャ固有のルールに基づくレコードのグループ化を許可します。任意の有効なカルチャ名を指定できます。たとえば、&quot;ja-JP&quot; のカルチャ オプションは、日本語カルチャに基づいてレコードをグループ化します。既定値は &quot;&quot; で、英語のインバリアント カルチャに基づいてグループ化します。</li>\r\n<li><code>IgnoreCase</code> : 大文字と小文字を区別しないキーのグループ化を許可する論理値 (true/false) です。true の場合、たとえば &quot;Grapes&quot; は &quot;grapes&quot; と共にグループ化されます。既定値は true です。</li>\r\n<li><code>IgnoreSpace</code> : グループを検索するために、テキストの一部の結合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Gra pes&quot; は &quot;Grapes&quot; と共にグループ化されます。既定値は true です。</li>\r\n<li><code>SimilarityColumnName</code> : 入力値とその入力の代表的な値の間の類似性を示す列の名前です。既定値は null で、類似性の新しい列は追加されません。</li>\r\n<li><code>Threshold</code> : 2 つの値がグループ化される類似度スコアを指定する、0.00 - 1.00 の数値です。\r\n    たとえば、このオプションが 0.90 未満に設定されている場合、&quot;Grapes&quot; と &quot;Graes&quot; (&quot;p&quot; がない) は共にグループ化されます。\r\n    しきい値 1.00 は、完全一致の場合のみ許可されます。\r\n    (あいまいな「完全一致」は、大文字/小文字の指定、文字の順序、句読点などの違いを無視する場合があることに注意してください。)\r\n    既定値は 0.80 です。</li>\r\n<li><code>TransformationTable</code> : カスタム値のマッピングに基づくレコードのグループ化を許可するテーブルです。&quot;From&quot; 列と &quot;To&quot; 列が含まれている必要があります。たとえば、&quot;From&quot; 列に &quot;Grapes&quot;、&quot;To&quot; 列に &quot;Raisins&quot; が含まれる変換テーブルが指定されている場合、&quot;Grapes&quot; は &quot;Raisins&quot; と共にグループ化されます。変換は、変換テーブルに含まれるテキストの出現すべてに対して適用されることにご注意ください。上述の変換テーブルの場合、&quot;Grapes are sweet&quot; も &quot;Raisins are sweet&quot; と共にグループ化されます。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルをグループ化し、それぞれの場所 (\"each Table.RowCount(_))\") の従業員数を含む集計列 [Count] を追加します。",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "指定されたキーに基づいて、2 つのテーブルであいまいに一致する行を結合します。",
        "Documentation.LongDescription": "<p><code>table1</code> の行と <code>table2</code> の行を、(<code>table1</code> の) <code>key1</code> と (<code>table2</code> の) <code>key2</code> で選択されたキー列の値のあいまい一致に基づいて結合します。</p>\r\n<p>あいまい一致は、テキストの同一性ではなくテキストの類似性に基づく比較です。</p>\r\n<p>既定では内部結合が実行されますが、省略可能な <code>joinKind</code> を含めると、結合の種類を指定できます。オプションには次が含まれます。\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p><code>joinOptions</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。オプションには次が含まれます。\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : あいまい一致に使用するパラレル スレッドの数を指定する、1 - 8 の数値です。既定値は 1 です。</li>\r\n<li><code>Culture</code> : カルチャ固有のルールに基づくレコードの照合を許可します。任意の有効なカルチャ名を指定できます。たとえば、&quot;ja-JP&quot; のカルチャ オプションは、日本語カルチャに基づいてレコードを照合します。既定値は &quot;&quot; で、英語のインバリアント カルチャに基づいて照合します。</li>\r\n<li><code>IgnoreCase</code> : 大文字と小文字を区別しないキーの照合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Grapes&quot; は &quot;grapes&quot; と一致します。既定値は true です。</li>\r\n<li><code>IgnoreSpace</code> : 一致を検索するために、テキストの一部の結合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Gra pes&quot; は &quot;Grapes&quot; と一致します。既定値は true です。</li>\r\n<li><code>NumberOfMatches</code> : 各入力行で返すことができる、一致する行の最大数を指定する整数です。たとえば値が 1 の場合、各入力行に対して最大で 1 つの一致する行が返されます。このオプションが指定されていない場合、すべての一致する行が返されます。</li>\r\n<li><code>SimilarityColumnName</code> : 入力値とその入力の代表的な値の間の類似性を示す列の名前です。既定値は null で、類似性の新しい列は追加されません。</li>\r\n<li><code>Threshold</code> : 2 つの値が一致する類似度スコアを指定する、0.00 - 1.00 の数値です。\r\n    たとえば、このオプションが 0.90 未満に設定されている場合、&quot;Grapes&quot; と &quot;Graes&quot; (&quot;p&quot; がない) は一致します。\r\n    しきい値 1.00 は、完全一致の場合のみ許可されます。\r\n    (あいまいな「完全一致」は、大文字/小文字の指定、文字の順序、句読点などの違いを無視する場合があることに注意してください。)\r\n    既定値は 0.80 です。</li>\r\n<li><code>TransformationTable</code> : カスタム値のマッピングに基づくレコードの照合を許可するテーブルです。&quot;From&quot; 列と &quot;To&quot; 列が含まれている必要があります。たとえば、&quot;From&quot; 列に &quot;Grapes&quot;、&quot;To&quot; 列に &quot;Raisins&quot; が含まれる変換テーブルが指定されている場合、&quot;Grapes&quot; は &quot;Raisins&quot; と一致します。変換は、変換テーブルに含まれるテキストの出現すべてに対して適用されることにご注意ください。上述の変換テーブルの場合、&quot;Grapes are sweet&quot; も &quot;Raisins are sweet&quot; と一致します。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] に基づく 2 つのテーブルの左内部あいまい結合",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "指定された列でテーブルのあいまい結合を実行し、結合の結果を新しい列に生成します。",
        "Documentation.LongDescription": "<p><code>table1</code> の行と <code>table2</code> の行を、(<code>table1</code> の) <code>key1</code> と (<code>table2</code> の) <code>key2</code> で選択されたキー列の値のあいまい一致に基づいて結合します。結果は <code>newColumnName</code> という名前の新しい列に返されます。</p>\r\n<p>あいまい一致は、テキストの同一性ではなくテキストの類似性に基づく比較です。</p>\r\n<p>省略可能な <code>joinKind</code> は、実行する結合の種類を指定します。<code>joinKind</code> を指定しなかった場合、既定では、左外部結合が実行されます。オプションは次のとおりです。\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p><code>joinOptions</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。オプションは次のとおりです。\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : あいまい一致に使用するパラレル スレッドの数を指定する、1 - 8 の数値です。既定値は 1 です。</li>\r\n<li><code>Culture</code> : カルチャ固有のルールに基づくレコードの照合を許可します。任意の有効なカルチャ名を指定できます。たとえば、&quot;ja-JP&quot; のカルチャ オプションは、日本語カルチャに基づいてレコードを照合します。既定値は &quot;&quot; で、英語のインバリアント カルチャに基づいて照合します。</li>\r\n<li><code>IgnoreCase</code> : 大文字と小文字を区別しないキーの照合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Grapes&quot; は &quot;grapes&quot; と一致します。既定値は true です。</li>\r\n<li><code>IgnoreSpace</code> : 一致を検索するために、テキストの一部の結合を許可する論理値 (true/false) です。true の場合、たとえば &quot;Gra pes&quot; は &quot;Grapes&quot; と一致します。既定値は true です。</li>\r\n<li><code>NumberOfMatches</code> : 各入力行で返すことができる、一致する行の最大数を指定する整数です。たとえば値が 1 の場合、各入力行に対して最大で 1 つの一致する行が返されます。このオプションが指定されていない場合、すべての一致する行が返されます。</li>\r\n<li><code>SimilarityColumnName</code> : 入力値とその入力の代表的な値の間の類似性を示す列の名前です。既定値は null で、類似性の新しい列は追加されません。</li>\r\n<li><code>Threshold</code> : 2 つの値が一致する類似度スコアを指定する、0.00 - 1.00 の数値です。\r\n    たとえば、このオプションが 0.90 未満に設定されている場合、&quot;Grapes&quot; と &quot;Graes&quot; (&quot;p&quot; がない) は一致します。\r\n    しきい値 1.00 は、完全一致の場合のみ許可されます。\r\n    (あいまいな「完全一致」は、大文字/小文字の指定、文字の順序、句読点などの違いを無視する場合があることに注意してください。)\r\n    既定値は 0.80 です。</li>\r\n<li><code>TransformationTable</code> : カスタム値のマッピングに基づくレコードの照合を許可するテーブルです。&quot;From&quot; 列と &quot;To&quot; 列が含まれている必要があります。たとえば、&quot;From&quot; 列に &quot;Grapes&quot;、&quot;To&quot; 列に &quot;Raisins&quot; が含まれる変換テーブルが指定されている場合、&quot;Grapes&quot; は &quot;Raisins&quot; と一致します。変換は、変換テーブルに含まれるテキストの出現すべてに対して適用されることにご注意ください。上述の変換テーブルの場合、&quot;Grapes are sweet&quot; も &quot;Raisins are sweet&quot; と一致します。</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] に基づく 2 つのテーブルの左内部あいまい結合",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "同じキーを含むテーブル内の行をグループ化します。",
        "Documentation.LongDescription": "<code>key</code> で定義されているキー列によって <code>table</code> の行をグループ化します。<code>key</code> には、単一の列名または列名のリストを指定できます。\r\n    グループごとに、キー列 (およびその値) と、<code>aggregatedColumns</code> によって指定された集計列を含むレコードが作成されます。\r\n    必要に応じて、<code>groupKind</code> と <code>comparer</code> を指定することもできます。 <br>\r\n    <br>\r\n    データが既にキー列で並べ替えられている場合は、GroupKind.Local の <code>groupKind</code> を指定できます。これにより、特定の場合にグループ化のパフォーマンスが向上する可能性があります。\r\n    指定された一連のキー値を持つすべての行は隣接していると見なされます。<br>\r\n    <br>\r\n     <code>comparer</code> を渡すときに、異なるキーが等しいとして処理される場合は、キーがそれ自体とは異なるグループに行が配置されることがあります。<br>\r\n    <br>\r\n    この関数は、返される行の順序を保証していません。\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルをグループ化し、価格の合計 (\"each List.Sum([price])\") を含む集計列 [total] を追加します。",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "テーブルの指定された位置に行のリストを挿入します。",
        "Documentation.LongDescription": "<code>rows</code> の指定された位置 <code>table</code> に行のリスト <code>offset</code> を挿入したテーブルを返します。挿入する行の各列とテーブルの列の型が一致する必要があります。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの位置 1 にこの行を挿入します。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "テーブルの位置 1 に 2 行挿入します。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "指定されたキーに基づいて、2 つのテーブルの一致する行を結合します。",
        "Documentation.LongDescription": "<p><code>table1</code> の行と <code>table2</code> の行を、(<code>table1</code> の) <code>key1</code> と (<code>table2</code> の) <code>key2</code>で選択されたキー列の値の等値に基づいて結合します。</p>\r\n<p>既定では内部結合が実行されますが、省略可能な <code>joinKind</code> を含めると、結合の種類を指定できます。オプションは次のとおりです:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p><code>keyEqualityComparers</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。このパラメーターは現在、内部での使用のみが想定されています。</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "1 つのキー列を使用して 2 つのテーブルを結合します。",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "複数のキー列を使用して、競合する列名を持つ 2 つのテーブルを結合します。",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "指定された条件を使用して、最大の行を返します。",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> に基づいて <code>table</code> の最大の行を返します。\r\n    行が並べ替えられた後、<code>countOrCondition</code> パラメーターを指定して、さらに結果をフィルター処理する必要があります。並べ替えアルゴリズムは、並べ替え後の結果を常に同じにするとは限らないことに注意してください。<code>countOrCondition</code> パラメーターには、複数の形式を指定できます。\r\n    <ul>\r\n        <li> 数を指定した場合、昇順で最大 <code>countOrCondition</code> 個の項目を含むリストが返されます。</li>\r\n        <li> 条件を指定した場合、初期状態でその条件を満たす項目のリストが返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。</li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "テーブルで条件 [a] > 0 を満たし、列 [a] の最大値を含む行を探します。フィルターが適用される前に行が並べ替えられます。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "テーブルで条件 [b] > 0 を満たし、列 [a] の最大値を含む行を探します。フィルターが適用される前に行が並べ替えられます。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "指定された条件を使用して、最小の行を返します。",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> に基づいて <code>table</code> の最小の行を返します。行が並べ替えられた後、<code>countOrCondition</code> パラメーターを指定して、さらに結果をフィルター処理する必要があります。並べ替えアルゴリズムは、並べ替え後の結果を常に同じにするとは限らないことに注意してください。<code>countOrCondition</code> パラメーターには、複数の形式を指定できます。\r\n    <ul>\r\n        <li> 数を指定した場合、昇順で最大 <code>countOrCondition</code> 個の項目を含むリストが返されます。</li>\r\n        <li> 条件を指定した場合、初期状態でその条件を満たす項目のリストが返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。</li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "テーブルで条件 [a] < 3 を満たし、列 [a] の最小値を含む行を探します。フィルターが適用される前に行が並べ替えられます。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "テーブルで条件 [b] < 0 を満たし、列 [a] の最小値を含む行を探します。フィルターが適用される前に行が並べ替えられます。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "指定された列でテーブルを結合し、結合結果を新しい列に生成します。",
        "Documentation.LongDescription": "<p><code>table1</code> の行と <code>table2</code> の行を、(<code>table1</code> の) <code>key1</code> と (<code>table2</code> の) <code>key2</code> で選択されたキー列の値の等値に基づいて結合します。結果は <code>newColumnName</code> という名前の列に入力されます。</p>\r\n<p>省略可能な <code>joinKind</code> では、実行する結合の種類を指定します。<code>joinKind</code> を指定しなかった場合、既定では、左外部結合が実行されます。</p>\r\n<p><code>keyEqualityComparers</code> の省略可能な設定を含めると、キー列の比較方法を指定できます。この機能は現在、内部での使用のみが想定されています。</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "1 つのキー列を使用して 2 つのテーブルを結合します。",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "属性/値のペアを表す列のペアが渡されたときに、属性列のデータを列見出しにローテーションします。",
        "Documentation.LongDescription": "属性/値のペアを表す列のペアが渡されたときに、属性列のデータを列見出しにローテーションします。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> の属性列の値 \"a\"、\"b\"、および \"c\" を受け取り、それぞれの列にピボットします。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "テーブル <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> の属性列の値 \"a\"、\"b\"、および \"c\" を受け取り、それぞれの列にピボットします。キー \"x\" の属性 \"c\" には複数の値が関連付けられるため、List.Max 関数を使用して競合を解決してください。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "指定された範囲の行を指定された行に置き換えます。",
        "Documentation.LongDescription": "入力 <code>table</code> で、<code>offset</code> 行後から、指定された数の行 (<code>count</code> 行) を指定された <code>rows</code> に置き換えます。<code>rows</code> パラメーターは、レコードの一覧です。\r\n    <ul>\r\n       <li><code>table</code>: 置換を実行するテーブル。</li>\r\n       <li><code>offset</code>: 置換を行う前にスキップする行の数。</li>\r\n       <li><code>count</code>: 置き換える行の数。</li>\r\n       <li><code>rows</code>: <code>offset</code> で指定された位置の <code>table</code> に挿入する行レコードの一覧。</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "位置 1 から 3 つの行を置き換えます。",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "指定された列で値を別の値に置き換えます。",
        "Documentation.LongDescription": "<code>table</code> の指定された列で <code>oldValue</code> を <code>newValue</code> に置き換えます。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "列 B のテキスト \"goodbye\" を \"world\" に置き換え、値全体だけを一致させます。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "列 B のテキスト \"ur\" を \"or\" に置き換え、値の任意の部分に一致させます。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "米国の従業員の名前を匿名化します。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "米国の従業員のすべての列を匿名化します。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "指定された分割関数を使用して、指定された列を追加の列のセットに分割します。",
        "Documentation.LongDescription": "指定された分割関数を使用して、指定された列を追加の列のセットに分割します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[Name] 列を \"i\" の位置で 2 つの列に分割します",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "テーブル内の一連の列を属性/値のペアに変換します。",
        "Documentation.LongDescription": "テーブルの一連の列を属性/値のペアに変換します。その際、各行の残りの値と結合します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> の列 \"a\"、\"b\"、および \"c\" を受け取り、属性/値のペアにピボット解除します。",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "指定されたセット以外のすべての列を属性/値のペアに変換します。",
        "Documentation.LongDescription": "指定されたセット以外のすべての列を属性/値のペアに変換します。その際、各行の残りの値と結合します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "指定されたセット以外のすべての列を属性/値のペアに変換します。その際、各行の残りの値と結合します。",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>Teams Analytics コネクタにより、Teams のお客様の使用状況に関する分析情報を得ることができます。Teams 内でのお客様の個人アクティビティだけでなく、お客様がメンバーとして参加している Teams のアクティビティのデータも利用できます。</p>\r\n<p>過去 90 日間分のデータが利用できます。</p>\r\n<p>利用可能なデータの種類の詳細については、次のヘルプ ドキュメントを参照してください: </p>\r\n<ul>\r\n<li><b>Teams の使用状況:</b> https://docs.microsoft.com/ja-jp/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams のユーザー アクティビティ:</b> https://docs.microsoft.com/ja-jp/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "組織とプロジェクトの名前を入力します。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps が提供する OData フィードのテーブルを返します。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "バイナリ値を読み取るバイナリ形式を返します。",
        "Documentation.LongDescription": "バイナリ値を読み取るバイナリ形式を返します。<code>length</code> が指定されている場合、バイナリ値にはその量のバイトが含まれます。<code>length</code> が指定されていない場合、バイナリ値には残りのバイトが含まれます。<code>length</code> は、数値か、バイナリ データの前の長さのバイナリ形式として指定できます。",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "指定された 2 つの値が等しいかどうかをチェックし、それに基づいて論理値を返します。",
        "Documentation.LongDescription": "提供されている <code>comparer</code> を使用して、指定した値 <code>x</code> と <code>y</code> が等しいかどうかのチェックに基づいて <code>logical</code> 値を返します。\r\n      <div>\r\n        <code>comparer</code> は比較を制御するために使用する <code>Comparer</code> です。\r\n        比較関数は 2 つの引数を承認し、最初の値が 2 番目の値以下であるか、等しいか、大きいかに基づいて -1、0、または 1 を返します。\r\n        比較関数を使用すると、大文字小文字を区別しない比較、またはカルチャとロケールに対応した比較を行うことができます。\r\n      </div>\r\n      <div>\r\n        命令文の中で以下の標準で用意された比較関数を使用できます:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n        <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "「1」と「A」を、「en-US」ロケールを使用して比較し、値が等しいかどうかを判断します。",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "ローカル タイム ゾーンでの現在の日付と時刻を返します。この値は固定されているため、連続呼び出しでは変更されません。",
        "Documentation.LongDescription": "システムの現在の日付と時刻に設定された <code>datetime</code> 値を返します。この値は固定されているため、DateTime.LocalNow とは異なり、連続呼び出しでは変更されません。これにより、式の実行中に異なる値が返される可能性があります。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "ローカル タイム ゾーンでの現在の日付と時刻を返します。",
        "Documentation.LongDescription": "システムの現在の日付と時刻に設定された <code>datetime</code> 値を返します。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "ローカル タイム ゾーンでの現在の日付と時刻を返します。この値は固定されているため、連続呼び出しでは変更されません。",
        "Documentation.LongDescription": "システムの現在の日付と時刻に設定された <code>datetime</code> 値を返します。返された値には、ローカル タイム ゾーンを表すタイム ゾーン情報が含まれています。この値は固定されているため、DateTimeZone.LocalNow とは異なり、連続呼び出しでは変更されません。これにより、式の実行中に異なる値が返される可能性があります。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "UTC (GMT タイム ゾーン) での現在の日付と時刻を返します。この値は固定されているため、連続呼び出しでは変更されません。",
        "Documentation.LongDescription": "UTC (GMT タイム ゾーン) での現在の日付と時刻を返します。この値は固定されているため、連続呼び出しでは変更されません。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "ローカル タイム ゾーンでの現在の日付と時刻を返します。",
        "Documentation.LongDescription": "システムの現在の日付と時刻に設定された <code>datetimezone</code> 値を返します。\r\n    返された値には、ローカル タイム ゾーンを表すタイム ゾーン情報が含まれています。 ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "UTC (GMT タイム ゾーン) での現在の日付と時刻を返します。",
        "Documentation.LongDescription": "UTC (GMT タイム ゾーン) での現在の日付と時刻を返します。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "現在の日付と時刻を UTC で取得します。",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "現在実行中の評価の不透明な識別子を返します。",
        "Documentation.LongDescription": "現在実行中の評価の不透明な識別子を返します。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "着信要求を送信要求と関連付けるための不透明な識別子を返します。",
        "Documentation.LongDescription": "着信要求を送信要求と関連付けるための不透明な識別子を返します。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "トレースが有効になっていて値を返す場合は、トレース エントリを記述します。",
        "Documentation.LongDescription": "トレースが有効になっていて <code>value</code> を返す場合は、トレース <code>message</code> を記述します。オプション パラメーター <code>delayed</code> は、メッセージがトレースされるまで <code>value</code> の評価を遅らせるかどうかを指定します。<code>traceLevel</code> には次のいずれかの値を指定できます:\r\n    <code>TraceLevel.Critical</code>、\r\n    <code>TraceLevel.Error</code>、\r\n    <code>TraceLevel.Warning</code>、\r\n    <code>TraceLevel.Information</code>、\r\n    <code>TraceLevel.Verbose</code>。\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Text.From 関数を呼び出す前にメッセージをトレースし、結果を返します。",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "現在のホストの既定の ID プロバイダー。",
        "Documentation.LongDescription": "現在のホストの既定の ID プロバイダー。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "リスト内のアイテムから要約値を収集します。",
        "Documentation.LongDescription": "<code>accumulator</code> を使用して、リスト <code>list</code> 内のアイテムから要約値を収集します。\r\n    省略可能なシード パラメーター <code>seed</code> を設定することもできます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "((state, current) => state + current ) を使用して、リスト {1, 2, 3, 4, 5} 内のアイテムから要約値を収集します。",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "指定された初期値、数、および増分期間値に基づいて、datetimezone 値のリストを生成します。",
        "Documentation.LongDescription": "<code>start</code> で始まりサイズが <code>count</code> の <code>datetimezone</code> 値のリストを返します。指定された増分 <code>step</code> は、すべての値に追加される <code>duration</code> 値です。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "元日の 5 分前から始まり (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0))、1 分ずつ増分される (#duration(0, 0, 1, 0)) 10 個の値のリストを作成します。",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "指定された初期値、数、および増分期間値に基づいて、datetime 値のリストを生成します。",
        "Documentation.LongDescription": "<code>start</code> で始まりサイズが <code>count</code> の <code>datetime</code> 値のリストを返します。指定された増分 <code>step</code> は、すべての値に追加される <code>duration</code> 値です。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "元日の 5 分前から始まり (#datetime(2011, 12, 31, 23, 55, 0))、1 分ずつ増分される (#duration(0, 0, 1, 0)) 10 個の値のリストを作成します。",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "指定された初期値、数、および増分期間値に基づいて、date 値のリストを生成します。",
        "Documentation.LongDescription": "<code>start</code> で始まりサイズが <code>count</code> の <code>date</code> 値のリストを返します。指定された増分 <code>step</code> は、すべての値に追加される <code>duration</code> 値です。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "大晦日から始まり (#date(2011, 12, 31))、1 日ずつ増分される (#duration(1, 0, 0, 0)) 5 個の値のリストを作成します。",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "指定された初期値、数、および増分期間値に基づいて、期間値のリストを生成します。",
        "Documentation.LongDescription": "<code>start</code> で始まり、指定された <code>duration</code> <code>step</code> で増分される <code>count</code> 個の <code>duration</code> 値のリストを返します。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1 時間から始まり、1 時間ずつ増分される 5 個の値を作成します。",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "値の一覧を生成します。",
        "Documentation.LongDescription": "指定された関数を使用して値の一覧を生成します。<code>initial</code> 関数は開始候補値を生成し、<code>condition</code>に対してテストされます。\r\n    候補の値が承認されると、結果リストの一部として返され、次の候補値は、新しく承認された値を <code>next</code> に渡すことで生成されます。\r\n    候補値が <code>condition</code> と一致しない場合、リスト生成プロセスは停止します。\r\n    省略可能なパラメーター <code>selector</code> を指定して、結果のリスト内の項目を変換することもできます。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "10 から始まり、1 ずつ減数を繰り返し、各項目が 0 より大きいことを確認してリストを作成します。",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "x と y を含むレコードのリストを生成します (x は値、y はリスト)。x は、10 未満を保持し、リスト y 内の項目数を表す必要があります。リストが生成された後は、x の値のみを返します。",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "リストの指定されたインデックス位置に値を挿入します。",
        "Documentation.LongDescription": "<code>values</code> の値を <code>list</code> の <code>index</code> の位置に挿入することによって生成される新しいリストを返します。リスト内の最初の位置はインデックス 0 になります。\r\n      <ul>\r\n        <li><code>list</code>: 値の挿入先のリスト。</li>\r\n        <li><code>index</code>: 値の挿入先のリスト (<code>list</code>) 内の位置を示すインデックス。リスト内の最初の位置はインデックス 0 になります。</li>\r\n        <li><code>values</code>: <code>list</code> に挿入される値のリスト。</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト ({3, 4}) を挿入先リスト ({1, 2, 5}) のインデックス 2 に挿入します。",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "入れ子になったリスト ({1, {1.1, 1.2}}) を含むリストを挿入先リスト ({2, 3, 4}) のインデックス 0 に挿入します。",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "指定された開始位置から、指定された数の値を置換値に置き換えます。",
        "Documentation.LongDescription": "<code>list</code> 内の指定された開始位置 <code>index</code> から、<code>count</code> 個の値をリスト <code>replaceWith</code> に置き換えます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 7, 8, 9, 5} 内の {7, 8, 9} を {3, 4} に置き換えます。",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "リスト内で指定された値を検索し、置き換えます。",
        "Documentation.LongDescription": "値のリスト <code>list</code> 内で値 <code>oldValue</code> を検索し、それぞれの出現を置換値 <code>newValue</code> に置き換えます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {\"a\", \"B\", \"a\", \"a\"} 内のすべての \"a\" 値を \"A\" に置き換えます。",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "指定された初期値、数、および増分期間値に基づいて、time 値のリストを生成します。",
        "Documentation.LongDescription": "<code>start</code> で始まりサイズが <code>count</code> の <code>time</code> 値のリストを返します。指定された増分 <code>step</code> は、すべての値に追加される <code>duration</code> 値です。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "正午から始まり (#time(12, 0, 0))、1 時間ずつ増分される (#duration(0, 1, 0, 0)) 4 つの値のリストを作成します。",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "指定された関数を使用して入力リストから要素が変換されたリストを返します。",
        "Documentation.LongDescription": "入力リストから要素が投影されたリストを返します。<br>\r\n <br>\r\n この <code>collectionTransform</code> 関数は各要素を中間リストに変換し、 <code>resultTransform</code> 関数は最終的な結果を作成するために元の要素と中間リストの項目を受け取ります。<br>\r\n <br>\r\n この<code>collectionTransform</code> 関数には、シグネチャ <code>(x as any) as list => ...</code>で、<code>x</code> は <code>list</code>の要素です。\r\n この <code>resultTransform</code> 関数は結果の形状を投影し、シグネチャ <code>(x as any, y as any) as any => ...</code>　<code>x</code> は <code>list</code> 内の要素であり、<code>y</code> は、<code>x</code> を <code>collectionTransform</code>に渡すことによって生成されるリストの要素です。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "人とそのペットのリストをフラット化します。",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "乱数を返します。",
        "Documentation.LongDescription": "0 と 1 の間の乱数を返します。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "乱数を取得します。",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "レコードにフィールドを追加します。",
        "Documentation.LongDescription": "レコード <code>record</code> にフィールド名 <code>fieldName</code>、値 <code>value</code> のフィールドを追加します。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "レコードにフィールド Address を追加します。",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "指定された入力内のテキストを置き換えます。",
        "Documentation.LongDescription": "元の <code>text</code> 内の <code>old</code> テキストを <code>new</code> テキストに置き換えます。この置換関数は、<code>List.ReplaceValue</code> および <code>Table.ReplaceValue</code> で使用できます。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "文字列 \"hEllo world\" 内のテキスト \"hE\" を \"He\" に置き換えます。",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "指定された入力内の値を置き換えます。",
        "Documentation.LongDescription": "元の <code>value</code> 内の <code>old</code> 値を <code>new</code> 値に置き換えます。この置換関数は、<code>List.ReplaceValue</code> および <code>Table.ReplaceValue</code> で使用できます。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "値 11 を値 10 に置き換えます。",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Smartsheet API から JSON の結果を返します",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "特定のエンドポイントで Smartsheet 2.0 REST API への呼び出しを実行し、 JSON レコードとして結果を返します。",
        "Documentation.Examples": [
          {
            "Description": "追加の引数を指定して、シート Smartsheet API エンドポイントからデータをプルします",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Smartsheet API によって返されるシート情報を含むテーブル"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "引数を分割せず、引数を 1 つの要素リストとして返す関数を返します。",
        "Documentation.LongDescription": "引数を分割せず、引数を 1 つの要素リストとして返す関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "空白文字でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "空白文字でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力を空白文字で分割し、引用符を他の文字と同じように扱います。",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "指定されたグループ数と列に基づいて、テーブルを一連のテーブルにパーティション分割します。",
        "Documentation.LongDescription": "<code>column</code> の値と <code>hash</code> 関数に基づいて、<code>table</code> を <code>groups</code> 個の一連のテーブルにパーティション分割します。\r\n    <code>hash</code> 関数を <code>column</code> 行の値に適用して、行のハッシュ値を取得します。ハッシュ値の剰余 <code>groups</code> により、行の配置先の返されるテーブルが決まります。\r\n    <ul>\r\n       <li><code>table</code>: パーティション分割するテーブル。</li>\r\n       <li><code>column</code>: 行の配置先の返されるテーブルを決定するためにハッシュする列。</li>\r\n       <li><code>groups</code>: 入力テーブルをパーティション分割した後のテーブルの数。</li>\r\n       <li><code>hash</code>: ハッシュ値を取得するために適用する関数。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "ハッシュ関数として列の値を使用して、テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> を列 [a] で 2 つのテーブルにパーティション分割します。",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "指定した <code>startDelimiter</code> と <code>endDelimiter</code> の間の <code>text</code> の部分を返します。\r\n    省略可能な数値 <code>startIndex</code> は、想定される <code>startDelimiter</code> の回数を示します。\r\n    省略可能なリスト <code>startIndex</code> は、想定される <code>startDelimiter</code> の回数、およびインデックス作成を入力の先頭と末尾のどちらから行うかを示しています。\r\n    <code>endIndex</code> は類似していますが、インデックス作成が <code>startIndex</code> に対して相対的に行われる点が異なります。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(最初の) 開きかっことそれに続く (最初の) 閉じかっこの間の \"111 (222) 333 (444)\" の部分を取得します。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "2 番目の開きかっことそれに続く最初の閉じかっこの間の \"111 (222) 333 (444)\" の部分を取得します。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "最後から 2 番目の開きかっことそれに続く2 番目の閉じかっこの間の \"111 (222) 333 (444)\" の部分を取得します。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "テキスト値を指定された位置の別のテキスト値に挿入します。",
        "Documentation.LongDescription": "位置 <code>offset</code> のテキスト値 <code>text</code> にテキスト値 <code>newText</code> を挿入した結果を返します。位置は 0 から始まります。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABD\" の \"B\" と \"D\" の間に \"C\" を挿入します。",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "新しいランダム グローバル一意識別子 (GUID) を返します。",
        "Documentation.LongDescription": "新しいランダム グローバル一意識別子 (GUID) を返します。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "テキスト内で出現する指定されたサブストリングをすべて置き換えます。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> に出現するすべてのテキスト値 <code>old</code> をテキスト値 <code>new</code> に置き換えた結果を返します。この関数では大文字と小文字が区別されます。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "文章内に出現するすべての \"the\" を \"a\" に置き換えます。",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "文字の範囲を削除し、指定された位置に新しい値を挿入します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> の位置 <code>offset</code> から <code>count</code> 文字削除し、<code>text</code> の同じ位置にテキスト値 <code>newText</code> を挿入した結果を返します。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "テキスト値 \"ABGF\" の位置 2 の 1 文字を新しいテキスト値 \"CDE\" に置き換えます。",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "指定されたテーブル型にキーを追加します。",
        "Documentation.LongDescription": "指定されたテーブル型にキーを追加します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "条件が受け付ける ID の一覧を返します。",
        "Documentation.LongDescription": "<p>指定した <code>identityProvider</code> を使用すると、<code>condition</code> が ID の一覧に変換されます。この一覧で <code>condition</code> は、<code>identityProvider</code> を ID プロバイダーとするすべての承認コンテキストで <code>true</code> を返します。<code>condition</code> が決定を下すためにユーザー ID やグループ ID 以外の属性を参照するなど、<code>condition</code> を ID の一覧に変換することができない場合はエラーが発生します。</p>\r\n    <p>ID の一覧が <code>condition</code> に使用される ID を表しており、その ID の一覧に対して正規化 (グループ拡張など) が実行されていないことに注意してください。</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "指定された圧縮の種類を使用して、バイナリ値を圧縮します。",
        "Documentation.LongDescription": "指定された圧縮の種類を使用して、バイナリ値を圧縮します。この呼び出しの結果は、圧縮された入力のコピーです。圧縮の種類には次のものがあります。\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "バイナリ値を圧縮します。",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "指定された圧縮の種類を使用して、バイナリ値の圧縮を解除します。",
        "Documentation.LongDescription": "指定された圧縮の種類を使用して、バイナリ値の圧縮を解除します。この呼び出しの結果は、圧縮が解除された入力のコピーです。圧縮の種類には次のものがあります。\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "バイナリ値の圧縮を解除します。",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "オフセットで始まるバイナリ値のサブセットを返します。",
        "Documentation.LongDescription": "オフセット <code>binary</code> で始まるバイナリ値のサブセットを返します。省略可能なパラメーター <code>offset</code> では、そのサブセットの最大長を設定します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "オフセット 6 で始まるバイナリ値のサブセットを返します。",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "バイナリ値のオフセット 6 から長さが 2 のサブセットを返します。",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "指定のバイナリを、指定のページ サイズを使ったバイナリのリストに分割します。",
        "Documentation.LongDescription": "<code>binary</code> をバイナリのリストに分割します。出力リストの最初の要素は、\r\n    ソース バイナリからの最初の <code>pageSize</code> バイトを含むバイナリです。出力リストの次の要素は、ソース バイナリからの次の <code>pageSize</code> バイトを含むバイナリで、以下同様になります。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "ユーザー定義のハンドラーを使用して、クエリおよびアクション操作用にバイナリを作成または拡張します。",
        "Documentation.LongDescription": "<p>操作がビューに適用される際に、<code>handlers</code> で指定された関数が既定動作の代わりに使用される <code>binary</code> のビューを返します。</p>\r\n<p><code>binary</code> が指定されると、ハンドラー関数は省略可能です。<code>binary</code> が指定されないと、<code>GetStream</code> ハンドラー関数が必要です。ハンドラー関数が操作に指定されない場合、操作の既定の動作は代わりに <code>binary</code> に適用されます (<code>GetExpression</code> の場合を除く)。</p>\r\n<p>ハンドラー関数は、<code>binary</code> に対する操作を適用した結果 (または <code>GetExpression</code> の場合は結果ビュー) と意味的に同等の値を返す必要があります。</p>\r\n<p>ハンドラー関数でエラーが発生する場合は、操作の既定動作がビューに適用されます。</p>\r\n<p><code>Binary.View</code> は、データ ソースへの圧縮の実装、M クエリからソース固有の操作への変換 (ファイルのセクションをダウンロードする場合など) に使用できます。</p>\r\n<p><code>Binary.View</code> の詳細な説明に関しては、公開されている Power Query カスタム コネクタのドキュメントを参照してください。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "長さを決定するために、データにアクセスする必要のない基本的なビューを作成します。",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "関数で指定されたバイト順でバイナリ形式を返します。",
        "Documentation.LongDescription": "<code>binaryFormat</code> で指定されたバイト順でバイナリ形式を返します。既定のバイト順は <code>ByteOrder.BigEndian</code> です。",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "既に読み取られた値に基づいて次のバイナリ形式を選択するバイナリ形式を返します。",
        "Documentation.LongDescription": "既に読み取られた値に基づいて次のバイナリ形式を選択するバイナリ形式を返します。この関数によって生成されるバイナリ形式の値は、以下のステージで機能します。<ul>\r\n<li><code>binaryFormat</code> パラメーターで指定されたバイナリ形式が、値を読み取るために使用されます。</li>\r\n<li><code>chooseFunction</code> パラメーターで指定された選択関数に値が渡されます。</li>\r\n<li>選択関数は値を調べ、2 番目のバイナリ形式を返します。</li>\r\n<li>2 番目のバイナリ形式が、2 番目の値を読み取るために使用されます。</li>\r\n<li>結合関数を指定した場合は、最初の値と 2 番目の値が結合関数に渡され、結果値が返されます。</li>\r\n<li>結合関数が指定されない場合は、2 番目の値が返されます。</li>\r\n<li>2 番目の値が返されます。</li>\r\n</ul>省略可能な <code>type</code> パラメーターは、選択関数から返されるバイナリ形式の種類を示します。指定できる値は、<code>type any</code>、<code>type list</code>、または <code>type binary</code> です。<code>type</code> パラメーターが指定されない場合は、<code>type any</code> が使用されます。<code>type list</code> または <code>type binary</code> が使用されると、システムはバッファー処理された値ではなく、ストリーミングの <code>binary</code> または <code>list</code> の値を返せる場合があります。そうすることで、形式を読み取るために必要なメモリの量を減らすことができます。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "バイトのリストを読み取ります。要素の数は最初のバイトによって決まります。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "バイトのリストを読み取ります。要素の数は最初のバイトによって決まり、読み取られた最初のバイトは保持されます。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "バイトのリストを読み取ります。要素の数は最初のバイトによって決まり、ストリーミング リストが使用されます。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "アイテムのグループを読み取るバイナリ形式を返します。",
        "Documentation.LongDescription": "パラメーターは次のとおりです:\r\n<ul>\r\n<li> <code>binaryFormat</code> パラメーターは、キー値のバイナリ形式を指定します。</li>\r\n<li><code>group</code> パラメーターは、既知のアイテムのグループに関する情報を提供します。</li>\r\n<li>省略可能な <code>extra</code> パラメーターは、予期されていない任意のキーに続く値のバイナリ形式値を返す関数を指定するために使用されます。<code>extra</code> パラメーターが指定されていない場合、予期しないキー値があると、エラーが発生します。</li>\r\n</ul>\r\n<code>group</code> パラメーターは、アイテム定義のリストを指定します。各アイテム定義は、次のとおり、3 ～ 5 個の値を含むリストです:\r\n<ul>\r\n<li>キー値。アイテムに対応するキーの値です。アイテムのセット内で一意である必要があります。</li>\r\n<li>アイテムの形式。アイテムの値に対応するバイナリ形式です。これにより、各アイテムは別の形式でもかまいません。</li>\r\n<li>アイテムの出現。アイテムがグループ内で出現する見込みの回数を示す <code>BinaryOccurrence.Type</code> 値です。必須アイテムがないと、エラーが発生します。必須または省略可能な重複アイテムは予期しないキー値と同様に扱われます。</li>\r\n<li>既定のアイテム値 (省略可能)。既定のアイテム値がアイテム定義リストにあり、NULL ではない場合は、既定値の代わりに使用されます。繰り返しアイテムまたは省略可能なアイテムの既定値が NULL の場合、繰り返し値の既定値は空のリスト { } になります。</li>\r\n<li>アイテム値の変換 (省略可能)。アイテム値の変換関数がアイテム定義リストに存在し、NULL ではない場合は、その関数が呼び出され、アイテム値が変換されてから返されます。変換関数が呼びされるのは、アイテムが入力内にある場合のみです (既定値では呼び出されません)。</li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "以下は、シングル バイトのキー値 (グループ内に 4 つのアイテムが予期され、それぞれがキーに続く 1 バイトの値を持つ) を想定しています。アイテムは、入力では次のようになります:\r\n<ul>\r\n<li>キー 1 は必須で、値 11 と共に表示されます。</li>\r\n<li>キー 2 は繰り返され、値 22 と共に 2 回表示されて、結果は { 22, 22 } という値になります。</li>\r\n<li>キー 3 は省略可能で、表示されず、結果は NULL 値になります。</li>\r\n<li>キー 4 は繰り返されますが、表示されず、結果は { } という値になります。</li>\r\n<li>キー 5 はグループには含まれませんが、値 55 と共に 1 回表示されます。追加の関数がキー値 5 で呼び出され、その値に対応する形式が返されます (BinaryFormat.Byte)。値 55 は読み取られた後、破棄されます。</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "次の例は、アイテム値の変換と既定のアイテム値を示しています。キー 1 の繰り返しアイテムは、List.Sum を使用して読み取られた一連の値を合計します。キー 2 の省略可能なアイテムは、NULL ではなく既定値の 123 を持ちます。",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "読み取ることができるデータの量を制限するバイナリ形式を返します。",
        "Documentation.LongDescription": "読み取ることができるデータの量を制限するバイナリ形式を返します。データの末尾まで読み取るには、<code>BinaryFormat.List</code> および <code>BinaryFormat.Binary</code> を使用することができます。読み取るバイト数を制限するには、<code>BinaryFormat.Length</code> を使用できます。<code>binaryFormat</code> パラメーターは、制限するバイナリ形式を指定します。<code>length</code> パラメーターは、読み取るバイト数を指定します。<code>length</code> パラメーターでは、数値か、読み取る値の前にある長さの値の形式を指定するバイナリ形式値を指定できます。",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "バイトのリストを読み取っている場合に、読み取るバイト数を 2 に制限します。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "バイトのリストを読み取っている場合に、読み取るバイト数をリストの前のバイト値に制限します。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "別のバイナリ形式によって読み取られた値を変換するバイナリ形式を返します。",
        "Documentation.LongDescription": "別のバイナリ形式によって読み取られた値を変換するバイナリ形式を返します。<code>binaryFormat</code> パラメーターは、値の読み取りに使用されるバイナリ形式を指定します。読み取られた値を使って <code>function</code> が呼び出され、変換された値が返されます。",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "バイトを読み取り、それにバイトを追加します。",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Ordinal 規則を使用して値を比較する比較関数を返します。",
        "Documentation.LongDescription": "序数規則を使用して指定された値 <code>x</code> と <code>y</code> を比較する比較関数を返します。<br>\r\n        <br>\r\n        比較関数は 2 つの引数を承認し、最初の値が 2 番目の値以下であるか、等しいか、大きいかに基づいて -1、0、または 1 を返します。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Ordinal 規則を使用して、「encyclopædia」と「encyclopaedia」が等しいかどうか比較します。<code>Comparer.FromCulture(\"en-us\")</code> を使用するとこれらは等しくなることに注意してください。 ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "序数ルールを使用して値を比較する、大文字小文字を区別しない比較演算子関数を返します。",
        "Documentation.LongDescription": "序数規則を使用して指定された値 <code>x</code> と <code>y</code> を比較する、大文字と小文字を区別しない比較関数を返します。<br>\r\n        <br>\r\n        比較関数は 2 つの引数を承認し、最初の値が 2 番目の値以下であるか、等しいか、大きいかに基づいて -1、0、または 1 を返します。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "大文字小文字を区別しない序数ルールを使用して 、「Abc」と「abc」を比較します。「Abc」は <code>Comparer.Ordinal</code> を使用すると、「abc」よりも小さくなります。",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "ディメンション属性のプロパティを返します。",
        "Documentation.LongDescription": "ディメンション属性 <code>attribute</code> のプロパティ <code>propertyName</code> を返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "メジャー (セル プロパティ) のプロパティを返します。",
        "Documentation.LongDescription": "メジャー <code>measure</code> のプロパティ <code>propertyName</code> を返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL クエリ ソース",
        "Documentation.LongDescription": "SQL クエリを実行するための Databricks データ ソースを定義する"
      },
      "ReturnType": "Databricks SQL クエリ",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL クエリ ソース",
        "Documentation.LongDescription": "SQL クエリを実行するための Databricks データ ソースを定義する"
      },
      "ReturnType": "Databricks SQL クエリ",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "指定された日を日付に追加します。",
        "Documentation.LongDescription": "<code>datetime</code> 値 <code>dateTime</code> に <code>numberOfDays</code> 日を追加した結果の <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> を返します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 日が追加される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      <li><code>numberOfDays</code>: 追加する日数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 5/14/2011 を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 5 日を追加します。",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "指定された月を日付に追加します。",
        "Documentation.LongDescription": "<code>datetime</code> 値 <code>dateTime</code> に <code>numberOfMonths</code> か月を追加した結果の <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> を返します。\r\n      <ul>\r\n        <li><code>dateTime</code>: 月が追加される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n        <li><code>numberOfMonths</code>: 追加する月の数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 5/14/2011 を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 5 か月を追加します。",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "日付と時刻 5/14/2011 08:15:22 AM を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 18 か月を追加します。",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "指定された四半期を日付に追加します。",
        "Documentation.LongDescription": "<code>datetime</code> 値 <code>dateTime</code> に <code>numberOfQuarters</code> 四半期を追加した結果の <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> を返します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 四半期が追加される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      <li><code>numberOfQuarters</code>: 追加する四半期の数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 5/14/2011 を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 1 四半期を追加します。",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "指定された週を日付に追加します。",
        "Documentation.LongDescription": "<code>datetime</code> 値 <code>dateTime</code> に <code>numberOfWeeks</code> 週間を追加した結果の <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> を返します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 週が追加される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      <li><code>numberOfWeeks</code>: 追加する週の数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 5/14/2011 を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 2 週間を追加します。",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "指定された年を日付に追加します。",
        "Documentation.LongDescription": "<code>datetime</code> 値 <code>dateTime</code> に <code>numberOfYears</code> を追加した結果の <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> を返します。\r\n      <ul>\r\n        <li><code>dateTime</code>: 年が追加される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n        <li><code>numberOfYears</code>: 追加する年の数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 5/14/2011 を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 4 年を追加します。",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "日付と時刻 5/14/2011 08:15:22 AM を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値に 10 年を追加します。",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "システム上の現在の日時によって決定される次の日数に、この date が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の日数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>days</code>: 日数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の日付が、次の 2 日間に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "システム上の現在の日時によって決定される次の月数に、この date が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の月数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>months</code>: 月の数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の月が、次の 2 か月間に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "システム上の現在の日時によって決定される次の四半期数に、この date が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の四半期数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>quarters</code>: 四半期数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の四半期が、次の 2 回の四半期に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "システム上の現在の日時によって決定される次の週数に、この date が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の週数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>weeks</code>: 週数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の週が、次の 2 週に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "システム上の現在の日時によって決定される次の年数に、この date が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の年数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      <li><code>years</code>: 年数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の年が、次の 2 年に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "システム上の現在の日時によって決定される前の日数に、この date が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の日数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>days</code>: 日数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の日付が前の 2 日に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "システム上の現在の日時によって決定される前の月数に、この date が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の月数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>months</code>: 月数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の月が前の 2 か月に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "システム上の現在の日時によって決定される前の四半期数に、この date が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の四半期数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>quarters</code>: 四半期数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の四半期が前の 2 回の四半期に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "システム上の現在の日時によって決定される前の週数に、この date が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の週数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>weeks</code>: 週数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の週が前の 2 週に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "システム上の現在の日時によって決定される前の年数に、この date が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の年数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>years</code>: 年数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の年が前の 2 年に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "タイム ゾーン情報を datetime 値に追加します。",
        "Documentation.LongDescription": "タイム ゾーン情報を <code>dateTime</code> 値に追加します。タイムゾーン情報には <code>timezoneHours</code> が含まれており、必要に応じて <code>timezoneMinutes</code> が含まれます。これにより、UTC 時刻からのオフセットが指定されます。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "タイムゾーンを UTC+7:30 (UTC から 7 時間 30 分後) に設定してください。",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "システム上の現在の日時によって決定される次の時間数に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の時間数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>hours</code>: 時間数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の時間が、次の 2 時間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "システム上の現在の日時によって決定される次の分単位の時間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の分単位の時間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>minutes</code>: 分単位の時間。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の分が、次の 2 分間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "システム上の現在の日時によって決定される次の秒数に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の秒数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>seconds</code>: 秒数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の秒が、次の 2 秒間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "システム上の現在の日時によって決定される前の時間数に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の時間数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>hours</code>: 時間数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の時間が前の 2 時間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "システム上の現在の日時によって決定される前の分単位の時間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の分単位の時間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>minutes</code>: 分単位の時間。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の分が前の 2 分間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "システム上の現在の日時によって決定される前の秒数に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の秒数に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      <li><code>seconds</code>: 秒数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の秒が前の 2 秒間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "値のタイム ゾーンを変更します。",
        "Documentation.LongDescription": "datetimezone 値 <code>dateTimeZone</code> のタイム ゾーン情報を、<code>timezoneHours</code> および任意で <code>timezoneMinutes</code> によって指定された新しいタイム ゾーン情報に変更します。\r\n    <code>dateTimeZone</code> にタイム ゾーン部分がない場合は、例外がスローされます。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) のタイム ゾーン情報を 8 時間に変更します。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) のタイム ゾーン情報を -30 分に変更します。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "埋め込まれたマッシュアップ内の値に名前でアクセスします。",
        "Documentation.LongDescription": "埋め込まれたマッシュアップ内の値に名前でアクセスします。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "1 つのリスト引数を取得する関数の上に特定のパラメーターのシグネチャを持つ関数を作成します。",
        "Documentation.LongDescription": "単項の関数 <code>function</code> を取得し、<code>functionType</code> の種類の新しい関数を作成します。これは、その引数からリストを構築して、それを <code>function</code> に渡します。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "List.Sum を、2 つの引数が 1 つにまとめられた関数に変換します",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "リストを取得する関数を、2 つの引数の関数に変換します。",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "指定された関数を呼び出します",
        "Documentation.LongDescription": "指定された引数のリストを使用して特定の関数を呼び出し、結果を返します。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "1 つの引数 [A=1,B=2] で Record.FieldNames を呼び出します",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "指定された期間が経過した後に、特定の関数を呼び出します。",
        "Documentation.LongDescription": "期間 <code>delay</code> が経過した後に、<code>function</code> を呼び出した結果を返します。",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "ベクトル関数の上にスカラー関数を作成し、複数の呼び出しをバッチ処理します。",
        "Documentation.LongDescription": "<p>1 行の引数で <code>vectorFunction</code> を呼び出す <code>scalarFunctionType</code> 型のスカラー関数を返し、その単一の出力を返します。さらに、スカラー関数が Table.AddColumn などの入力テーブルの各行に対して繰り返し適用される場合、代わりに <code>vectorFunction</code> がすべての入力に対して 1 回適用されます。</p>\r\n<p>名前と一致する列を持ち、<code>scalarFunctionType</code> のパラメーターを配置するテーブルに <code>vectorFunction</code> が渡されます。このテーブルの各行には、スカラー関数の 1 回の呼び出しの引数が含まれ、列は <code>scalarFunctionType</code> のパラメーターに対応します。</p>\r\n<p><code>vectorFunction</code> は、入力テーブルと同じ長さのリストを返さなければなりません。各位置の項目は、同じ位置の入力行のスカラー関数の評価と同じ結果でなければなりません。</p>\r\n<p>入力テーブルにはストリーミングが入ってくることが予期されるので、入力が入ってきたときに <code>vectorFunction</code> は出力をストリーミングする必要があります。一度に 1 つの入力チャンクでしか動作しません。特に、<code>vectorFunction</code> は入力テーブルを複数回列挙してはなりません。</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "パーツからの地理的ポイントを表すレコードを作成します。",
        "Documentation.LongDescription": "経度、緯度、および (存在する場合は) 高さ (Z) とメジャー (M) などの構成パーツからの地理的ポイントを表すレコードを作成します。既定値 (4326) と異なる場合、オプションの空間参照系識別子 (SRID) を指定できます。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "パーツからの幾何学的ポイントを表すレコードを作成します。",
        "Documentation.LongDescription": "X 座標、Y 座標、および (ある場合は) Z 座標とメジャー (M) などの構成パーツからの幾何学的ポイントを表すレコードを作成します。既定値 (0) と異なる場合、オプションの空間参照系識別子 (SRID) を指定できます。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "ID を作成します。",
        "Documentation.LongDescription": "ID を作成します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "ID が ID コレクションのメンバーであるかどうかを決定します。",
        "Documentation.LongDescription": "ID が ID コレクションのメンバーであるかどうかを決定します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "リスト内でオフセットが奇数であるすべての要素によって構成されたリストを返します。",
        "Documentation.LongDescription": "リスト内でオフセットが奇数であるすべての要素によって構成されたリストを返します。パラメーターに応じて、リスト <code>list</code> の値を交互に取得したりスキップしたりします。\r\n    <ul>\r\n    <li><code>count</code>: 毎回スキップされる値の数を指定します。</li>\r\n    <li><code>repeatInterval</code>: スキップされる値の間の追加される値の数を示す、省略可能な繰り返し間隔。</li>\r\n    <li><code>offset</code>: 初期オフセットで値のスキップを開始するための、省略可能なオフセット パラメーター。</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "最初の数をスキップして、{1..10} からリストを作成します。",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "1 つおきに数をスキップして、{1..10} からリストを作成します。",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "1 から始めて、1 つおきに数をスキップして、{1..10} からリストを作成します。",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "1 から始めて、1 つの値をスキップし、2 つの値を保持するというパターンで、{1..10} からリストを作成します。",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "リストに値が含まれているかどうかを示します。",
        "Documentation.LongDescription": "リスト <code>list</code> に値 <code>value</code> が含まれているかどうかを示します。\r\n    値がリストに見つかった場合は true、それ以外の場合は false を返します。省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。 ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 3 が含まれているかどうかを調べます。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 6 が含まれているかどうかを調べます。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "リストに他のリストのすべての値が含まれているかどうかを示します。",
        "Documentation.LongDescription": "リスト <code>list</code> に他のリスト <code>values</code> のすべての値が含まれているかどうかを示します。\r\n    値がリストに見つかった場合は true、それ以外の場合は false を返します。省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 3 と 4 が含まれているかどうかを調べます。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 5 と 6 が含まれているかどうかを調べます。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "リストに他のリストのいずれかの値が含まれているかどうかを示します。",
        "Documentation.LongDescription": "リスト <code>list</code> に他のリスト <code>values</code> のいずれかの値が含まれているかどうかを示します。\r\n        値がリストに見つかった場合は true、それ以外の場合は false を返します。省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 3 または 9 が含まれているかどうかを調べます。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3, 4, 5} に 6 または 7 が含まれているかどうかを調べます。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "2 つの数のリストの間の共分散を返します。",
        "Documentation.LongDescription": "<code>numberList1</code> と <code>numberList2</code> の 2 つのリストの間の共分散を返します。<code>numberList1</code> と <code>numberList2</code> には同じ数の <code>number</code> 値が含まれている必要があります。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "2 つのリストの間の共分散を計算します。",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "指定された 2 つのリストの相違を返します。",
        "Documentation.LongDescription": "リスト <code>list1</code> 内の、リスト <code>list2</code> に含まれていない項目を返します。重複する値がサポートされています。\r\n    省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, 5} 内の、{4, 5, 3} に含まれていない項目を求めます。",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "リスト {1, 2} 内の、{1, 2, 3} に含まれていない項目を求めます。",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "指定されたテキストを含む (レコード フィールドを含む) 値のリストを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> から、値 <code>text</code> が含まれる値のリストを返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {\"a\", \"b\", \"ab\"} 内の、\"a\" に一致するテキスト値を求めます。",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "返す項目の数または条件を指定して、リスト内の項目の最初のセットを返します。",
        "Documentation.LongDescription": " <ul>\r\n  <li>数値を指定した場合、その数までの項目が返されます。</li>\r\n  <li>条件を指定した場合、先頭からその条件を満たすすべての項目が返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {3, 4, 5, -1, 7, 8, 2} 内の、0 を超える初期値を求めます。",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "リスト内のすべての値によって条件関数が満たされる場合、true を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内のすべての値によって条件関数 <code>condition</code> が満たされる場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {11, 12, 13} 内のすべての値が 10 を超えるかどうかを判断します。",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3} 内のすべての値が 10 を超えるかどうかを判断します。",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "いずれかの値によって条件関数が満たされる場合、true を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内のいずれかの値によって条件関数 <code>condition</code> が満たされる場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {9, 10, 11} 内のいずれかの値が 10 を超えるかどうかを調べます。",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3} 内のいずれかの値が 10 を超えるかどうかを調べます。",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "リスト内の最大値を返します。返される値の数またはフィルター条件を指定する必要があります。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最大値を返します。\r\n    行が並べ替えられた後、省略可能なパラメーターを指定して、さらに結果をフィルター処理できます。省略可能なパラメーター <code>countOrCondition</code> は、返される値の数またはフィルター条件を指定します。省略可能なパラメーター <code>comparisonCriteria</code> は、リスト内の値を比較する方法を指定します。\r\n <ul>\r\n        <li> <code>list</code>: 値のリスト。</li>\r\n        <li> <code>countOrCondition</code>: 数値を指定した場合、昇順で最大 <code>countOrCondition</code> 個の項目を含むリストが返されます。条件を指定した場合、初期状態でその条件を満たす項目のリストが返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。</li>\r\n<li><code>comparisonCriteria</code>: <i>[省略可能]</i> 省略可能な <code>comparisonCriteria</code> 値を指定して、リスト内の項目を比較する方法を決定することができます。このパラメーターが null の場合、既定の比較関数が使用されます。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "リスト内の最小値を返します。返される値の数またはフィルター条件を指定できます。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最小値を返します。\r\n    パラメーター <code>countOrCondition</code> は、返される値の数またはフィルター条件を指定します。省略可能なパラメーター <code>comparisonCriteria</code> は、リスト内の値を比較する方法を指定します。\r\n <ul>\r\n        <li> <code>list</code>: 値のリスト。</li>\r\n        <li> <code>countOrCondition</code>: 数値を指定した場合、昇順で最大 <code>countOrCondition</code> 個の項目を含むリストが返されます。条件を指定した場合、初期状態でその条件を満たす項目のリストが返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。このパラメーターが null の場合、リスト内の単一の最小値が返されます。</li>\r\n<li><code>comparisonCriteria</code>: <i>[省略可能]</i> 省略可能な <code>comparisonCriteria</code> 値を指定して、リスト内の項目を比較する方法を決定することができます。このパラメーターが null の場合、既定の比較関数が使用されます。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{3, 4, 5, -1, 7, 8, 2}</code> 内の下位 5 つの値を求めます。",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "指定された初期値、数、および省略可能な増分値に基づいて、数値のリストを返します。",
        "Documentation.LongDescription": "指定された初期値、数、および省略可能な増分値に基づいて、数値のリストを返します。既定の増分値は 1 です。\r\n<ul>\r\n   <li><code>start</code>: リストの初期値。</li>\r\n   <li><code>count</code>: 作成する値の数。</li>\r\n   <li><code>increment</code>: <i>[省略可能]</i> 増分値。省略した場合、値は 1 ずつ増分されます。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1 で始まる 10 個の連続する数値のリストを生成します。",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "1 で始まり、2 ずつ増分される 10 個の数値のリストを生成します。",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "指定された確率に対応する 1 つまたは複数のサンプルのパーセンタイルを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> の 1 つまたは複数のサンプルのパーセンタイルを返します。値 <code>percentiles</code> が 0.0 から 1.0 の範囲の数値である場合、パーセンタイルとして処理され、確率に対応する単一の値が\r\n    結果として返されます。値 <code>percentiles</code> が 0.0 から 1.0 の範囲の値を含む数値のリストである場合、入力の確率に対応する\r\n    パーセンタイルのリストが結果として返されます。上級ユーザーは、<code>options</code> 内の PercentileMode オプションを使用してより詳細な補間メソッドを選択できますが、ほとんどの使用には推奨されていません。\r\n    定義済みの記号 <code>PercentileMode.ExcelInc</code> と <code>PercentileMode.ExcelExc</code> は、Excel 関数\r\n    <code>PERCENTILE.INC</code> と <code>PERCENTILE.EXC</code> で使用されている補間メソッドと一致します。既定の動作は <code>PercentileMode.ExcelInc</code> と一致します。記号\r\n    <code>PercentileMode.SqlCont</code> と <code>PercentileMode.SqlDisc</code> はそれぞれ <code>PERCENTILE_CONT</code> と\r\n    <code>PERCENTILE_DISC</code> の SQL Server の動作と一致します。\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{5, 3, 1, 7, 9}</code> の第 1 四分位数を求めます。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Excel の <code>PERCENTILE.EXC</code> に一致する補間メソッドを使用してリスト <code>{5, 3, 1, 7, 9}</code> の四分位数を求めます。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "リスト内の値のオフセットを返します。",
        "Documentation.LongDescription": "値 <code>list</code> がリスト <code>value</code> に出現するオフセットを返します。値が出現しない場合は -1 を返します。\r\n    省略可能な出現パラメーター <code>occurrence</code> を指定できます。\r\n<ul>\r\n   <li><code>occurrence</code>: 報告する出現の最大数。</li>\r\n</ul> ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} 内で値 3 が出現する位置を求めます。",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "リスト内の値の最初のオフセットを返します。",
        "Documentation.LongDescription": "リスト <code>values</code> 内の値の最初の出現、のリスト <code>list</code> でのオフセットを返します。1 つも出現しない場合は -1 を返します。\r\n    省略可能な出現パラメーター <code>occurrence</code> を指定できます。\r\n<ul>\r\n   <li><code>occurrence</code>: 返すことができる出現の最大数。</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} 内で値 2 または 3 が出現する最初の位置を求めます。",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "オフセットで始まるリストのサブセットを返します。",
        "Documentation.LongDescription": "オフセット <code>list</code> で始まるリストのサブセットを返します。省略可能なパラメーター <code>offset</code> は、サブセットに含まれる項目の最大数を設定します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "1 ～ 10 の数を含むリストの、オフセット 6 で始まるサブセットを求めます。",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "1 ～ 10 の数を含むリストの、オフセット 6 で始まり長さが 2 のサブセットを求めます。",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "list1 から、リストに存在する項目を削除します。",
        "Documentation.LongDescription": "<code>list1</code> から、<code>list2</code> に指定された値のすべての出現を削除します。<code>list2</code> の値が <code>list1</code> に存在しない場合、元のリストが返されます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, 2, 5, 5} から、リスト {2, 4, 6} 内の項目を削除します。",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "入力値のすべての出現を削除します。",
        "Documentation.LongDescription": "リスト <code>list1</code> から、<code>list2</code> に指定された値のすべての出現を削除します。<code>list2</code> の値が <code>list1</code> に存在しない場合、元のリストが返されます。\r\n    省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5, 5} から {1, 5} を削除したリストを作成します。",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "指定された開始位置から、指定された数の値を削除します。",
        "Documentation.LongDescription": "<code>list</code> 内の指定された開始位置 <code>index</code> から、<code>count</code> 個の値を削除します。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, -6, -2, -1, 5} の開始インデックス 4 から、3 つの値を削除します。",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "元のリストを指定された回数繰り返した結果のリストを返します。",
        "Documentation.LongDescription": "元のリスト <code>list</code> を <code>count</code> 回繰り返した結果のリストを返します。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} を 3 回繰り返した結果のリストを作成します。",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "{ old, new } の置換をそれぞれ適用します。",
        "Documentation.LongDescription": "リスト <code>list</code> に対して指定された置換を実行します。置換操作 <code>replacements</code> は、古い値と新しい値という 2 つの値のリストで構成されます。これはリストで指定されます。\r\n    省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} の値 5 を -5 で置き換え、値 1 を -1 で置き換えた結果のリストを作成します。",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "条件に一致する値のリストを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> から、選択条件 <code>selection</code> に一致する値のリストを返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, -3, 4, 9, -2} 内の 0 を超える値を求めます。",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "指定のリストを、指定のページ サイズを使ったリストのリストに分割します。",
        "Documentation.LongDescription": "<code>list</code> をリストのリストに分割します。出力リストの最初の要素は、ソース リスト \r\n から最初の <code>pageSize</code> 要素を含むリストです。出力リストの次の要素は、ソース リストの次の <code>pageSize</code> 要素を含むリストです。以下同様。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "このリストから計算された値の新しいリストを返します。",
        "Documentation.LongDescription": "変換関数 <code>transform</code> をリスト <code>list</code> に適用して値の新しいリストを返します。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "1 をリスト {1, 2} 内のそれぞれの値に加算します。",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "2 つの数値の間で除算を行った結果のアークタンジェントを返します。",
        "Documentation.LongDescription": "2 つの数 <code>y</code> と <code>x</code> の間で除算を行った結果のアークタンジェントを返します。除算の式は <code>y</code>/<code>x</code> となります。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "2 つの入力間でビットごとの AND 演算を行った結果を返します。",
        "Documentation.LongDescription": "<code>number1</code> と <code>number2</code> の間でビットごとの AND 演算を行った結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "2 つの入力間でビットごとの OR 演算を行った結果を返します。",
        "Documentation.LongDescription": "<code>number1</code> と <code>number2</code> の間でビットごとの OR 演算を行った結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "ビットを左へシフトします。",
        "Documentation.LongDescription": "指定されたビット数 <code>number2</code> のビットごとの左シフトを <code>number1</code> に対して実行した結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "ビットを右へシフトします。",
        "Documentation.LongDescription": "指定されたビット数 <code>number2</code> のビットごとの右シフトを <code>number1</code> に対して実行した結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "2 つの入力間でビットごとの XOR (排他的 OR) 演算を行った結果を返します。",
        "Documentation.LongDescription": "<code>number1</code> と <code>number2</code> の間でビットごとの XOR (排他的 OR) 演算を行った結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "一意の組み合わせの数を返します。",
        "Documentation.LongDescription": "項目のリスト (<code>setSize</code>) から、指定された組み合わせのサイズ (<code>combinationSize</code>) で構成できる、一意の組み合わせの数を返します。\r\n<ul>\r\n    <li><code>setSize</code>: リストに含まれる項目の数。</li>\r\n    <li><code>combinationSize</code>: 各組み合わせに含まれる項目の数。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "合計で 5 つの項目があるときに構成できる 3 つの項目から成る組み合わせの数を求めます。",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "2 つの数値を除算し、結果の整数部を返します。",
        "Documentation.LongDescription": "数値 <code>number1</code> を別の数値 <code>number2</code> で除算した結果の整数部を返します。\r\n    <code>number1</code> または <code>number2</code> が null の場合、<code>Number.IntegerDivide</code> は null を返します。\r\n      <ul>\r\n        <li><code>number1</code>: 被除数。</li>\r\n        <li><code>number2</code>: 除数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "6 を 4 で除算します。",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "8.3 を 3 で除算します。",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "2 つの数値を整数除算して剰余を返します。",
        "Documentation.LongDescription": "<code>number</code> を <code>divisor</code> で整数除算した後の剰余を返します。\r\n    <code>number</code> または <code>divisor</code> が null の場合、<code>Number.Mod</code> は null を返します。\r\n      <ul>\r\n        <li><code>number</code>: 被除数。</li>\r\n        <li><code>divisor</code>: 除数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5 を 3 で除算した場合の剰余を求めます。",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "順列の数を返します。",
        "Documentation.LongDescription": "項目数 <code>setSize</code> と指定された順列のサイズ <code>permutationSize</code> から生成できる順列の数を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "合計 5 つの項目の中から 3 つをグループにした場合の順列の数を求めます。",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "数値を指定された数値でべき乗します。",
        "Documentation.LongDescription": "<code>number</code> を <code>power</code> でべき乗した結果を返します。\r\n    <code>number</code> または <code>power</code> が null の場合、<code>Number.Power</code> は null を返します。\r\n      <ul>\r\n        <li><code>number</code>: 基数。</li>\r\n        <li><code>power</code>: 指数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5 を 3 でべき乗した値 (5 の 3 乗) を求めます。",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "2 つの数値の間の乱数を返します。",
        "Documentation.LongDescription": "<code>bottom</code> と <code>top</code> の間の乱数を返します。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "1 と 5 の間の乱数を取得します。",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "レコード内の指定されたフィールドの値を返します。",
        "Documentation.LongDescription": "<code>record</code> 内の指定された <code>field</code> の値を返します。フィールドが見つからなかった場合は、例外がスローされます。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールド \"CustomerID\" の値を調べます。",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "レコード内の指定されたフィールドの値を返します。フィールドが見つからなかった場合は、既定値を返します。",
        "Documentation.LongDescription": "レコード <code>record</code> 内の指定されたフィールド <code>field</code> の値を返します。フィールドが見つからなかった場合は、省略可能な <code>defaultValue</code> を返します。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールド \"Phone\" の値を調べます。フィールドが存在しない場合は、NULL を返します。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "レコード内のフィールド \"Phone\" の値を調べます。フィールドが存在しない場合は、既定値を返します。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "フィールド値のリストとフィールドのセットが指定されたときに、レコードを返します。",
        "Documentation.LongDescription": "フィールド値の <code>list</code> とフィールドのセットが指定されたときに、レコードを返します。<code>fields</code> はテキスト値のリストか、レコードの型で指定できます。フィールドが一意ではない場合は、エラーがスローされます。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "フィールド値のリストとフィールド名のリストからレコードを作成します。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "フィールド値のリストとレコードの型からレコードを作成します。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "指定されたフィールドがレコードに存在するかどうかを示します。",
        "Documentation.LongDescription": "<code>fields</code> で指定されたフィールドがレコード <code>record</code> に存在するかどうかを示す論理値 (true または false) を返します。\r\n    リストを使用すると、複数のフィールド値を指定できます。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "レコードにフィールド \"CustomerID\" が存在するかどうかを調べます。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "レコードにフィールド \"CustomerID\" と \"Address\" が存在するかどうかを調べます。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "指定されたフィールドを入力レコードから削除します。",
        "Documentation.LongDescription": "入力 <code>record</code> からリスト <code>fields</code> で指定されたすべてのフィールドを削除したレコードを返します。指定されたフィールド名が存在しなかった場合は、例外がスローされます。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "レコードからフィールド \"Price\" を削除します。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "レコードからフィールド \"Price\" と \"Item\" を削除します。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "{ old, new } という形式のリストを使用して、名前の変更を適用します。",
        "Documentation.LongDescription": "入力 <code>record</code> 内のフィールドの名前を、リスト <code>renames</code> で指定された新しいフィールド名に変更したレコードを返します。複数の名前を変更する場合は、入れ子になったリスト ({ {old1, new1}, {old2, new2} }) を使用します。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "レコードのフィールド \"UnitPrice\" の名前を \"Price\" に変更します。",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "レコードのフィールド \"UnitPrice\" の名前を \"Price\" に変更し、\"OrderNum\" の名前を \"OrderID\" に変更します。",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "指定されたフィールドを新しい順序で並べ替えます。",
        "Documentation.LongDescription": "<code>record</code> 内のフィールドを、リスト <code>fieldOrder</code> で指定されたフィールドの順序で並べ替えたレコードを返します。フィールド値は維持され、<code>fieldOrder</code> に含まれていないフィールドは元の位置のままになります。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "レコード内の一部のフィールドを並べ替えます。",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "指定されたフィールドのみを含むレコードを返します。",
        "Documentation.LongDescription": "入力 <code>record</code> からリスト <code>fields</code> で指定されたフィールドのみを含むレコードを返します。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールド \"Item\" と \"Price\" を選択します。",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "指定された変換を適用したレコードを返します。",
        "Documentation.LongDescription": "リスト <code>transformOperations</code> で指定された変換を <code>record</code> に適用したレコードを返します。\r\n    一度に 1 つまたは複数のフィールドを変換できます。\r\n      <div>1 つのフィールドを変換する場合、<code>transformOperations</code> は 2 つの項目を含むリストである必要があります。<code>transformOperations</code> の最初の項目にはフィールド名を指定し、<code>transformOperations</code> の 2 番目の項目には変換に使用する関数を指定します。たとえば、<code>{\"Quantity\", Number.FromText}</code> のように指定します</div>\r\n      <div>複数のフィールドを変換する場合、<code>transformOperations</code> はリストのリストである必要があります。入れ子のリストはそれぞれフィールド名と変換操作のペアで構成します。たとえば、<code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code> のように指定します</div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Price\" フィールドを数値に変換します。",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "\"OrderID\" フィールドと \"Price\" フィールドを数値に変換します。",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "ある種類の文字を別の種類に移行する処理に応じてテキストをテキストの一覧に分割する関数を返します。{0} と {1} のパラメーターは文字の一覧とすることもできますし、文字を取り、true/false を返す関数とすることもできます。",
        "Documentation.LongDescription": "ある種類の文字を別の種類に移行する処理に応じてテキストをテキストの一覧に分割する関数を返します。<code>before</code> と <code>after</code> のパラメーターは文字の一覧とすることもできますし、文字を取り、true/false を返す関数とすることもできます。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "数字の後に大文字または小文字が存在する度に、入力を分割します。",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "指定された SQL クエリを M コードに変換します。この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "<code>environment</code> で定義された利用可能な識別子を使用して、<code>sql</code> クエリを M コードに変換します。この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "テーブルの指定された列のデータをリストとして返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> 内の <code>column</code> で指定された列のデータをリストとして返します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル内の [Name] 列から値を返します。",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "指定の型と一致する列の名前リストを返します。",
        "Documentation.LongDescription": "<code>listOfTypes</code> で指定された型と一致する列の名前をテーブル <code>table</code> から取得してリストとして返します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルから Number.Type 型の列の名前を返します。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "指定されたレコードがテーブルに行として含まれているかどうかを示します。",
        "Documentation.LongDescription": "指定されたレコード <code>row</code> が <code>table</code> に行として含まれているかどうかを示します。\r\n    省略可能なパラメーター <code>equationCriteria</code> を指定すると、テーブルの行と行の比較を制御できます。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブルにその行が含まれているかどうかを調べます。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブルにその行が含まれているかどうかを調べます。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "列 [Name] のみを比較して、テーブルにその行が含まれているかどうかを調べます。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "指定されたすべてのレコードがテーブルに行として含まれているかどうかを示します。",
        "Documentation.LongDescription": "レコードのリスト <code>rows</code> で指定されたすべてのレコードが <code>table</code> に行として含まれているかどうかを示します。\r\n    省略可能なパラメーター <code>equationCriteria</code> を指定すると、テーブルの行と行の比較を制御できます。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "列 [CustomerID] のみを比較して、テーブルにすべての行が含まれているかどうかを調べます。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブルにすべての行が含まれているかどうかを調べます。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "指定されたいずれかのレコードがテーブルに行として含まれているかどうかを示します。",
        "Documentation.LongDescription": "レコードのリスト <code>rows</code> で指定されたいずれかのレコードが <code>table</code> に行として含まれているかどうかを示します。\r\n    省略可能なパラメーター <code>equationCriteria</code> を指定すると、テーブルの行と行の比較を制御できます。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> に行 <code>[a = 1, b = 2]</code> または <code>[a = 3, b = 5]</code> が含まれているかどうかを調べます。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> に行 <code>[a = 1, b = 3]</code> または <code>[a = 3, b = 5]</code> が含まれているかどうかを調べます。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "列 [a] のみを比較して、テーブル <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> に行 <code>[a = 1, b = 3]</code> または <code>[a = 3, b = 5]</code> が含まれているかどうかを調べます。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "指定された列がテーブルに含まれているかどうかを示します。",
        "Documentation.LongDescription": "指定された列 <code>columns</code> が <code>table</code> に含まれているかどうかを示します。列がテーブルに含まれている場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルに列 [Name] が含まれているかどうかを調べます。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブルに列 [Name] と [PhoneNumber] が含まれているかどうかを調べます。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "テーブル内のすべての行が指定された条件を満たしているかどうかを示します。",
        "Documentation.LongDescription": "<code>table</code> 内のすべての行が指定された <code>condition</code> と一致しているかどうかを示します。すべての行が一致する場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列 [a] のすべての行の値が偶数かどうかを調べます。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 内のすべての行の値が [a = 1, b = 2] かどうかを調べます。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "テーブル内のいずれかの行が指定された条件を満たしているかどうかを示します。",
        "Documentation.LongDescription": "<code>table</code> 内のいずれかの行が指定された <code>condition</code> と一致しているかどうかを示します。いずれかの行が一致する場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> の列 [a] のいずれかの行の値が偶数かどうかを調べます。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "テーブル <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> のいずれかの行の値が [a = 1, b = 2] かどうかを調べます。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "指定された条件を使用して、最大の行または既定値を返します。",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> に基づいて <code>table</code> の最大の行を返します。テーブルが空の場合は、省略可能な <code>default</code> 値を返します。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> で列 [a] の最大値を含む行を探します。",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "テーブル <code>({})</code> で列 [a] の最大値を含む行を探します。空の場合は、-1 を返します。",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "指定された条件を使用して、最小の行または既定値を返します。",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> に基づいて <code>table</code> の最小の行を返します。テーブルが空の場合は、省略可能な <code>default</code> 値を返します。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "テーブルで列 [a] の最小値を含む行を探します。",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "テーブルで列 [a] の最小値を含む行を探します。空の場合は、-1 を返します。",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "テーブル内の行の位置を返します。",
        "Documentation.LongDescription": "指定された <code>table</code> で最初に出現する <code>row</code> の行の位置を返します。1 つも出現しない場合は -1 を返します。\r\n    <ul>\r\n       <li><code>table</code>: 入力テーブル。</li>\r\n       <li><code>row</code>: 位置を調べるテーブル内の行。</li>\r\n       <li><code>occurrence</code>: <i>[省略可能]</i> 出現するどの行を返すかを指定します。</li>\r\n       <li><code>equationCriteria</code>: <i>[省略可能]</i> テーブルの行と行の比較を制御します。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> で最初に出現する [a = 2, b = 4] の位置を調べます。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> で 2 番目に出現する [a = 2, b = 4] の位置を調べます。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> で出現するすべての [a = 2, b = 4] の位置を調べます。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "テーブル内の指定されたいずれかの行の位置を返します。",
        "Documentation.LongDescription": "最初に出現する <code>rows</code> の一覧の <code>table</code> から行の位置を返します。1 つも出現しない場合は -1 を返します。\r\n    <ul>\r\n    <li><code>table</code>: 入力テーブル。</li>\r\n       <li><code>rows</code>: 位置を調べるテーブル内の行の一覧。</li>\r\n       <li><code>occurrence</code>: <i>[省略可能]</i> 出現するどの行を返すかを指定します。</li>\r\n       <li><code>equationCriteria</code>: <i>[省略可能]</i> テーブルの行と行の比較を制御します。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> で最初に出現する [a = 2, b = 4] または [a = 6, b = 8] の位置を調べます。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "テーブル <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> で出現するすべての [a = 2, b = 4] または [a = 6, b = 8] の位置を調べます。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "指定のテーブルを、指定のページ サイズを使ったテーブルのリストに分割します。",
        "Documentation.LongDescription": "<code>table</code> をテーブルのリストに分割します。リストの最初の要素は、ソース テーブルの \r\n から最初の <code>pageSize</code> 行含むテーブルです。リストの次の要素は、ソース テーブルの次の <code>pageSize</code> 行を含むテーブルです。以下同様。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "5 つのレコードのテーブルを、レコードを 2 つずつ含むテーブルに分割します。",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "最初の行 (指定された数の行) と残りの行を含むリストを返します。",
        "Documentation.LongDescription": "2 つのテーブルを含むリストを返します。<code>table</code> の先頭 N 行 (<code>count</code> によって指定された) を含むテーブルと、<code>table</code> の残りの行を含むテーブルです。\r\n\r\n結果として得られるリストのテーブルが 1 回だけ順番に列挙される場合は、関数は 1 回だけ <code>table</code> を列挙します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの最初の 2 行と、テーブルの残りの行を返します。",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "指定された変換関数を使用してテーブルの行を変換します。",
        "Documentation.LongDescription": "<code>table</code> の各行に <code>transform</code> 操作を適用して、<code>リスト</code>を作成します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルの行を数値のリストに変換します。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "数値テーブルの行をテキスト レコードに変換します。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "指定した <code>delimiter</code> の後の <code>text</code> の部分を返します。\r\n    省略可能な数値 <code>index</code> は、想定される <code>delimiter</code> の回数を示します。\r\n    省略可能なリスト <code>index</code> は、想定される <code>delimiter</code> の回数、およびインデックス作成を入力の先頭または末尾のどちらからで行うかを示しています。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "最初のハイフンの後の \"111-222-333\" の部分を取得します。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "2 番目のハイフンの後の \"111-222-333\" の部分を取得します。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "最後から 2 番目のハイフンの後の \"111-222-333\" の部分を取得します。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "指定された位置の文字を返します。",
        "Documentation.LongDescription": "位置 <code>index</code> にあるテキスト値 (<code>text</code>) の文字を返します。テキストの最初の文字が位置 0 です。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "文字列 \"Hello, World\" 内の位置 4 にある文字を調べます。",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "指定した <code>delimiter</code> の前の <code>text</code> の部分を返します。\r\n    省略可能な数値 <code>index</code> は、想定される <code>delimiter</code> の回数を示します。\r\n    省略可能なリスト <code>index</code> は、想定される <code>delimiter</code> の回数、およびインデックス作成を入力の先頭または末尾のどちらから行うかを示しています。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "最初のハイフンの前の \"111-222-333\" の部分を取得します。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "2 番目のハイフンの前の \"111-222-333\" の部分を取得します。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "最後から 2 番目のハイフンの前の \"111-222-333\" の部分を取得します。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "テキストにサブストリングが含まれているかどうかを示す値を返します。",
        "Documentation.LongDescription": "<code>text</code> に値 <code>substring</code> が含まれているかどうかを検出します。値が検出された場合は true を返します。この関数は、ワイルドカードまたは正規表現をサポートしません。\r\n      <br>\r\n      <br>\r\n      オプションの引数 <code>comparer</code> を使用して、大文字小文字を区別しない比較、およびカルチャとロケールに対応した比較を行うことができます。\r\n      命令文の中で以下の標準で用意された比較関数を使用できます:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n        <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello World\" に \"Hello\" が含まれているかどうかを調べます。",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "テキスト \"Hello World\" に \"hello\" が含まれているかどうかを調べます。",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "テキスト \"Hello World \"に \"hello \"が含まれているかどうかを、大文字小文字を区別しない比較関数を使用して検索します。",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "テキストの最後の文字を返します。",
        "Documentation.LongDescription": "<code>text</code> 値 <code>text</code> の最後の <code>count</code> 文字である <code>text</code> 値を返します。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello, World\" の最後の 5 文字を取得します。",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "テキストが指定された値で終わるかどうかを示します。",
        "Documentation.LongDescription": "与えられたテキスト (<code>text</code>) が指定された値 \"<code>substring</code>\" で終わるかどうかを示します。表示では大文字と小文字が区別されます。\r\n\r\n      <div>\r\n        <code>comparer</code> は、比較を制御するために使用する <code>Comparer</code> です。比較関数を使用すると、大文字小文字を区別しない比較、およびカルチャとロケールに対応した比較を行えます。\r\n      </div>\r\n      <div>\r\n        命令文の中で以下の標準で用意された比較関数を使用できます:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n        <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" が \"world\" で終わるかどうかを調べます。",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "\"Hello, World\" が \"World\" で終わるかどうかを調べます。",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "書式文字列および引数から書式付きテキストを返します。",
        "Documentation.LongDescription": "一覧またはレコードから <code>arguments</code> を書式文字列 <code>formatString</code> に適用することによって作成された書式付きテキストを返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "数値のリストを書式設定します。",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "米国 (英語) のカルチャに基づいて、レコードをさまざまなデータ型に書式設定します。",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "指定の長さまでのサブ文字列を返します。",
        "Documentation.LongDescription": "オフセット <code>start</code> で <code>count</code> 文字または <code>text</code> の末尾までを返します。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello World\" のインデックス 6 で始まり 5 文字のサブ文字列を検出します。",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "テキスト \"Hello World\" のインデックス 6 で始まり末尾までのサブ文字列を検出します。",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "指定されたテキストの末尾に文字を埋め込んで、指定された長さのテキストを返します。",
        "Documentation.LongDescription": "長さが <code>count</code> になるようにテキスト値 <code>text</code> の末尾にスペースが挿入された <code>text</code> 値を返します。\r\n    省略可能な文字 <code>character</code> を、埋め込み用の文字として指定できます。既定の埋め込み文字はスペースです。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト値の末尾に文字を埋め込んで、長さが 10 文字になるようにします。",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "テキスト値の末尾に \"|\" を埋め込んで、長さが 10 文字になるようにします。",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "指定されたテキストの先頭に文字を埋め込んで、指定された長さのテキストを返します。",
        "Documentation.LongDescription": "長さが <code>count</code> になるようにテキスト値 <code>text</code> の先頭にスペースが挿入された <code>text</code> 値を返します。\r\n    省略可能な文字 <code>character</code> を、埋め込み用の文字として指定できます。既定の埋め込み文字はスペースです。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト値の先頭に文字を埋め込んで、長さが 10 文字になるようにします。",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "テキスト値の先頭に \"|\" を埋め込んで、長さが 10 文字になるようにします。",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "値の最初の位置を返します (見つからない場合は -1)。",
        "Documentation.LongDescription": "<code>text</code> で見つかったテキスト値 <code>substring</code> の指定された出現位置を返します。\r\n    選択可能なパラメーター <code>occurrence</code> を使用すると、返される出現位置 (既定では最初の出現) を指定できます。\r\n    <code>substring</code>が見つからなかった場合は -1 を返します。\r\n\r\n      <div>\r\n        <code>comparer</code>は、比較を制御するために使用する <code>Comparer</code> です。比較関数を使用すると、大文字小文字を区別しない比較、およびカルチャとロケールに対応した比較を行えます。\r\n      </div>\r\n      <div>\r\n        命令文で以下の標準で用意された比較関数を使用できます。\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n        <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello, World! Hello, World!\" 内での \"World\" の最初の出現位置を取得します。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "\"Hello, World! Hello, World!\" 内での \"World\" の最後の出現位置を取得します。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "指定された文字の、テキスト値内での最初の位置を返します (見つからない場合は -1)。",
        "Documentation.LongDescription": "<code>text</code> で見つかる、リスト <code>characters</code> 内のいずれかの文字の最初の位置を返します。\n    省略可能なパラメーター <code>occurrence</code> を使用すると、返される出現位置を指定できます。",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello, World!\" 内の \"W\" または \"H\" の最初の位置を調べます。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "テキスト \"Hello, World!\" 内の \"W\" または \"H\" のすべての位置を調べます。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "オフセットで見つかったサブストリングを返します。",
        "Documentation.LongDescription": "テキスト <code>text</code> のオフセット <code>offset</code> で見つかるサブストリングを返します。\r\n    省略可能なパラメーター <code>count</code> を使用すると、返す文字数を指定できます。文字数が足りない場合はエラーがスローされます。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "インデックス 6 で始まるテキスト \"Hello World\" のサブストリングを調べます。",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "インデックス 6 で始まり、全部で 5 文字になるテキスト \"Hello World\" のサブストリングを調べます。",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "入力テキスト値から、指定された文字または一連の文字をすべて削除します。",
        "Documentation.LongDescription": "<code>removeChars</code> からすべての文字を削除したうえで、テキスト値 <code>text</code> のコピーを返します。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "テキスト値から文字 , と ; を削除します。",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "指定されたオフセットから始まる文字の数を削除します",
        "Documentation.LongDescription": "位置 <code>offset</code> からすべての文字を削除したうえで、テキスト値 <code>text</code> のコピーを返します。\r\n    省略可能なパラメーター <code>count</code> を使用すると、削除する文字の数を指定できます。<code>count</code> の既定値は 1 です。位置の値は 0 から始まります。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "テキスト値 \"ABEFC\" の位置 2 から 1 文字を削除します。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "テキスト値 \"ABEFC\" の位置 2 から 2 文字を削除します。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "指定の回数繰り返された入力テキストで構成されるテキスト値を返します。",
        "Documentation.LongDescription": "<code>count</code> 回繰り返された入力テキスト <code>text</code> で構成されるテキスト値を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"a\" を 5 回繰り返します。",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "テキスト \"helloworld\" を 3 回繰り返します。",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "入力テキスト値に出現する指定された文字または一連の文字をすべて選択します。",
        "Documentation.LongDescription": "<code>selectChars</code> に含まれていないすべての文字を削除したうえで、テキスト値 <code>text</code> のコピーを返します。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "テキスト値から 'a' から 'z' の範囲のすべての文字を選択します。",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "指定された区切り記号に基づいてテキストを一連のテキスト値に分割します。",
        "Documentation.LongDescription": "指定された区切り記号 <code>separator</code> に基づいてテキスト値 <code>text</code> を分割した結果のテキスト値の一覧を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"|\" で区切られたテキスト値 \"Name|Address|PhoneNumber\" から一覧を作成します。",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "区切り記号のいずれかの文字で分割されたテキスト値の一覧を返します。",
        "Documentation.LongDescription": "指定された区切り記号 <code>separators</code> の任意の文字に基づいてテキスト値 <code>text</code> を分割した結果のテキスト値の一覧を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト値 \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\" から一覧を作成します。",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "テキストの先頭を返します。",
        "Documentation.LongDescription": "<code>text</code> の最初の <code>count</code> 文字をテキスト値として返します。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" の最初の 5 文字を取得します。",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "テキストが指定された値で始まるかどうかを示します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> がテキスト値 <code>substring</code> で始まる場合は true を返します。\r\n      <ul>\r\n        <li><code>text</code>: <i></i> 被検索 <code>text</code> 値</li>\r\n        <li><code>substring</code>: <i></i> <code>substring</code> 内で検索される部分文字列である <code>text</code> 値</li>\r\n        <li><code>comparer</code>: <i>[オプション]</i> 比較の制御に使用される <code>Comparer</code>。たとえば、<code>Comparer.OrdinalIgnoreCase</code> を使用して大文字小文字を区別しない検索を実行できます</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> は、比較を制御するために使用する <code>Comparer</code> です。比較関数を使用すると、大文字小文字を区別しない比較、およびカルチャとロケールに対応した比較を行えます。\r\n      </div>\r\n      <div>\r\n        命令文で以下の標準で用意された比較関数を使用できます。\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 完全一致の順次比較を行います</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 完全一致の順次比較 (大文字小文字を区別しない) を行います</li>\r\n        <li> <code>Comparer.FromCulture</code>: カルチャに対応した比較を行います</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello, World\" がテキスト \"hello\" で始まるかどうかを調べます。",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "テキスト \"Hello, World\" がテキスト \"Hello\" で始まるかどうかを調べます。",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "特定のパラメーターと戻り値の型の制約を持つ関数を表す型を返します。",
        "Documentation.LongDescription": "<code>function type</code> を、<code>ReturnType</code> と <code>Parameters</code> のレコード <code>signature</code>、関数の呼び出しに必要な引数の最少数 <code>min</code> から作成します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "X という数値パラメーターを取って数値を返す関数の型を作成します。",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "フィールドに対して特定の型の制約を持つレコードを表す型を返します。",
        "Documentation.LongDescription": "フィールドに対して特定の型の制約を持つレコードを表す型を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "テーブル型を動的に生成します。",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "最初の型の値が 2 番目の型と常に互換性があるかどうかを判断します。",
        "Documentation.LongDescription": "<code>type1</code> の値が常に <code>type2</code> と互換性があるかどうかを判断します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "number 型の値を常に any 型として扱うことができるかどうかを判断します。",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "any 型の値を常に number 型として扱うことができるかどうかを判断します。",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "種類のファセットを置換します。",
        "Documentation.LongDescription": "<code>type</code> のファセットをレコード <code>facets</code> に含まれるファセットで置換します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "すべてのキーが指定された一連のキーに置き換えられた新しいテーブル型を返します。",
        "Documentation.LongDescription": "すべてのキーが指定された一連のキーに置き換えられた新しいテーブル型を返します。<br>\r\n    <br>\r\n    各キーは、次の形式のレコードを使用して定義されます。\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: キーを定義する列名の一覧\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: キーがテーブルのプライマリ キーの場合は <code>true</code>、それ以外の場合は <code>false</code>\r\n    </li>\r\n      </ul>\r\n    指定されたキーの一覧は、プライマリ キーが 1 つ以上定義されておらず、すべてのキー列名がテーブル型に存在することを確認するために検証されます。\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "テーブル型のキー情報を置き換えます。",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "テーブル型で以前に定義されたキー情報をクリアします。",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "テーブル内の列の型を返します。",
        "Documentation.LongDescription": "テーブルの種類 <code>tableType</code> で列 <code>column</code> の型を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "入力ベース URI と相対 URI を組み合わせた絶対 URI を返します。",
        "Documentation.LongDescription": "入力 <code>baseUri</code> と相対 <code>relativeUri</code> を組み合わせた絶対 URI を返します。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "2 つの値の合計を返します。",
        "Documentation.LongDescription": "<code>value1</code> と <code>value2</code> の合計を返します。省略可能な <code>precision</code> パラメーターを指定できます。既定では <code>Precision.Double</code> が使用されます。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "指定された型と互換性がある場合に値を返します。",
        "Documentation.LongDescription": "指定された型と互換性がある場合は値を返します。これは、M の \"is\" 演算子に相当しますが、例外として、識別子型の参照 (Number.Type など) を受け入れることができます。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "数値を数値にキャストします。",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "テキスト値を数値にキャストしようとしています。",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "最初の値が 2 番目の値と比べて小さいか、等しいか、大きいかに応じて、それぞれ -1、0、または 1 を返します。",
        "Documentation.LongDescription": "最初の値が 2 番目の値と比べて小さいか、等しいか、大きいかに応じて、それぞれ -1、0、または 1 を返します。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "最初の値を 2 番目の値で除算した結果を返します。",
        "Documentation.LongDescription": "<code>value1</code> を <code>value2</code> で除算した結果を返します。省略可能な <code>precision</code> パラメーターを指定できます。既定では <code>Precision.Double</code> が使用されます。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "2 つの値が等しいかどうかを示す値を返します。",
        "Documentation.LongDescription": "値 <code>value1</code> が値 <code>value2</code> と等しい場合は true、それ以外の場合は false を返します。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "値が指定された型と互換性があるかどうかを判断します。",
        "Documentation.LongDescription": "値が指定された型と互換性があるかどうかを判断します。これは、M の \"is\" 演算子に相当しますが、例外として、識別子型の参照 (Number.Type など) を受け入れることができます。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "数値がタイプ番号と互換性があるかどうかを判断する 2 つの方法を比較します。",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "2 つの値の積を返します。",
        "Documentation.LongDescription": "<code>value1</code> に <code>value2</code> を掛けた積を返します。省略可能な <code>precision</code> パラメーターを指定できます。既定では <code>Precision.Double</code> が使用されます。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "ターゲットに対するクエリを評価します。",
        "Documentation.LongDescription": "<p><code>parameters</code> で指定されているパラメーターと <code>options</code> で指定されているオプションを使用して、<code>query</code> を <code>target</code> に対して評価します。</p>\r\n<p>クエリの出力は <code>target</code> によって定義されています。</p>\r\n<p><code>target</code> によって、<code>query</code> で記述されている操作のコンテキストが提供されます。</p>\r\n<p><code>query</code> は <code>target</code> に対して実行されるクエリを記述します。<code>query</code> は <code>target</code> に特有の形式で表記されます (例: T-SQL ステートメント)。</p>\r\n<p>省略可能な <code>parameters</code> の値には、<code>query</code> で期待されるパラメーター値を提供するため、必要に応じてリストまたはレコードのどちらかを含めることができます。</p>\r\n<p>省略可能な <code>options</code> レコードには、<code>target</code> に対する <code>query</code> の評価動作に影響を及ぼすオプションが含まれる可能性があります。これらのオプションは <code>target</code> に固有です。</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "2 つの値が等しいかどうかを示す値を返します。",
        "Documentation.LongDescription": "引数 '<code>value1</code>', '<code>value2</code>' が NULL であるか、Value.Equals に等しい場合は、NULL を返します。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "入力のメタデータ情報を置き換えます。",
        "Documentation.LongDescription": "入力のメタデータ情報を置き換えます。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "値の型を置き換えます。",
        "Documentation.LongDescription": "<code>value</code> の型を指定された <code>type</code> に置き換えます。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "レコードの既定の型を、より具体的な型に置き換えます。",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "2 つの値の差を返します。",
        "Documentation.LongDescription": "<code>value1</code> と <code>value2</code> の差を返します。省略可能な <code>precision</code> パラメーターを指定できます。既定では <code>Precision.Double</code> が使用されます。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "実行時にバイナリ値として HTTP 要求の実行の結果を返すアクションを作成します。",
        "Documentation.LongDescription": "実行時に、バイナリ値として HTTP を使用して <code>url</code> に対する <code>method</code> 要求の実行結果を返すアクションを作成します。\r\n    追加のプロパティを指定するために、省略可能なレコード パラメーター <code>options</code> を指定できます。レコードには次のフィールドを含めることができます:\r\n    <ul>\r\n<li><code>Query</code> : エスケープを気にせずに、URL にクエリ パラメーターをプログラムで追加します。</li>\r\n<li><code>ApiKeyName</code> : ターゲット サイトに API キーの表記がある場合は、このパラメーターを使用して、URL で使用する必要のあるキー パラメーターの名前 (値ではなく) を指定できます。実際のキー値は資格情報で提供されます。</li>\r\n<li><code>Headers</code> : この値をレコードとして指定すると、HTTP 要求に追加ヘッダーが提供されます。</li>\r\n<li><code>Timeout</code> : この値を期間として指定すると、HTTP 要求のタイムアウトが変更されます。既定値は 100 秒です。</li>\r\n<li><code>ExcludedFromCacheKey</code> : この値を一覧として指定すると、これらの HTTP ヘッダー キーが、データをキャッシュするための計算から除外されます。</li>\r\n<li><code>IsRetry</code> : この論理値を true に指定すると、データをフェッチするときに、キャッシュ内の既存の応答が無視されます。</li>\r\n<li><code>ManualStatusHandling</code> : この値を一覧として指定すると、応答にこれらの状態コードのいずれかが含まれる HTTP 要求で、組み込み処理が回避されます。</li>\r\n<li><code>RelativePath</code> : この値をテキストとして指定すると、要求を作成する前にベース URL に追加されます。</li>\r\n<li><code>Content</code> : この値を指定すると、そのコンテンツが HTTP 要求の本文になります。</li>\r\n</ul>\r\n\r\n    <br>\r\n    この機能はほとんどのコンテキストで無効になっていることに注意してください。代わりに、Web.Contents の使用を検討してください。\r\n",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Bing に対して GET 要求を実行します。",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "加入契約に関連付けられた Azure エンタープライズ REST API エンドポイントの URL を入力します",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Azure エンタープライズ API に指定された URL への呼び出しのバイナリの結果を返します。",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Contents 関数を使用して、特定のレポートの結果を返します。",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "テーブル"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Azure ストレージ資格情報コンテナーから、指定された BLOB のコンテンツを返します。",
        "Documentation.LongDescription": "Azure ストレージ資格情報コンテナーから URL <code>url</code> の BLOB のコンテンツを返します。<code>options</code> は、次のオプションを制御するために指定できます:\r\n    <ul>\r\n<li><code>BlockSize</code> : データ コンシューマーでの待機前に読み取るバイト数。既定値は 4 MB です。</li>\r\n<li><code>RequestSize</code> : サーバーに対する 1 つの HTTP 要求で読み取りを試行するバイト数。既定値は 4 MB です。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests オプションは、並列で実行する要求の数を指定することにより、メモリ使用率を抑えて、データの高速ダウンロードをサポートします。必要なメモリは (ConcurrentRequest * RequestSize) です。既定値は 16 です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Azure Data Lake Storage ファイル システムから指定されたファイルの内容を返します。",
        "Documentation.LongDescription": "Azure Data Lake Storage ファイルシステムから URL <code>url</code> のファイルのコンテンツを返します。<code>options</code> は、次のオプションを制御するために指定できます:\r\n    <ul>\r\n<li><code>BlockSize</code> : データ コンシューマーでの待機前に読み取るバイト数。既定値は 4 MB です。</li>\r\n<li><code>RequestSize</code> : サーバーに対する 1 つの HTTP 要求で読み取りを試行するバイト数。既定値は 4 MB です。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests オプションは、並列で実行する要求の数を指定することにより、メモリ使用率を抑えて、データの高速ダウンロードをサポートします。必要なメモリは (ConcurrentRequest * RequestSize) です。既定値は 16 です。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "バイナリのおおよその長さを返します。",
        "Documentation.LongDescription": "<code>binary</code>内のおおよその長さを返します。または、データ ソースが近似をサポートしていない場合はエラーを返します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "バイナリ値のおおよその長さを取得します。",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "バイナリ値をメモリにバッファー処理します。",
        "Documentation.LongDescription": "バイナリ値をメモリにバッファー処理します。この呼び出しの結果は、安定したバイナリ値です。つまり、長さとバイト順が決まっています。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "バイナリ値の安定したバージョンを作成します。",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "バイナリのリストを結合して 1 つのバイナリにします。",
        "Documentation.LongDescription": "バイナリのリストを結合して 1 つのバイナリにします。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "指定された値からバイナリを作成します",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>binary</code> 値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Binary.From</code> は <code>null</code> を返します。 指定された <code>value</code> が <code>binary</code> の場合、<code>value</code> が返されます。次の型の値を <code>binary</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト表記からの <code>binary</code> 値。詳細については <code>Binary.FromText</code> を参照してください。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1011\"</code> の <code>binary</code> 値を取得します。",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "数値のリストをバイナリ値に変換します。",
        "Documentation.LongDescription": "数値のリストをバイナリ値に変換します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "テキスト形式のデータをバイナリにデコードします。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> をバイナリ (<code>number</code> のリスト) に変換した結果を返します。テキスト値で使用されているエンコードを示すために、<code>encoding</code> を指定することができます。\r\n      <code>encoding</code> には次の <code>BinaryEncoding</code> 値を使用できます。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 エンコード</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 16 進数エンコード</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "\"1011\" をバイナリにデコードします。",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "\"1011\" を 16 進数エンコードのバイナリにデコードします。",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "バイナリ ストリームを読み取り、ストリームのコンテンツの種類と形式の情報を確認しようとしています。",
        "Documentation.LongDescription": "Content.Type フィールドに推定された MIME の種類を含むレコードを返します。\r\n    推定されたコンテンツの種類が text/* であり、エンコードのコード ページが検出された場合は、ストリームのエンコードを含む Content.Encoding フィールドを追加で返します。\r\n    推定されたコンテンツの種類が text/csv であり、形式が区切り記号で区切られている場合は、可能性のある区切り記号を分析したテーブルを含む Csv.PotentialDelimiter フィールドを追加で返します。\r\n    推定されたコンテンツの種類が text/csv であり、形式が固定幅の場合は、可能性のある固定幅の列位置を分析したリストを含む Csv.PotentialPositions フィールドを追加で返します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "文字の数を返します。",
        "Documentation.LongDescription": "文字の数を返します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "バイナリ値を数値のリストに変換します。",
        "Documentation.LongDescription": "バイナリ値を数値のリストに変換します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "バイナリ データをテキスト形式にエンコードします。",
        "Documentation.LongDescription": "数値のバイナリ リスト <code>binary</code> をテキスト値に変換した結果を返します。必要に応じて、生成されるテキスト値に使用されるエンコードを示すために、<code>encoding</code> を指定することができます。\r\n      <code>encoding</code> には次の <code>BinaryEncoding</code> 値を使用できます。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 エンコード</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 16 進数エンコード</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "ビュー (Binary.View を使用) で定義されたハンドラーからスローされた場合にフォールバックをトリガーしない、変更されたエラー レコードを作成します。",
        "Documentation.LongDescription": "ビュー (Binary.View を使用) で定義されたハンドラーからスローされた場合にフォールバックをトリガーしない、変更されたエラー レコードを <code>errorRecord</code> から作成します。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "ビュー (Binary.View を使用) で定義されたハンドラーによりインターセプトすることのできる関数を作成します。",
        "Documentation.LongDescription": "<p><code>Binary.View</code> により作成されたビューで処理できる、<code>function</code> に基づいたビュー関数を作成します。</p>\r\n<p><code>Binary.View</code> の <code>OnInvoke</code> ハンドラーは、ビュー関数のハンドラーを定義するために使用できます。</p>\r\n<p>組み込み操作のハンドラーと同様に、<code>OnInvoke</code> ハンドラーが指定されていない場合、そのハンドラーがビュー関数を処理しない場合、またはそのハンドラーでエラーが発生する場合は、ビューの最上位に対して <code>function</code> が適用されます。</p>\r\n<p><code>Binary.View</code> とカスタム ビュー関数の詳細な説明については、公開されている Power Query カスタム コネクタのドキュメントを参照してください。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "7 ビットの可変長エンコーディングを使用してエンコードされた 64 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "7 ビットの可変長エンコーディングを使用してエンコードされた 64 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "7 ビットの可変長エンコーディングを使用してエンコードされた 64 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "7 ビットの可変長エンコーディングを使用してエンコードされた 64 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "8 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "8 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": ".NET 16 バイト 10 進値を読み取るバイナリ形式です。",
        "Documentation.LongDescription": ".NET 16 バイト 10 進値を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "8 バイト IEEE 倍精度浮動小数点数値を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "8 バイト IEEE 倍精度浮動小数点数値を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "アイテムのシーケンスを読み取ってリストを返すバイナリ形式を返します。",
        "Documentation.LongDescription": "アイテムのシーケンスを読み取って <code>list</code> を返すバイナリ形式を返します。<code>binaryFormat</code> パラメーターは、各アイテムのバイナリ形式を指定します。読み取るアイテムの数を決めるには、次の 3 つの方法があります。<ul><li><code>countOrCondition</code> が指定されていない場合、バイナリ形式は最後のアイテムまで読み取ります。</li><li><code>countOrCondition</code> が数値の場合、バイナリ形式はその数のアイテムを読み取ります。</li><li><code>countOrCondition</code> が関数の場合は、読み取られるアイテムごとに、その関数が呼び出されます。関数は、アイテムの読み取りを続行する場合は true を返し、停止する場合は false を返します。最後のアイテムは、リストに含まれます。</li><li><code>countOrCondition</code> がバイナリ形式である場合は、アイテムの数がリストに先行すると予期され、数の読み取りには指定された形式が使用されます。</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "データの末尾までバイトを読み取ります。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "2 バイトを読み取ります。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "バイト値が 2 以上になるまでバイトを読み取ります。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "0 バイトを読み取り、null を返すバイナリ形式。",
        "Documentation.LongDescription": "0 バイトを読み取り、null を返すバイナリ形式。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "レコードを読み取るバイナリ形式を返します。",
        "Documentation.LongDescription": "レコードを読み取るバイナリ形式を返します。<code>record</code> パラメーターは、レコードの形式を指定します。レコードの各フィールドは、異なるバイナリ形式にすることができます。フィールドにバイナリ形式値でない値が含まれている場合、そのフィールドからはデータが読み取られず、フィールド値は結果にエコーされます。",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "1 つの 16 ビット整数と 1 つの 32 ビット整数を含むレコードを読み取ります。",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "16 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "16 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "32 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "32 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "64 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "64 ビット符号付き整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "4 バイト IEEE 単精度浮動小数点数値を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "4 バイト IEEE 単精度浮動小数点数値を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "テキスト値を読み取るバイナリ形式を返します。",
        "Documentation.LongDescription": "テキスト値を読み取るバイナリ形式を返します。<code>length</code> は、デコードするバイト数か、テキストの前にある長さのバイナリ形式を指定します。省略可能な <code>encoding</code> 値は、テキストのエンコードを指定します。<code>encoding</code> が指定されない場合、エンコードは Unicode のバイト オーダー マークから判断されます。バイト オーダー マークがない場合は、<code>TextEncoding.Utf8</code> が使用されます。",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "2 バイトを ASCII テキストとしてデコードします。",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "バイト単位でのテキストの長さがバイトとしてのテキストの前に表示される ASCII テキストをデコードします。",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "16 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "16 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "32 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "32 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "64 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.LongDescription": "64 ビット符号なし整数を読み取るバイナリ形式です。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "指定された値から 8 ビット整数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から 8 ビット整数の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Byte.From</code> は <code>null</code> を返します。指定された <code>value</code> が 8 ビット整数の範囲内の <code>number</code> で、小数部がない場合には、<code>value</code> が返されます。小数部がある場合には、指定されている端数処理モードで数値が端数処理されます。既定の端数処理モードは <code>RoundingMode.ToEven</code> です。<code>value</code> がそれ以外の型である場合には、<code>Number.FromText</code> を使用して <code>number</code> 値に変換されます。利用可能な端数処理モードについては、<code>Number.Round</code> をご覧ください。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の 8 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> を使用して、<code>\"4.5\"</code> の 8 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "数値をテキスト文字に変換します。",
        "Documentation.LongDescription": "数値に対応する文字を返します。<br>\r\n    <br>\r\n    指定された <code>number</code> は 21 ビットの Unicode コード ポイントである必要があります。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "数値を等価の文字に変換します。",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "文字を数値に変換して、もう一度戻します。",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "\"笑顔\" 絵文字の 16 進数コード ポイントを、同等の UTF-16 サロゲート ペアに変換します。",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "文字を数値に変換します。",
        "Documentation.LongDescription": "<code>character</code> と等価の数値を返します。<br>\r\n    <br>\r\n    結果は、指定された文字またはサロゲート ペアで表される 21 ビットの Unicode コード ポイントになります。\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "文字を等価の数値に変換します。",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "\"笑顔\" 絵文字の UTF-16 サロゲート ペアを同等の 16 進数コード ポイントに変換します。",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "指定された区切り記号を使用してテキストのリストに結合する関数を返します。",
        "Documentation.LongDescription": "指定された区切り記号を使用してテキス値トのリストを 1 つのテキスト値に結合する関数を返します。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "セミコロンの区切り記号を使用して、テキスト値の一覧を結合します。",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "コンマ区切り記号と CSV スタイルの引用符を使用して 2 つの列のテキストを結合します。",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "区切り記号のシーケンスを使用してテキストのリストを結合する関数を返します。",
        "Documentation.LongDescription": "区切り記号のシーケンスを使用して、テキスト値のリストを 1 つのテキスト値に結合する関数を返します。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "セミコロンの区切り記号を使用して、テキスト値のリストを結合します。",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "指定された長さを使用してテキストのリストに結合する関数を返します。",
        "Documentation.LongDescription": "指定された長さを使用してテキス値トのリストを 1 つのテキスト値に結合する関数を返します。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "各入力値から指定された文字数を抽出して、テキスト値のリストを結合します。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "最初に結果にテンプレート テキストを事前に入力した後に、指定された文字数を抽出して、テキスト値のリストを結合します。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "指定された出力位置を使用してテキストのリストに結合する関数を返します。",
        "Documentation.LongDescription": "指定した出力位置を使用して、テキスト値のリストを 1 つのテキスト値に結合する関数を返します。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "指定された位置に出力に配置して、テキスト値のリストを結合します。",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "指定された位置と長さを使用してテキストのリストを結合する関数を返します。",
        "Documentation.LongDescription": "指定された出力位置と長さを使用して、テキスト値のリストを 1 つのテキスト値に結合する関数を返します。長さを null にすると、テキスト値全体を含める必要があることを指定できます。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "指定された出力位置と長さを使用して、テキスト値のリストを結合します。",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "指定されたカルチャと大文字と小文字の区別に基づいて比較関数を返します。",
        "Documentation.LongDescription": "<code>culture</code> を使用し、<code>ignoreCase</code> で指定された大文字と小文字の区別を使用して比較を実行する比較関数を返します。<br>\r\n      <br>\r\n      比較関数は 2 つの引数を承認し、最初の値が 2 番目の値以下であるか、等しいか、大きいかに基づいて -1、0、または 1 を返します。<br>\r\n      <br>\r\n      <code>ignoreCase</code> の既定値は false です。<code>culture</code> は、.NET Framework でサポートされているロケールのいずれかである必要があります (例: \"en-US\")。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "「a」と「A」を、「en-US」ロケールを使用して比較し、値が等しいかどうかを判断します。",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "「a」と「A」を、「en-US」ロケールを使用して比較し、値が等しいかどうかを判断します (大文字と小文字は区別しません)。",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "メンバー プロパティ値から一意のメンバー識別子を返します。",
        "Documentation.LongDescription": "メンバー プロパティ値から一意のメンバー識別子を返します。<code>attribute</code>。その他の値に対しては null を返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "プロパティのキーを返します。",
        "Documentation.LongDescription": "プロパティ <code>property</code> のキーを返します。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "指定された値から通貨の値を返します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>currency</code> 値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Currency.From</code> は <code>null</code> を返します。指定された <code>value</code> が通貨の範囲内の <code>number</code> である場合、<code>value</code> の小数部は、小数点以下 4 桁に端数処理返されます。<code>value</code> が他の型の場合、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換します。有効な通貨の範囲は、<code>-922,337,203,685,477.5808</code> から <code>922,337,203,685,477.5807</code> です。利用可能な端数処理モードについては、<code>Number.Round</code> をご覧ください。既定は、<code>RoundingMode.ToEven</code> です。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.23455\"</code> の <code>currency</code> 値を取得します。",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "<code>RoundingMode.Down</code> を使用して、<code>\"1.23455\"</code> の <code>currency</code> 値を取得します。",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "日付部分を返します。",
        "Documentation.LongDescription": "<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値の日付部分を返します。\r\n      <ul>\r\n        <li><code>dateTime</code>: 日付部分を抽出する <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM という日付と時刻を表す <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値の日付部分を取得します。",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "指定された値の曜日を示す数値 (0 から 6) を返します。",
        "Documentation.LongDescription": "指定された <code>dateTime</code> の曜日を示す数値 (0 から 6) を返します。\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>date</code>、<code>datetime</code>、<code>datetimezone</code> 値。</li>\r\n        <li><code>firstDayOfWeek</code>: どの曜日を週の最初の曜日と見なすかを示す <code>Day</code> 値。使用できる値は、Day.Sunday、Day.Monday、Day.Tuesday、Day.Wednesday、Day.Thursday、Day.Friday、Day.Saturday です。指定しない場合、カルチャに依存する既定値が使用されます。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日曜を週の最初の日として、2011 年 2 月 21 日月曜日で表される曜日を取得します。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "月曜を週の最初の日として、2011 年 2 月 21 日月曜日で表される曜日を取得します。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "曜日名を返します。",
        "Documentation.LongDescription": "指定された <code>date</code> の曜日名を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "曜日名を取得します。",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "年の通算日を表す 1 ～ 366 の数値を返します。",
        "Documentation.LongDescription": "指定された <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値 (<code>dateTime</code>) の、年の通算日を表す数値を返します。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 3 月 1 日の年の日付。",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "月の日数を表す 28 ～ 31 の数値を返します。",
        "Documentation.LongDescription": "<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値 <code>dateTime</code> での月の日数を返します。\r\n <ul>\r\n        <li><code>dateTime</code>: 月の日数が返される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 01)></code> によって表される 12 月の日数です。",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "日付の終わりを返します。",
        "Documentation.LongDescription": "<code>dateTime</code> で表される日付の終わりを返します。タイム ゾーン情報は保持されます。\r\n      <ul>\r\n        <li><code>dateTime</code>: 日付の終わりが計算される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM の日付の終わりを取得します。",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 の日付の終わりを取得します。",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "月の最後の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む月の最後の日付を返します。\r\n      <ul>\r\n        <li><code>dateTime</code>: 月の終わりを計算する <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 の月の終わりを取得します。",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 の月の終わりを取得します。",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "四半期の最後の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む四半期の最後の日付を返します。タイム ゾーン情報は保持されます。\r\n      <ul>\r\n        <li><code>dateTime</code>: 四半期の終わりが計算される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時の四半期の終わりを調べます。",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "週の最後の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む週の最後の日付を返します。\r\nこの関数は、省略可能な <code>Day</code> (<code>firstDayOfWeek</code>) を受け取って、この相対的な計算における週の最初の日を設定します。既定値は <code>Day.Sunday</code> です。\r\n      <ul>\r\n        <li><code>dateTime</code>: 週の最後の日が計算される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[省略可能]</i> 週の最初の日を表す <code>Day.Type</code> 値。指定できる値は、<code>Day.Sunday</code>、<code>Day.Monday</code>、<code>Day.Tuesday</code>、<code>Day.Wednesday</code>、<code>Day.Thursday</code>、<code>Day.Friday</code>、および <code>Day.Saturday.</code> です。既定値は <code>Day.Sunday</code> です。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 の週の終わりを取得します。",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "日曜を週の最初の日として、5/17/2011 05:00:00 PM -7:00 の週の終わりを取得します。",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "年の最後の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む年の最後の日付を、小数秒も含めて返します。タイム ゾーン情報は保持されます。\r\n      <ul>\r\n        <li><code>dateTime</code>: 年の終わりを計算する <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM の年の終わりを取得します。",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 の時間の終わりを取得します。",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "指定された値から日付を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>date</code> 値を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。\r\n指定された <code>value</code> が <code>null</code> の場合、<code>Date.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>date</code> の場合、<code>value</code> が返されます。次の型の値を <code>date</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト形式の表記からの <code>date</code> 値。詳細については <code>Date.FromText</code> を参照してください。</li>\r\n        <li><code>datetime</code>: <code>value</code> の日付部分。</li>\r\n        <li><code>datetimezone</code>: <code>value</code> に相当するローカル datetime の日付部分。</li>\r\n        <li><code>number</code>: <code>value</code> によって表される OLE オートメーション日付に相当する datetime の日付部分。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>43910</code> を <code>date</code> 値に変換します。",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> を <code>date</code> 値に変換します。",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "現地、世界共通、カスタムの日付の形式から日付を作成します。",
        "Documentation.LongDescription": "テキスト形式の表記 <code>text</code> から <code>date</code> 値を作成します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、ベスト エフォートで日付が解析されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31\"</code> を <code>date</code> 値に変換します。",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "イスラム暦の 1400 年の開始に対応するグレゴリオ暦の日付を探します。",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の日付にこの日付が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の日付に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の日付に含まれるかどうかを調べます。",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の月にこの日付が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の月に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の月に含まれるかどうかを調べます。",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の四半期にこの日付が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の四半期に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の四半期に含まれるかどうかを調べます。",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の週にこの日付が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の週に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の週に含まれるかどうかを調べます。",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の年にこの日付が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の年に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の年に含まれるかどうかを調べます。",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "システム上の現在の日時によって決定される次の日に、この date が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の日に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の日付が次の日に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "システム上の現在の日時によって決定される次の月に、この date が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の月に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の月が次の月に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "システム上の現在の日時によって決定される次の四半期に、この date が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の四半期に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の四半期が次の四半期に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "システム上の現在の日時によって決定される次の週に、この date が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の週に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の週が次の週に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "システム上の現在の日時によって決定される次の年に、この date が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の年に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より後の年が次の年に含まれるかどうかを調べます。",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "システム上の現在の日時によって決定される前の日に、この date が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の日に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の日付に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の日付が前の日に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "システム上の現在の日時によって決定される前の月に、この date が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の月に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の月に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の月が前の月に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "システム上の現在の日時によって決定される前の四半期に、この date が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の四半期に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の四半期に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の四半期が前の四半期に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "システム上の現在の日時によって決定される前の週に、この date が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の週に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の週に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の週が前の週に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "システム上の現在の日時によって決定される前の年に、この date が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の年に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の年に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻より前の年が前の年に含まれるかどうかを調べます。",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "システム上の現在の日時によって決定されるとおり、この日付が現在の年内に含まれていて、現在の日付以前であるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定されるとおり、指定された datetime 値 <code>dateTime</code> が現在の年内に含まれていて、現在の日付以前であるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が過去 1 年に含まれるかどうかを調べます。",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "この日付がうるう年に該当するかどうかを示します。",
        "Documentation.LongDescription": "指定された datetime 値 <code>dateTime</code> がうるう年に該当するかどうかを示します。\r\n <ul>\r\n        <li><code>dateTime</code>: 評価される <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2012, 01, 01)</code> によって表されている 2012 年がうるう年かどうかを判断します。",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "月部分を返します。",
        "Documentation.LongDescription": "指定された <code>datetime</code> 値 (<code>dateTime</code>) の月部分を返します。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) で月を調べます。",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "月部分の名前を返します。",
        "Documentation.LongDescription": "指定された <code>date</code> の月部分の名前を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "月の名前を取得します。",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "日付がどの四半期に該当するかを示す数値を返します。",
        "Documentation.LongDescription": "日付 <code>dateTime</code> がどの四半期に該当するかを示す 1 ～ 4 の数値を返します。<code>dateTime</code> は <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値にすることができます。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "日付 #date(2011, 12, 31) がどの四半期に該当するかを調べます。",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "日付の始まりを返します。",
        "Documentation.LongDescription": "<code>dateTime</code> で表される日の始まりを返します。\r\n    <code>dateTime</code> は、<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時の日の始まりを調べます。",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "月の最初の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む月の最初の日付を返します。\r\n    <code>dateTime</code> は <code>date</code> または <code>datetime</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時 10 分 32 秒の月の始まりを調べます。",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "四半期の最初の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む四半期の最初の日付を返します。\r\n    <code>dateTime</code> は、<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時の四半期の始まりを調べます。",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "週の始まりを返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む週の最初の日付を返します。\r\n    <code>dateTime</code> は、<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 11 日火曜日の週の始まりを検索します。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "週の始まりとして月曜日を使用して、2011 年 10 月 11 日火曜日の週の始まりを検索します。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "年の最初の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> を含む年の最初の日付を返します。\r\n    <code>dateTime</code> は、<code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時 10 分 32 秒の年の始まりを調べます。",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "日付値の部分を含むレコードを返します。",
        "Documentation.LongDescription": "指定された date 値 (<code>date</code>) の部分を含むレコードを返します。\r\n <ul>\r\n        <li><code>date</code>: その部分のレコードが計算される <code>date</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 31)</code> 値を、日付値の部分を含むレコードに変換します。",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "日付値のテキスト形式の表記を返します。",
        "Documentation.LongDescription": "<code>date</code> のテキスト形式の表記を返します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>culture</code> は従来のワークフローでのみ使用されます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、<code>Culture</code> によって定義された既定値を使用して日付の形式が設定されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> と <code>culture</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2010, 12, 31)</code> を <code>text</code> 値に変換します。<i>結果出力が現在のカルチャに応じて異なる場合があります。</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "グレゴリオ暦の 2000 年 1 月 1 日に対応するイスラム暦の年を探します。",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "この日付が月のどの週に該当するかを示す、1 ～ 6 の数値を返します。",
        "Documentation.LongDescription": "日付 <code>dateTime</code> が月のどの週に該当するかを示す、1 から 6 の数値を返します。\r\n <ul>\r\n        <li><code>dateTime</code>: 月内の週が特定される <code>datetime</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年では、3 月 15 日がどの週に該当するかを特定します。",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "この日付が年のどの週に該当するかを示す、1 ～ 54 の数値を返します。",
        "Documentation.LongDescription": "日付 <code>dateTime</code> が年内のどの週に該当するかを示す 1 から 54 の数値を返します。\r\n <ul>\r\n        <li><code>dateTime</code>: 年内の週を特定する対象の <code>datetime</code> 値。</li>\r\n        <li><code>firstDayOfWeek</code>: どの曜日を新しい週の開始と見なすかを示す省略可能な <code>Day.Type</code> 値 (例: <code>Day.Sunday</code>)。指定しない場合、カルチャに依存する既定値が使用されます。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 3 月 27 日が年内のどの週に該当するかを特定します。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "週の始まりに月曜日を使用して、2011 年 3 月 27 日が年内のどの週に該当するかを特定します。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "年部分を返します。",
        "Documentation.LongDescription": "指定された <code>datetime</code> 値 (<code>dateTime</code>) の年部分を返します。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) で年を調べます。",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "指定された date、datetime、または datetimezone 値の日付部分を返します。",
        "Documentation.LongDescription": "<code>dateTime</code>、指定された <code>date</code>、<code>datetime</code>、または <code>datetimezone</code> 値の日付部分を返します。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) の日付値を調べます。",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "指定された値から datetime を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>datetime</code> 値を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。\r\n指定された <code>value</code> が <code>null</code> の場合、<code>DateTime.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>datetime</code> の場合、<code>value</code> が返されます。次の型の値を <code>datetime</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト形式の表記からの <code>datetime</code> 値。詳細については <code>DateTime.FromText</code> を参照してください。</li>\r\n        <li><code>date</code>: 日付部分が <code>value</code>、時刻部分が <code>12:00:00 AM</code> の <code>datetime</code>。</li>\r\n        <li><code>datetimezone</code>: <code>value</code> に相当するローカルの <code>datetime</code>。</li>\r\n        <li><code>time</code>: 日付部分が <code>0</code>、時刻部分が <code>value</code> の OLE オートメーション日付に相当する日付 の <code>datetime</code>。</li>\r\n        <li><code>number</code>: <code>value</code> で表される OLE オートメーション日付に相当する <code>datetime</code>。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(06, 45, 12)</code> を <code>datetime</code> 値に変換します。",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "<code>#date(1975, 4, 4)</code> を <code>datetime</code> 値に変換します。",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "64 ビット長の数値から datetime を作成します。",
        "Documentation.LongDescription": "<code>fileTime</code> の値から <code>datetime</code> の値を作成し、ローカル タイム ゾーンに変換します。filetime は Windows ファイル時間値であり、西暦 1601 年 1 月 1 日の深夜 12:00 からの経過時間を 100 ナノ秒間隔で表します。年月日はキリスト紀元で、時刻は協定世界時 (UTC) です。\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> を datetime 値に変換します。",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "現地時間の形式と協定世界時の形式から datetimezone を作成します。",
        "Documentation.LongDescription": "テキスト形式の表記 <code>text</code> から <code>datetime</code> 値を作成します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、ベスト エフォートで日付が解析されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> を datetime 値に変換します。",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00.121212\"</code> を datetime 値に変換します。",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> を datetime 値に変換します。",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "<code>\"20101231T013000\"</code> を datetime 値に変換します。",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の時間に、この datetime が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の時間に、指定された datetime の値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価する <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の時間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の分に、この datetime が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の分に、指定された datetime の値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価する <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の分に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "システム上の現在の日時によって決定される現在の秒に、この datetime が含まれるかどうかを示します。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される現在の秒に、指定された datetime の値 <code>dateTime</code> が含まれるかどうかを示します。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価する <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻が現在の秒に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "システム上の現在の日時によって決定される次の 1 時間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の 1 時間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の時間が次の 1 時間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "システム上の現在の日時によって決定される次の 1 分間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の 1 分間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の分が次の 1 分間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "システム上の現在の日時によって決定される次の 1 秒間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される次の 1 秒間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の次の秒が次の 1 秒間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "システム上の現在の日時によって決定される前の 1 時間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の 1 時間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 時間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の時間が前の 1 時間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "システム上の現在の日時によって決定される前の 1 分間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の 1 分間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 分間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の分が前の 1 分間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "システム上の現在の日時によって決定される前の 1 秒間に、この datetime が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。",
        "Documentation.LongDescription": "システム上の現在の日時によって決定される前の 1 秒間に、指定された datetime 値 <code>dateTime</code> が含まれるかどうかを示します。この関数は、現在の 1 秒間に含まれる値が渡された場合は false を返すことに注意してください。\r\n      <ul>\r\n      <li><code>dateTime</code>: 評価される <code>datetime</code> または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "現在のシステム時刻の前の秒が前の 1 秒間に含まれるかどうかを調べます。",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "指定された datetime 値の時刻部分を返します。",
        "Documentation.LongDescription": "指定された datetime 値 <code>dateTime</code> の時刻部分を返します。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) の時刻値を調べます。",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "datetime 値の部分を含むレコードを返します。",
        "Documentation.LongDescription": "指定された datetime 値 (<code>dateTime</code>) の部分を含むレコードを返します。\r\n <ul>\r\n        <li><code>dateTime</code>: その部分のレコードが計算される <code>datetime</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2011, 12, 31, 11, 56, 2)</code> 値を、日付および時刻値を含むレコードに変換します。",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "datetime 値のテキスト形式の表記を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> のテキスト形式の表記を返します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>culture</code> は従来のワークフローでのみ使用されます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、<code>Culture</code> によって定義された既定値を使用して日付の形式が設定されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> と <code>culture</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2010, 12, 31, 01, 30, 25)</code> を <code>text</code> 値に変換します。<i>結果出力が現在のカルチャに応じて異なる場合があります。</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "ISO 8601 のパターンを使用して変換します。",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "指定された値から datetimezone を作成します。",
        "Documentation.LongDescription": "与えられた <code>value</code> から <code>datetimezone</code> 値を 1 つ返します。オプションの <code>culture</code> を指定することもできます (例: \"en-US\")。\r\n与えられた <code>value</code> が <code>null</code> の場合、<code>DateTimeZone.From</code> は <code>null</code> を返します。与えられた <code>value</code> が <code>datetimezone</code> の場合、<code>value</code> が返されます。次の型の値を <code>datetimezone</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト形式の表記からの <code>datetimezone</code> 値。詳細については <code>DateTimeZone.FromText</code> を参照してください。</li>\r\n        <li><code>date</code>: 日付部分が <code>value</code>、時刻部分が <code>12:00:00 AM</code>、オフセットがローカル タイム ゾーンに対応する <code>datetimezone</code>。</li>\r\n        <li><code>datetime</code>: datetime として<code>value</code>を伴い、オフセットがローカル タイム ゾーンに対応する <code>datetimezone</code>。</li>\r\n        <li><code>time</code>: 日付部分が <code>0</code>、時刻部分が <code>value</code>、オフセットがローカル タイム ゾーンに対応する OLE Automation Date に相当する日付の <code>datetimezone</code>。</li>\r\n        <li><code>number</code>: <code>value</code> で表される OLE Automation Date に相当する datetime で、オフセットがローカル タイム ゾーンに対応する <code>datetimezone</code>。</li>\r\n      </ul>\r\n<code>value</code> が他の任意の型の場合は、エラーが返されます。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2020-10-30T01:30:00-08:00\"</code> を <code>datetimezone</code> 値に変換します。",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "64 ビット長の数値から datetimezone を作成します。",
        "Documentation.LongDescription": "<code>fileTime</code> の値から <code>datetimezone</code> の値を作成し、ローカル タイム ゾーンに変換します。filetime は Windows ファイル時間値であり、西暦 1601 年 1 月 1 日の深夜 12:00 からの経過時間を 100 ナノ秒間隔で表します。年月日はキリスト紀元で、時刻は協定世界時 (UTC) です。\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> を datetimezone 値に変換します。",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "現地、世界共通、カスタムの datetimezone 形式から datetimezone を作成します。",
        "Documentation.LongDescription": "テキスト形式の表記 <code>text</code> から <code>datetimezone</code> 値を作成します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、ベスト エフォートで日付が解析されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00-08:00\"</code> を <code>datetimezone</code> 値に変換します。",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "ISO 8601 を使用して変換します。",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "指定された datetimezone 値からタイム ゾーン情報を削除します。",
        "Documentation.LongDescription": "<code>dateTimeZone</code> からタイム ゾーン情報が削除された #datetime 値を返します。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "値 #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) からタイム ゾーン情報を削除します。",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "タイム ゾーン部分をローカル タイム ゾーンに変換します。",
        "Documentation.LongDescription": "datetimezone 値 <code>dateTimeZone</code> のタイム ゾーン情報をローカル タイム ゾーン情報に変更します。\r\n    <code>dateTimeZone</code> にタイム ゾーン部分がない場合は、ローカル タイム ゾーン情報が追加されます。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) のタイム ゾーン情報をローカル タイム ゾーン (PST を想定) に変更します。",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "datetimezone 値の部分を含むレコードを返します。",
        "Documentation.LongDescription": "指定された datetimezone 値 (<code>dateTimeZone</code>) の部分を含むレコードを返します。\r\n <ul>\r\n        <li><code>dateTimeZone</code>: その部分のレコードが計算される <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> 値を、日付、時刻、およびゾーン値を含むレコードに変換します。",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "datetimezone 値のテキスト形式の表記を返します。",
        "Documentation.LongDescription": "<code>dateTimeZone</code> のテキスト形式の表記を返します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>culture</code> は従来のワークフローでのみ使用されます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。詳細については、https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、<code>Culture</code> によって定義された既定値を使用して日付の形式が設定されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が使用する既定の形式を制御します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> と <code>culture</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> を <code>text</code> 値に変換します。<i>結果出力が現在のカルチャに応じて異なる場合があります。</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "ISO 8601 のパターンを使用して変換します。",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "タイム ゾーン部分を UTC タイム ゾーンに変換します。",
        "Documentation.LongDescription": "datetime 値 <code>dateTimeZone</code> のタイム ゾーン情報を UTC またはグリニッジ標準時タイム ゾーン情報に変更します。\r\n    <code>dateTimeZone</code> にタイム ゾーン部分がない場合は、UTC タイム ゾーン情報が追加されます。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) のタイム ゾーン情報を UTC タイム ゾーンに変更します。",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "値のタイム ゾーンを変更します。",
        "Documentation.LongDescription": "値のタイム ゾーンを変更します。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "値のタイム ゾーンを変更します。",
        "Documentation.LongDescription": "値のタイム ゾーンを変更します。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "指定された値から 10 進数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から10 進型の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Double.From</code> は <code>null</code> を返します。指定された <code>value</code> が 10 進型の範囲内の <code>number</code> である場合、<code>value</code> が返され、それ以外の場合にはエラーが返されます。<code>value</code> がそれ以外の型である場合には、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4.5\"</code> の 10 進数の <code>number</code> 値を取得します。",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Delta Lake テーブルの内容を返します。",
        "Documentation.LongDescription": "Delta Lake テーブルの内容を返します。",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "指定された値から Double (倍精度浮動小数点数) を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から倍精度浮動小数点型の <code>number</code> 値を作成します。指定された <code>value</code> が <code>null</code> である場合、<code>Double.From</code> は <code>null</code> を返します。指定された <code>value</code> が倍精度浮動小数点型の範囲内の <code>number</code> である場合、<code>value</code> が返され、それ以外の場合にはエラーが返されます。<code>value</code> がそれ以外の型である場合には、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の Double の <code>number</code> 値を取得します。",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "期間の日数の部分を返します。",
        "Documentation.LongDescription": "<code>duration</code>の日数の部分を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "2 つの日付の間の日数を抽出します。",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "指定された値から期間を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>duration</code> 値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Duration.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>duration</code> の場合、<code>value</code> が返されます。次の型の値を <code>duration</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト表記の経過時間形式 (d.h:m:s) からの <code>duration</code> 値。詳細については <code>Duration.FromText</code> を参照してください。</li>\r\n        <li><code>number</code>: <code>value</code> で表される整数と小数の日数に相当する <code>duration</code>。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>2.525</code> を <code>duration</code> 値に変換します。",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "テキスト表記の経過時間形式 (d.h:m:s) から期間値を返します。",
        "Documentation.LongDescription": "指定されたテキスト <code>text</code> から duration 値を返します。この関数では、以下の形式を解析できます。\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (範囲はどれも両端を含みます)<br>\r\n        ddd: 日数です。<br>\r\n        hh: 0 から 23 までの時間を表す数字です。<br>\r\n        mm: 0 から 59 までの分を表す数字です。<br>\r\n        ss: 0 から 59 までの秒を表す数字です。<br>\r\n        ff: 0 から 9999999 までの秒の少数部分を表す数字です。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2.05:55:20\"</code> を <code>duration</code> 値に変換します。",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "期間の時間の部分を返します。",
        "Documentation.LongDescription": "<code>duration</code>の時間の部分を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値から時間を抽出します。",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "期間の分の部分を返します。",
        "Documentation.LongDescription": "<code>duration</code> の分の部分を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値から分を抽出します。",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "期間の秒の部分を返します。",
        "Documentation.LongDescription": "<code>duration</code> の秒の部分を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値から秒を抽出します。",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "期間の部分を含むレコードを返します。",
        "Documentation.LongDescription": "duration 値 <code>duration</code> の部分を含むレコードを返します。\r\n  <ul>\r\n        <li><code>duration</code>: レコードの作成元になる <code>duration</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> を、その部分のレコードに変換します。これには、日、時間、分、および秒が含まれます (該当する場合)。",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "\"d.h:m:s\" という形式のテキストを返します。",
        "Documentation.LongDescription": "特定の期間の値 <code>duration</code> を \"day.hour:mins:sec\" 形式のテキスト形式表記で返します。\r\n <ul>\r\n        <li><code>duration</code>: テキスト形式表記が計算される<code>期間</code>。</li>\r\n  <li><code>format</code>: <i>[省略可能]</i> 推奨されません。NULL 値でない場合はエラーをスローします</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> をテキスト値に変換します。",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "この期間に含まれる合計日数を返します。",
        "Documentation.LongDescription": "<code>duration</code> が割り当てられた合計日数を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値が割り当てられた合計日数を検索します。",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "この期間に含まれる合計時間数を返します。",
        "Documentation.LongDescription": "<code>duration</code> が割り当てられた合計時間数を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値が割り当てられた合計時間数を検索します。",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "この期間に含まれる合計分数を返します。",
        "Documentation.LongDescription": "<code>duration</code> が割り当てられた合計分数を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値が割り当てられた合計分数を検索します。",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "この期間に含まれる合計秒数を返します。",
        "Documentation.LongDescription": "<code>duration</code> が割り当てられた合計秒数を返します。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "期間の値が割り当てられた合計秒数を検索します。",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "理由、メッセージ、および詳細の指定されたテキスト値からエラー レコードを返します。",
        "Documentation.LongDescription": "理由、メッセージ、および詳細の指定されたテキスト値からエラー レコードを返します。",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "定数値の M ソース コード表現を返します。",
        "Documentation.LongDescription": "定数値の M ソース コード表現を返します。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "数値の M ソース コード表現を取得します。",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "日付値の M ソース コード表現を取得します。",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "テキスト値の M ソース コード表現を取得します。",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "M 式の評価結果を返します。",
        "Documentation.LongDescription": "M 式 <code>document</code> の評価結果を返します。参照できる使用可能な識別子は <code>environment</code> によって定義されます。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "単純な合計を評価します。",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "複雑な合計を評価します。",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "テキスト値と識別子の連結を評価します。",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "識別子の M ソース コード表現を返します。",
        "Documentation.LongDescription": "識別子 <code>name</code> の M ソース コード表現を返します。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "識別子の M ソース コード表現を取得します。",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "空白を含む識別子の M ソース コード表現を取得します。",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "指定されたファイルの内容をバイナリとして返します。",
        "Documentation.LongDescription": "ファイルのコンテンツをバイナリの <code>path</code> として返します。<code>options</code> パラメーターは現在、内部使用のみを目的としています。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "特定の関数がデータ ソースと見なされるかどうかを返します。",
        "Documentation.LongDescription": "<code>function</code> がデータ ソースと見なされるかどうかを返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "地理的な値を表すテキストを、Well-Known Text (WKT) 形式から構造化されたレコードに変換します。",
        "Documentation.LongDescription": "地理的な値を表すテキストを、Well-Known Text (WKT) 形式から構造化されたレコードに変換します。WKT は、Open Geospatial Consortium (OGC) によって定義された標準形式であり、SQL Server を含むデータベースで使用される典型的なシリアル化形式です。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "構造化された地理的ポイントの値を Well-Known Text (WKT) の表記に変換します。",
        "Documentation.LongDescription": "構造化された地理的ポイントの値を Open Geospatial Consortium (OGC) によって定義された Well-Known Text (WKT) の表記、また、SQL Server を含む多くのデータベースで使用されるシリアル化形式に変換します。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "幾何学的な値を表すテキストを、Well-Known Text (WKT) 形式から構造化されたレコードに変換します。",
        "Documentation.LongDescription": "幾何学的な値を表すテキストを、Well-Known Text (WKT) 形式から構造化されたレコードに変換します。WKT は、Open Geospatial Consortium (OGC) によって定義された標準形式であり、SQL Server を含むデータベースで使用される典型的なシリアル化形式です。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "構造化された幾何学的ポイントの値を Well-Known Text (WKT) の表記に変換します。",
        "Documentation.LongDescription": "構造化された幾何学的ポイントの値を Open Geospatial Consortium (OGC) によって定義された Well-Known Text (WKT) の表記、また、SQL Server を含む多くのデータベースで使用されるシリアル化形式に変換します。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "指定された値から GUID 値を返します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>Guid.Type</code> の値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Guid.From</code> は <code>null</code> を返します。 指定された <code>value</code> が使用可能な形式かどうかを判断するためのチェックが行われます。使用可能な形式については例をご覧ください。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID は、連続した 32 文字の 16 進数として指定できます。",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID は、ハイフンで区切られた 8-4-4-4-12 のブロックで、32 文字の 16 進数として指定できます。",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID は、ハイフンで区切られ、中かっこで囲まれた 32 文字の 16 進数として指定できます。",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID は、ハイフンで区切られ、かっこで囲まれた 32 文字の 16 進数として指定できます。",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "指定された値から 16 ビット整数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から 16 ビット整数の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Int16.From</code> は <code>null</code> を返します。 指定された <code>value</code> が 16 ビット整数の範囲内の <code>number</code> で、小数部がない場合には、<code>value</code> が返されます。小数部がある場合には、指定されている端数処理モードで数値が端数処理されます。既定の端数処理モードは <code>RoundingMode.ToEven</code> です。<code>value</code> がそれ以外の種類である場合には、<code>Number.FromText</code> を使用して、まずは <code>number</code> 値に変換されます。利用可能な端数処理モードについては、<code>Number.Round</code> をご覧ください。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の 16 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> を使用して、<code>\"4.5\"</code> の 16 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "指定された値から 32 ビット整数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から 32 ビット整数の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Int32.From</code> は <code>null</code> を返します。 指定された <code>value</code> が 32 ビット整数の範囲内の <code>number</code> で、小数部がない場合には、<code>value</code> が返されます。小数部がある場合には、指定されている端数処理モードで数値が端数処理されます。既定の端数処理モードは <code>RoundingMode.ToEven</code> です。指定された <code>value</code> がそれ以外の種類である場合には、まずは <code>Number.FromText</code> を使用して <code>number</code> 値に変換します。利用可能な端数処理モードについては、<code>Number.Round</code> を参照してください。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の 32 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> を使用して、<code>\"4.5\"</code> の 32 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "指定された値から 64 ビットの整数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から 64 ビット整数の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Int64.From</code> は <code>null</code> を返します。指定された <code>value</code> が 64 ビット整数の範囲内の <code>number</code> で、小数部がない場合には、<code>value</code> が返されます。小数部がある場合には、指定されている端数処理モードで数値が端数処理されます。既定の端数処理モードは <code>RoundingMode.ToEven</code> です。<code>value</code> がそれ以外の種類の場合、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換されます。利用可能な端数処理モードについては、<code>Number.Round</code> をご覧ください。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>number</code> 値が <code>\"4\"</code> の 64 ビットの整数を取得します。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> を使用して、<code>\"4.5\"</code> の 64 ビットの整数 <code>number</code> を取得します。",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "指定された値から符号付き 8 ビット整数を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から符号付き 8 ビット整数の <code>number</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Int8.From</code> は <code>null</code> を返します。 指定された <code>value</code> が符号付き 8 ビット整数の範囲内の <code>number</code> で、小数部がない場合には、<code>value</code> が返されます。小数部がある場合には、指定されている端数処理モードで数値が端数処理されます。既定の端数処理モードは <code>RoundingMode.ToEven</code> です。<code>value</code> がそれ以外の種類である場合には、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換されます。利用可能な端数処理モードについては、<code>Number.Round</code> を参照してください。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の符号付き 8 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> を使用して、<code>\"4.5\"</code> の符号付き 8 ビット整数 <code>number</code> 値を取得します。",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "関数の本文の抽象構文ツリー (AST) を返します。",
        "Documentation.LongDescription": "<p><i>item expression</i> に正規化された <code>function</code> の本文の抽象構文ツリー (AST) を返します:\r\n<ul>\r\n  <li>関数は 1 引数ラムダである必要があります。</li>\r\n  <li>関数パラメーターへのすべての参照は <code>ItemExpression.Item</code> と置き換えられます。</li>\r\n  <li>AST は次の種類のノードだけを含むように簡素化されます:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> の本文に対して item 式の AST が返されない場合は、エラーが発生します。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "関数 <code>each _ <> null</code> の本文の AST を返します",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "JSON ドキュメントの内容を返します。",
        "Documentation.LongDescription": "JSON ドキュメントの内容を返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "指定された値の JSON 表現を生成します。",
        "Documentation.LongDescription": "<p><code>encoding</code> で指定したテキスト コーディングで指定した値 <code>value</code> の JSON 表記を生成します。<code>encoding</code> が省略される場合は UTF8 が使用されます。ビジュアルは次のように表されます:</p>\r\n <ul>\r\n        <li>Null、テキストおよび論理の値は対応する JSON 型 として表されます。</li>\r\n        <li>数値は JSON内の数値として表されます。ただし、<code>#infinity</code>、<code>-#infinity</code> および <code>#nan</code> は null に変換されます。</li>\r\n        <li>リストは JSON アレイとして表されます</li>\r\n        <li>レコードは JSON オブジェクトとして表されます</li>\r\n        <li>テーブルはオブジェクトのアレイとして表されます</li>\r\n        <li>日付、時間、日時、日付タイムゾーンおよび期間は ISO-8601 テキストとして表されます</li>\r\n        <li>バイナリ値はエンコードされた Base 64 テキストとして表されます</li>\r\n        <li>型と関数はエラーを生成します</li>\r\n </ul>\r\n",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "複合値を JSON に変換します。",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "バイナリ値を、改行で分割されたテキスト値のリストに変換します。引用符のスタイルで指定すると、改行は引用符で囲まれて表示されることがあります。includeLineSeparators が true の場合、改行文字はテキストに含まれます。",
        "Documentation.LongDescription": "バイナリ値を、改行で分割されたテキスト値のリストに変換します。引用符のスタイルで指定すると、改行は引用符で囲まれて表示されることがあります。includeLineSeparators が true の場合、改行文字はテキストに含まれます。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "テキスト値を、改行で分割されたテキスト値のリストに変換します。includeLineSeparators が true の場合、改行文字はテキストに含まれます。",
        "Documentation.LongDescription": "テキスト値を、改行で分割されたテキスト値のリストに変換します。includeLineSeparators が true の場合、改行文字はテキストに含まれます。\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (既定値) 引用符の動作は必要ありません。</li>\r\n            <li><code>QuoteStyle.Csv:</code> 引用符は CSV に従います。二重引用符文字は、該当の領域を囲むために使用されます。また、二重引用符文字のペアは、該当する地域内で 1 つの二重引用符文字を囲むために使用します。</li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "指定されたエンコードと lineSeparator を使用して、テキストのリストをバイナリ値に変換します。指定された lineSeparator は、各行に追加されます。指定されない場合は、復帰文字と改行文字が使用されます。",
        "Documentation.LongDescription": "指定されたエンコードと lineSeparator を使用して、テキストのリストをバイナリ値に変換します。指定された lineSeparator は、各行に追加されます。指定されない場合は、復帰文字と改行文字が使用されます。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "テキストのリストを 1 つのテキストに変換します。指定された lineSeparator は、各行に追加されます。指定されない場合は、復帰文字と改行文字が使用されます。",
        "Documentation.LongDescription": "テキストのリストを 1 つのテキストに変換します。指定された lineSeparator は、各行に追加されます。指定されない場合は、復帰文字と改行文字が使用されます。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "すべての式が true の場合に true を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内のすべての式が true の場合に true を返します。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {true, true, 2 > 0} 内のすべての式が true かどうかを判断します。",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "リスト {true, true, 2 < 0} 内のすべての式が true かどうかを判断します。",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "いずれかの式が true の場合に true を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内のいずれかの式が true の場合に true を返します。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {true, false, 2 > 0} 内のいずれかの式が true かどうかを判断します。",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "リスト {2 = 0, false, 2 < 0} 内のいずれかの式が true かどうかを判断します。",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "値の平均を返します。数、日付、日時、日付タイムゾーン、および期間の値に対して有効です。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の項目の平均値を返します。結果はリスト内の値と同じデータ型で返されます。数、日付、時刻、日時、日付タイムゾーン、および期間の値に対してのみ有効です。\r\n    リストが空の場合、NULL が返されます。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "数値のリスト <code>{3, 4, 6}</code> の平均を求めます。",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "2011 年 1 月 1 日、2011 年 1 月 2 日、および 2011 年 1 月 3 日の日付値の平均を求めます。",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "リストをバッファー処理します。",
        "Documentation.LongDescription": "リスト <code>list</code> をメモリにバッファー処理します。この呼び出しの結果は、安定したリストです。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1..10} の安定したコピーを作成します。",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "複数のリストを組み合わせて 1 つのリストを返します。",
        "Documentation.LongDescription": "一連のリスト <code>lists</code> を受け取り、それらを 1 つの新しいリストにマージします。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} と {3, 4} の 2 つの単純なリストを結合します。",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "{1, 2} と {3, {4, 5}} の 2 つのリストを結合します。1 つのリストには入れ子になったリストが含まれています。",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "リスト内の項目の数を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の項目の数を返します。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} 内の値の数を求めます。",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "重複が削除された値のリストを返します。",
        "Documentation.LongDescription": "重複が削除された、リスト <code>list</code> 内のすべての値を含むリストを返します。リストが空の場合、結果は空のリストになります。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 1, 2, 3, 3, 3} から重複を削除します。",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "リスト内の最初の値を返します。リストが空の場合、指定された既定値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最初の項目を返します。リストが空の場合、省略可能な既定値 <code>defaultValue</code> を返します。\r\n    リストが空で、かつ既定値が指定されていない場合、この関数は <code>null</code> を返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} 内の最初の値を求めます。",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "リスト {} 内の最初の値を求めます。リストが空の場合、-1 を返します。",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "入力内に見つかったリスト値の積集合を返します。",
        "Documentation.LongDescription": "入力リスト <code>lists</code> 内に見つかったリスト値の積集合を返します。省略可能なパラメーター <code>equationCriteria</code> を指定できます。",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1..5}、{2..6}、{3..7} の各リストの積集合を求めます。",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "リストに重複があるかどうかを示します。",
        "Documentation.LongDescription": "リスト <code>list</code> に重複があるかどうかを示す論理値を返します。リストが一意の場合は <code>true</code>、重複する値がある場合は <code>false</code> を返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} が一意 (重複がない) かどうかを調べます。",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2, 3, 3} が一意 (重複がない) かどうかを調べます。",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "リストが空の場合、true を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> に値が含まれない場合 (長さが 0 の場合)、<code>true</code> を返します。リストに値が含まれる場合 (長さ > 0 の場合)、<code>false</code> を返します。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "リスト {} が空かどうかを調べます。",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "リスト {1, 2} が空かどうかを調べます。",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "リスト内の最後の値を返します。リストが空の場合、指定された既定値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最後の項目を返します。リストが空の場合、省略可能な既定値 <code>defaultValue</code> を返します。\r\n    リストが空で、かつ既定値が指定されていない場合、この関数は <code>null</code> を返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3} 内の最後の値を求めます。",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "リスト {} 内の最後の値を求めます。リストが空の場合、-1 を返します。",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "リスト内の最後の値を返します。必要に応じて、返される値の数または条件を指定できます。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最後の項目を返します。リストが空の場合、例外がスローされます。\r\n この関数は、複数の項目の収集または項目のフィルター処理をサポートする省略可能なパラメーター <code>countOrCondition</code> を受け取ります。<code>countOrCondition</code> は、次の 3 つの方法で指定できます。\r\n <ul>\r\n  <li>数値を指定した場合、その数までの項目が返されます。</li>\r\n  <li>条件を指定した場合、リストの末尾から処理が開始され、その条件を満たすすべての項目が返されます。条件を満たさない項目があると、それ以降の項目は考慮されません。</li>\r\n  <li>このパラメーターが NULL の場合、リスト内の最後の項目が返されます。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {3, 4, 5, -1, 7, 8, 2} 内の最後の値を求めます。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "リスト {3, 4, 5, -1, 7, 8, 2} 内の、0 を超える最後の値を求めます。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "最大値または空のリストの既定値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最大の項目を返します。リストが空の場合、省略可能な既定値 <code>default</code> を返します。\r\n    省略可能な comparisonCriteria 値 <code>comparisonCriteria</code> を指定して、リスト内の項目を比較する方法を決定することができます。このパラメーターが null の場合、既定の比較関数が使用されます。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 4, 7, 3, -2, 5} 内の最大値を求めます。",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "リスト {} 内の最大値を求めます。リストが空の場合、-1 を返します。",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "リストの中央値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> の中央項目を返します。<code>null</code> 以外の値がリストに含まれていない場合、この関数は <code>null</code> を返します。\r\n    項目の数が偶数個の場合、2 つの中央項目のうち小さい方の値が選択されます。ただし、リストが日時、期間、数字、時刻だけで\r\n    構成されている場合は例外であり、その場合は 2 つの項目の平均を返します。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{5, 3, 1, 7, 9}</code> の中央を求めます。",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "最小値または空のリストの既定値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の最小の項目を返します。リストが空の場合、省略可能な既定値 <code>default</code> を返します。\r\n    省略可能な comparisonCriteria 値 <code>comparisonCriteria</code> を指定して、リスト内の項目を比較する方法を決定することができます。このパラメーターが null の場合、既定の比較関数が使用されます。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 4, 7, 3, -2, 5} 内の最小値を求めます。",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "リスト {} 内の最小値を求めます。リストが空の場合、-1 を返します。",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "リスト内で出現回数が最も多い値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内で出現回数が最も多い項目を返します。リストが空の場合、例外がスローされます。出現回数が最も多い項目が複数ある場合、最後の項目が選択されます。\r\n    省略可能な <code>comparisonCriteria</code> 値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{\"A\", 1, 2, 3, 3, 4, 5}</code> 内で出現回数が最も多い項目を求めます。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "リスト <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 内で出現回数が最も多い項目を求めます。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "リスト内で出現回数が最も多い値のリストを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内で出現回数が最も多い項目を返します。リストが空の場合、例外がスローされます。出現回数が最も多い項目が複数ある場合、最後の項目が選択されます。\r\n    省略可能な <code>comparisonCriteria</code> 値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 内で出現回数が最も多い項目を求めます。",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "リスト内の NULL 以外の項目の数を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の NULL 以外の項目の数を返します。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "入力のオフセットのリストを返します。",
        "Documentation.LongDescription": "入力リスト <code>list</code> のオフセットのリストを返します。\r\n    List.Transform を使用してリストを変更するとき、位置のリストを使用して、位置への変換アクセスを指定できます。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, 4, null, 5} 内の値のオフセットを求めます。",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "リスト内の数の積を返します。",
        "Documentation.LongDescription": "リスト <code>numbersList</code> 内の NULL 以外の数の積を返します。リストに NULL 以外の値がない場合、NULL を返します。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{1, 2, 3, 3, 4, 5, 5}</code> 内の数の積を求めます。",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "乱数のリストを返します。",
        "Documentation.LongDescription": "指定された生成する値の数と省略可能なシード値に基づいて、0 から 1 までの範囲の乱数のリストを返します。\r\n<ul>\r\n   <li><code>count</code>: 生成する乱数の数。</li>\r\n   <li><code>seed</code>: <i>[省略可能]</i> 乱数ジェネレーターでシードを設定するために使用する数値。省略した場合、この関数を呼び出すたびに乱数の一意のリストが生成されます。数と共にシード値を指定した場合、この関数を呼び出すたびに同じ乱数のリストが生成されます。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "3 つの乱数を含むリストを作成します。",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "シード値を指定して、3 つの乱数を含むリストを作成します。",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "リストの先頭から指定された数の要素をスキップした結果のリストを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> の最初の要素を削除したリストを返します。<code>list</code> が空のリストの場合は、空のリストが返されます。\r\nこの関数は、オプション パラメーター <code>countOrCondition</code> を受け取り、次に示すような複数の値の削除をサポートします。\r\n<ul>\r\n<li>数値を指定すると、最大でその数値分の項目が削除されます。</li>\r\n<li>条件が指定されている場合、<code>list</code> の先頭で連続して一致する項目はすべて削除されます。</li>\r\n<li>このパラメーターが null の場合、既定の動作が行われます。 </li>\r\n</ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} から最初の 3 つの数を削除したリストを作成します。",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} から、3 未満の数で始まるリストを作成します。",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "リストの末尾から指定された数の要素を削除した結果のリストを返します。",
        "Documentation.LongDescription": "リスト<code>list</code> の末尾から <code>countOrCondition</code> 個の要素を削除したリストを返します。<code>list</code> が <code>countOrCondition</code> 個未満の要素しか含まれていない場合は、空のリストが返されます。\r\n<ul>\r\n<li>数値を指定すると、最大でその数値分の項目が削除されます。</li>\r\n<li>条件が指定されている場合、<code>list</code> の末尾にある連続した一致する項目はすべて削除されます。</li>\r\n<li>このパラメーターが null の場合、削除される項目は 1 つだけです。 </li>\r\n</ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} から末尾の 3 つの数を削除したリストを作成します。",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "{5, 4, 2, 6, 4} から、3 未満の数で終わるリストを作成します。",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "指定されたリストからすべての \"null\" 値を削除します。",
        "Documentation.LongDescription": "<code>list</code> 内の \"null\" 値のすべての出現を削除します。リストに \"null\" 値が存在しない場合、元のリストが返されます。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "リスト {1, 2, 3, null, 4, 5, null, 6} から \"null\" 値を削除します。",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "リスト内の値の順序を反転します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の値の順序が反転されたリストを返します。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1..10} の順序が反転されたリストを作成します。",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "長さが 1 のリストに対して 1 つのリスト項目を返し、それ以外の場合は例外をスローします。",
        "Documentation.LongDescription": "リスト <code>list</code> に含まれる項目が 1 つしかない場合は、その項目を返します。\r\n    複数の項目が存在するか、リストが空の場合、この関数は例外をスローします。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1} 内の単独の値を求めます。",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "リスト {1, 2, 3} 内の単独の値を求めます。",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "長さが 1 のリストに対して 1 つのリスト項目を返し、空のリストに対しては既定値を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> に含まれる項目が 1 つしかない場合は、その項目を返します。\r\n    リストが空で、かつ省略可能な <code>default</code> が指定されていない場合、この関数は NULL を返します。リストに複数の項目が含まれている場合、この関数はエラーを返します。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "リスト {1} 内の単独の値を求めます。",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "リスト {} 内の単独の値を求めます。",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "リスト {} 内の単独の値を求めます。空の場合は、-1 を返します。",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "リストの先頭から指定された数の要素をスキップした結果のリストを返します。",
        "Documentation.LongDescription": "リスト <code>list</code> の最初の要素をスキップしたリストを返します。<code>list</code> が空のリストの場合は、空のリストが返されます。\r\nこの関数は、オプション パラメーター<code>countOrCondition</code> を受け取り、次に示すような複数の値のスキップをサポートします。\r\n<ul>\r\n<li>数値を指定すると、最大でその数値分の項目がスキップされます。</li>\r\n<li>条件が指定されている場合、<code>list</code> の先頭で連続して一致する項目はすべてスキップされます。</li>\r\n<li>このパラメーターが null の場合、既定の動作が行われます。 </li>\r\n</ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} から最初の 3 つの数を削除したリストを作成します。",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} から、3 未満の数で始まるリストを作成します。",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "指定された条件に従ってデータのリストを並べ替えます。",
        "Documentation.LongDescription": "省略可能な指定された条件に従ってデータのリスト <code>list</code> を並べ替えます。\r\n    省略可能なパラメーター <code>comparisonCriteria</code> は、比較条件として指定できます。次の値を指定できます。\r\n    <ul>\r\n    <li> 順序を制御するには、比較条件に Order 列挙値を指定できます (<code>Order.Descending</code>、<code>Order.Ascending</code>)。</li>\r\n    <li> 並べ替えに使用するキーを計算するには、1 つの引数を指定した関数を使用できます。</li>\r\n    <li> キーを選択し、さらに順序を制御するには、比較条件にキーと順序を含むリスト (<code>{each 1 / _, Order.Descending}</code>) を使用できます。</li>\r\n    <li> 完全に比較を制御するには、2 つの引数の関数を使用できます。この関数には、リストから 2 つのアイテム（任意の 2 つのアイテム、任意の順序）が渡されます。 この関数は、次のいずれかの値を返す必要があります:\r\n        <ul>\r\n            <li> <code>-1</code>: 最初のアイテムが 2 番目のアイテムよりも小さい。</li>\r\n            <li> <code>0</code>: アイテムは同じです。</li>\r\n            <li> <code>1</code>: 最初のアイテムが 2 番目のアイテムよりも大きいです。</li>\r\n        </ul>\r\nValue.Compare は、このロジックをデリゲートするために使用できるメソッドです。</li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "リスト {2, 3, 1} を並べ替えます。",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "リスト {2, 3, 1} を降順に並べ替えます。",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Value.Compare メソッドを使用してリスト {2, 3, 1} を降順に並べ替えます。",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "標本に基づいて予測した標準偏差を返します。",
        "Documentation.LongDescription": "リスト <code>numbersList</code> の値の、標本に基づいて予測した標準偏差を返します。\r\n    <code>numbersList</code> が数値のリストの場合は、数値が返されます。\r\n    リストが空の場合や、リスト内の項目が <code>number</code> 型でない場合は、例外がスローされます。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "1 ～ 5 の数の標準偏差を求めます。",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "リスト内の項目の合計を返します。",
        "Documentation.LongDescription": "リスト <code>list</code> 内の NULL 以外の値の合計を返します。リストに NULL 以外の値がない場合、NULL を返します。",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{1, 2, 3}</code> 内の数の合計を求めます。",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "入力内に見つかったリスト値の和集合を返します。",
        "Documentation.LongDescription": "リスト <code>lists</code> のリストを受け取って個々のリスト内の項目の和集合を計算し、それを出力リストとして返します。その結果、返されるリストには、すべての入力リストのすべての項目が含まれます。\r\n    この操作は、従来のバッグ セマンティクスを維持するため、重複値が Union の一部として照合されます。\r\n    省略可能な数式条件値 <code>equationCriteria</code> を指定して、値が等しいかどうかのテストを制御できます。",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "リスト {1..5}、{2..6}、{3..7} の和集合を作成します。",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "複数のリストで同じ位置にある項目を結合することによって、リストのリストを返します。",
        "Documentation.LongDescription": "リストのリスト <code>lists</code> を取り、同じ位置にある項目を結合したリストのリストを返します。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "2 つのシンプルなリスト {1, 2} と {3, 4} を zip 圧縮します。",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "長さが異なる 2 つのシンプルなリスト {1, 2} と {3} を zip 圧縮します。",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "指定された値から論理値を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>logical</code> 値を返します。指定された <code>value</code> が <code>null</code> の場合、<code>Logical.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>logical</code> の場合、<code>value</code> が返されます。次の型の値を <code>logical</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト値 <code>\"true\"</code> または <code>\"false\"</code> からの <code>logical</code> 値。詳細については <code>Logical.FromText</code> を参照してください。</li>\r\n        <li><code>number</code>: <code>value</code> が <code>0</code> と等しい場合は <code>false</code>、それ以外の場合は <code>true</code>。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>2</code> を <code>logical</code> 値に変換します。",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "テキスト値 \"true\" および \"false\" から論理値を作成します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> (\"true\" または \"false\") から論理値を作成します。<code>text</code> に別の文字列が含まれている場合は、例外がスローされます。テキスト値 <code>text</code> では、大文字と小文字が区別されます。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "テキスト文字列 \"true\" から論理値を作成します。",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "テキスト文字列 \"a\" から論理値を作成します。",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "指定された論理値に基づいて、テキスト \"true\" または \"false\" を返します。",
        "Documentation.LongDescription": "論理値 <code>logicalValue</code> (<code>true</code> または <code>false</code>) からテキスト値を作成します。<code>logicalValue</code> が論理値でない場合は、例外がスローされます。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "論理 <code>true</code> からテキスト値を作成します。",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "数値の絶対値を返します。",
        "Documentation.LongDescription": "<code>number</code> の絶対値を返します。<code>number</code> が null の場合、<code>Number.Abs</code> は null を返します。\r\n    <ul>\r\n        <li><code>number</code>: 絶対値を計算する対象の <code>number</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3 の絶対値。",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "数値のアークコサインを返します。",
        "Documentation.LongDescription": "<code>number</code> のアークコサインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "数値のアークサインを返します。",
        "Documentation.LongDescription": "<code>number</code> のアークサインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "数値のアークタンジェントを返します。",
        "Documentation.LongDescription": "<code>number</code> のアークタンジェントを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "入力の各ビットを反転したビットで構成されるバイトを返します。",
        "Documentation.LongDescription": "<code>number</code> にビットごとの NOT 演算を行った結果を返します。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "数値のコサインを返します。",
        "Documentation.LongDescription": "<code>number</code> のコサインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "角度 0 のコサインを求めます。",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "数値の双曲線コサインを返します。",
        "Documentation.LongDescription": "<code>number</code> の双曲線コサインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "e を指定された数値でべき乗します。",
        "Documentation.LongDescription": "e を <code>number</code> (指数関数) でべき乗した結果を返します。\r\n      <ul>\r\n        <li><code>number</code>: 指数関数を計算する対象の <code>number</code>。<code>number</code> が null の場合、<code>Number.Exp</code> は null を返します。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "e を 3 でべき乗します。",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "数値の階乗を返します。",
        "Documentation.LongDescription": "数値 <code>number</code> の階乗を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "10 の階乗を求めます。",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "指定された値から数値を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>number</code> 値を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。\r\n指定された <code>value</code> が <code>null</code> の場合、<code>Number.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>number</code> の場合、<code>value</code> が返されます。次の型の値を <code>number</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト形式の表記からの <code>number</code> 値。一般的なテキスト形式が処理の対象になります (\"15\"、\"3,423.10\"、\"5.0E-10\")。詳細については <code>Number.FromText</code> を参照してください。</li>\r\n        <li><code>logical</code>: <code>true</code> の場合は 1、<code>false</code> の場合は 0。</li>\r\n        <li><code>datetime</code>: 相当する OLE オートメーション日付を含む倍精度浮動小数点数。</li>\r\n        <li><code>datetimezone</code>: <code>value</code> のローカルな日付および時刻に相当する OLE オートメーション日付を含む倍精度浮動小数点数。</li>\r\n        <li><code>date</code>: 相当する OLE オートメーション日付を含む倍精度浮動小数点数。</li>\r\n        <li><code>time</code>: 小数の日数で表されます。</li>\r\n        <li><code>duration</code>: 整数と小数の日数で表されます。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の <code>number</code> 値を取得します。",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>#datetime(2020, 3, 20, 6, 0, 0)</code> の <code>number</code> 値を取得します。",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "<code>\"12.3%\"</code> の <code>number</code> 値を取得します。",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "一般的なテキスト形式 (\"15\"、\"3,423.10\"、\"5.0E-10\") から数値を作成します。",
        "Documentation.LongDescription": "指定されたテキスト値 <code>text</code> から <code>number</code> 値を返します。\r\n <ul>\r\n  <li><code>text</code>: 数値のテキスト形式の表記。この表記は、一般的な数値形式 (\"15\"、\"3,423.10\"、\"5.0E-10\" など) である必要があります。</li>\r\n  <li><code>culture</code>: <code>text</code> を解釈する方法を制御する省略可能なカルチャ (例: \"en-US\")。</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> の数値を取得します。",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>\"5.0e-10\"</code> の数値を取得します。",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "値が偶数かどうかを示します。",
        "Documentation.LongDescription": "値が偶数かどうかを示します。値 <code>number</code> が偶数の場合は <code>true</code> を返し、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625 が偶数かどうかを調べます。",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "82 が偶数かどうかを調べます。",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "値が NaN (非数) かどうかを示します。",
        "Documentation.LongDescription": "値が NaN (非数) かどうかを示します。<code>number</code> が <code>Number.IsNaN</code> と等しい場合は <code>true</code> を返し、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "0 の 0 による除算が NaN であるかどうかを調べます。",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "1 の 0 による除算が NaN であるかどうかを調べます。",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "値が奇数かどうかを示します。",
        "Documentation.LongDescription": "値が奇数かどうかを示します。<code>number</code> が奇数の場合は <code>true</code> を返し、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625 が奇数かどうかを調べます。",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "82 が奇数かどうかを調べます。",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "数値の自然対数を返します。",
        "Documentation.LongDescription": "数値 <code>number</code> の自然対数を返します。<code>number</code> が NULL の場合、<code>Number.Ln</code> は NULL を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "15 の自然対数を取得します。",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "指定された数値 (既定値は e) を底とする数値の対数を返します。",
        "Documentation.LongDescription": "数値 <code>number</code> の、指定された <code>base</code> を底とする対数を返します。<code>base</code> を指定しなかった場合、既定値は Number.E です。\r\n    <code>number</code> が null の場合、<code>Number.Log</code> は null を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2 の 10 を底とする対数を取得します。",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "e を底とする 2 の対数を取得します。",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "数値の 10 を底とする対数を返します。",
        "Documentation.LongDescription": "数値 <code>number</code> の 10 を底とする対数を返します。<code>number</code> が NULL の場合、<code>Number.Log10</code> は NULL を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2 の 10 を底とする対数を取得します。",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "丸めた数値を返します。桁数と丸めモードを指定できます。",
        "Documentation.LongDescription": "最も近い数に <code>number</code> を端数処理した結果を返します。<code>number</code> が null の場合、<code>Number.Round</code>は null を返します。<br>\r\n      <br>\r\n      既定では、<code>number</code> は最も近い整数に端数処理され、<code>RoundingMode.ToEven</code> (別名\"銀行家の丸め\") を使用して最も近い偶数に端数処理されることにより結びつきはなくなります。<br>\r\n      <br>\r\n      ただしこれらの既定は、次のオプションのパラメーターを使用してオーバーライドできます。\r\n      <ul>\r\n        <li><code>digits</code>:これにより、<code>number</code>は指定された少数桁の数に端数処理されます。</li>\r\n        <li><code>roundingMode</code>: <code>number</code> が端数処理された可能性のある 2 つの値の中間にある場合、既定の結びつきをなくす動作をオーバーライドします\r\n      (使用可能な値については、<code>RoundingMode.Type</code> を参照してください).。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234 を最も近い整数に丸めます。",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "1.56 を最も近い整数に丸めます。",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "1.2345 を小数点以下が 2 桁になるように丸めます。",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "1.2345 を小数点以下が 3 桁になるように丸めます (切り上げ)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "1.2345 を小数点以下が 3 桁になるように丸めます (切り下げ)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "正の数値の場合は切り上げた結果を返し、負の数値の場合は切り下げた結果を返します。桁数は指定できます。",
        "Documentation.LongDescription": "数値の符号に基づいて <code>number</code> を丸めた結果を返します。この関数は、正の数値は切り上げ、負の数値は切り下げます。\r\n    <code>digits</code> が指定された場合、<code>number</code> は小数点以下 <code>digits</code> 桁に丸められます。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "-1.2 を 0 とは逆の方向に丸めます。",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "1.2 を 0 とは逆の方向に丸めます。",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "-1.234 を小数点以下が 2 桁になるように 0 とは逆方向に丸めます。",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "次に小さい数値を返します。桁数は指定できます。",
        "Documentation.LongDescription": "<code>number</code> を次に小さい整数に丸めた結果を返します。<code>number</code> が null 値の場合、この関数は null 値を返します。\r\n\r\n    <code>digits</code> が指定された場合、<code>number</code> は小数点以下の指定の桁数に丸められます。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234 を整数に切り下げます。",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "1.999 を整数に切り下げます。",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "1.999 を小数点以下が 2 桁になるように切り下げます。",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "正の数値の場合は切り下げた結果を返し、負の数値の場合は切り上げた結果を返します。桁数は指定できます。",
        "Documentation.LongDescription": "数値の符号に基づいて <code>number</code> を丸めた結果を返します。この関数は、正の数値は切り下げ、負の数値は切り上げます。\r\n    <code>digits</code> が指定された場合、<code>number</code> は小数点以下 <code>digits</code> 桁に丸められます。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "数値 -1.2 を 0 の方向に丸めます。",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "数値 1.2 を 0 の方向に丸めます。",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "-1.234 を小数点以下が 2 桁になるように 0 の方向に丸めます。",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "次に大きい数値を返します。桁数は指定できます。",
        "Documentation.LongDescription": "<code>number</code> を次に大きい整数に丸めた結果を返します。<code>number</code> が null 値の場合、この関数は null 値を返します。\r\n    <code>digits</code> が指定された場合、<code>number</code> は小数点以下の指定の桁数に丸められます。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1.234 を整数に切り上げます。",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "1.999 を整数に切り上げます。",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "1.234 を小数点以下が 2 桁になるように切り上げます。",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "数値が正の場合は 1、負の場合は -1、0 の場合は 0 を返します。",
        "Documentation.LongDescription": "<code>number</code> が正の数値の場合は 1、負の数値の場合は -1、0 の場合は 0 を返します。\r\n    <code>number</code> が null の場合、<code>Number.Sign</code> は null を返します。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "182 の符号を調べます。",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "-182 の符号を調べます。",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "0 の符号を調べます。",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "数値のサインを返します。",
        "Documentation.LongDescription": "<code>number</code> のサインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "角度 0 のサインを求めます。",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "数値の双曲サインを返します。",
        "Documentation.LongDescription": "<code>number</code> の双曲サインを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "数値の平方根を返します。",
        "Documentation.LongDescription": "<code>number</code> の平方根を返します。\r\n    <code>number</code> が null の場合、<code>Number.Sqrt</code> は null を返します。負の値の場合は、<code>Number.NaN</code> を返します (数値ではありません)。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "625 の平方根を求めます。",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "85 の平方根を求めます。",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "数値のタンジェントを返します。",
        "Documentation.LongDescription": "<code>number</code> のタンジェントを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "角度 1 のタンジェントを求めます。",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "数値の双曲タンジェントを返します。",
        "Documentation.LongDescription": "<code>number</code> の双曲タンジェントを返します。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "指定された数値をテキストに変換します。",
        "Documentation.LongDescription": "<code>format</code> で指定された形式に従って、数値 <code>number</code> をテキスト値に変換します。<br>\r\n    <br>\r\n    形式は、数値の変換方法を示すテキスト値です。サポートされている形式の値の詳細については、https://go.microsoft.com/fwlink/?linkid=2241210 と https://go.microsoft.com/fwlink/?linkid=2240884 を参照してください。<br>\r\n    <br>\r\n     <code>format</code> のカルチャに依存する動作を制御するには、オプションの <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "形式を指定せずに数値をテキストに変換します。",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "数値を指数形式に変換します。",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "数値を小数点以下の桁数が 1 つだけのパーセント形式に変換します。",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "OData サービスが提供する OData フィードのテーブルを返します。",
        "Documentation.LongDescription": "URI <code>serviceUri</code>、ヘッダー <code>headers</code>の OData サービスが提供する OData フィードのテーブルを返します。次のオプションを制御するために、同時接続を使用するか、それとも選択可能なレコード パラメーター <code>options</code> を使用するかを指定するブール値が指定される可能性があります: \r\n    <ul>\r\n    <li><code>Query</code>: エスケープについて配慮することなしに、プログラムによってクエリ パラメーターを URL に追加します。</li>\r\n    <li> <code>Headers</code> : レコードとしてこの値を指定すると、HTTP 要求に追加のヘッダーが挿入されます。</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: リストとしてこの値を指定すると、データをキャッシュするための計算からこれらの HTTP ヘッダー キーが除外されます。</li>\r\n    <li> <code>ApiKeyName</code> : ターゲット サイトが API キーへの対応を示す場合、このパラメーターを使用して URL で使用する必要があるキー パラメーター名 (値ではない) を指定できます。実際のキー値は、資格情報内に格納されます。</li>\r\n    <li> <code>Timeout</code> : この値を期間として指定することで、HTTP 要求のタイムアウトを変更します。既定の値は 600 秒です。</li>\r\n    <li> <code>EnableBatch</code> : MaxUriLength が超過した場合に OData $batch 要求を生成できるようにするか否かを設定する論理値 (True/False) です (既定値は False)。</li>\r\n    <li> <code>MaxUriLength</code> : OData サービスへ送信される、許可された URI の最大長を示す数値です。超過し、かつ EnableBatch が True の場合、OData $batch エンドポイントに対して要求が行われ、それ以外の場合は失敗になります (既定値は 2048)。</li>\r\n    <li> <code>Concurrent</code> : 論理値 (true/false) で、True に設定するとサービスに対する要求は同時に行われます。False に設定すると、要求は順次行われます。何も指定しないと、この値はサービスの AsynchronousRequestsSupported 注釈によって決まります。サービスで AsynchronousRequestsSupported がサポートされるかどうかが指定されていない場合、要求は順次行われます。</li>\r\n    <li> <code>ODataVersion</code> : この OData サービスのための OData プロトコルのバージョンを指定する数値 (3 または 4) です。指定しないと、サポート対象のすべてのバージョンが要求されます。サービス バージョンは、サービスによって返される OData-Version ヘッダーによって決定されます。</li>\r\n    <li> <code>FunctionOverloads</code> : 論理値 (True/False) で、True に設定すると、関数がインポートしたオーバーロードは別々のエントリとしてナビゲーターに表示されます。False に設定すると、関数がインポートしたオーバーロードは 1 つの Union 関数としてナビゲーターに表示されます。V3 の既定値は False です。V4 の既定値は True です。</li>\r\n    <li> <code>MoreColumns</code> : 論理値 (True/False) で、True に設定すると、\"More Columns\" 列がオープン型とポリモーフィック型を含む各エンティティ フィードに追加されます。これには、基本データ型で宣言されていないフィールドが含まれます。False の場合、このフィールドは存在しません。既定値は False です。</li>\r\n    <li> <code>IncludeAnnotations</code> : 名前空間修飾用語名、またはワイルドカード \"*\" とともに注釈に含めるパターンのコンマ区切りの一覧。既定では、注釈は含まれません。</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : メタデータ ドキュメント要求に含める名前空間修飾用語名、またはワイルドカード \"*\" とともに注釈に含めるパターンのコンマ区切りの一覧。既定では、IncludeAnnotations と同じ注釈を含めます。</li>\r\n    <li> <code>OmitValues</code> : OData サービスが応答に特定の値を書き出すのを回避することを許可します。サービスによって承認された場合には、省略されたフィールドからそれらの値を推測します。次のオプションを含みます:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : OData サービスが Null 値を省略するのを許可します。</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : 使用する OData コネクタの実装を指定します。有効な値は \"2.0\" または null です。</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "TripPin OData サービスに接続します。",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "ODBC ドライバーの SQL 機能の推測を試みた結果を返します。",
        "Documentation.LongDescription": "ODBC を使用して、接続文字列 <code>connectionString</code> で SQL 機能の推測を試した結果を返します。<code>connectionString</code> には、テキスト、またはプロパティ値のペアのレコードを使用できます。プロパティ値には、テキストまたは数字を使用できます。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "接続文字列から推測される SQL 機能を返します。",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "テーブルとして Parquet ドキュメントのコンテンツを返します。",
        "Documentation.LongDescription": "Parquet ドキュメントの内容をテーブルとして返します。オプションに含まれるのは:\n     <ul>\n    <li> <code>TypeMapping</code>: ファイルの読み取りおよび書き込み時の既定の型マッピングを制御するテキスト値があります。既定値は null で、元の型に対して可能な限り忠実性を維持しようとします。値 \"Sql\" を指定すると、Sql Server と最も互換性のある結果が生成されます。</li> </ul>",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "指定された値からパーセント値を返します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>percentage</code> 値を返します。指定された <code>value</code> が <code>null</code> である場合、<code>Percentage.From</code> は <code>null</code> を返します。 指定された <code>value</code> が、後続するパーセント記号のある <code>text</code> である場合、変換された 10 進数が返されます。それ以外の場合、値は <code>Number.From</code> を使って <code>number</code> に変換されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"12.3%\"</code> の <code>percentage</code> 値を取得します。",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "RData ファイルからデータ フレームのレコードを返します。",
        "Documentation.LongDescription": "RData ファイルからデータ フレームのレコードを返します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "指定されたリスト内のレコードを結合します。",
        "Documentation.LongDescription": "指定された <code>records</code> 内のレコードを結合します。<code>records</code> にレコード以外の値が含まれている場合は、エラーが返されます。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "レコードから結合したレコードを作成します。",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "レコード内のフィールドの数を返します。",
        "Documentation.LongDescription": "レコード <code>record</code> 内のフィールドの数を返します。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールドの数を調べます。",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "フィールドの名前を返します。",
        "Documentation.LongDescription": "レコード <code>record</code> 内のフィールドの名前をテキストとして返します。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールドの名前を調べます。",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "フィールド値のリストを返します。",
        "Documentation.LongDescription": "レコード <code>record</code> 内のフィールド値のリストを返します。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "レコード内のフィールド値を調べます。",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "{[Name = name, Value = value]} という形式のテーブルからレコードを作成します。",
        "Documentation.LongDescription": "フィールド名と値の名前 <code>{[Name = name, Value = value]}</code> を含むレコード <code>table</code> のテーブルからレコードを返します。フィールド名が一意でなかった場合は、例外がスローされます。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}) という形式のテーブルからレコードを作成します。",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "入力レコードのフィールド値を含む値のリストを返します。",
        "Documentation.LongDescription": "入力 <code>record</code> からフィールド値を含む値のリストを返します。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "レコードからフィールド値を抽出します。",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "row 式内の行の列へのアクセスを表す抽象構文ツリー (AST) を返します。",
        "Documentation.LongDescription": "row 式内の行の列 <code>columnName</code> へのアクセスを表す抽象構文ツリー (AST) を返します。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "列 \"CustomerName\" のアクセスを表す AST を作成します。",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "関数の本文の抽象構文ツリー (AST) を返します。",
        "Documentation.LongDescription": "<p><i>row expression</i> に正規化された <code>function</code> のの本文の抽象構文ツリー (AST) を返します:\r\n<ul>\r\n  <li>関数は 1 引数ラムダである必要があります。</li>\r\n  <li>関数パラメーターへのすべての参照は <code>RowExpression.Row</code> と置き換えられます。</li>\r\n  <li>列へのすべての参照は <code>RowExpression.Column(<i>columnName</i>)</code> と置き換えられます。</li>\r\n  <li>AST は次の種類のノードだけを含むように簡素化されます:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> の本文に対し row 式の AST が返されない場合は、エラーが発生します。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "関数 <code>each [CustomerID] = \"ALFKI\"</code> の本文の AST を返す",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "指定された値から Single (単精度浮動小数点数) を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から単精度浮動小数点型の <code>number</code> 値を作成します。指定された <code>value</code> が <code>null</code> である場合、<code>Single.From</code> は <code>null</code> を返します。指定された <code>value</code> が単精度浮動小数点型の範囲内の <code>number</code> である場合、<code>value</code> が返され、それ以外の場合にはエラーが返されます。<code>value</code> がそれ以外の型である場合には、まずは <code>Number.FromText</code> を参照して <code>number</code> 値に変換されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.5\"</code> の Single <code>number</code> 値を取得します。",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Smartsheet インデックス エンドポイントからデータのテーブルを返します。",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "特定のエンドポイントで Smartsheet 2.0 REST API への呼び出しを実行し、返されたデータ要素をテーブルに変換します。",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet API からユーザー情報のテーブルをプルします",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Smartsheet API によって返されるユーザー情報を含むテーブル"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "指定された区切り記号でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された区切り記号でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、入力をコンマまたはセミコロンで分割します。引用符と引用符で囲まれた区切り記号は無視します。",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "入力の末尾から始め、入力をコンマまたはセミコロンで分割します。引用符と引用符で囲まれた区切り記号は無視します。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "指定された区切り記号に従ってテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された区切り記号に従ってテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "引用符で囲まれたコンマは無視しながら、コンマで入力を分割します。",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "指定された各区切り記号で順番にテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された各区切り記号で順番にテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、入力をコンマで分割し、続けてセミコロンで分割します。",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "入力の末尾から始めて、入力をコンマで分割し、続いてセミコロンで分割し、引用符を他の文字と同じように扱ってください。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "指定された各長さでテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された各長さでテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、入力を最初は 2 文字で分割し、次けて 3 文字で分割します。",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "入力の末尾から始め、入力を最初は 2 文字で分割し、次けて 3 文字で分割します。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "指定された各位置でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された各位置でテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、指定された位置で入力を分割します。",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "入力の末尾から始め、指定された位置で入力を分割します。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "指定されたオフセットと長さに従ってテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定されたオフセットと長さに従ってテキストをテキストのリストに分割する関数を返します。長さを null にすると、残りのすべての入力を含める必要があることを指定できます。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、指定された位置と長さのペアで入力を分割します。この例において、その範囲は重複しています。",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "入力の末尾から始まり、指定された位置と長さのペアで入力を分割します。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "入力を固定長の郵便番号に分割し、その後に可変長の市区町村名を指定します。",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "指定された長さごとにテキストを一連のテキストに分割する関数を返します。",
        "Documentation.LongDescription": "指定された長さごとにテキストを一連のテキストに分割する関数を返します。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "入力の先頭から始め、3 文字のチャンクに分割することを、繰り返して実行します。",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "入力の末尾から始め、入力を 3 文字のチャンクに分割することを繰り返し実行します。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "テーブル内の行の概数を返します。",
        "Documentation.LongDescription": "<code>table</code>内のおおよその行数を返します。データ ソースが近似をサポートしていない場合はエラーを返します。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "大きなテーブル内で、列のカーディナリティの推定として使用できる、都市と州の個別の組み合わせの数を推定します。カーディナリティの推定は、さまざまなデータ ソース (SQL Server など) がこの特定の近似をサポートするほど充分に重要で、多くの場合 HyperLogLog と呼ばれるアルゴリズムを使用します。",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "テーブル内の列の数を返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> 内の列の数を返します。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "テーブル内の列の数を調べます。",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "列名をリストとして返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> の列名をテキストのリストとして返します。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの列名を調べます。",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "先頭行または指定された既定値を返します。",
        "Documentation.LongDescription": "<code>table</code> の先頭行を返します。テーブルが空の場合は、省略可能な既定値 <code>default</code> を返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの先頭行を探します。",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "テーブル <code>({})</code> の先頭行を探します。空の場合は、[a = 0, b = 0] を返します。",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "テーブルの先頭行の先頭列、または指定された既定値を返します。",
        "Documentation.LongDescription": "テーブル <code>table</code> の先頭行の先頭列、または指定された既定値を返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "テーブルに一意の行のみが含まれている (重複が含まれていない) かどうかを示します。",
        "Documentation.LongDescription": "<code>table</code> に一意の行のみが含まれている (重複が含まれていない) かどうかを示します。行が一意の場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。\r\n    省略可能なパラメーター <code>comparisonCriteria</code> には、重複をテストするテーブルの列を指定します。<code>comparisonCriteria</code> を指定しなかった場合は、すべての列をテストします。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "テーブルが一意かどうかを調べます。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "テーブルが一意かどうかを列で調べます。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "テーブルに行が含まれているかどうかを示します。",
        "Documentation.LongDescription": "<code>table</code> に行が含まれているかどうかを示します。行が存在しない (つまり、テーブルが空の) 場合は <code>true</code>、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "テーブルが空かどうかを調べます。",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "テーブル <code>({})</code> が空かどうかを調べます。",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "指定されたテーブルのキーを返します。",
        "Documentation.LongDescription": "指定されたテーブルのキーを返します。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "テーブルのキーのリストを取得します。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "最終行または指定された既定値を返します。",
        "Documentation.LongDescription": "<code>table</code> の最終行を返します。テーブルが空の場合は、省略可能な既定値 <code>default</code> を返します。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの最終行を探します。",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "テーブル <code>({})</code> の最終行を探します。空の場合は、[a = 0, b = 0] を返します。",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "テーブル内の行の数を返します。",
        "Documentation.LongDescription": "<code>table</code> 内の行の数を返します。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "テーブル内の行の数を調べます。",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "テーブルの 1 つの行を返します。",
        "Documentation.LongDescription": "1 つの行 <code>table</code> の 1 つの行を返します。<code>table</code> に複数の行が存在する場合、例外がスローされます。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "テーブルの単一行を返します。",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "列の値のリストが入れ子になったリストをテーブルから作成します。",
        "Documentation.LongDescription": "入れ子になったリストのリストをテーブル (<code>table</code>) から作成します。各リスト項目は、列の値を含む入れ子のリストです。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "テーブルから列の値のリストを作成します。",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "指定された結合関数をテーブルの各行の値に適用してテーブルをリストに変換します。",
        "Documentation.LongDescription": "指定された結合関数をテーブルの各行の値に適用してテーブルをリストに変換します。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "各行のテキストをコンマで結合します。",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "レコードのリストにテーブルを変換します。",
        "Documentation.LongDescription": "レコードのリストにテーブル (<code>table</code>) を変換します。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "レコードのリストにテーブルを変換します。",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "行の値のリストが入れ子になったリストをテーブルから作成します。",
        "Documentation.LongDescription": "入れ子になったリストのリストをテーブル (<code>table</code>) から作成します。各リスト項目は、行の値を含む入れ子のリストです。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "テーブルから行の値のリストを作成します。",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "ビュー (テーブル ビューを使用) で定義されたハンドラーからスローされた場合にフォールバックをトリガーしない、変更されたエラー レコードを作成します。",
        "Documentation.LongDescription": "ビュー (テーブル ビューを使用) で定義されたハンドラーからスローされた場合にフォールバックをトリガーしない、変更されたエラー レコードを <code>errorRecord</code> から作成します。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "ビューで (Table.View を介して) 定義されたハンドラーによりインターセプトすることのできる関数を作成します。",
        "Documentation.LongDescription": "<p><code>Table.View</code> により作成されたビューで処理できる、<code>function</code> に基づいたビュー関数を作成します。</p>\r\n<p><code>Table.View</code> の <code>OnInvoke</code> ハンドラーは、ビュー関数のハンドラーを定義するために使用できます。</p>\r\n<p>組み込み操作のハンドラーと同様に、<code>OnInvoke</code> ハンドラーが指定されていない場合、そのハンドラーがビュー関数を処理しない場合、またはそのハンドラーでエラーが発生する場合は、ビューの最上位に対して <code>function</code> が適用されます。</p>\r\n<p><code>Table.View</code> とカスタム ビュー関数の詳細な説明については、公開されている Power Query カスタム コネクタのドキュメントを参照してください。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "制御文字をすべて削除したテキスト値を返します。",
        "Documentation.LongDescription": "<code>text</code> の制御文字をすべて削除した 1 つテキスト値を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト値から改行などの制御文字を削除します。",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "一連のテキスト値を 1 つのテキスト値に連結します。",
        "Documentation.LongDescription": "テキスト値のリスト (<code>texts</code>) を 1 つのテキスト値に結合した結果を返します。<code>texts</code> の中に <code>null</code> 値がある場合、それらはすべて無視されます。\r\n    最終的な結合テキスト内で使用する <code>separator</code> を指定できます (省略可能)。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト値 \"Seattle\" と \"WA\" を結合します。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "テキスト値 \"Seattle\" と \"WA\" をコンマとスペースで区切って結合します。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "値 \"Seattle\"、<code>null</code>、\"WA\" の値をコンマとスペースで区切って結合します (<code>null</code> は無視されることに注意してください)。",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "指定された値からテキスト値を作成します。",
        "Documentation.LongDescription": "<code>value</code> のテキスト表記を返します。<code>value</code> は、<code>number</code>、<code>date</code>、<code>time</code>、<code>datetime</code>、<code>datetimezone</code>、<code>logical</code>、<code>duration</code>、<code>binary</code> のいずれかの値になります。\r\n    指定された値が null の場合、<code>Text.From</code> から null が返されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "数値の 3 からテキスト値を作成します。",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "バイナリ形式のデータをテキストにデコードします。",
        "Documentation.LongDescription": "<code>encoding</code> 型を使用して、バイナリ値のデータ (<code>binary</code>) をテキスト値にデコードします。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "テキストでエンコードされた数値の粒度の数値型を推測します (Int64.Type、Double.Type など)。",
        "Documentation.LongDescription": "<code>text</code> の粒度番号の種類 (Int64.Type、Double.Type など) を推測します。<code>text</code> が数値でない場合にエラーが発生します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "文字の数を返します。",
        "Documentation.LongDescription": "テキスト <code>text</code> 内の文字の数を返します。",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello World\" 内の文字の数を調べます。",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "すべての文字を小文字に変換します。",
        "Documentation.LongDescription": "<code>text</code> 内のすべての文字を小文字に変換した結果を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"AbCd\" の小文字のバージョンを取得します。",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "各単語の最初の文字を大文字にします。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> の各単語の最初の文字のみを大文字にした結果を返します。他のすべての文字は小文字で返されます。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "単純な文では <code>Text.Proper</code> を使用します。",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "指定された <code>text</code> を反転します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"123\" を反転します。",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "テキストをバイナリ形式にエンコードします。",
        "Documentation.LongDescription": "指定された <code>encoding</code> を使用して、指定されたテキスト値 (<code>text</code>) をバイナリ値にエンコードします。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "指定されたテキスト値から文字の値の一覧を返します。",
        "Documentation.LongDescription": "指定されたテキスト値 <code>text</code> から文字の値の一覧を返します。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "テキスト \"Hello World\" から文字の値の一覧を作成します。",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "先頭と末尾の空白をすべて削除します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> から先頭と末尾の空白をすべて削除した結果を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" から先頭と末尾の空白を削除します。",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "末尾の空白をすべて削除します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> から末尾の空白をすべて削除した結果を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" から末尾の空白を削除します。",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "先頭の空白をすべて削除します。",
        "Documentation.LongDescription": "テキスト値 <code>text</code> から先頭の空白をすべて削除した結果を返します。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" から先頭の空白を削除します。",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "すべての文字を大文字に変換します。",
        "Documentation.LongDescription": "<code>text</code> 内のすべての文字を大文字に変換した結果を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"aBcD\" の大文字のバージョンを取得します。",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "時間の始まりを返します。",
        "Documentation.LongDescription": "<code>dateTime</code> で表される時間の終わりを、小数秒も含めて返します。タイム ゾーン情報は保持されます。\r\n      <ul>\r\n        <li><code>dateTime</code>: 時間の終わりを計算する <code>time</code>、<code>datetime</code>、または <code>datetimezone</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM の時間の終わりを取得します。",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 の時間の終わりを取得します。",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "指定された値から時刻を作成します。",
        "Documentation.LongDescription": "指定された <code>value</code> から <code>time</code> 値を返します。省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。\r\n指定された <code>value</code> が <code>null</code> の場合、<code>Time.From</code> は <code>null</code> を返します。指定された <code>value</code> が <code>time</code> の場合、<code>value</code> が返されます。次の型の値を <code>time</code> 値に変換できます:\r\n      <ul>\r\n        <li><code>text</code>: テキスト形式の表記からの <code>time</code> 値。詳細については <code>Time.FromText</code> を参照してください。</li>\r\n        <li><code>datetime</code>: <code>value</code> の時刻部分。</li>\r\n        <li><code>datetimezone</code>: <code>value</code> に相当するローカル datetime の時刻部分。</li>\r\n        <li><code>number</code>: <code>value</code> で表される小数の日数に相当する <code>time</code>。<code>value</code> が負の値か、1 以上の場合は、エラーが返されます。</li>\r\n      </ul>\r\n<code>value</code> が他の型の場合、エラーが返されます。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>0.7575</code> を <code>time</code> 値に変換します。",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> を <code>time</code> 値に変換します。",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "現地、世界共通、カスタムの時刻の形式から時刻を作成します。",
        "Documentation.LongDescription": "テキスト形式の表記 <code>text</code> から <code>time</code> 値を作成します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、ベスト エフォートで日付が解析されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> で <code>\"MMM\"</code> は <code>\"Jan\"、\"Feb\"、\"Mar\"、...</code> ですが、<code>\"ru-RU\"</code> では <code>\"MMM\"</code> は <code>\"янв\"、\"фев\"、\"мар\"、...</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が既定の形式を制御し使用します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>\"10:12:31am\"</code> を時刻値に変換します。",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "<code>\"1012\"</code> を Time 値に変換します。",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "<code>\"10\"</code> を Time 値に変換します。",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "時間部分を返します。",
        "Documentation.LongDescription": "指定された <code>time</code>、<code>datetime</code>、または <code>datetimezone</code> 値 (<code>dateTime</code>) の時間部分を返します。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) で時間を探します。",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "分部分を返します。",
        "Documentation.LongDescription": "指定された <code>time</code>、<code>datetime</code>、または <code>datetimezone</code> 値 (<code>dateTime</code>) の分部分を返します。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) で分を探します。",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "秒部分を返します。",
        "Documentation.LongDescription": "指定された <code>time</code>、<code>datetime</code>、または <code>datetimezone</code> 値 (<code>dateTime</code>) の秒部分を返します。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "datetime 値で秒の値を探します。",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "時間の最初の日付を返します。",
        "Documentation.LongDescription": "<code>dateTime</code> で表される時間の始まりを返します。\r\n    <code>dateTime</code> は、<code>time</code>、<code>datetime</code>、または <code>datetimezone</code> 値である必要があります。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 10 月 10 日午前 8 時 10 分 32 秒の時間の始まりを調べます。",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "時刻値の部分を含むレコードを返します。",
        "Documentation.LongDescription": "指定された Time 値 (<code>time</code>) の部分を含むレコードを返します。\r\n <ul>\r\n        <li><code>time</code>: その部分のレコードが計算される <code>time</code> 値。</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(11, 56, 2)</code> 値を、時刻値を含むレコードに変換します。",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "時刻値のテキスト形式の表記を返します。",
        "Documentation.LongDescription": "<code>time</code> のテキスト形式の表記を返します。省略可能な <code>record</code> パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。<code>culture</code> は従来のワークフローでのみ使用されます。<code>record</code> には、次のフィールドを含めることができます:\r\n<ul>\r\n   <li><code>Format</code>: 使用する形式を示す <code>text</code> 値。https://go.microsoft.com/fwlink/?linkid=2180104 と https://go.microsoft.com/fwlink/?linkid=2180105 を参照してください。このフィールドを省略するか、<code>null</code> を指定すると、<code>Culture</code> によって定義された既定値を使用して日付の形式が設定されます。</li>\r\n   <li><code>Culture</code>: <code>Format</code> が null でない場合、<code>Culture</code> が一部の書式指定子を制御します。たとえば、<code>\"en-US\"</code> では、<code>\"tt\"</code> は <code>\"AM\" or \"PM\"</code>ですが、<code>\"ar-EG\"</code> <code>\"tt\"</code> では <code>\"ص\" or \"م\"</code> です。<code>Format</code> が <code>null</code> の場合、<code>Culture</code> が既定の形式を制御し使用します。<code>Culture</code> が <code>null</code> または省略される場合、<code>Culture.Current</code> が使用されます。</li>\r\n</ul>\r\n従来のワークフローをサポートするため、<code>options</code> と <code>culture</code> をテキスト値にすることもできます。この場合、<code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> の場合と動作が同じになります。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(01, 30, 25)</code> を <code>text</code> 値に変換します。<i>結果出力が現在のカルチャに応じて異なる場合があります。</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "カスタム形式とドイツ語のカルチャを使用して変換します。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "標準時間形式を使用して変換します。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "指定されたレコード型の閉じられたバージョンを返します (既に閉じられている場合は同じ型)。",
        "Documentation.LongDescription": "指定された <code>record</code> の閉じられたバージョン <code>type</code> を返します (既に閉じられている場合は同じ種類)。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "閉じられたバージョンの <code>type [ A = number,…]</code> を作成します。",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "種類のファセットを返します。",
        "Documentation.LongDescription": "<code>type</code> のファセットを含むレコードを返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "関数型のパラメーターの名前にフィールドの値が設定されたレコードと、関連する型に設定されたフィールドの値を返します。",
        "Documentation.LongDescription": "<code>type</code> のパラメーターの名前にフィールドの値が設定されたレコードと、関連する型に設定されたフィールドの値を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "関数に対するパラメーターの種類を検索します (<code>(x as number, y as text)</code>)。",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "関数型の呼び出しに必要なパラメーターの最小数を示す数値を返します。",
        "Documentation.LongDescription": "関数の入力値 <code>type</code> の呼び出しに必要なパラメーターの最小数を示す数値を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "関数に対して必要なパラメーターの数を検索します (<code>(x as number, optional y as text)</code>)。",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "関数型によって返される型を返します。",
        "Documentation.LongDescription": "関数 <code>type</code> によって返される型を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>() as any)</code> の戻り値の型を検索します。",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "NULL 許容型の場合は true、それ以外の場合は false を返します。",
        "Documentation.LongDescription": "<code>nullable</code> 型の場合は <code>true</code> を、それ以外の場合は <code>false</code> を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>number</code> が NULL 許容型かどうかを判断します。",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "<code>type nullable number</code> が NULL 許容型かどうかを判断します。",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "レコード型が OPEN かどうかを返します。",
        "Documentation.LongDescription": "レコード <code>type</code> が OPEN かどうかを示す <code>logical</code> を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "レコード <code>type [ A = number, ...]</code> が開かれているかどうかを判断します。",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "リスト型からアイテム型を返します。",
        "Documentation.LongDescription": "リスト <code>type</code> からアイテム型を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "リスト <code>{number}</code> からアイテム型を検索します。",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "型から NULL 許容型以外の型を返します。",
        "Documentation.LongDescription": "<code>type</code> から <code>nullable</code> 以外の型を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "NULL 許容型以外の <code>type nullable number</code> を返します。",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "指定されたレコード型の開かれたバージョンを返します (既に開かれている場合は同じ型)。",
        "Documentation.LongDescription": "指定された <code>record</code> の開かれたバージョン <code>type</code> を返します (既に開かれている場合は同じ型)。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "開かれたバージョンの <code>type [ A = number]</code> を作成します。",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "レコード型のフィールドを表すレコードを返します。返されるレコード型の各フィールドには、対応する名前と値が含まれます。",
        "Documentation.LongDescription": "レコード <code>type</code> のフィールドを表すレコードを返します。返されるレコード型の各フィールドには、対応する名前と値が <code>[ Type = type, Optional = logical ]</code> というレコードの形で含まれます。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "レコードの名前と値 (<code>[ A = number, optional B = any]</code>) を検索します。",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "指定されたテーブル型のキーの一覧を返します。この一覧は空である可能性があります。",
        "Documentation.LongDescription": "指定されたテーブル型のキーの一覧を返します。この一覧は空である可能性があります。<br>\r\n    <br>\r\n    各キーは、次の形式のレコードを使用して定義されます。\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: キーを定義する列名の一覧\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: キーがテーブルのプライマリ キーの場合は <code>true</code>、それ以外の場合は <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "テーブル型のキー情報を返します。",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "テーブル タイプの列のタイプを返します。",
        "Documentation.LongDescription": "指定されたテーブル タイプの行のタイプを返します。結果は常にレコード タイプです。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "単純なテーブルの行のタイプの詳細情報を返します。",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "型のリストの和集合を返します。",
        "Documentation.LongDescription": "<code>types</code> の型の和集合を返します。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "レコードを URI クエリ文字列に統合します。",
        "Documentation.LongDescription": "必要に応じて文字をエスケープして、レコード <code>query</code> を URI クエリ文字列に統合します。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "特殊文字が含まれるクエリ文字列をエンコードします。",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "RFC 3986 に準拠して特殊文字をエンコードします。",
        "Documentation.LongDescription": "入力 <code>data</code> に含まれている特殊文字を RFC 3986 の規則に則ってエンコードします。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "特殊文字を \"+money$\" の形式でエンコードします。",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "レコードとして入力絶対 URI の一部を返します。",
        "Documentation.LongDescription": "Scheme、Host、Port、Path、Query、Fragment、UserName、Password などの値を含むレコードとして入力 <code>absoluteUri</code> の一部を返します。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "絶対 URI \"www.adventure-works.com\" の一部を検索します。",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "パーセント エンコードされた文字列をデコードします。",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics サービスの URL を入力します。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps Analytics サービス URL からダウンロードされたコンテンツをバイナリ値として返します。この関数は、組織ごとにそれぞれ異なる資格情報を使用します。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics サービスの URL を入力します。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Azure DevOps Analytics サービス URL からダウンロードされたコンテンツをバイナリ値として返します。この関数は、アクセス可能なすべての組織でグローバルな資格情報を使用します。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "代替クエリ プランを表します。",
        "Documentation.LongDescription": "Value.Expression(Value.Optimize(...)) を使用して取得したクエリ プラン式内の代替クエリ プランを表します。他の用途は意図されていません。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "value の式を表す抽象構文ツリー (AST) を返します。",
        "Documentation.LongDescription": "value の式を表す抽象構文ツリー (AST) を返します",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "テキスト形式の表記から厳密に型指定された値を作成します。",
        "Documentation.LongDescription": "テキスト形式の表記 (<code>text</code>) から値をデコードし、適切な型の値として解釈します。\r\n    <code>Value.FromText</code> はテキスト値を受け取り、数、論理値、NULL 値、datetime 値、期間値、またはテキスト値を返します。空のテキスト値は NULL 値として解釈されます。\r\n    省略可能な <code>culture</code> を指定することもできます (例: \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "入力のメタデータを含むレコードを返します。",
        "Documentation.LongDescription": "入力のメタデータを含むレコードを返します。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "値に対する最適化された式を返すように Value.Expression にシグナルを送ります。",
        "Documentation.LongDescription": "Value.Expression 内で使用された場合、<code>value</code> が最適化可能なクエリを表していると、この関数は最適化された式を返す必要があることを示します。それ以外の場合、<code>value</code> は何の影響も与えずに渡されます。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "メタデータの入力を削除します。",
        "Documentation.LongDescription": "メタデータの入力を削除します。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "指定された値の型を返します。",
        "Documentation.LongDescription": "指定された値の型を返します。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "この関数は、内部での使用のみを想定しています。",
        "Documentation.LongDescription": "この関数は、内部での使用のみを想定しています。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Web ブラウザーで表示される、指定された URL の HTML を返します。",
        "Documentation.LongDescription": "指定された <code>url</code> に関して、Web ブラウザーで表示されるとおりの HTML を返します。省略可能なレコード パラメーター <code>options</code> を設定して追加のプロパティを指定することもできます。レコードには、次のフィールドを含めることができます。\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: 対象サイトに API キーの概念がある場合、このパラメーターを使用して、URL で使用する必要があるキー パラメーターの名前 (値ではありません) を指定できます。実際のキー値は資格情報で提供されています。</li>\r\n        <li><code>WaitFor</code>: ページの読み込みの待機 (必ず生じます) に加えて、HTML をダウンロードする前に待機する条件を指定します。Timeout および Selector のフィールド (あるいはその一方) を含むレコードとすることができます。Timeout のみを指定すると、関数は、HTML をダウンロードする前に、指定の時間待機します。Selector と Timeout の両方を指定した場合、ページに Selector が存在するようになる前に Timeout の有効期限が切れると、エラーがスローされます。Timeout を指定しないで Selector のみを指定すると、既定の Timeout である 30 秒が適用されます。</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "データにアクセスしています",
        "Documentation.Examples": [
          {
            "Description": "https://microsoft.com の HTML を返します。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS セレクターが存在するようになるのを待ってから、https://microsoft.com の HTML を返します。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "10 秒間待った後、https://microsoft.com の HTML を返します。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS セレクターが存在するようになるのを最大 10 秒待ってから、https://microsoft.com の HTML を返します。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "バイナリとして url からダウンロードされたコンテンツを返します。",
        "Documentation.LongDescription": "<code>url</code> からダウンロードされたコンテンツをバイナリとして返します。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます:\r\n    <ul>\r\n<li><code>Query</code> : エスケープを気にせずに、URL にクエリ パラメーターをプログラムで追加します。</li>\r\n<li><code>ApiKeyName</code> : ターゲット サイトに API キーの表記がある場合は、このパラメーターを使用して、URL で使用する必要のあるキー パラメーターの名前 (値ではなく) を指定できます。実際のキー値は資格情報で提供されます。</li>\r\n<li><code>Headers</code> : この値をレコードとして指定すると、HTTP 要求に追加ヘッダーが提供されます。</li>\r\n<li><code>Timeout</code> : この値を期間として指定すると、HTTP 要求のタイムアウトが変更されます。既定値は 100 秒です。</li>\r\n<li><code>ExcludedFromCacheKey</code> : この値を一覧として指定すると、これらの HTTP ヘッダー キーが、データをキャッシュするための計算から除外されます。</li>\r\n<li><code>IsRetry</code> : この論理値を true に指定すると、データをフェッチするときに、キャッシュ内の既存の応答が無視されます。</li>\r\n<li><code>ManualStatusHandling</code> : この値を一覧として指定すると、応答にこれらの状態コードのいずれかが含まれる HTTP 要求で、組み込み処理が回避されます。</li>\r\n<li><code>RelativePath</code> : この値をテキストとして指定すると、要求を作成する前にベース URL に追加されます。</li>\r\n<li><code>Content</code> : この値を指定すると、そのオプションの値が POST のコンテンツとして使用されて、Web 要求が GET から POST へ変更されます。</li>\r\n</ul>\r\n\r\n    HTTP 要求は、GET (コンテンツが指定されていない場合) または POST (Content がある場合) として行われます。POST 要求は匿名でのみ行うことができます。\r\n    <br>\r\n    HTTP 応答のヘッダーは、バイナリ結果のメタデータとして使用できます。カスタム データ コネクタ コンテキストの外部では、(セキュリティ上の理由から) 応答ヘッダーのサブセットのみが使用できます。\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath オプションとクエリ オプションを使用して、 <code>\"https://bing.com/search?q=Power+Query\"</code> のコンテンツを取得します。これらのオプションを使用して、静的ベースの URL を動的にクエリできます。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "バイナリ JSON ペイロードを渡して、応答を JSON として解析し、URL に対して POST を実行します。",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "クエリ文字列の一部として認証キーを受け入れるセキュリティで保護された URL に接続します。M で秘密キーをハードコーディングする代わりに (セキュリティ 上のリスクをもたらす)、\r\n  キーは M で名前 (値ではなく) を指定して、 Web API 認証を選択し、Web API 資格情報の一部としてキーの値を入力することで、安全に提供できます。\r\n     この方法で使用すると、次の例では、 <code>\"https://contoso.com/api/customers/get?api_key=******\"</code> への要求が生成されます。",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "URL からダウンロードされた HTTP ヘッダーをレコード値として返します。",
        "Documentation.LongDescription": "<code>url</code>からダウンロードされたヘッダーをレコードとして返します。省略可能なレコード パラメーター <code>options</code> を指定して、追加のプロパティを指定できます。レコードには次のフィールドを含めることができます:\r\n    <ul>\r\n<li><code>Query</code> : エスケープを気にせずに、URL にクエリ パラメーターをプログラムで追加します。</li>\r\n<li><code>ApiKeyName</code> : ターゲット サイトに API キーの表記がある場合は、このパラメーターを使用して、URL で使用する必要のあるキー パラメーターの名前 (値ではなく) を指定できます。実際のキー値は資格情報で提供されます。</li>\r\n<li><code>Headers</code> : この値をレコードとして指定すると、HTTP 要求に追加ヘッダーが提供されます。</li>\r\n<li><code>Timeout</code> : この値を期間として指定すると、HTTP 要求のタイムアウトが変更されます。既定値は 100 秒です。</li>\r\n<li><code>ExcludedFromCacheKey</code> : この値を一覧として指定すると、これらの HTTP ヘッダー キーが、データをキャッシュするための計算から除外されます。</li>\r\n<li><code>IsRetry</code> : この論理値を true に指定すると、データをフェッチするときに、キャッシュ内の既存の応答が無視されます。</li>\r\n<li><code>ManualStatusHandling</code> : この値を一覧として指定すると、応答にこれらの状態コードのいずれかが含まれる HTTP 要求で、組み込み処理が回避されます。</li>\r\n<li><code>RelativePath</code> : この値をテキストとして指定すると、要求を作成する前にベース URL に追加されます。</li>\r\n</ul>\r\n\r\n    HTTP 要求は HEAD メソッドを使用して行われます。カスタム データ コネクタ コンテキストの外部では、(セキュリティ上の理由から) 応答ヘッダーのサブセットのみが使用できます。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath オプションと Query オプションを使用して、 <code>\"https://bing.com/search?q=Power+Query\"</code> の HTTP ヘッダーを取得します。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "アクセス制御エントリ (ACE) の条件の評価対象となる承認コンテキスト。",
        "Documentation.LongDescription": "アクセス制御エントリ (ACE) の条件の評価対象となる承認コンテキスト。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "アクセス制御エントリ (ACE) のテーブル。",
        "Documentation.LongDescription": "承認規則を表すアクセス制御エントリ (ACE) の順序付けられたテーブル。各行は現在の承認コンテキストに対して (順に) 評価され、<code>条件</code>式が true を返す最初の行によって適用される規則が決定されます。<code>Action</code> 列は、規則の適用先となるアクションの種類を表します。<code>AccessControlKind</code> 列は、アクションに対してアクセスを許可するか拒否するかを決定します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "アクセス制御の種類を指定します。",
        "Documentation.LongDescription": "アクセス制御の種類を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "すべての値を表す型です。",
        "Documentation.LongDescription": "すべての値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "すべてのバイナリ値を表す型です。",
        "Documentation.LongDescription": "すべてのバイナリ値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "バイナリ エンコードの種類を指定します。",
        "Documentation.LongDescription": "バイナリ エンコードの種類を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "アイテムがグループ内で出現する見込みの回数を指定します。",
        "Documentation.LongDescription": "アイテムがグループ内で出現する見込みの回数を指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "実行するバッファーリングの型について説明します。",
        "Documentation.LongDescription": "実行するバッファーリングの型について説明します。",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "すべてのバイトを表す型です。",
        "Documentation.LongDescription": "すべてのバイトを表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "バイト順を指定します。",
        "Documentation.LongDescription": "バイト順を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "すべての文字を表す型です。",
        "Documentation.LongDescription": "すべての文字を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "圧縮の種類を指定します。",
        "Documentation.LongDescription": "圧縮の種類を指定します。",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "CSV ドキュメント内の引用符の有効性を指定します。",
        "Documentation.LongDescription": "CSV ドキュメント内の引用符の有効性を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "通貨値を表す型です。",
        "Documentation.LongDescription": "通貨値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "すべての日付値を表す型です。",
        "Documentation.LongDescription": "すべての日付値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "タイム ゾーンが関連付けられていない、すべての日付および時刻値を表す型です。",
        "Documentation.LongDescription": "タイム ゾーンが関連付けられていない、すべての日付および時刻値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "タイム ゾーンに対して相対的なすべての日付および時刻値を表す型です。",
        "Documentation.LongDescription": "タイム ゾーンに対して相対的なすべての日付および時刻値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "曜日を指定します。",
        "Documentation.LongDescription": "曜日を指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "固定小数点 10 進数を表す型です。",
        "Documentation.LongDescription": "固定小数点 10 進数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "倍精度浮動小数点数を表す型です。",
        "Documentation.LongDescription": "倍精度浮動小数点数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "すべての期間値を表す型です",
        "Documentation.LongDescription": "すべての期間値を表す型です",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "想定より多くの列を含む行内の余分な値に予期されるアクションを指定します。",
        "Documentation.LongDescription": "想定より多くの列を含む行内の余分な値に予期されるアクションを指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "すべての関数を表す型です。",
        "Documentation.LongDescription": "すべての関数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "グループ化の種類を指定します。",
        "Documentation.LongDescription": "同じキー値で複数のローカル グループが生成される場合がありますが、指定されたキー値では 1 つのグローバル グループしか生成されません。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "GUID 値を表す種類です。",
        "Documentation.LongDescription": "GUID 値を表す種類です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "ID は、ユーザー、グループ、デバイス、またはその他の識別可能な対象を表します。",
        "Documentation.LongDescription": "ID は、ユーザー、グループ、デバイス、またはその他の識別可能な対象を表します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "ID の作成先および比較対象となるスコープを定義します。",
        "Documentation.LongDescription": "ID の作成先および比較対象となるスコープを定義します。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "符号付き 16 ビット整数を表す型です。",
        "Documentation.LongDescription": "符号付き 16 ビット整数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "符号付き 32 ビット整数を表す型です。",
        "Documentation.LongDescription": "符号付き 32 ビット整数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "符号付き 64 ビット整数を表す型です。",
        "Documentation.LongDescription": "符号付き 64 ビット整数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "符号付き 8 ビット整数を表す型です。",
        "Documentation.LongDescription": "符号付き 8 ビット整数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "結合処理で使用する JOIN アルゴリズムを指定します。",
        "Documentation.LongDescription": "結合処理で使用する JOIN アルゴリズムを指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "結合処理の種類を指定します。",
        "Documentation.LongDescription": "結合処理の種類を指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "結合の左テーブルまたは右テーブルを指定します。",
        "Documentation.LongDescription": "結合の左テーブルまたは右テーブルを指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "このデータ ソースで使用される SQL 言語でサポートされている制限句の種類について説明します。",
        "Documentation.LongDescription": "このデータ ソースで使用される SQL 言語でサポートされている制限句の種類について説明します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "すべてのリストを表す型。",
        "Documentation.LongDescription": "すべてのリストを表す型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "すべての論理値を表す型です。",
        "Documentation.LongDescription": "すべての論理値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "想定より少ない列を含む行内で不足している値に対して予期されるアクションを指定します。",
        "Documentation.LongDescription": "想定より少ない列を含む行内で不足している値に対して予期されるアクションを指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "NULL を表す型。",
        "Documentation.LongDescription": "NULL を表す型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "すべての数値を表す型です。",
        "Documentation.LongDescription": "すべての数値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "OData サービスで省略できる値の種類を指定します。",
        "Documentation.LongDescription": "OData サービスで省略できる値の種類を指定します。",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "シーケンス内で要素が出現することを指定します。",
        "Documentation.LongDescription": "シーケンス内で要素が出現することを指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "並べ替えの方向を指定します。",
        "Documentation.LongDescription": "並べ替えの方向を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "テキストのパスワードを表す種類。",
        "Documentation.LongDescription": "テキストのパスワードを表す種類。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "パーセント値を表す種類です。",
        "Documentation.LongDescription": "パーセント値を表す種類です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "パーセンタイル モードの種類を指定します。",
        "Documentation.LongDescription": "パーセンタイル モードの種類を指定します。",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "比較の精度を指定します。",
        "Documentation.LongDescription": "比較の精度を指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "引用符のスタイルを指定します。",
        "Documentation.LongDescription": "引用符のスタイルを指定します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "ランキングの種類を指定します。",
        "Documentation.LongDescription": "ランキングの種類を指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "すべてのレコードを表す型です。",
        "Documentation.LongDescription": "すべてのレコードを表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "インデックス作成を入力の先頭と末尾のどちらから行うかを示します。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "四捨五入する可能性のある数字間に関係がある場合に丸める方向を指定します。",
        "Documentation.LongDescription": "四捨五入する可能性のある数字間に関係がある場合に丸める方向を指定します。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "SAP Business Warehouse 実行モード オプションの有効なオプションです。",
        "Documentation.LongDescription": "SAP Business Warehouse 実行モード オプションの有効なオプションです。",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA 分散オプションの有効なオプション。",
        "Documentation.LongDescription": "SAP HANA 分散オプションの有効なオプション。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA 範囲入力パラメーターの範囲演算子。",
        "Documentation.LongDescription": "SAP HANA 範囲入力パラメーターの範囲演算子。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "単精度浮動小数点数を表す型です。",
        "Documentation.LongDescription": "単精度浮動小数点数を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Spark のインスタンスに接続するときに使用するプロトコル。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "すべてのテーブルを表す型です。",
        "Documentation.LongDescription": "すべてのテーブルを表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "すべてのテキスト値を表す型です。",
        "Documentation.LongDescription": "すべてのテキスト値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "テキストのエンコードの種類を指定します。",
        "Documentation.LongDescription": "テキストのエンコードの種類を指定します。",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "すべての時刻値を表す型です。",
        "Documentation.LongDescription": "すべての時刻値を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "トレース レベルを指定します。",
        "Documentation.LongDescription": "トレース レベルを指定します。",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "すべての型を表す型です。",
        "Documentation.LongDescription": "すべての型を表す型です。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "テキスト URI を表すタイプ。",
        "Documentation.LongDescription": "テキスト URI を表すタイプ。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "HTTP メソッドを指定します。",
        "Documentation.LongDescription": "HTTP メソッドを指定します。",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
