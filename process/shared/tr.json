{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Bir Access veritabanının yapısal gösterimini döndürür.",
        "Documentation.LongDescription": "Bir Access veritabanının (<code>database</code>) yapısal gösterimini döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir kayıt parametresi (<code>options</code>) belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] olarak belirtilir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Belirli bir ana bilgisayardaki Analysis Services veritabanlarını döndürür.",
        "Documentation.LongDescription": "Bir Analysis Services örneği (<code>server</code>) üzerindeki veritabanlarını döndürür.  Ek özellikler belirtmek için isteğe bağlı bir kayıt parametresi (<code>options</code>) sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : &#199;ok boyutlu veya sekmeli modelde belirtilen t&#252;rlerin, eklenen &#246;l&#231;&#252;m s&#252;tunlarının t&#252;rleri i&#231;in kullanılıp kullanılmayacağını belirten bir mantıksal değer. False olarak ayarlandığında, t&#252;m &#246;l&#231;&#252;m s&#252;tunları i&#231;in &quot;number&quot; t&#252;r&#252; kullanılacaktır. Bu se&#231;enek i&#231;in varsayılan değer false şeklindedir.</li>\r\n<li><code>Culture</code> : Veriler i&#231;in k&#252;lt&#252;r&#252; belirten bir k&#252;lt&#252;r adı. Bu, &#39;Yerel Ayar Tanımlayıcısı&#39; bağlantı dizesi &#246;zelliğine karşılık gelir.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>SubQueries</code> : Bağlantı dizesinde &quot;SubQueries&quot; &#246;zelliğinin değerini ayarlayan bir sayı (0, 1 veya 2). Bu, alt se&#231;imlerde veya alt k&#252;plerde hesaplanan &#252;yelerin davranışını denetler. (Varsayılan değer 2&#39;dir).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale küpleri",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Bir AtScale'den küp verilerini içeri aktarın/DirectQuery ile sorgulayın.",
        "Documentation.LongDescription": "\r\n<code>server</code> sunucusunda AtScale’den küp verilerini döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir kayıt parametresi olan <code>options</code> belirtilebilir:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Çok boyutlu veya tablosal modelde belirtilen türlerin eklenen ölçü sütunu türleri için kullanılıp kullanılmayacağını belirten mantıksal bir değer. False olarak ayarlandığında, tüm ölçü sütunları için \"sayı\" türü kullanılır. Bu seçenek için varsayılan değer false’tur.</li>\r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgunun iptal edilmeden önce ne kadar süre (saniye cinsinden) çalışacağını denetler. Varsayılan değer, sürücüye bağlıdır. </li>\r\n        <li><code>ConnectionTimeout</code>: Sunucuyla bağlantı kurma denemesi bırakılmadan önce ne kadar süre (saniye cinsinden) bekleneceğini denetler. Varsayılan değer, sürücüye bağlıdır. </li>\r\n\r\n</ul>\r\nKayıt parametresi [option1 = value1, option2 = value2...] olarak belirtilir.",
        "Documentation.Examples": {
          "Description": "Bir AtScale küpündeki küp verilerini listele.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Veri Gezgini'nden (Kusto) verileri içeri aktarır",
        "Documentation.DisplayName": "Azure Veri Gezgini (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Veri Gezgini (Kusto)",
        "Documentation.LongDescription": "Azure Veri Gezgini (Kusto) örneğinizden verileri içeri aktarır",
        "Documentation.Examples": [
          {
            "Description": "Storm Olayları bilgilerinin bir tablosunu döndürür",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"Yardım\" kümesindeki \"Örnekler\" veritabanından Storm Olaylarını içeren tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics Hizmetinizin Url'sini girin.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps Analytics Hizmeti URL'sinden indirilen içeriği ikili değer olarak döndürür. Bu işlev, farklı kuruluşlar için farklı kimlik bilgileri kullanır."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services Akışı",
        "Documentation.DisplayName": "Azure DevOps Services Akışı",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan bir OData akışları tablosu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Kaydınızla ilişkilendirilen Azure Kurumsal REST API uç noktasının URL'sini girin",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Azure Kurumsal API'sinden raporların ve ayların bir listesini döndürür",
        "Documentation.Name": "Azure Kurumsal'dan verileri içeri aktarın",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Tables işlevini kullanarak sonuçları almak üzere belirli bir değere gitme.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Başlangıç sorgu örnekleri için https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli adresine bakın.",
        "Documentation.Examples": [
          {
            "Description": "'Resources' kullanıcı sorgusunun sonuçlarını içeren bir tablo döndür",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Tabloları bir Azure Spark örneğinde listeleyin.",
        "Documentation.LongDescription": "Tabloları bir Azure Spark örneğinde listeleyin.",
        "Documentation.Examples": [
          {
            "Description": "Tabloları bir Azure Spark örneğinde listeleyin.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Azure depolama kasasından belirtilen hesapta bulunan kapsayıcıları içeren bir gezinme tablosu döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasından, <code>account</code> hesap URL'sinde bulunan her bir kapsayıcı için bir satır içeren gezinme tablosu döndürür. Her satır, kapsayıcı bloblarının bir bağlantısını içerir. Şu seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>BlockSize</code> : Veri t&#252;keticisini beklemeden okunacak baytların sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>RequestSize</code> : Sunucuya tek bir HTTP isteğinde okunması denenecek bayt sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests se&#231;eneği, bellek kullanımı karşılığında paralel olarak yapılacak isteklerin sayısı belirtilerek verilerin daha hızlı indirilmesini destekler. Gereken bellek (ConcurrentRequest * RequestSize). Varsayılan değer 16&#39;dır.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Azure Data Lake Storage'dan belirtilen kapsayıcı ve alt klasörlerinde bulunan belgeleri içeren bir gezinti tablosu döndürür.",
        "Documentation.LongDescription": "Bir Azure Data Lake Storage dosya sisteminden <code>endpoint</code> hesap URL'sinde belirtilen kapsayıcı ve alt klasörlerinde bulunan belgeleri içeren bir gezinti tablosu döndürür. Şu seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>BlockSize</code> : Veri t&#252;keticisini beklemeden okunacak baytların sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>RequestSize</code> : Sunucuya tek bir HTTP isteğinde okunması denenecek bayt sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests se&#231;eneği, bellek kullanımı karşılığında paralel olarak yapılacak isteklerin sayısı belirtilerek verilerin daha hızlı indirilmesini destekler. Gereken bellek (ConcurrentRequest * RequestSize). Varsayılan değer 16&#39;dır.</li>\r\n<li><code>HierarchicalNavigation</code> : Dosyaların ağa&#231; benzeri bir dizin g&#246;r&#252;n&#252;m&#252;nde veya d&#252;z bir listede d&#246;nd&#252;r&#252;l&#252;p d&#246;nd&#252;r&#252;lmeyeceğini denetleyen mantıksal (true/false) değer. Varsayılan değer false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Bir Azure depolama kasasından, belirtilen hesapta bulunan tabloları içeren bir gezinme tablosu döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasındaki hesap URL'sinde (<code>account</code>) bulunan her tablo için bir satır içeren gezinti tablosu döndürür. Her satır, Azure tablosuna bir bağlantı içerir. Ek özellikleri belirtmek için isteğe bağlı bir kayıt parametresi (<code>options</code>) sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>Timeout</code> : Sunucuya y&#246;nelik istek bırakılmadan &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer kaynağa &#246;zg&#252;d&#252;r.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino’da Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Bu işlev .NET 4.5 gerektirdiğinden kullanılamıyor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Eski)",
        "Documentation.Caption": "Common Data Service (Eski)",
        "Documentation.LongDescription": "Common Data Service (Dynamics 365 ve PowerApps) verilerinize bağlanın."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "CSV belgesinin içeriğini tablo olarak döndürür.",
        "Documentation.LongDescription": "CSV belgesinin içeriklerini tablo olarak döndürür.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> değeri null, sütun sayısı, sütun adlarının listesi, bir tablo türü veya bir seçenekler kaydı olabilir.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code>, tek bir karakter veya bir karakter listesi veya satırların ardışık boşluk karakteri ile bölünmesi gerektiğini belirten <code>\"\"</code> değeri olabilir. Varsayılan: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Desteklenen <code>extraValues</code> değerleri için bkz. <code>ExtraValues.Type</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code>, metin kodlama türünü belirtir.\r\n      </li>\r\n    </ul>\r\n\r\n    <code>columns</code> için bir kayıt belirtilirse (ve <code>delimiter</code>, <code>extraValues</code>, <code>encoding</code> değerleri null olursa) şu kayıt alanları sağlanabilir:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: Sütun sınırlayıcısı. Varsayılan: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: Null, sütun sayısı, sütun adlarının listesi veya bir tablo türü olabilir. Sütun sayısı girişte bulunan sayıdan düşükse ek sütunlar yoksayılır. Sütun sayısı girişte bulunan sayıdan yüksekse ek sütunlar null olur. Belirtilmezse sütun sayısı girişte bulunan sayıya göre belirlenir.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: Dosyanın metin kodlaması. Varsayılan: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Alıntıların nasıl işleneceğini belirtir.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (varsayılan): Bir alandaki alıntılar yalnızca sınırlayıcıdan hemen sonra geliyorsa dikkate alınır.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Bir alandaki alıntılar, nerede göründüklerinden bağımsız olarak her zaman dikkate alınır.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Alıntılanan satır sonlarının nasıl işleneceğini belirtir.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (varsayılan): Alıntılanan satır sonları verilerin bir parçası olarak değerlendirilir. Geçerli satırın sonu olarak değerlendirilmezler.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Tüm satır sonları, alıntılanan bir değerde olduklarında bile geçerli satırın sonu olarak değerlendirilirler.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "CSV metnini sütun başlıkları ile birlikte işle",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Kullanılabilir boyutlar kümesini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "<code>cube</code> içindeki kullanılabilir boyutlar kümesini içeren bir tablo döndürür. Her boyut, bir boyut öznitelikleri kümesi içeren bir tablodur ve her boyut özniteliği de boyut tablosunda bir sütun olarak sunulur. Boyutlar, AddAndExpandDimensionColumn kullanılarak küp içinde genişletilebilir. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Nesnelerin (örneğin, boyutlar ve ölçüler) görünen klasör hiyerarşisini temsil eden iç içe tablolar ağacı döndürür.",
        "Documentation.LongDescription": "<code>cube</code> içinde kullanılabilen nesnelerin (örneğin, boyutlar ve ölçüler) görünen klasör hiyerarşisini temsil eden iç içe tablolar ağacı döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Küpte genişletilen ölçülerin özellikleri kümesini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Küpte genişletilen ölçüler için kullanılabilen özelliklerin kümesini içeren bir tablo döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Kullanılabilir ölçüler kümesini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "<code>cube</code> içindeki kullanılabilir ölçüler kümesini içeren bir tablo döndürür.\r\n    Her ölçü bir işlev olarak sunulur. Ölçüler, Cube.AddMeasureColumn kullanılarak küpe uygulanabilir.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Küpe uygulanabilecek bir dizi parametrenin bulunduğu bir tablo döndürür.",
        "Documentation.LongDescription": "<code>cube</code> öğesine uygulanabilecek bir dizi parametrenin bulunduğu bir tablo döndürür. Her bir parametre, parametre ve bağımsız değişkenlerinin uygulandığı <code>cube</code> almak üzere çağrılabilen bir işlevdir.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Küpte genişletilen boyutlar için kullanılabilir özellikler kümesini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Küpte genişletilen boyutlar için kullanılabilir özellikler kümesini içeren bir tablo döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage 1. Nesil",
        "Documentation.Description": "Azure Data Lake Storage 1. Nesil hesabınızın URL'sini girin.",
        "Documentation.LongDescription": "Azure Data Lake Storage 1. Nesil <code>URL'sinde</code> bulunan her klasör ve dosyaya ilişkin satır içeren bir tablo döndürür. Her satır, klasör veya dosya özelliklerinin yanı sıra bunların içeriğine yönelik bir bağlantı içerir."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage 1. Nesil",
        "Documentation.Description": "Azure Data Lake Storage hesabınızın URL'sini girin.",
        "Documentation.LongDescription": "Azure Data Lake Storage 1. Nesil <code>URL'sinde</code> bulunan her dosya için bir satır içeren bir tablo döndürür. Her satır, dosyanın özelliklerini ve içeriğinin bir bağlantısını içerir."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Azure Cosmos DB hesabına ilişkin bir URL girin.",
        "Documentation.LongDescription": "<code>url</code> adresinde bulunan Azure Cosmos DB veritabanlarına ilişkin bir tablo döndürür. <code>database</code> belirtilirse bunun yerine koleksiyonlara ilişkin bir tablo döndürülür. Ayrıca <code>options</code> kaydında <code>Query</code> alanı belirtilirse belirtilen veritabanında ve/veya koleksiyonda yürütülen sorguya ilişkin sonuçlar döndürülür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central (şirket içi) OData hizmet uç noktanızın URL'sini girin.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (şirket içi)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (şirket içi)",
        "Documentation.LongDescription": "İlgili Dynamics 365 Business Central (şirket içi) verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics NAV OData hizmet uç noktanızın URL'sini girin.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "İlgili Dynamics NAV verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Küpleri Essbase sunucusu tarafından gruplandırılan Essbase örneğinde döndürür.",
        "Documentation.LongDescription": "<code>url</code> AP sunucusundaki Essbase örneğinden Essbase sunucusuna göre gruplandırılmış bir küp tablosunu döndürür. Bir isteğe bağlı kayıt parametresi <code>options</code>, aşağıdaki seçenekleri denetlemek için belirtilebilir:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Excel çalışma kitabının içeriğini döndürür.",
        "Documentation.LongDescription": "Excel çalışma kitabının içeriğini döndürür.\r\n    <ul>\r\n     <li> <code>useHeaders</code> null veya döndürülen her tablonun ilk satırının bir üst bilgi veya seçenek kaydı olarak değerlendirilip değerlendirilmeyeceğini gösteren bir mantıksal (true/false) değer olabilir. Varsayılan: false.</li>\r\n     <li> <code>delayTypes</code> null olabilir veya döndürülen her tablonun sütunlarının türü belirlenmemiş olarak bırakılıp bırakılmayacağını gösteren bir mantıksal (true/false) değer olabilir. Varsayılan: false.</li>\r\n    </ul>\r\n\r\n    <code>useHeaders</code> için bir kayıt belirtilmişse (ve <code>delayTypes</code> null ise) şu kayıt alanları sağlanabilir:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Null olabilir veya döndürülen her tablonun ilk satırının üst bilgi olarak değerlendirilip değerlendirilmeyeceğini gösteren bir mantıksal (true/false) değer olabilir. Varsayılan: false.</li>\r\n     <li> <code>DelayTypes</code>: Null olabilir veya döndürülen her tablonun sütunlarının türü belirlenmemiş olarak bırakılıp bırakılmayacağını gösteren bir mantıksal (true/false) değer olabilir. Varsayılan: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Null olabilir veya veri içeren çalışma sayfası alanının dosyadaki boyut meta verileri okunarak değil, çalışma sayfasının kendisi okunarak çıkarsanıp çıkarsanmadığını gösteren bir mantıksal (true/false) değer olabilir. Bu, boyut meta verilerinin yanlış olduğu durumlarda yarar olabilir. Bu seçeneğin eski Excel dosyaları için değil, yalnızca Open XML Excel dosyaları için desteklendiğini unutmayın. Varsayılan: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Bir Excel çalışma kitabından Sheet1 içeriklerini döndürün.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Belirtilen klasörde bulunan dosya ve klasörlerin özelliklerini ve içeriğini içeren bir tablo geri gönderir.",
        "Documentation.LongDescription": "<code>path</code> klasöründeki her klasör ve dosya için satır içeren bir tablo döndürür. Her satır, klasörün veya dosyanın özelliklerini ve içeriğine yönelik bağlantı içerir. <code>options</code> parametresi şu anda yalnızca dahili kullanıma yöneliktir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Belirtilen klasörde ve alt klasörlerde bulunan dosya ve klasörlerin özellik ve içeriğini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "<code>path</code> klasöründeki ve tüm alt klasörlerindeki her klasör ve dosya için satır içeren bir tablo döndürür. Her satır, dosyanın özelliklerini ve içeriğine yönelik bağlantı içerir. <code>options</code> parametresi şu anda yalnızca dahili kullanıma yöneliktir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Azure AD kullanarak bir Google BigQuery veritabanından verileri içe aktarın",
        "Documentation.LongDescription": "\r\n      <code>Faturalandırma Projesi Kimliği</code> için Azure AD kullanan Google BigQuery'deki kullanılabilir projeleri listeleyen bir tablo döndürür. Aşağıdaki seçenekleri kontrol etmek için isteğe bağlı bir kayıt parametresi olan <code>options</code> belirtilebilir: \r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Sunucuyla bağlantı kurma girişiminden vazgeçmeden önce ne kadar bekleneceğini kontrol eden bir süre. Varsayılan değer ODBC Bağlantı Zaman Aşımı değeridir.</li>\r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar süreyle çalışmasına izin verileceğini kontrol eden bir süre.</li>\r\n        <li><code>UseStorageApi</code>: Büyük sonuç kümeleri için BigQuery Storage API'nin kullanılıp kullanılmayacağını belirtir. Depolama API'sini kullanmak için varsayılan değer true’dur. Depolama API'sini kullanmamak için false olarak ayarlayın</li>\r\n        <li><code>AudienceUri</code>: Bu, ODBC sürücüsünün belirteç değişim istekleri için kullanabileceği hedef kitle URI'sidir. Bu alan, tam bir URI (ör. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) olmalıdır; burada pool_id, işgücü havuzunu tanımlamak için genel olarak benzersiz bir addır.</li>\r\n      </ul>\r\n    Kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] olarak belirtilir.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Azure AD kullanarak Google BigQuery'deki mevcut projeleri listeleyin",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "Verileri Google Sheets'ten içeri aktarır",
        "Documentation.LongDescription": "Verileri Google Sheets'ten içeri aktarır"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Azure depolama kasasından belirtilen hesapta bulunan kapsayıcıları içeren bir gezinme tablosu döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasından, <code>account</code> hesap URL'sinde bulunan her bir kapsayıcı için bir satır içeren gezinme tablosu döndürür. Her satır, kapsayıcı bloblarının bir bağlantısını içerir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Azure depolama kasasından belirtilen hesapta bulunan kapsayıcıları içeren bir gezinme tablosu döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasından, <code>account</code> hesap URL'sinde bulunan her bir kapsayıcı için bir satır içeren gezinme tablosu döndürür. Her satır, kapsayıcı bloblarının bir bağlantısını içerir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Bir Hadoop dosya sisteminden belirtilen klasörde bulunan dosya ve klasörlerin özellik ve içeriğini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Bir Hadoop dosya sisteminden <code>url</code> klasör URL'sindeki her klasör ve dosya için bir satır içeren bir tablo döndürür. Her satır klasör veya dosyanın özelliklerini ve içeriğine yönelik bağlantı içerir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Bir Hadoop dosya sisteminden belirtilen klasörde ve alt klasörlerde bulunan dosya ve klasörlerin özellik ve içeriğini içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Bir Hadoop dosya sisteminden <code>url</code> klasör URL'sindeki ve alt klasörlerdeki her klasör ve dosya için bir satır içeren bir tablo döndürür. Her satır dosyanın özelliklerini ve içeriğine yönelik bağlantı içerir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Bir Impala kümesinden verileri içeri aktarın",
        "Documentation.LongDescription": "Bir <code>server</code> Impala kümesinden verileri içeri aktarın. Bağlantı noktası belirtilmemişse varsayılan bağlantı noktası olarak 21050 kullanılır.",
        "Documentation.Examples": [
          {
            "Description": "Bir Impala kümesindeki tabloları listeleyin.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Veri Gezgini'nden (Kusto) verileri içeri aktarır",
        "Documentation.DisplayName": "Azure Veri Gezgini (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Veri Gezgini (Kusto)",
        "Documentation.LongDescription": "Azure Veri Gezgini (Kusto) örneğinizden verileri içeri aktarır",
        "Documentation.Examples": [
          {
            "Description": "Storm Olayları bilgilerinin bir tablosunu döndürür",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"Yardım\" kümesindeki \"Örnekler\" veritabanından Storm Olaylarını içeren tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Satış Gezgini",
        "Documentation.LongDescription": "LinkedIn Satış Gezgini",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "MailChimp uç noktasına ait verilerin yer aldığı bir tabloyu döndürür.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "MailChimp API'sine çağrıda bulunur ve sonuç veri kümesini tablo olarak döndürür. Tüm sonuçları otomatik olarak sayfalara ayırır. Kök uç noktanın ve JSON yanıtındaki ana entityName öğesinin eşleşmediği API uç noktaları için isteğe bağlı entityName parametresi kullanılabilir.",
        "Documentation.Examples": [
          {
            "Description": "MailChimp API'sinin listeler uç noktasına ait verilerin yer aldığı bir tabloyu çeker.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Liste verilerinin yer aldığı bir tablo."
          },
          {
            "Description": "MailChimp API'sinin campaign-folders uç noktasına ait verilerin yer aldığı bir tabloyu çeker.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Kampanya-klasörleri verilerinin yer aldığı bir tablo."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "MailChimp API uç noktasına ait ham yanıt sonuçlarını döndürür.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "MailChimp API'sine çağrıda bulunur ve ham yanıtı döndürür.",
        "Documentation.Examples": [
          {
            "Description": "Belirli bir kampanya için reports/click-details MailChimp API uç noktasından ham verileri döndürür.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Belirli kampanyaya ait tıklama ayrıntıları ham verileri."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Gelişmiş sorgu işlevleri sağlayın.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Gelişmiş sorgu işlevleri sağlayın.",
        "Documentation.Examples": [
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, 2017-5-1 ile 2017-6-15 arasındaki özet verilerini alın",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2017-5-1 ile 2017-6-15 arasındaki özet verilerini döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, Nisan 2017'ye ait özet verilerini alın.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2017-4-1 ile 2017-4-30 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, Nisan 2017'den şimdiye kadar olan özet verilerini alın.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2017-4-1 ile 2017-6-15 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, geçen Aralık ayı ile bu Şubat ayı arasındaki özet verilerini alın ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2016-12-1 ile 2017-2-28 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, son 18 aya ait market ücretlerini alın",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2015-12-1-ile 2017-6-15 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, Haziran 2017 ve Mayıs 2017'ye ait ayrıntılı ücretleri alın",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2017-5-1 ile 2017-6-15 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 03.07.2017 olduğu varsayılırsa, Temmuz 2016'ya ait ayrıntılı ücretleri alırsınız",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev, 01.07.2016 ve 31.07.2016 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-7-13 olduğu varsayılırsa, geçen 10 ay artı bu aya ait 13 gün için bakiye özetlerini alın",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "İşlev 2016-9-1 ile 2017-7-13 arasındaki verileri döndürür"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "ODBC veri kaynağından SQL tablolarından ve görünümlerinden oluşan bir tablo döndürür. ",
        "Documentation.LongDescription": "<code>connectionString</code> bağlantı dizesi tarafından belirtilen ODBC veri kaynağından SQL tablolarının ve görünümlerinin bir tablosunu döndürür. <code>connectionString</code> metin veya özellik değeri çiftlerinin kaydı olabilir. Özellik değerleri, metin veya sayı olabilir. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer 15 saniyedir.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Sağlanan bağlantı dizesinden SQL tablolarını ve görünümleri döndürün.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "OLE DB veri kaynağından SQL tablolarının ve görünümlerinin olduğu bir tablo döndürür.",
        "Documentation.LongDescription": "<code>connectionString</code> bağlantı dizesi tarafından belirtilen OLE DB veri kaynağından SQL tablolarının ve görünümlerinin olduğu bir tablo döndürür. <code>connectionString</code>, özellik değeri çiftlerinin bir kaydı veya metin olabilir. Özellik değerleri metin veya sayı olabilir. Ek parametreleri belirtmek için isteğe bağlı bir <code>options</code> parametresi sağlanabilir. Kayıt şu alanları içerebilir\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Oracle Database'den SQL tablolarının ve görünümlerinin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusundaki Oracle Database'de bulunan SQL tablolarını ve görünümlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Bir PDF dosyasında bulunan tüm tabloları döndürür.",
        "Documentation.LongDescription": "<code>pdf</code> 'da bulunan tüm tabloları döndürür. Ek özellikleri belirtmek için isteğe bağlı bir kayıt parametresi <code>options</code> sağlanabilir. Kayıt aşağıdaki alanları içerebilir:\r\n    <ul>\r\n<li><code>Implementation</code> : Tabloları tanımlarken kullanılacak algoritma s&#252;r&#252;m&#252;. Eski s&#252;r&#252;mler, algoritma g&#252;ncelleştirmelerinin eski sorguları bozmasını &#246;nlemek i&#231;in yalnızca geriye d&#246;n&#252;k uyumluluk i&#231;in kullanılabilir. En yeni s&#252;r&#252;m her zaman en iyi sonu&#231;ları vermelidir. Ge&#231;erli değerler: &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; veya null.</li>\r\n<li><code>StartPage</code> : İncelenecek sayfalar arasından ilk sayfayı belirtir. Varsayılan: 1.</li>\r\n<li><code>EndPage</code> : İncelenecek sayfalar arasından son sayfayı belirtir. Varsayılan: belgenin son sayfası.</li>\r\n<li><code>MultiPageTables</code> : Art arda gelen sayfalardaki benzer tabloların otomatik olarak tek bir tabloda birleştirilip birleştirilmeyeceğini denetler. Varsayılan: true.</li>\r\n<li><code>EnforceBorderLines</code> : Kenarlık &#231;izgilerinin her zaman h&#252;cre sınırı olarak zorunlu mu kılınacağını (true olduğunda), yoksa h&#252;cre sınırlarını belirlemek i&#231;in pek &#231;ok ipucundan biri olarak mı kullanılacağını (false olduğunda) denetler. Varsayılan: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Verilere erişiliyor",
        "Documentation.Examples": [
          {
            "Description": "sample.pdf içinde yer alan tabloları döndürür.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"},...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Planview Projectplace hesabınızın URL'sini girin.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "İlgili Planview Projectplace verilerinin tablosunu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρŷτћοŋ šсŗìφτ",
        "Documentation.Description": "∑хэćцŧεš Рỳŧĥθή šćŗĭþŧ дπδ ѓзţϋŕп§ ďαţà ƒŗámзş",
        "Documentation.Examples": {
          "Description": "∑хэćцŧεš Рỳŧĥθή šćŗĭþŧ дπδ ѓзţϋŕп§ ďαţà ƒŗámзş",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я ѕ¢ŗïφť",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Her satırın alan adı ve girdi kaydının değerini içerdiği bir tablo döndürür.",
        "Documentation.LongDescription": "<code>record</code> içindeki her alan için birer satır içerecek şekilde <code>Name</code> ve <code>Value</code> sütunlarını içeren bir tablo döndürür.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki tabloyu döndürür.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "SAP HANA veritabanındaki paketleri döndürür.",
        "Documentation.LongDescription": "<code>server</code> SAP HANA veritabanındaki çok boyutlu paketlere ilişkin bir tablo döndürür. <code>options</code>, isteğe bağlı bir kayıt parametresi olarak aşağıdaki seçenekleri denetlemek üzere belirtilebilir:\r\n    <ul>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>Distribution</code> : Bağlantı dizesindeki &quot;Distribution&quot; &#246;zelliğinin değerini ayarlayan SapHanaDistribution. Deyim y&#246;nlendirme, deyim y&#252;r&#252;tme &#246;ncesinde dağıtılmış bir sistemin doğru sunucu d&#252;ğ&#252;m&#252;n&#252; değerlendirme y&#246;ntemidir. Varsayılan değer SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Kullanılacak SAP HANA bağlayıcı uygulamasını belirtir.</li>\r\n<li><code>EnableColumnBinding</code> : Veri getirilirken değişkenleri bir SAP HANA sonu&#231; k&#252;mesinin s&#252;tunlarına bağlar. Biraz daha y&#252;ksek bellek kullanımı pahasına performansı artırma olasılığı olabilir. Varsayılan değer yanlış’tır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer 15 saniyedir.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Bir SharePoint sitesi içeriğine sahip bir tablo döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>url</code> SharePoint sitesi üzerinde bulunan her bir klasör ve belge için ayrı bir satır içeren bir tablo döndürür. Her satır, klasörün veya dosyanın özelliklerini ve içeriğine bir bağlantı içerir. Aşağıdaki seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Bu site i&#231;in kullanılacak SharePoint API s&#252;r&#252;m&#252;n&#252; belirten bir sayı (14 veya 15) ya da &quot;Auto&quot; metni. Belirtilmediği takdirde API 14 s&#252;r&#252;m&#252; kullanılır. Auto belirtildiğinde m&#252;mk&#252;nse, sunucu s&#252;r&#252;m&#252; otomatik olarak bulunur; aksi takdirde s&#252;r&#252;m, varsayılan olarak 14&#39;t&#252;r. İngilizce olmayan SharePoint siteleri i&#231;in en az 15 s&#252;r&#252;m&#252; gereklidir.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Bir SharePoint sitesindeki belgeleri içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>url</code> SharePoint sitesinde ve alt klasörlerde bulunan her belge için ayrı bir satır içeren bir tablo döndürür. Her satır, klasörün veya dosyanın özelliklerini ve içeriğine bir bağlantı içerir. Aşağıdaki seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Bu site i&#231;in kullanılacak SharePoint API s&#252;r&#252;m&#252;n&#252; belirten bir sayı (14 veya 15) ya da &quot;Auto&quot; metni. Belirtilmediği takdirde API 14 s&#252;r&#252;m&#252; kullanılır. Auto belirtildiğinde m&#252;mk&#252;nse, sunucu s&#252;r&#252;m&#252; otomatik olarak bulunur; aksi takdirde s&#252;r&#252;m, varsayılan olarak 14&#39;t&#252;r. İngilizce olmayan SharePoint siteleri i&#231;in en az 15 s&#252;r&#252;m&#252; gereklidir.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "SharePoint Listesinde bulunan içeriklerin bulunduğu bir tablo döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>url</code> SharePoint listesi üzerinde bulunan her bir Liste öğesi için ayrı bir satır içeren bir tablo döndürür. Her bir satır, Liste özelliklerini içerir. Aşağıdaki seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Bu site i&#231;in kullanılacak SharePoint API s&#252;r&#252;m&#252;n&#252; belirten bir sayı (14 veya 15) ya da &quot;Auto&quot; metni. Belirtilmediği takdirde API 14 s&#252;r&#252;m&#252; kullanılır. Auto belirtildiğinde m&#252;mk&#252;nse, sunucu s&#252;r&#252;m&#252; otomatik olarak bulunur; aksi takdirde s&#252;r&#252;m, varsayılan olarak 14&#39;t&#252;r. İngilizce olmayan SharePoint siteleri i&#231;in en az 15 s&#252;r&#252;m&#252; gereklidir.</li>\r\n<li><code>Implementation</code> : İsteğe bağlı. SharePoint bağlayıcısının hangi s&#252;r&#252;m&#252;n&#252;n kullanılacağı belirtir. Kabul edilen değerler: &quot;2.0&quot; veya null. Değer &quot;2.0&quot; ise SharePoint bağlayıcısı 2.0 uygulaması kullanılır. Değer null ise SharePoint bağlayıcısı &#246;zg&#252;n uygulaması kullanılır.</li>\r\n<li><code>ViewMode</code> : İsteğe bağlı. Bu se&#231;enek yalnızca 2.0 uygulaması i&#231;in ge&#231;erlidir. Kabul edilen değerler: &quot;All&quot; ve &quot;Default&quot;. Değer belirtilmezse değer, &quot;All&quot; olarak ayarlanır. &quot;All&quot; belirtildiğinde g&#246;r&#252;n&#252;m, kullanıcı tarafından oluşturulan ve sistem tarafından tanımlanan t&#252;m s&#252;tunları i&#231;erir. &quot;Default&quot; se&#231;eneği belirtildiğinde g&#246;r&#252;n&#252;m, kullanıcının ayarlarında Default olarak ayarladığı g&#246;r&#252;n&#252;mde listeye &#231;evrimi&#231;i olarak bakarken g&#246;rd&#252;ğ&#252;yle eşleşir. Kullanıcı, kendi tarafından oluşturulan veya sistem tarafından tanımlanan s&#252;tunlar eklemek veya kaldırmak i&#231;in ya da yeni bir g&#246;r&#252;n&#252;m oluşturup varsayılan olarak ayarlayarak varsayılan g&#246;r&#252;n&#252;m&#252;n&#252; d&#252;zenlerse bu değişiklikler bağlayıcı &#252;zerinden yayılır.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Bağlayıcının not s&#252;tunları i&#231;in ayrı bir u&#231; nokta kullanmasını engeller.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Belirtilen URL'deki içeriğin SODA 2.0 API'sine göre biçimlendirilmiş bir tablosunu döndürür.",
        "Documentation.LongDescription": "Belirtilen URL <code>url</code> içeriğinin SODA 2.0 API'sine göre biçimlendirilmiş bir tablosunu döndürür. URL, SODA uyumlu ve bir .csv uzantısı ile biten geçerli bir kaynağa işaret etmelidir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Bu işlev, SparkPost API v1 \"Lists\" uç noktalarından herhangi birini çağırmak için kullanılabilir. Bu işlevi kullanarak SparkPost API'sine çağrı yaparken SparkPost API'sinin kesin bir API hız sınırı olduğunu unutmayın. SparkPost sunucusundan 429 durum kodunun döndürüldüğünü görürseniz hız sınırına ulaştınız demektir ve başka çağrı yapmadan önce birkaç saniye beklemeniz gerekir.",
        "Documentation.Examples": [
          {
            "Description": "SparkPost API v1 \"Lists\" uç noktalarından birinin verileriyle doldurulmuş tek bir sütunu olan bir tablo döndürür. (Ayrıntılar için SparkPost belgelerine bakın.)",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Kullanıcı tarafından belirtilen sayıda gün için toplanan verilerle SparkPost bağlayıcısının kullanıma açtığı yerleşik tabloları al. Bu tabloları yenilerken veya bu bağlayıcıyı kullanarak SparkPost API'sine çağrı yaparken SparkPost API'sinin kesin bir API hız sınırı olduğunu unutmayın. SparkPost sunucusundan 429 durum kodunun döndürüldüğünü görürseniz hız sınırına ulaştınız demektir ve başka çağrı yapmadan birkaç saniye beklemeniz gerekir. Gün sayısı parametresi için bir değer seçerken API'nin yalnızca 6 aylık veri depoladığını akılda tutun."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Bir SQL Sunucusu üzerindeki veritabanlarının tablosunu döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>server</code> SQL sunucusundaki veritabanlarını içeren bir tablo döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Oluşturulan SQL sorgusundaki &quot;maxdop&quot; sorgu yan t&#252;mcesinin değerini ayarlayan bir sayı.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>MultiSubnetFailover</code> : Bağlantı dizesindeki &quot;MultiSubnetFailover&quot; &#246;zelliğinin değerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>UnsafeTypeConversions</code> : True ise başarısız olabilecek ve t&#252;m sorgunun başarısız olmasına neden olabilecek t&#252;r d&#246;n&#252;şt&#252;rmelerinin kaynağa d&#246;nd&#252;r&#252;lmeye &#231;alışılacağı mantıksal değer (true/false). Genel kullanım i&#231;in &#246;nerilmez.</li>\r\n<li><code>ContextInfo</code> : Her komutu &#231;alıştırmadan &#246;nce CONTEXT_INFO ayarlamak i&#231;in kullanılan ikili değer.</li>\r\n<li><code>OmitSRID</code> : True ise geometri ve coğrafya t&#252;rlerinden İyi Bilinen Metin oluşturulurken SRID&#39;nin atlanacağı bir mantıksal değer (true/false).</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : True olduğunda sorgu d&#246;nd&#252;rmenin aynı sunucuda veritabanlarına erişmesini sağlayan mantıksal (true/false) bir değer. Varsayılan değer false&#39;tur.</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] olarak belirtilir.\r\n    <br>\r\n    Bir SQL sorgusunun sunucuda çalıştırılacak şekilde ayarlanması desteklenmez. SQL sorgusunun çalıştırılması için bunun yerine <code>Sql.Database</code> kullanılmalıdır.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Yapılan API çağrılarını sınırlama seçeneğiyle birlikte Stripe API'sine çağrıda bulunur.",
        "Documentation.LongDescription": "Ek parametre olarak geçirilen isteğe bağlı <code>query</code> kaydı ve API istek sayısına ilişkin bir limit olarak belirlenen <code>pageLimit</code> ile birlikte https://api.stripe.com/v1/<code>method</code> üzerinde bulunan Stripe API'sine çağrıda bulunur. Önce en güncel veriler döndürülür. <code>pageLimit</code> belirtilmediyse tüm veriler döndürülür. 2015-10-16 Stripe Sürümü kullanılmaktadır.",
        "Documentation.Examples": [
          {
            "Description": "Ücretlere ilişkin tüm verileri döndürür",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Geçerli Stripe hesabına ilişkin tüm ücret verilerinin yer aldığı bir tablo"
          },
          {
            "Description": "Ücret verilerine ilişkin bir sayfa döndürür",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Geçerli Stripe hesabına ilişkin en güncel ücret verilerinin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Bir tabloyu değerlendirme sırasındaki dış değişikliklerden yalıtarak arabelleğe alır.",
        "Documentation.LongDescription": "Tabloyu, değerlendirme sırasında dış değişikliklerden yalıtarak bellekte arabelleğe alır.\r\n    Önbelleğe alma yüzeysel bir işlemdir. Skaler hücre değerlerinin değerlendirilmesini zorlar ancak skaler olmayan değerleri (kayıtlar, listeler, tablolar vb.) olduğu gibi bırakır.\r\n    <br>\r\n    <br>\r\n    Bu işlevi kullanmanın sorgularınızın daha hızlı çalışmasını sağlayabileceğine veya sağlayamayacağına dikkat edin. Bu, bazı durumlarda tüm verileri okuma ve bellekte depolama ek maliyetinin yanı sıra, \r\n    arabelleğe almanın aşağı katlamayı önlemesi nedeniyle sorgularınızın daha yavaş çalışmasına neden olabilir. Verilerin arabelleğe alınması gerekmiyorsa\r\n    ancak aşağı katlamayı önlemek istiyorsanız bunun yerine <code>Table.StopFolding</code> kullanın.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Aşağı akış işlemlerinin artık SQL sunucusunu sorgulayamaması için SQL tablosunun tüm satırlarını belleğe yükleyin.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Bir tablo listesini birleştirmenin sonucu olan bir tablo döndürür.",
        "Documentation.LongDescription": "Tablo listesi <code>tables</code> ile birleştirmenin sonucu olan bir tablo döndürür. Sonuçta ortaya çıkan tablo, <code>columns</code> tarafından tanımlanan satır tipi yapıya ya da <code>columns</code> belirtilmemişse giriş türlerinin bir birleşmesine sahip olacaktır.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Üç tabloyu birleştirir.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Farklı yapılarla üç tabloyu birleştirin.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "İki tabloyu ve projeyi verilen tür üzerinde birleştirin.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Sütun üst bilgilerinin düzeyini ilk değer satırına düşürür.",
        "Documentation.LongDescription": "Sütun üst bilgilerinin düzeyini (örn. sütun başlıkları) ilk değer satırına düşürür. Varsayılan sütun adları \"Column1\", \"Column2\" vb. şekildedir.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki ilk değer satırının düzeyini düşürür.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Yinelenen satırları tablodan kaldırır.",
        "Documentation.LongDescription": "Yinelenen satırları tablodan kaldırır.\r\n    İsteğe bağlı<code>equationCriteria</code> parametresi tablodaki hangi sütunlar için yineleme testi yapılacağını belirtir. <code>equationCriteria</code> belirtilmezse tüm sütunlar test edilir.<br>\r\n    <br>\r\n    Power Query bazen belirli işlemleri arka uç veri kaynaklarına boşalttığından (“kaynağa döndürme” olarak bilinir) ve ayrıca bazen kesinlikle gerekli olmayan işlemleri \r\n    atlayarak sorguları iyileştirdiğinden, genel olarak hangi yinelenen satırların korunacağı garanti edilemez.\r\n    Örneğin, benzersiz bir sütun değerleri kümesi içeren ilk satırın korunacağını ve tablodaki diğer satırların kaldırılacağını varsayamazsınız.\r\n    Yinelenenleri kaldırma işleminin beklendiği şekilde davranmasını istiyorsanız önce <code>Table.Buffer</code> kullanarak tabloyu arabelleğe alın.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki yinelenen satırları kaldırır.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "<code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> tablosunda [b] sütunundaki yinelenen satırları kaldırır.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Bir sütun listesinden ve belirtilen değerlerden tablo oluşturur.",
        "Documentation.LongDescription": "<code>lists</code> listesinden <code>columns</code> türünde, sütun adlarını ve değerlerini içeren iç içe yerleştirilmiş listeleri bulunduran bir tablo oluşturur.\r\n    Bazı sütunlarda diğerlerinden daha fazla değer varsa, eksik değerler sütunlar null atanabilir ise varsayılan değer olan 'null' ile doldurulur.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Listede yer alan bir müşteri adları listesinden bir tablo döndürür. Müşteri listesi öğesindeki her bir değer satır değeri olurken her bir liste sütun olur.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Verilen sütun listesinden ve sütun adları listesinden tablo oluşturur.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Satır başına farklı sütun sayıları olan bir tablo oluşturur. Eksik satır değeri null'dur.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Bir listeyi belirtilen ayırma işlevini listedeki her öğeye uygulayarak bir tabloya dönüştürür.",
        "Documentation.LongDescription": "<code>list</code> listesini <code>splitter</code> isteğe bağlı ayırma işlevini listedeki her öğeye uygulayarak bir tabloya dönüştürür. Varsayılan olarak, listenin virgülle ayrılmış metin değerleri listesi olduğu varsayılır. İsteğe bağlı <code>columns</code> sütun sayısı, sütun listesi veya bir TableType olabilir. İsteğe bağlı <code>default</code> ve <code>extraValues</code> belirtilebilir.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Varsayılan ayırıcıyı kullanarak listeden bir tablo oluşturun.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Özel bir ayırıcı kullanarak listeden bir tablo oluşturun.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Record.FieldValues ayırıcısını kullanarak listeden bir tablo oluşturun.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Bir kayıt listesini tabloya dönüştürür.",
        "Documentation.LongDescription": "<code>records</code> kayıt listesini tabloya dönüştürür.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Kayıt alan adlarını sütun adları olarak kullanarak bir kayıt tablosu oluşturun.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Yazılı sütunlardan oluşan bir kayıt tablosu oluşturun ve sütun sayısını seçin.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Satır değerlerinin ve isteğe bağlı sütunların bulunduğu listeden bir tablo oluşturur",
        "Documentation.LongDescription": "<code>rows</code> listesinden listenin her öğesinin tek bir satır için sütun değerlerini içerdiği bir tablo oluşturur. <code>columns</code> için sütun adlarının isteğe bağlı bir listesi, tablo türü veya sütun sayısı sağlanabilir.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "[CustomerID] sütunu {1, 2} değerlerine, [Name] sütunu {\"Bob\", \"Jim\"} değerlerine ve [Phone] sütunu {\"123-4567\", \"987-6543\"} değerlerine sahip olacak şekilde bir tablo döndürür.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "[CustomerID] bir sayı türü, [Name] ve [Phone] ise metin türleri olmak üzere; [CustomerID] sütunu {1, 2} değerlerine, [Name] sütunu {\"Bob\", \"Jim\"} değerlerine ve [Phone] sütunu {\"123-4567\", \"987-6543\"} değerlerine sahip olacak şekilde bir tablo döndürür.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Sağlanan değerlerden bir sütun içeren tablo oluşturur.",
        "Documentation.LongDescription": "Sağlanan değeri veya değerler listesini, <code>value</code> içeren bir sütuna sahip bir tablo oluşturur. İsteğe bağlı bir kayıt parametresi olan <code>options</code>, aşağıdaki seçenekleri denetlemek için belirtilebilir:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Listeden veya skaler değerinden bir tablo oluştururken kullanılan sütun adı.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "1 değerinden tablo oluşturur.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Listeden bir tablo oluşturur.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Özel bir sütun adıyla, değer 1'den bir tablo oluşturun.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Bir tablonun bölümlenme şekli ile ilgili bilgi döndürür.",
        "Documentation.LongDescription": "Bir tablonun bölümlenme şekli ile ilgili bilgi döndürür.  Her sütunun asıl tabloda bölümleme sütunu olduğunda ve her satırın asıl tabloda bir bölümlemeye karşılık geldiğinde tablo döndürülür.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Tabloların sütun profilini döndürür.",
        "Documentation.LongDescription": "<p><code>table</code> içindeki sütunlara ilişkin bir profil döndürür.</p>\r\n<p>Her bir sütun için (uygulanabilir olduğu durumlarda) şu bilgiler döndürülür:\r\n<ul>\r\n  <li>minimum</li>\r\n  <li>maksimum</li>\r\n  <li>ortalama</li>\r\n  <li>standart sapma</li>\r\n  <li>sayım</li>\r\n  <li>null sayısı</li>\r\n  <li>ayrı sayım</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Değerlerin ilk satırını yeni sütun başlıkları (sütun adları) olarak yükseltir.",
        "Documentation.LongDescription": "Değerlerin ilk satırını yeni sütun başlıkları (sütun adları) olarak yükseltir. Varsayılan olarak yalnızca metin veya sayı değerleri başlık olarak yükseltilir. Geçerli seçenekler:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : <code>true</code> olarak ayarlandığı takdirde ilk satırdaki tüm skaler değerler, belirtilmişse <code>Culture</code> (veya mevcut belge yerel ayarı) kullanımıyla başlık olarak yükseltilir.\r\n    Metne dönüştürülemeyen değerler için varsayılan bir sütun adı kullanılır.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: Veri kültürünü tanımlayan bir kültür adı.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki ilk değer satırını yükseltir.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Tablonun ilk satırındaki tüm skaler değerleri başlıklar olarak yükseltin.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "İlk sayı satırları atlanacak şekilde bir tablo döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunun ilk belirtilen sayıda, <code>countOrCondition</code>, satırı içermeyen bir tablo döndürür.\r\n    Kaldırılan satır sayısı <code>countOrCondition</code> isteğe bağlı parametresine bağlıdır.\r\n    <ul>\r\n    <li> <code>countOrCondition</code> dahil edilmezse, yalnızca ilk satır kaldırılır. </li>\r\n    <li> <code>countOrCondition</code> bir sayı ise bu sayıda satır (üstten başlayarak) kaldırılır. </li>\r\n    <li> <code>countOrCondition</code> bir koşul ise koşulu sağlayan satırlar, herhangi bir satır koşulu sağlamayana kadar kaldırılır.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk satırını kaldırır.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tablonun ilk iki satırını kaldırır.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabloda [CustomerID] <=2 koşulunu sağlayan ilk satırları kaldırır.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Son N satırları kaldıran bir tablo döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunun son <code>countOrCondition</code> satırını içermeyen bir tablo döndürür.\r\n        Kaldırılan satır sayısı <code>countOrCondition</code> isteğe bağlı parametresine bağlıdır.\r\n    <ul>\r\n    <li> <code>countOrCondition</code> dahil edilmezse yalnızca son satır kaldırılır. </li>\r\n    <li> <code>countOrCondition</code> bir sayı ise bu sayıda satır (alttan başlayarak) kaldırılır. </li>\r\n    <li> <code>countOrCondition</code> bir koşul ise koşulu sağlayan satırlar, herhangi bir satır koşulu sağlamayana kadar kaldırılır.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun son satırını kaldırır.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tabloda [CustomerID] > 2 koşulunu sağlayan son satırları kaldırır.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Hücrelerinin en az birinde hata içeren, girdi tablosundan kaldırılan satırları içeren bir tablo döndürür. Bir sütun listesi belirtilirse, yalnızca belirtilen sütunlardaki hücrelerde hata olup olmadığı denetlenir.",
        "Documentation.LongDescription": "Hücrelerinin en az birinde hata içeren, girdi tablosundan kaldırılan satırları içeren bir tablo döndürür. Bir sütun listesi belirtilirse, yalnızca belirtilen sütunlardaki hücrelerde hata olup olmadığı denetlenir.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "İlk satırdaki hata değerini kaldırın.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Ters sırada satırları içeren bir tablo döndürür.",
        "Documentation.LongDescription": "<code>table</code> girdisinden ters sırada sütunları içeren bir tablo döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki satırları tersine çevirir.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Belirtilen tablodaki sütun açıklamalarının (örneğin, şema) yer aldığı bir tablo döndürür.",
        "Documentation.LongDescription": "<p><code>table</code> sütunlarını tanımlayan bir tablo döndürür.</p>\r\n<p>Tablodaki her satır bir <code>table</code> sütununun özelliklerini tanımlar:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Sütun Adı</b></td>\r\n    <td><b>Açıklama</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Sütunun adı.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code> içindeki sütunun 0 tabanlı konumu.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Sütun türünün adı.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Sütun türünün tipi.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Sütunun <code>null</code> değer içerip içeremeyeceğini gösterir.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> ve <code>NumericScale</code> alanlarının sayısal tabanı (ör. 2 tabanlı, 10 tabanlı).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Sayısal bir sütunun <code>NumericPrecisionBase</code> tarafından belirtilen tabandaki duyarlığı. Bu, bu türe sahip (kesirli sayılar dahil ) bir değer tarafından temsil edilebilecek maksimum basamak sayısıdır.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Sayısal bir sütunun <code>NumericPrecisionBase</code> tarafından belirtilen tabandaki ölçeği. Bu, bu türe sahip bir kesir parçasındaki basamak sayısıdır. <code>0</code> değeri, hiç kesirli sayının olmadığı sabit bir ölçeği ifade eder. <code>null</code> değeri, (kayan bir değer olduğu için veya tanımlanmadığı için) ölçeğin bilinmediğini ifade eder.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Bir tarih veya saat değerinin saniyelik kısmında desteklenen maksimum kesirli basamak sayısı.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td><code>text</code> sütununda izin verilen maksimum karakter sayısı veya bir <code>binary</code> sütununda izin verilen maksimum bayt sayısı.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Bu sütunun uzunluğunun değişip değişemeyeceğini (<code>MaxLength</code> değerine kadar) veya sabit boyutlu olup olmadığını gösterir.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Sütun türünün kaynağın yerel tür sistemindeki adı (ör. SQL Server için <code>nvarchar</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Bu sütunun bir değeri için kaynağın yerel ifade dilindeki varsayılan ifade (ör. SQL Server için <code>42</code> veya <code>newid()</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Sütun açıklaması.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Girdi tablosunun yalnızca hücrelerinin en az birinde hata içeren satırları içeren tablosunu döndürür. Bir sütun listesi belirtilirse, yalnızca belirtilen sütunlardaki hücrelerde hata olup olmadığı denetlenir.",
        "Documentation.LongDescription": "Girdi tablosunun yalnızca hücrelerinin en az birinde hata içeren satırları içeren tablosunu döndürür. Bir sütun listesi belirtilirse, yalnızca belirtilen sütunlardaki hücrelerde hata olup olmadığı denetlenir.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Satırlarında hata bulunan müşterilerin adlarını seçin.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "İlk sayı satırları atlanacak şekilde bir tablo döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunun ilk belirtilen sayıda, <code>countOrCondition</code>, satır içermeyen bir tablo döndürür.\r\n    Atlanan satır sayısı <code>countOrCondition</code> isteğe bağlı parametresine bağlıdır.\r\n    <ul>\r\n    <li> <code>countOrCondition</code> dahil edilmezse yalnızca ilk satır atlanır. </li>\r\n    <li> <code>countOrCondition</code> bir sayı ise bu sayıda satır (üstten başlayarak) atlanır. </li>\r\n    <li> <code>countOrCondition</code> bir koşul ise koşulu sağlayan satırlar, herhangi bir satır koşulu sağlamayana kadar atlanır.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk satırını atlar.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tablonun ilk iki satırını atlar.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabloda [Price] > 25 koşulunu sağlayan ilk satırları atlar.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Verilerin özgün kaynağında herhangi bir aşağı akış işleminin çalıştırılmasını önler.",
        "Documentation.LongDescription": "<code>table</code> içindeki verilerin özgün kaynağında herhangi bir aşağı akış işleminin çalıştırılmasını önler.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "SQL tablosundaki verileri herhangi bir aşağı akış işleminin SQL sunucusunda sorgu olarak çalışmasını engelleyecek şekilde getirir.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Sütunları satır, satırları sütun haline getirir.",
        "Documentation.LongDescription": "Sütunları satır, satırları sütun haline getirir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ad-değer çifti olan satırlarını sütun haline getirir.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Tablo kümesinde var olan ilişkileri alır.",
        "Documentation.LongDescription": "Tablo kümesinde var olan ilişkileri alır. <code>tables</code> kümesinin gezinme tablosunun yapısına benzer bir yapıya sahip olduğu varsayılır. <code>dataColumn</code> tarafından tanımlanan sütunda gerçek veri tabloları bulunur.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Teradata veritabanından SQL tablolarının ve görünümlerinin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusundaki Teradata veritabanında bulunan SQL tablolarını ve görünümlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Geçmişteki kaç aya ait Twilio verilerinin alınacağını belirtin.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "İlgili Twilio verilerinin bulunduğu bir tablo döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Belirtilen tablo türüne ilişkin sütun açıklamalarının (örn. şema) yer aldığı bir tablo döndürür.",
        "Documentation.LongDescription": "<p><code>tableType</code> sütunlarının tanımlandığı bir tablo döndürür.</p>\r\n<p>Döndürülen tabloya ilişkin açıklama için <code>Table.Schema</code> belgelerini gözden geçirin.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services Akışı",
        "Documentation.DisplayName": "Azure DevOps Services Akışı",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan bir OData akışları tablosu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Viva Analizler Verilerine Bağlan",
        "Documentation.LongDescription": "Workplace Analytics'ten haftalık ölçümleri ve öznitelik verilerini içeri aktarın.",
        "Documentation.Examples": [
          {
            "Description": "Bölümdeki ölçülen her çalışan için görünür öznitelikleri ve haftalık ölçümleri olan bir tablo döndürür.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "HTML belgesinin içeriğini destekçi yapılarına ayrılmış şekilde ve tam belgenin gösterimini ve etiketler kaldırıldıktan sonraki metnini döndürür.",
        "Documentation.LongDescription": "HTML belgesinin içeriğini destekçi yapılarına ayrılmış şekilde ve tam belgenin gösterimini ve etiketler kaldırıldıktan sonraki metnini döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Webtrends ile ilgili ana ölçümlerin yer aldığı bir tablo döndürür.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Webtrends KeyMetrics uç noktasına çağrıda bulunur ve tüm verileri bir tablo olarak döndürür.",
        "Documentation.Examples": [
          {
            "Description": "98765 kiracısı için son 30 güne ilişkin ana ölçümlerin yer aldığı bir tablo çeker",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Ana ölçümlerin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Webtrends hesabınızla ilişkilendirilen Profil Kimliğinizi girin.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "İlgili Webtrends verilerinin yer aldığı bir tablo döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Viva Analizler Verilerine Bağlan",
        "Documentation.LongDescription": "Workplace Analytics'ten haftalık ölçümleri ve öznitelik verilerini içeri aktarın.",
        "Documentation.Examples": [
          {
            "Description": "Bölümdeki ölçülen her çalışan için görünür öznitelikleri ve haftalık ölçümleri olan bir tablo döndürür.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "XML belgesinin içeriğini hiyerarşi tablosu olarak döndürür.",
        "Documentation.LongDescription": "XML belgesinin içeriğini hiyerarşi tablosu olarak döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "XML belgesinin içeriğini düzleştirilmiş tablolara yönelik bir iç içe yerleştirilmiş koleksiyon olarak döndürür.",
        "Documentation.LongDescription": "XML belgesinin içeriğini düzleştirilmiş tablolara yönelik bir iç içe yerleştirilmiş koleksiyon olarak döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Yerel xml dosyasının içeriğini alır.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zendesk hesabınızın URL'sini girin.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "İlgili Zendesk verilerinin yer aldığı bir tablo döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Bir ADO.NET veri kaynağı için şema koleksiyonunu döndürür.",
        "Documentation.LongDescription": "<code>providerName</code> sağlayıcı adı ve <code>connectionString</code> bağlantı dizesiyle ADO.NET veri kaynağı için şema koleksiyonunu döndürür. <code>connectionString</code>, metin veya özellik değer çiftlerinin bir kaydı olabilir. Özellik değerleri metin veya sayı olabilir. Ek özellikler belirtmek için isteğe bağlı <code>options</code> parametresi sağlanabilir. Kayıt aşağıdaki alanları içerebilir:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Amazon Redshift veritabanından veri içeri aktarın.",
        "Documentation.LongDescription": "<code>Veritabanı</code> veritabanındaki Amazon Redshift kümesi <code>sunucu</code> üzerindeki tabloları listeleyen bir tablo döndürür. Şu seçenekleri kontrol etmek için isteğe bağlı bir kayıt parametresi, <code>seçenekler</code>, belirtilebilir:\r\n<ul>\r\n<li><code>Sağlayıcı Adı</code>: Bağlantı için Sağlayıcı Adı olarak kullanılacak bir metin değeri. Bu, Microsoft Kimlik Doğrulaması kullanılırken kullanılır.</li>\r\n<li><code>Toplu İş Boyutu</code>: Sunucuya yapılan tek bir çağrıda getirilen satır sayısı.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Analysis Services veritabanından çok boyutlu küp tablosu veya tablolu modeller döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusu üzerindeki <code>database</code> Analysis Services veritabanından çok boyutlu küpler veya sekmeli modellerin tablosunu döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir kayıt parametresi (<code>options</code>) belirtilebilir:\r\n    <ul>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir MDX sorgusu.</li>\r\n<li><code>TypedMeasureColumns</code> : &#199;ok boyutlu veya sekmeli modelde belirtilen t&#252;rlerin, eklenen &#246;l&#231;&#252;m s&#252;tunlarının t&#252;rleri i&#231;in kullanılıp kullanılmayacağını belirten bir mantıksal değer. False olarak ayarlandığında, t&#252;m &#246;l&#231;&#252;m s&#252;tunları i&#231;in &quot;number&quot; t&#252;r&#252; kullanılacaktır. Bu se&#231;enek i&#231;in varsayılan değer false şeklindedir.</li>\r\n<li><code>Culture</code> : Veriler i&#231;in k&#252;lt&#252;r&#252; belirten bir k&#252;lt&#252;r adı. Bu, &#39;Yerel Ayar Tanımlayıcısı&#39; bağlantı dizesi &#246;zelliğine karşılık gelir.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>SubQueries</code> : Bağlantı dizesinde &quot;SubQueries&quot; &#246;zelliğinin değerini ayarlayan bir sayı (0, 1 veya 2). Bu, alt se&#231;imlerde veya alt k&#252;plerde hesaplanan &#252;yelerin davranışını denetler. (Varsayılan değer 2&#39;dir).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Tabloları belirtilen Spark kümesinde listeleyen bir tablo döndürür.",
        "Documentation.LongDescription": "<code>Protokol</code> kullanarak, tabloları Spark küme <code>ana bilgisayarında</code> listeleyen bir tablo döndürür.  Geçerli protokoller şunlardır:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Tabloları belirtilen Spark kümesinde listeleyen bir tablo döndürür.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Kuruluşu ve proje adlarını girin.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (Yalnızca Panolar)",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan Analytics görünümlerinin bir tablosunu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "HDInsight Interactive Query'den verileri içeri aktarın",
        "Documentation.LongDescription": "\r\nHDInsight Interactive Query <code>sunucusundaki</code> <code>veritabanı</code> tarafından belirtilen HDInsight Interactive Query'deki tabloların bir listesini döndürür. Bağlantı noktası numarası, iki nokta üst üste karakteri ile ayrılıp isteğe bağlı olarak sunucu ile birlikte belirtilebilir. İsteğe bağlı bir <code>seçenekler</code> parametresi şu özellikleri denetlemek için belirtilebilir:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Sunucuyla bağlantı kurmaya çalışmayı bırakmadan önce ne kadar beklenmesi gerektiğini denetleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar süreyle çalışabileceğini denetleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n</ul>\r\n<code>Seçenekler</code> parametresi [seçenek1 = değer1, seçenek2 = değer2...] olarak belirtilir."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Veri türleri dahil, Common Data Model'deki bir varlığın özniteliklerine eşlenmiş sütunların bulunduğu bir tablo döndürür.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Veri türleri dahil, Common Data Model'deki bir varlığın özniteliklerine eşlenmiş sütunların bulunduğu bir tablo döndürür. Varlık tanımındaki sütunlar eşlenmemişse eklenir ve eşlenmemiş sütunlar kaldırılır.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Parametre uygulandıktan sonra bir küp döndürür.",
        "Documentation.LongDescription": "<code>cube</code> öğesine <code>arguments</code> ile <code>parameter</code> uygulandıktan sonra bir küp döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Küple ilgili filtre bağlamının boyut parçalı yapısını, belirtilen sütunlarla eşlenen öznitelikleri daraltarak değiştirir.",
        "Documentation.LongDescription": "<code>cube</code> ile ilgili filtre bağlamının boyut parçalı yapısını, belirtilen <code>columnNames</code> sütunlarıyla eşlenen öznitelikleri daraltarak değiştirir. Sütunlar küpün tablo görünümünden de kaldırılır.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Cube.Dimensions tarafından döndürülen boyutlar kümesinin yerini alır.",
        "Documentation.LongDescription": "<code>Cube.Dimensions</code> tarafından döndürülen boyutlar kümesinin yerini alır.\r\n    Örneğin, bu işlev bir boyut özniteliğine bir kimlik sütunu eklemek için kullanılabilir, böylece veri kaynağı görüntülenen değer yerine kimliğe göre gruplandırılabilir.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Küp işlevleri listesini uygular.",
        "Documentation.LongDescription": "<code>cube</code> üzerinde, <code>transforms</code> küp işlevleri listesini uygular.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Db2 veritabanında bulunan SQL tablolarının ve görünümlerinin tablosunu döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusundaki Db2 veritabanında bulunan SQL tablolarını ve görünümlerini içeren bir tabloyu <code>database</code> adlı veritabanı örneğinde döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>Implementation</code> : Kullanılacak dahili veritabanı sağlayıcısı uygulamasını belirtir. Ge&#231;erli değerler: &quot;IBM&quot; ve &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Db2 FOR BIT ikili verilerinin kodunu karakter dizeleri olarak &#231;&#246;zmek i&#231;in kullanılan bir CCSID (Kodlanmış Karakter K&#252;mesi Tanımlayıcısı) sayısı. Uygulama = &quot;Microsoft&quot; değeri i&#231;in ge&#231;erlidir. D&#246;n&#252;şt&#252;rmeyi devre dışı bırakmak i&#231;in 0 olarak ayarlayın (varsayılan). Veritabanı kodlamasına dayalı olarak d&#246;n&#252;şt&#252;rmek i&#231;in 1 olarak ayarlayın. Uygulama kodlamasına d&#246;n&#252;şt&#252;rmek i&#231;in başka bir CCSID sayısı belirtin.</li>\r\n<li><code>PackageCollection</code> : SQL deyimlerini işlemek i&#231;in gereken paylaşılan paketlerin kullanımını etkinleştirmek &#252;zere paket koleksiyonuna y&#246;nelik bir dize değeri (varsayılan değer: &quot;NULLID&quot;) belirtir. Uygulama = &quot;Microsoft&quot; değeri i&#231;in ge&#231;erlidir.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Bağlantının bir DB2 Connect Gateway &#252;zerinden yapılıp yapılmadığını belirtir. Uygulama i&#231;in ge&#231;erlidir = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [option1 = value1, option2 = value2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Data.World'den bir veri kümesi alır"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Bir Azure depolama kasasından belirtilen kapsayıcıda bulunan blobların özelliklerini ve içeriklerini barındıran bir tablo döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasından Azure depolama kasasından, <code>account</code>, kapsayıcı URL'sinde bulunan her bir blob için bir satır içeren gezinme tablosu döndürür. Her satır, dosyanın özelliklerini ve içeriğinin bir bağlantısını içerir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Belirtilen CSS seçicilerini sağlanan HTML'ye göre çalıştırmanın sonuçlarını içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Belirtilen CSS seçicisini verilen <code>html</code> öğesine karşı çalıştırmanın sonuçlarını içeren bir tablo döndürür. Ek özellikleri belirtmek için isteğe bağlı bir kayıt parametresi <code>options</code> sağlanabilir. Kayıt, aşağıdaki alanları içerebilir: \r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Verilere erişme",
        "Documentation.Examples": [
          {
            "Description": "Örnek bir html metin değerinden bir tablo döndürür.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Bir örnek html metin değerinden tüm href'leri ayıklar.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Informix veritabanında kullanılabilen SQL tablolarının ve görünümlerinin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>database</code> adlı veritabanı örneğindeki <code>server</code> sunucusunda bulunan bir Informix veritabanındaki kullanılabilen SQL tablolarını ve görünümlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Müşteri adaylarına ilişkin ayrıntılı bilgilerin yer aldığı bir tablo döndürür.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/leads.json üzerinde yer alan Marketo REST API uç noktasına çağrıda bulunur. <code>leadIds</code> listesindeki tüm müşteri adayları döndürülür.",
        "Documentation.Examples": [
          {
            "Description": "Üç müşteri adayına ilişkin ayrıntılı bilgileri çeker",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tedarik sağlanan müşteri adaylarına ilişkin ayrıntılı bilgilerin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Hesabınızla ilişkili olan Marketo REST API uç noktasına ilişkin URL'yi belirtin.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "İlgili Marketo verilerinin yer aldığı bir tablo döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Bir MySQL veritabanında bulunan SQL tablolarının, görünümlerin ve saklı skaler işlevlerinin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>database</code> adlı veritabanı örneğindeki <code>server</code> sunucusunda bulunan bir MySQL veritabanındaki SQL tablolarını, görünümlerini ve saklı skaler işlevlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>Encoding</code> : Sunucuya g&#246;nderilen t&#252;m sorguları kodlamak i&#231;in kullanılan karakter k&#252;mesini belirten bir TextEncoding değeri (null varsayılan değerdir).</li>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Sunucudaki mini tam sayı s&#252;tunlarının mantıksal değer olarak zorlanıp zorlanmayacağını belirten mantıksal (true/false) bir değer. Varsayılan değer: true.</li>\r\n<li><code>OldGuids</code> : Char(36) s&#252;tunlarının (false ise) veya binary(16) s&#252;tunlarının (true ise) GUID olarak işleneceğini ayarlayan mantıksal (true/false) bir değer. Varsayılan değer: false.</li>\r\n<li><code>ReturnSingleDatabase</code> : T&#252;m veritabanlarındaki t&#252;m tabloları d&#246;nd&#252;rmek (false ise) veya belirtilen veritabanının tablolarını ve g&#246;r&#252;n&#252;mlerini d&#246;nd&#252;rmek (true ise) &#252;zere ayarlanabilen mantıksal (true/false) bir değer. Varsayılan değer: false.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "IBM Netezza veritabanından verileri içeri aktarın.",
        "Documentation.LongDescription": "\r\nSunucudaki (<code>server</code>) Netezza Sunucusu veritabanından (<code>database</code>) Netezza tablolarının, görünümlerinin ve depolanan işlevlerinin oluşturduğu bir tablo döndürür.İsteğe bağlı olarak bağlantı noktası, iki nokta üst üste işareti ile ayrılmış şekilde sunucuyla birlikte belirtilebilir. İsteğe bağlı bir kayıt parametresi (<code>options</code>), şu seçenekleri denetlemek için belirtilebilir:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Döndürülen değerlerde gezinme özelliklerinin oluşturulup oluşturulmayacağını ayarlayan mantıksal değer (true/false) (varsayılan değer: true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Tabloların şema adlarına göre gruplandırılmış olarak görüntülenip görüntülenmeyeceğini belirleyen mantıksal değer (true/false) (varsayılan değer: false)</li>\r\n        <li><code>ConnectionTimeout</code>: Sunucuyla bağlantı kurma girişimini sonlandırmadan önce ne kadar bekleneceğini denetleyen süre. Varsayılan değer, sürücüye bağlıdır.</li>\r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce çalışabileceği zamanı denetleyen süre. Varsayılan değer, sürücüye bağlıdır.</li>\r\n<li><code>NormalizeDatabaseName</code>: Veritabanı adının büyük harfe dönüştürülerek yazılması veya yazıldığı özgün şekliyle kullanılması ayarını yapan mantıksal değer (true/false) (varsayılan değer: true).</li>\r\n</ul>\r\nKayıt parametresi şu şekilde belirtilir: [seçenek1 = değer1, seçenek2 = değer2...].",
        "Documentation.Examples": [
          {
            "Description": "Bir IBM Netezza projesindeki tabloları listeleyin.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Bir ODBC veri kaynağında yerel sorgu çalıştırmanın sonuçlarını döndürür.",
        "Documentation.LongDescription": "ODBC kullanarak <code>connectionString</code> bağlantı dizesi ile <code>query</code> çalıştırmanın sonucunu döndürür. <code>connectionString</code> metin veya özellik değeri çiftlerinin kaydı olabilir. Özellik değerleri, metin veya sayı olabilir. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer 15 saniyedir.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Sağlanan bağlantı dizesinde basit bir sorgu çalıştırmanın sonucunu döndürün.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Bir OLE DB veri kaynağında yerel sorgu çalıştırmanın sonuçlarını döndürür.",
        "Documentation.LongDescription": "OLE DB kullanarak <code>connectionString</code> bağlantı dizesi ile <code>query</code> çalıştırmanın sonucunu döndürür. <code>connectionString</code> metin veya özellik değeri çiftlerinin kaydı olabilir. Özellik değerleri, metin veya sayı olabilir. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Bir PostgreSQL veritabanında bulunan SQL tablolarının ve görünümlerin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>database</code> adlı veritabanı örneğindeki <code>server</code> sunucusunda bulunan bir PostgreSQL veritabanındaki kullanılabilen SQL tablolarını ve görünümlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Snowflake Bilgi İşlem ambarından veri içeri aktarın.",
        "Documentation.LongDescription": "<code>server</code> üzerinde bulunan Snowflake Computing <code>warehouse</code> konumundaki tabloların listelendiği bir tablo döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n<ul>\r\n<li><code>Role</code>: Bağlantının Rol adı olarak kullanılacak metin değeri.</li>\r\n<li><code>CreateNavigationProperties</code>: Döndürülen değerler üzerinde gezinti özellikleri oluşturulup oluşturulmayacağını ayarlayan bir mantıksal (true/false) değer (varsayılan true).</li>\r\n<li><code>ConnectionTimeout</code> Snowflake'ten ağ yanıtlarının alınması için beklenmesi gereken süre (saniye).</li>\r\n<li><code>CommandTimeout</code>: Bir sorgunun yürütülmesi için beklenmesi gereken süre (saniye).</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Snowflake ambarındaki tabloları listeleyin.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Tabloları belirtilen Spark kümesinde listeleyen bir tablo döndürür.",
        "Documentation.LongDescription": "<code>Protokol</code> kullanarak, tabloları Spark küme <code>ana bilgisayarında</code> listeleyen bir tablo döndürür.  Geçerli protokoller şunlardır:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Tabloları bir Azure Spark örneğinde listeleyin.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "SQL Server veritabanından SQL tablolarının, görünümlerin ve saklı işlevlerin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusundaki <code>database</code> SQL Server veritabanında bulunan SQL tablolarını, görünümlerini ve saklı işlevlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste ya da virgül işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Oluşturulan SQL sorgusundaki &quot;maxdop&quot; sorgu yan t&#252;mcesinin değerini ayarlayan bir sayı.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>MultiSubnetFailover</code> : Bağlantı dizesindeki &quot;MultiSubnetFailover&quot; &#246;zelliğinin değerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>UnsafeTypeConversions</code> : True ise başarısız olabilecek ve t&#252;m sorgunun başarısız olmasına neden olabilecek t&#252;r d&#246;n&#252;şt&#252;rmelerinin kaynağa d&#246;nd&#252;r&#252;lmeye &#231;alışılacağı mantıksal değer (true/false). Genel kullanım i&#231;in &#246;nerilmez.</li>\r\n<li><code>ContextInfo</code> : Her komutu &#231;alıştırmadan &#246;nce CONTEXT_INFO ayarlamak i&#231;in kullanılan ikili değer.</li>\r\n<li><code>OmitSRID</code> : True ise geometri ve coğrafya t&#252;rlerinden İyi Bilinen Metin oluşturulurken SRID&#39;nin atlanacağı bir mantıksal değer (true/false).</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : True olduğunda sorgu d&#246;nd&#252;rmenin aynı sunucuda veritabanlarına erişmesini sağlayan mantıksal (true/false) bir değer. Varsayılan değer false&#39;tur.</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Bir Sybase veritabanında bulunan SQL tablolarının ve görünümlerin bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>database</code> adlı veritabanı örneğindeki <code>server</code> sunucusunda bulunan bir Sybase veritabanındaki kullanılabilen SQL tablolarını ve görünümlerini içeren bir tablo döndürür. Bağlantı noktası isteğe bağlı olarak sunucuyla birlikte, iki nokta üst üste işaretiyle ayrılarak belirtilebilir. Şu seçenekleri denetlemek için isteğe bağlı bir <code>options</code> kayıt parametresi belirtilebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Gezinti &#246;zelliği adlarını oluşturmak &#252;zere kullanılan bir işlev.</li>\r\n<li><code>Query</code> : Verileri almak i&#231;in kullanılan yerel bir SQL sorgusu. Sorgu birden &#231;ok sonu&#231; k&#252;mesi &#252;retirse, yalnızca ilki d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>ConnectionTimeout</code> : Sunucuyla bağlantı kurma denemesinden vazge&#231;ilmeden &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer s&#252;r&#252;c&#252;ye bağlıdır.</li>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n</ul>\r\n\r\n    Örneğin, kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] veya [Query = \"select ...\"] olarak belirtilir.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Açık konum değerlerine sahip bir sütun ekler.",
        "Documentation.LongDescription": "<code>newColumnName</code> adlı bir sütunu, <code>table</code> öğesine açık konum değerleri ile ekler.\r\n    <code>initialValue</code> isteğe bağlı değeri ilk dizin değerini belirtir. <code>increment</code> isteğe bağlı değeri, her dizin değerinin ne kadar artırılacağını belirtir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tabloya \"Index\" adlı bir dizin sütunu ekler.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Tabloya, 10 değeri ile başlayarak 5'er 5'er artacak şekilde \"index\" adlı bir dizin sütunu ekler.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Bir tabloda verilen liste sütunu ile listedeki her değer satırının kopyasını oluşturur.",
        "Documentation.LongDescription": "Verilen <code>table</code> ile (<code>column</code> değer listesidir) listeyi her değer için bir satıra ayırır. Diğer sütunlardaki değerler oluşturulan her yeni satırda çoğaltılır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki [Name] liste sütununu böler.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Önceki hücrenin değerini bir sütunda alttaki null değerli hücrelere yayar.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> öğesinden önceki hücrenin belirtilen <code>columns</code> içinde aşağıdaki null değerli hücrelere yayıldığı bir tablo döndürür.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tablodan, [Place] sütunundaki null değerler ve üstündeki değerler ile doldurulan bir tablo döndürür.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Bir hücrenin değerini bir sütunda yukarıdaki null değerli hücrelere yayar.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> öğesinden sonraki hücrenin belirtilen <code>columns</code> içinde yukarıdaki null değerli hücrelere yayıldığı bir tablo döndürür.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tablodan, [Column2] sütunundaki null değerler ve altındaki değerler ile doldurulan bir tablo döndürür.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Bir tabloda verilen metni içeren tüm sütunları döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunda <code>text</code> metnini içeren sütunları döndürür. Metin bulunmazsa, boş bir tablo döndürülür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "\"Bob\" öğesini içeren tablodaki satırları bulur.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Belirtilen ilk sayı satırlarını döndürür.",
        "Documentation.LongDescription": "<code>countOrCondition</code> değerine bağlı olarak <code>table</code> tablosunun ilk satırlarını döndürür:\r\n    <ul>\r\n    <li> <code>countOrCondition</code> bir sayı ise, bu sayıda satır (üstten başlayarak) döndürülür. </li>\r\n    <li> <code>countOrCondition</code> bir koşul ise, koşulu sağlayan satırlar herhangi bir satırı koşulu sağlamayana kadar döndürülür.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk iki satırını bulur.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Tabloda [a] > 0 koşulunu sağlayan ilk satırları bulur.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Bölümlenen bir tablo kümesini birleştirmenin sonucu olan bir tablo döndürür.",
        "Documentation.LongDescription": "Bölünmüş tabloların kümesinin birleştirilmesinin sonucu olan bir tabloyu, <code>partitions</code> döndürür. <code>partitionColumn</code> eklenecek sütunun adıdır. Sütunun türü varsayılan olarak <code>any</code> şeklinde ayarlanır ancak <code>partitionColumnType</code> ile belirtilebilir.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Liste <code>{number}</code> içinden öğe türünü bulun.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Son belirtilen satır sayısını döndürür.",
        "Documentation.LongDescription": "<code>countOrCondition</code> değerine bağlı olarak <code>table</code> tablosunun sonra satırlarını döndürür:\r\n    <ul>\r\n    <li> <code>countOrCondition</code> bir sayı ise, bu sayıda satır ((end - <code>countOrCondition</code>) konumundan başlayarak) döndürülür. </li>\r\n    <li> <code>countOrCondition</code> bir koşul ise, koşulu sağlayan satırlar artan konumda herhangi bir satırı koşulu sağlamayana kadar döndürülür.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun son iki satırını bulur.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tabloda [a] > 0 koşulunu sağlayan son satırları bulur.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Sütunların tümünün verilen metin ile başladığı bir tablo döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>table</code> öğesine ilişkin tüm sütun adlarının başına ön ek olarak, verilen <code>prefix</code> metninin ve <code>prefix</code><code>.ColumnName</code> formunda bir nokta getirilen bir tablo döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki sütunların başına ön ek olarak \"MyTable\" getirir.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Belirtilen uzaklıkta başlayan satırları döndürür.",
        "Documentation.LongDescription": "<code>table</code> öğesinden belirtilen <code>offset</code> konumunda başlayan satırları döndürür. <code>count</code> isteğe bağlı parametresi, döndürülecek satır sayısını belirtir. Varsayılan olarak, uzaklıktan sonraki tüm satırlar döndürülür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki 1 uzaklığından başlayarak tüm satırları döndürür.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tablodaki 1 uzaklığından başlayarak bir satır döndürür.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Belirtilen sütunları kaldırır.",
        "Documentation.LongDescription": "Belirtilen <code>columns</code> öğesini sağlanan <code>table</code> öğesinden kaldırır.\r\n    Belirtilen sütun yoksa, <code>missingField</code> isteğe bağlı parametresi bir alternatif davranış belirtmediği sürece hata oluşur (örneğin <code>MissingField.UseNull</code> veya <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki [Phone] sütununu kaldırır.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Var olmayan bir sütunu tablodan kaldırmayı deneyin.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Tablodan belirtilen satırların tüm oluşumlarını kaldırır.",
        "Documentation.LongDescription": "<code>table</code> öğesinden belirtilen <code>rows</code> öğesinin tüm oluşumlarını kaldırır.\r\n    Tablonun satırları arasındaki karşılaştırmayı denetlemek üzere <code>equationCriteria</code> isteğe bağlı parametresi belirtilebilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> tablosunda [a = 1] olan tüm satırları kaldırır.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Belirtilen sayıda satırı kaldırır.",
        "Documentation.LongDescription": "Satırlara ait <code>count</code> öğesini <code>table</code> öğesinin başından, belirtilen <code>offset</code> konumundan başlayarak kaldırır. <code>count</code> parametresi sağlanmazsa, 1 varsayılan sayısı kullanılır. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk satırını kaldırır.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabloda 1 konumunda bulunan satırı kaldırır.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabloda 1 konumundan başlayarak iki satırı kaldırır.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "{old, new} biçimindeki yeniden adlandırmaları uygular.",
        "Documentation.LongDescription": "<code>table</code> tablosunda verilen yeniden adlandırmaları sütunlara uygular. <code>renames</code> değiştirme işlemi bir listede sağlanan eski ve yeni sütun adı olmak üzere iki değer içeren bir listeden oluşur.\r\n    Sütun yoksa, <code>missingField</code> isteğe bağlı parametresi bir alternatif belirtmediği sürece özel durum oluşur (örn. <code>MissingField.UseNull</code> veya <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki \"CustomerNum\" sütun adını \"CustomerID\" olarak değiştirir.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Tablodaki \"CustomerNum\" sütun adını \"CustomerID\" olarak ve \"PhoneNum\" sütun adını \"Phone\" olarak değiştirir.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Tablodaki \"NewCol\" sütun adını \"NewColumn\" olarak değiştirir; sütun mevcut değilse yoksayar.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Belirtilen sırada sütunları içeren bir tablo döndürür.",
        "Documentation.LongDescription": "<code>table</code> girdisinden <code>columnOrder</code> tarafından belirtilen sırada sütunları içeren bir tablo döndürür. Listede belirtilmeyen sütunlar yeniden sıralanmaz.\r\n     Sütun yoksa, <code>missingField</code> isteğe bağlı parametresi bir alternatif belirtmediği sürece özel durum oluşur (örn. <code>MissingField.UseNull</code> veya <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [Phone] ve [Name] sütunlarının sırasını değiştirir.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Tabloda [Phone] ve [Address] sütunlarının sırasını değiştirir veya \"MissingField.Ignore\" kullanır. [Address] var olmadığı için tabloyu değiştirmez.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Tablonun satırlarını belirtilen sayıda yineler.",
        "Documentation.LongDescription": "<code>table</code> girdisinden belirtilen <code>count</code> sayıda yinelenen sütunları içeren bir tablo döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tabloda bulunan satırları iki kez yineler.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Belirtilen sütunlardaki hata değerlerini ilgili belirtilen değerle değiştirir.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> sütunlarındaki hata değerlerini <code>errorReplacement</code> listesindeki yeni değerlerle değiştirir. Listenin biçimi {{column1, value1}, …}. Sütun başına yalnızca bir değiştirme değeri bulunabilir, sütunun birden fazla kez belirtilmesi hataya neden olur.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tabloda bulunan hata değerini \"world\" metni ile değiştirir.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Tabloda, A sütunundaki hata değerini \"hello\" metni ile B sütunundaki hata değerini ise \"world\" metni ile değiştirir.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Belirtilen tablonun anahtarlarını döndürür.",
        "Documentation.LongDescription": "Belirtilen tablonun anahtarlarını döndürür.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tablonun mevcut anahtarlarını değiştirin.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Tüm belirtilen satırları sağlanan satırlarla değiştirir.",
        "Documentation.LongDescription": "<code>table</code> içindeki tüm belirtilen satırları sağlanan satırlarla değiştirir. Değiştirilecek satırlar ve değiştirmeler, <code>replacements</code> içinde {old, new} biçimi kullanılarak belirtilir.\r\n    Tablonun satırları arasındaki karşılaştırmayı denetlemek üzere <code>equationCriteria</code> isteğe bağlı parametresi belirtilebilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [a = 1, b = 2] ve [a = 2, b = 3] satırlarını [a = -1, b = -2] ve [a = -2, b = -3] satırları ile değiştirir.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Yalnızca belirtilen sütunları içeren bir tablo döndürür.",
        "Documentation.LongDescription": "Yalnızca belirtilen <code>columns</code> öğesini içeren <code>table</code> öğesini döndürür.\r\n    <ul>\r\n       <li><code>table</code>: Sağlanan tablo.</li>\r\n       <li><code>columns</code>: <code>table</code> tablosundan döndürülecek sütun listesi. Döndürülen tablodaki sütunlar <code>columns</code> içinde listelenen sıradadır.</li>\r\n       <li><code>missingField</code>: <i>(İsteğe bağlı)</i> Sütun yoksa yapılacak işlem.  Örneğin: <code>MissingField.UseNull</code> veya <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Yalnızca [Name] sütununu ekleyin.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Yalnızca [CustomerID] ve [Name] sütunlarını ekleyin.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Eklenen sütun mevcut değilse, varsayılan sonuç hatadır.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Eklenen sütun mevcut değilse, <code>MissingField.UseNull</code> seçeneği null değerlerden oluşan bir sütun oluşturur.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Koşul işlevini karşılayan satırları seçer.",
        "Documentation.LongDescription": "<code>table</code> öğesinden <code>condition</code> seçimi ile eşleşen satır tablosu döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [CustomerID] sütununda 2'den büyük değer bulunduran satırları seçin.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Tabloda \"B\" içermeyen adların bulunduğu satırları seçin.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Tabloyu bir veya daha fazla sütun adı ve karşılaştırma ölçütü kullanarak sıralar.",
        "Documentation.LongDescription": "<code>table</code> öğesini bir veya daha fazla sütun adı ve { { col1, comparisonCriteria }, {col2} } biçiminde isteğe bağlı bir <code>comparisonCriteria</code> kullanarak sıralar.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tabloyu \"OrderID\" sütununda sıralar.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Tabloyu \"OrderID\" sütununda azalan sırada sıralar.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Tabloyu, \"CustomerID\" azalan sırada olacak şekilde önce \"CustomerID\" sütununda, ardından \"OrderID\" sütununda sıralar.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Verilen işlevi kullanarak sütun adlarını dönüştürür.",
        "Documentation.LongDescription": "Verilen <code>nameGenerator</code> işlevini kullanarak sütun adlarını dönüştürür. Geçerli seçenekler:\r\n    <div>\r\n      <code>MaxLength</code>, yeni sütun adlarının uzunluk üst sınırını belirtir. Verilen işlev daha uzun bir sütun adına neden oluyorsa uzun ad kısaltılır.\r\n    </div>\r\n    <div>\r\n      <code>Karşılaştırıcı</code>, yeni sütun adları oluşturulurken karşılaştırmanın denetlenmesi için kullanılır. Karşılaştırıcılar, büyük/küçük harfe duyarlı olmayan veya kültüre ve yerel ayara duyarlı karşılaştırmaların sağlanması için kullanılabilir.\r\n    </div>\r\n    <div>\r\n      Aşağıdaki yerleşik karşılaştırıcılar, formül dilinde kullanılabilir:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Tam sıralı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Tam sıralı, büyük/küçük harfe duyarlı olmayan karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n      <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Sütun adlarından <code>#(tab)</code> karakteri kaldırın",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Uzunluğu 6 olan büyük/küçük harf duyarsız adlar oluşturmak için sütun adlarını dönüştürün.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Belirtilen bir kültürü kullanarak { column, type } biçimindeki tür dönüşümünü uygular.",
        "Documentation.LongDescription": "İsteğe bağlı <code>table</code> parametresinde belirtilen kültürü (ör. \"tr-TR\") kullanarak, <code>typeTransformations</code> girişinin dönüştürme işlemini <code>culture</code> parametresinde (biçim { column name, type name} olacak şekilde) belirtilen sütunlara uygulayarak bir tablo döndürür.\r\n    Sütun yoksa, özel durum oluşturulur.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosundan [a] sütunundaki sayı değerlerini metin değerlerine dönüştürür.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Bir veya daha fazla sütunun değerlerini dönüştürür.",
        "Documentation.LongDescription": "<code>table</code> (Biçim { column name, transformation } veya { column name, transformation, new column type } olacak şekilde) <code>transformOperations</code> üzerinde listelenen her sütun işlemini uygulayarak bu işlemi dönüştürür.\r\n Bir <code>defaultTransformation</code> belirtilirse, <code>transformOperations</code> üzerinde listelenmeyen tüm sütunlara uygulanır.\r\n <code>transformOperations</code> üzerinde listelenen bir sütun yoksa, isteğe bağlı <code>missingField</code> parametresi bir alternatif belirtmediği sürece özel durum oluşur (örneğin, <code>MissingField.UseNull</code> veya <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[A] sütunundaki metin değerlerini sayı değerlerine, [B] sütunundaki sayı değerlerini de metin değerlerine dönüştürün.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Eksik [X] sütunundaki sayı değerlerini, mevcut olmayan sütunları yok sayarak metin değerlerine dönüştürün.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Eksik [X] sütunundaki sayı değerlerini, mevcut olmayan sütunlarda varsayılan olarak null şeklinde ayarlayarak metin değerlerine dönüştürün.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "[B] sütundaki sayı değerlerini artırın ve bunları metin değerlerine dönüştürün, diğer tüm sütunları da sayıya dönüştürün.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Sorgu ve eylem işlemlerine ilişkin kullanıcı tanımlı işleyicileri bulunan bir tablo oluşturur veya genişletir.",
        "Documentation.LongDescription": "<p>İşlem görünüme uygulandığında varsayılan işlem davranışı yerine <code>table</code> içinde belirtilen işlevlerin kullanıldığı bir <code>handlers</code> görünümü döndürür.</p>\r\n<p><code>table</code> sağlanırsa işleyici işlevleri isteğe bağlıdır. <code>table</code> sağlanmazsa <code>GetType</code> ve <code>GetRows</code> işleyici işlevleri gerekir. İşleme yönelik bir işleyici işlevinin belirtilmemesi durumunda bunun yerine (<code>GetExpression</code> durumu dışında) <code>table</code> için varsayılan işlem davranışı uygulanır.</p>\r\n<p>İşleyici işlevleri, <code>table</code> üzerinde işlem uygulandıktan sonra elde edilen sonuç (veya <code>GetExpression</code> durumunda ortaya çıkan görünüm) ile anlamsal olarak eşdeğer bir değer döndürmelidir.</p>\r\n<p>İşleyici işlevinin hata vermesi durumunda, görünüme varsayılan işlem davranışı uygulanır.</p>\r\n<p>Kaynağa özgü sorgulara ilişkin M sorgularının çevirisi gibi bir veri kaynağına katlama işlemi uygulamak üzere (örneğin, M sorgularından T-SQL deyimleri oluşturma) <code>Table.View</code> kullanılabilir.</p>\r\n<p><code>Table.View</code> hakkında yapılan tüm açıklamalar için yayımlanmış Power Query özel bağlayıcı belgelerine bakın.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Türü veya satır sayısını belirlemek için satırlara erişmeyi gerektirmeyen temel bir görünüm oluşturun.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Kuruluşu ve proje adlarını girin.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Yalnızca Panolar)",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan Analytics görünümlerinin bir tablosunu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Vertica'dan verileri içeri aktarın",
        "Documentation.LongDescription": "<code>veritabanı</code> parametresi tarafından adlandırılan veritabanındaki <code>sunucu</code> parametresi tarafından adlandırılan sunucuda mevcut olan şemaların bir tablosunu döndürür.\r\nİsteğe bağlı kayıt parametresi, <code>seçenekler</code>, ek özellikler belirtmek için sağlanabilir. Kayıt şu alanları içerebilir:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Sunucuya bağlantı kurma girişimini bırakmadan önce ne kadar bekleneceğini denetleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n    <li><code>CommandTimeout </code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar çalışabileceğini denetleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Vertica'daki tabloları listeleyin"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Webtrends'e ilişkin rapor içeriğinin yer aldığı bir tablo döndürür.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Belirlenen Webtrends raporlama uç noktasına çağrıda bulunur ve tüm verileri bir tablo olarak döndürür.",
        "Documentation.Examples": [
          {
            "Description": "Son 30 güne ilişkin veriler için Webtrends ziyaretçi raporu uç noktasına çağrıda bulunur",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Ziyaretçi verilerinin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Belirtilen etki alanı ile aynı ormandaki Active Directory etki alanlarının listesini veya etki alanı belirtilmezse, geçerli makinenin etki alanının listesini döndürür.",
        "Documentation.LongDescription": "Belirtilen etki alanı ile aynı ormandaki Active Directory etki alanlarının listesini veya etki alanı belirtilmezse, geçerli makinenin etki alanının listesini döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Bir ADO.NET veri kaynağında yerel sorgu çalıştırmanın sonucunu döndürür.",
        "Documentation.LongDescription": "<code>providerName</code> ADO.NET sağlayıcısını kullanarak <code>connectionString</code> bağlantı dizesiyle <code>query</code> çalıştırmanın sonucunu döndürür. <code>connectionString</code> metin veya özellik değeri çiftlerinin kaydı olabilir. Özellik değerleri, metin veya sayı olabilir. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Sunucu tarafı sorgusunun iptal edilmeden &#246;nce ne kadar &#231;alıştırılmasına izin verildiğini denetleyen s&#252;re. Varsayılan değer on dakikadır.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows kimlik doğrulaması i&#231;in SQL Server uyumlu bağlantı dizesi se&#231;eneklerinin oluşturulup oluşturulmayacağını belirleyen mantıksal değer (true/false). Varsayılan değer true&#39;dur.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Adobe Analytics içinde rapor paketlerini döndürür.",
        "Documentation.LongDescription": "Adobe Analyics'ten çok boyutlu paketlere ilişkin bir tablo döndürür. İsteğe bağlı bir kayıt parametresi olan <code>options</code>, aşağıdaki seçenekleri denetlemek üzere belirtilebilir:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Tabloların şema adlarına g&#246;re gruplandırılarak g&#246;r&#252;nt&#252;lenip g&#246;r&#252;nt&#252;lenmeyeceklerini ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>MaxRetryCount</code> : Sorgu sonucu i&#231;in yoklama sırasında ger&#231;ekleştirilecek yeniden deneme sayısı. Varsayılan değer 120&#39;dir.</li>\r\n<li><code>RetryInterval</code> : Yeniden deneme girişimleri arasındaki s&#252;re s&#252;resi. Varsayılan değer 1 saniyedir.</li>\r\n<li><code>Implementation</code> : Adobe Analytics API s&#252;r&#252;m&#252;n&#252; belirtir. Ge&#231;erli değer: &quot;2.0&quot;. Varsayılan se&#231;enek API 1.4 s&#252;r&#252;m&#252;n&#252; kullanıyor.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Hive LLAP'tan verileri içeri aktarın",
        "Documentation.LongDescription": "\r\nSeçili <code>protokol</code> kullanılarak Hive LLAP <code>sunucusundaki</code> <code>veritabanı</code> tarafından belirtilen Hive LLAP'taki tabloların bir listesini döndürür. Bağlantı noktası numarası, isteğe bağlı olarak iki nokta üst üste ile ayrılıp bir sunucu ile belirtilebilir. Thrift Aktarım İlkesi \"Standard\", \"HTTP\" değerlerini içeren numaralanmış bir türdür. İsteğe bağlı bir <code>seçenekler</code> parametresi, şu özellikleri denetlemek için belirtilebilir:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Sunucuyla bağlanma girişimini bırakmadan önce ne kadar beklenmesi gerektiğini belirleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar süreyle çalışabileceğini denetleyen süre. Varsayılan değer sürücüye bağlıdır.</li>\r\n</ul>\r\n<code>Seçenekler</code> parametresi [option1 = value1, option2 = value2...] olarak belirtilir."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, 2017-5-1 ile 2017-6-15 arasındaki özet verilerini alın",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "İşlev 2017-5-1 ile 2017-6-15 arasındaki özet verilerini döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, Nisan 2017'ye ait özet verilerini alın.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "İşlev 2017-4-1 ile 2017-4-30 arasındaki verileri döndürür"
          },
          {
            "Description": "Bugünün 2017-6-15 olduğu varsayılırsa, Nisan 2017'den şimdiye kadar olan özet verilerini alın.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "İşlev 2017-4-1 ile 2017-6-15 arasındaki verileri döndürür"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Maliyet Yönetimi",
        "Documentation.Description": "Azure Maliyet Yönetimi",
        "Documentation.DisplayName": "Azure Maliyet Yönetimi",
        "Documentation.LongDescription": "Azure Maliyet Yönetimi",
        "Documentation.Name": "Azure Maliyet Yönetimi"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Kuruluşu ve proje adlarını girin.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan bir OData akışları tablosu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Dataverse örneğinize bağlanın (Dynamics 365 ve PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Belirtilen boyut tablosunu küpün filtre bağlamıyla birleştirir ve belirtilen boyut öznitelikleri kümesini genişleterek filtre bağlamının boyut parçalı yapısını değiştirir.",
        "Documentation.LongDescription": "Belirtilen <code>dimensionSelector</code> boyut tablosunu küpün <code>cube</code> filtre bağlamıyla birleştirir ve belirtilen boyut öznitelikleri <code>attributeNames</code> kümesini genişleterek boyut parçalı yapısını değiştirir. Boyut öznitelikleri, <code>newColumnNames</code> olarak veya belirtilmemişse <code>attributeNames</code> olarak adlandırılmış sütunlarla tablo görünümüne eklenir.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Küpe, her satırın bağlamına uygulanan ölçünün sonuçlarını içeren bir sütun ekler.",
        "Documentation.LongDescription": "<code>cube</code> öğesine, her satırın bağlamına uygulanan <code>measureSelector</code> ölçüsünün sonuçlarını içeren <code>column</code> adlı bir sütun ekler. Ölçü uygulama, boyut parçalı yapısında ve dilimlerinde yapılan değişikliklerden etkilenir. Ölçü değerleri, belirli küp işlemleri yapıldıktan sonra ayarlanır.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ortamınızı ve şirketinizi girin.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "İlgili Dynamics 365 Business Central verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ortamınızı ve şirketinizi girin.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "İlgili Dynamics 365 Business Central verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ortamınızı ve şirketinizi girin.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "İlgili Dynamics 365 Business Central verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ortamınızı ve şirketinizi girin.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "İlgili Dynamics 365 Business Central verilerinin bulunduğu bir tablo döndürür. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Geçerli Excel çalışma kitabının içeriğini döndürür.",
        "Documentation.LongDescription": "Geçerli Excel çalışma kitabının içeriğini döndürür. Tabloları, adlandırılmış aralıkları ve dinamik dizileri döndürür. <code>Excel.Workbook</code> öğesinin aksine çalışma sayfası döndürmez.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Microsoft Exchange hesabından bir içindekiler tablosu döndürür.",
        "Documentation.LongDescription": "<code>mailboxAddress</code> Microsoft Exchange hesabına ilişkin bir içerik tablosu döndürür. <code>mailboxAddress</code> belirtilmediği takdirde, kimlik bilgilerine ilişkin varsayılan hesap kullanılır.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Ambar",
        "Documentation.Caption": "Ambar",
        "Documentation.Description": "Ambardaki verileri içeri aktarır",
        "Documentation.LongDescription": "Ambardaki verileri içeri aktarır"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Google Analytics hesaplarını döndürür.",
        "Documentation.LongDescription": "Mevcut kimlik bilgisinden erişilebilen Google Analytics hesaplarını döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Google BigQuery veritabanından verileri içeri aktarın.",
        "Documentation.LongDescription": "\r\n      Google BigQuery'deki mevcut projeleri listeleyen bir tablo döndürür. Aşağıdaki seçenekleri kontrol etmek için isteğe bağlı bir kayıt parametresi olan <code>options</code> belirtilebilir: \r\n       <ul>\r\n        <li><code>ConnectionTimeout</code>: Vazgeçmeden önce ne kadar bekleneceğini kontrol eden bir süre sunucuyla bağlantı kurma girişimi. Varsayılan değer ODBC Bağlantı Zaman Aşımı değeridir.</li> \r\n        <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar süreyle çalışmasına izin verileceğini kontrol eden bir süre.</li> \r\n        <li><code>BillingProject</code>: Faturalandırma projesi kimliği. Varsayılan değer, kullanılabilen ilk projedir.</li> \r\n         <li><code>UseStorageApi</code>: Büyük sonuç kümeleri için BigQuery Storage API'nın kullanılıp kullanılmayacağını belirtir. Depolama API'sini kullanmak için varsayılan değer doğrudur. Depolama API'sini kullanmamak için false olarak ayarlayın</li>\r\n       </ul> \r\n    Kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] olarak belirtilir.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Google BigQuery'de kullanılabilen projeleri listeleyin",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Veri Gölü",
        "Documentation.Caption": "Veri Gölünden verileri içeri aktarın",
        "Documentation.Description": "Veri Gölünden verileri içeri aktarın",
        "Documentation.LongDescription": "Erişiminiz olan tüm Veri Göllerine bağlanın ve kullanmak istediğiniz varlıkları seçin"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Anahtar MailChimp verilerinin yer aldığı bir tabloyu döndürür.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Anahtar MailChimp verilerinin yer aldığı bir tabloyu döndürür.",
        "Documentation.Examples": [
          {
            "Description": "Anahtar MailChimp verilerinin yer aldığı bir tabloyu döndürür.",
            "Code": "MailChimp.Tables()",
            "Result": "Anahtar MailChimp verilerinin yer aldığı bir tablo."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Müşteri adaylarına ilişkin etkinliklerin yer aldığı bir tablo döndürür.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/activities.json üzerinde yer alan Marketo REST API uç noktasına çağrıda bulunur. <code>activityIds</code> listesinde <code>startTime</code> itibarıyla gerçekleştirilen tüm etkinlikler döndürülür.",
        "Documentation.Examples": [
          {
            "Description": "1 Kasım 2015 tarihinden itibaren gerçekleşen \"Web Sayfası Ziyareti\" etkinliklerine ilişkin bir tablo çeker",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "1 Kasım'dan itibaren gerçekleşen \"Web Sayfası Ziyareti\" etkinliklerine ilişkin ayrıntılı bilgilerin bulunduğu bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI veri akışları (eski)",
        "Documentation.Caption": "Verileri bir Power BI veri akışından içeri aktarın",
        "Documentation.LongDescription": "Erişiminiz olan tüm Power BI veri akışlarına bağlanın ve kullanmak istediğiniz varlıkları seçin."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Veri reyonları",
        "Documentation.Caption": "Veri reyonları",
        "Documentation.Description": "Veri reyonlarındaki verileri içeri aktarır",
        "Documentation.LongDescription": "Veri reyonlarındaki verileri içeri aktarır"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Veri akışları",
        "Documentation.Caption": "Bir veri akışından içeri veri aktarın",
        "Documentation.Description": "Bir veri akışından içeri veri aktarın",
        "Documentation.LongDescription": "Erişiminiz olan tüm veri akışlarına bağlanın ve kullanmak istediğiniz varlıkları seçin"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "QuickBooks Online'dan içeri veri aktarın.",
        "Documentation.LongDescription": "\r\n        QuickBooks Online'da kullanılabilen tabloların bir tablo listesini döndürür. Şu seçenekleri denetlemek için isteğe bağlı bir kayıt parametresi olan <code>options</code> belirtilebilir:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Sunucuyla bağlantı kurma girişimini bırakmadan önce ne kadar bekleneceğini denetleyen süre.</li>\r\n            <li><code>CommandTimeout</code>: Sunucu tarafı sorgusunun iptal edilmeden önce ne kadar çalışacağını denetleyen süre.</li>\r\n          </ul>\r\n        Kayıt parametresi [seçenek1 = değer1, seçenek2 = değer2...] şeklinde belirtilir.\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Salesforce hesabındaki nesneleri döndürür.",
        "Documentation.LongDescription": "Kimlik bilgilerinde belirtilen Salesforce hesabındaki nesneleri döndürür. Hesap bağlantısı, belirtilen <code>loginUrl</code> ortamı üzerinden kurulur. Ortam belirtilmemesi durumunda, hesap üretim ortamına (https://login.salesforce.com) bağlanır. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt aşağıdaki alanları içerebilir:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : D&#246;nd&#252;r&#252;len değerlerde gezinti &#246;zellikleri oluşturulup oluşturulmayacağını ayarlayan mantıksal (true/false) bir değer (varsayılan değer: false).</li>\r\n<li><code>ApiVersion</code> : Bu sorgu i&#231;in kullanılacak Salesforce API s&#252;r&#252;m&#252;. Belirtilmediğinde, API s&#252;r&#252;m&#252; 29.0 kullanılır.</li>\r\n<li><code>Timeout</code> : Sunucuya y&#246;nelik istek bırakılmadan &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer kaynağa &#246;zg&#252;d&#252;r.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Salesforce hesabındaki raporları döndürür.",
        "Documentation.LongDescription": "Kimlik bilgilerinde belirtilen Salesforce hesabındaki raporları döndürür. Hesap bağlantısı, belirtilen <code>loginUrl</code> ortamı üzerinden kurulur. Ortam belirtilmemesi durumunda, hesap üretim ortamına (https://login.salesforce.com) bağlanır. Ek özellikler belirtmek için isteğe bağlı <code>options</code> kayıt parametresi sağlanabilir. Kayıt aşağıdaki alanları içerebilir:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Bu sorgu i&#231;in kullanılacak Salesforce API s&#252;r&#252;m&#252;. Belirtilmediğinde, API s&#252;r&#252;m&#252; 29.0 kullanılır.</li>\r\n<li><code>Timeout</code> : Sunucuya y&#246;nelik istek bırakılmadan &#246;nce ne kadar bekleneceğini denetleyen s&#252;re. Varsayılan değer kaynağa &#246;zg&#252;d&#252;r.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "SAP Business Warehouse sisteminde InfoArea tarafından gruplandırılan InfoCubes ve sorguları döndürür.",
        "Documentation.LongDescription": "<code>server</code> sunucusundaki (sistem numarası: <code>systemNumberOrSystemId</code>, İstemci Kimliği: <code>clientId</code>) SAP Business Warehouse örneğinden InfoArea tarafından gruplandırılan InfoCubes ve sorguların bir tablosunu döndürür. <code>optionsOrLogonGroup</code>, isteğe bağlı bir kayıt parametresi olarak şu seçenekleri denetlemek üzere belirtilebilir:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Smartsheet API'sinden sayfaların, raporların, klasörlerin ve çalışma alanlarının bulunduğu bir tablo döndürür",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Smartsheet API'sinden sayfaların, raporların, klasörlerin ve çalışma alanlarının bulunduğu iç içe bir tablo döndürür",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet hiyerarşisinin en üst düzeyinde bulunan sayfaları, klasörleri, raporları ve çalışma alanlarını döndürür",
            "Code": "Smartsheet.Tables()",
            "Result": "Smartsheet hiyerarşisinin en üst düzeyinde bulunan sayfaların, klasörlerin, raporların ve çalışma alanlarının yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "SparkPost API'sinden (v1) ölçümlerin yer aldığı bir tablo döndürür",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Bu işlev, SparkPost API v1'in \"Metrics\" uç noktasından veri almak için kullanılabilir. Bu bağlayıcıyı kullanarak bu tabloları yenilerken veya SparkPost API'sine çağrı yaparken SparkPost API'sinin kesin bir API hız sınırı olduğunu unutmayın. SparkPost sunucusundan 429 durum kodunun döndürüldüğünü görürseniz hız sınırına ulaştınız demektir ve başka çağrı yapmadan önce birkaç saniye beklemeniz gerekir. Gün sayısı parametresi için bir değer seçerken API'nin yalnızca 6 aylık veri depoladığını akılda tutun.",
        "Documentation.Examples": [
          {
            "Description": "Tüm campaign_id'lerin son üç günde toplanan count_sent ve count_rejected dağıtılabilirlik ölçümlerini alır.",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Stripe API'ine çağrıda bulunur.",
        "Documentation.LongDescription": "Ek parametre olarak geçirilen isteğe bağlı <code>additionalParameters</code> kaydı ve beklenen sütun adlarına ilişkin <code>ColumnNames</code> listesi ile birlikte https://api.stripe.com/v1/<code>method</code> üzerinde bulunan Stripe API'sine çağrıda bulunur. 2015-10-16 Stripe Sürümü kullanılmaktadır.",
        "Documentation.Examples": [
          {
            "Description": "1 Kasım 2015 tarihinden sonra oluşturulan etkinliklerin yer aldığı bir tablo döndürür",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Geçerli Stripe hesabına ilişkin belirtilen etkinliklerin yer aldığı bir tablo"
          },
          {
            "Description": "Tüm SKU'ların bulunduğu bir tablo döndürür",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Geçerli Stripe hesabına ilişkin tüm SKU'ların yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Mevcut Stripe tablolarının ve işlevlerinin listelendiği bir tablo döndürür.",
        "Documentation.LongDescription": "Mevcut Stripe tablolarının ve işlevlerinin listelendiği bir tablo döndürür."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics çalışma alanı",
        "Documentation.Caption": "Azure Synapse Analytics çalışma alanı",
        "Documentation.LongDescription": "Azure Synapse Analytics çalışma alanı için PQ Bağlayıcısı",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Belirtilen ada sahip bir sütun ekler. Değer, her satır girdi olarak alınarak belirtilen seçim işlevi kullanılarak hesaplanır.",
        "Documentation.LongDescription": "<code>newColumnName</code> adlı bir sütunu <code>table</code> tablosuna ekler. Sütun değerleri, her satır girdi olarak alınarak belirtilen <code>columnGenerator</code> seçim işlevi kullanılarak hesaplanır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tabloya, her bir değer [Fiyat] ve [Gönderim] sütunlarının toplamı olacak şekilde \"Toplam Fiyat\" adlı bir sayı sütunu ekler.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Tabloda belirtilen sütunun benzer gruplandırma değerleriyle elde edilen temsili değerleri içeren yeni bir sütun ekler.",
        "Documentation.LongDescription": "<code>table</code> tablosuna <code>columnName</code> temsili değerlerine sahip yeni bir <code>newColumnName</code> sütunu ekler. Temsilciler, her satır için <code>columnName</code> içindeki değerleri benzer şekilde eşleştirerek elde edilir.\r\n<p>Anahtar sütunların nasıl karşılaştırılacağını belirtmek için isteğe bağlı bir <code>options</code> kümesi eklenebilir. Seçenekler şunlardır:\r\n<ul>\r\n<li><code>Culture</code> : Kayıtları k&#252;lt&#252;re &#246;zg&#252; kurallara g&#246;re gruplandırmaya olanak tanır. Herhangi bir ge&#231;erli k&#252;lt&#252;r adı olabilir. &#214;rneğin, &quot;ja-JP&quot; K&#252;lt&#252;r se&#231;eneği, kayıtları Japon k&#252;lt&#252;r&#252;ne g&#246;re gruplandırır. Varsayılan değer: &quot;&quot;. Bu değer, kayıtları Sabit İngiliz k&#252;lt&#252;r&#252;ne g&#246;re gruplandırır.</li>\r\n<li><code>IgnoreCase</code> : B&#252;y&#252;k/k&#252;&#231;&#252;k harfe duyarsız anahtar gruplandırmasına olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z&#252;mler&quot;, &quot;&#252;z&#252;mler&quot; ile gruplandırılır. Varsayılan değer true&#39;dur.</li>\r\n<li><code>IgnoreSpace</code> : Grupları bulmak i&#231;in metin par&#231;alarının birleştirilmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z &#252;mler&quot;, &quot;&#220;z&#252;mler&quot; ile gruplandırılır. Varsayılan değer true&#39;dur.</li>\r\n<li><code>SimilarityColumnName</code> : Bir giriş değeri ile o giriş i&#231;in temsili değer arasındaki benzerliği g&#246;steren s&#252;tun adı. Varsayılan değer null&#39;dur, bu durumda benzerlikler i&#231;in yeni bir s&#252;tun eklenmeyecektir.</li>\r\n<li><code>Threshold</code> : İki değerin gruplandırılacağı benzerlik puanını belirten, 0,00 ile 1,00 arasında bir sayı.\r\n    &#214;rneğin, &quot;&#220;z&#252;mler&quot; ve &quot;&#220;z&#252;ler&quot; (&quot;m&quot; eksik), yalnızca bu se&#231;enek 0,90&#39;dan az olarak ayarlandıysa birlikte gruplandırılır.\r\n    1,00 eşiği, yalnızca tam eşleşmelere izin verir.\r\n    (Benzer bir &quot;tam eşleşmenin&quot; b&#252;y&#252;k/k&#252;&#231;&#252;k harf, s&#246;zc&#252;k sırası ve noktalama işaretleri gibi farklılıkları g&#246;rmezden gelebileceğini unutmayın.)\r\n     Varsayılan değer 0,80&#39;dir.</li>\r\n<li><code>TransformationTable</code> : Kayıtları &#246;zel değer eşlemelerine g&#246;re gruplandırmaya olanak tanıyan tablo. &quot;Kaynak&quot; ve &quot;Hedef&quot; s&#252;tunlarını i&#231;ermelidir. &#214;rneğin, &quot;Kaynak&quot; s&#252;tununda &quot;&#220;z&#252;mler&quot;, &quot;Hedef&quot; s&#252;tununda &quot;Kuru &#252;z&#252;mler&quot; değerlerini i&#231;eren bir d&#246;n&#252;ş&#252;m tablosu sağlanmışsa &quot;&#220;z&#252;mler&quot;, &quot;Kuru &#252;z&#252;mler&quot; ile gruplandırılır. D&#246;n&#252;ş&#252;m&#252;n, d&#246;n&#252;ş&#252;m tablosundaki metnin t&#252;m oluşumlarına uygulanacağını unutmayın. Yukarıdaki d&#246;n&#252;ş&#252;m tablosu ile &quot;&#220;z&#252;mler tatlıdır&quot; c&#252;mlesi de &quot;Kuru &#252;z&#252;mler tatlıdır&quot; c&#252;mlesi ile gruplandırılır.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Çalışanların konumuyla ilgili temsili değerleri bulun.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Tablolar arasında sağlanan sütunlar üzerinde birleştirme gerçekleştirir ve birleştirme sonucunu yeni bir sütunda oluşturur.",
        "Documentation.LongDescription": "<code>table1</code> satırlarını <code>key1</code> (<code>table1</code> için) ve <code>key2</code> (<code>table2</code> için) tarafından seçilen anahtar sütunların değerlerinin eşitliğine dayalı olarak <code>table2</code> satırları ile birleştirir. Sonuçlar <code>newColumnName</code> adlı sütuna girilir.\r\nBu işlev, birleştirme sonuçlarının düzleştirilmiş biçim yerine iç içe yerleştirilmiş sunulması dışında LeftOuter türünde JoinKind içeren Table.Join ile aynı şekilde davranır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "({[saleID = 1, price = 20], [saleID = 2, price = 10]}) tablosundan ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) tablosuna, [saleID] üzerinde birleştirilecek \"fiyat/stok\" adlı birleştirme sütununu ekler.",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Tabloya anahtar ekler.",
        "Documentation.LongDescription": "<code>table</code> öğesine bir anahtar ekler, burada <code>columns</code> anahtarı tanımlayan sütun adlarının listesidir ve <code>isPrimary</code>, anahtarın birincil olup olmadığını belirtir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tabloya tek sütunlu birincil anahtar ekleyin.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Bir sütunu bir veya daha fazla sütunun sıralamasıyla ekler.",
        "Documentation.LongDescription": "<code>newColumnName</code> adlı bir kolonu <code>table</code>sütununa <code>comparisonCriteria</code> tarafından açıklanan bir veya daha fazla sütunun sıralamasıyla ekler.<code>options</code> öğesindeki \r\nRankKind seçeneği, gelişmiş kullanıcılar tarafından daha belirli bir sıralama yöntemi seçmek için kullanılabilir.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "\"Revenue\" sütununu en yüksekten en düşüğe sıralayan tabloya \"Revenue Rank\" adlı bir sütun ekleyin.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Bir tablo sütununu içeren tabloda birden çok sütuna toplar.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] içindeki tabloları, tablolar için toplam değerleri içeren birden çok sütuna toplar. <code>aggregations</code> toplanacak tabloları içeren sütunları, değerlerini oluşturmak üzere tablolara uygulamak için toplama işlevlerini ve oluşturulacak toplama sütunlarının adlarını belirtmek için kullanılır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> tablosunda <code>[t]</code> içindeki tablo sütunlarını <code>[t.a]</code> toplamına, en büyük ve ek küçük <code>[t.b]</code> değerine ve <code>[t.a]</code> içindeki değer sayısına ekler.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "İlk uzaklığı korur ve sonraki satırları almayı ve atlamayı değiştirir.",
        "Documentation.LongDescription": "İlk uzaklığı korur ve sonraki satırları almayı ve atlamayı değiştirir.\r\n    <ul>\r\n       <li><code>table</code>: Giriş tablosu.</li>\r\n       <li><code>offset</code>: Döngüleri başlatmadan önce saklanacak satır sayısı.</li>\r\n       <li><code>skip</code>: Her döngüde kaldırılacak satır sayısı.</li>\r\n       <li><code>take</code>: Her döngüde saklanacak satır sayısı.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodan, ilk satırdan başlayarak 1 değerini atlayan ve ardından 1 değerini tutan bir tablo döndürür.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Belirtilen sütunları belirtilen birleştirici işlevi kullanarak yeni bir sütun halinde birleştirir.",
        "Documentation.LongDescription": "Belirtilen sütunları belirtilen birleştirici işlevi kullanarak yeni bir sütun halinde birleştirir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Soyadlarını ve adları virgülle ayırarak yeni bir sütunda birleştirin.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Belirtilen sütunları yeni kayıt değerine sahip sütunla birleştirir. Burada her kayıt, birleştirilen sütun adlarına ve sütun değerlerine karşılık gelen alan adlarına ve değerlerine sahiptir.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> sütunlarını <code>newColumnName</code> adlı yeni bir kayıt değerli sütunda birleştirir. Burada, her kaydın alan adları ve değerleri, birleştirilen sütunların sütun adlarına ve değerlerine karşılık gelir. <code>options</code> için kayıt belirtilirse şu seçenekler sağlanabilir:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Metin olarak belirtildiğinde, verilen sütun adı, kaydın görünen adı olarak değerlendirilmelidir. Bunun, kayıttaki sütunlardan biri olması gerekmez.</li>\r\n     <li> <code>TypeName</code>: Metin olarak belirtildiğinde, elde edilen kayıt için mantıksal bir tür adı sağlar ve yükleme ortamı tarafından davranışı yönlendirmek için veri yükleme sırasında kullanılır.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Belirtilen ada sahip bir sütunu çoğaltır. Değerler ve tür kaynak sütundan kopyalanır.",
        "Documentation.LongDescription": "<code>columnName</code> adlı bir sütunu <code>table</code> tablosuna çoğaltır. <code>newColumnName</code> sütununa ait değerler ve tür <code>columnName</code> sütunundan kopyalanır.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosundaki \"a\" sütununu \"kopya sütun\" adlı sütuna çoğalt.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Bir kayıt sütununu her değeri içeren sütunlar olarak genişletir.",
        "Documentation.LongDescription": "<code>table</code> girdisinde kayıtlara ait verilen <code>column</code> ile kayıttaki her alan için bir sütun içeren bir tablo oluşturur. İsteğe bağlı olarak, yeni tabloda sütunlara ait benzersiz adların olduğundan emin olmak için <code>newColumnNames</code> belirtilebilir.\r\n    <ul>\r\n        <li><code>table</code>: Genişletilecek kayıt sütununu içeren asıl tablo. </li>\r\n        <li><code>column</code>: Genişletilecek sütun.</li>\r\n        <li><code>fieldNames</code>: Tabloda sütunlar halinde genişletilecek alan listesi.</li>\r\n        <li><code>newColumnNames</code>: Yeni sütunlara verilecek sütun adları listesi. Yeni sütun adları yeni tablodaki hiçbir sütunu çoğaltamaz.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> tablosundaki [a] sütununu \"aa\", \"bb\" ve \"cc\" sütunlarına genişletir.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Bir kayıt sütununu veya tablo sütununu, içeren tabloda birden fazla sütuna genişletir.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] içindeki tabloları birden çok satır ve sütuna genişletir. <code>columnNames</code>, iç tablodan genişletilecek sütunları seçmek için kullanılır. Var olan sütunlar ve yeni sütunlar arasındaki çakışmalardan kaçınmak için <code>newColumnNames</code> öğesini belirtir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> tablosunda <code>[a]</code> içindeki tablo sütunlarını <code>[t.a]</code>, <code>[t.b]</code> ve <code>[t.c]</code> sütunlarına genişletir.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Tablodaki satırları, anahtarların belirsiz eşleştirmesine bağlı olarak gruplandırır.",
        "Documentation.LongDescription": "<code>table</code> satırlarını, her satır için belirtilen <code>key</code> sütunundaki benzer şekilde eşleşen değerlere göre gruplar.\r\n    Her grup için <code>aggregatedColumns</code> tarafından belirtilen tüm kümelenmiş sütunlarla birlikte anahtar sütunları (ve değerlerini) içeren bir kayıt oluşturulur.\r\n    Bu işlev, sabit bir satır sırası döndürmeyi garanti edemez.\r\n    <p>Anahtar sütunların nasıl karşılaştırılacağını belirtmek için isteğe bağlı bir <code>options</code> kümesi eklenebilir. Seçenekler şunlardır:\r\n    <ul>\r\n<li><code>Culture</code> : Kayıtları k&#252;lt&#252;re &#246;zg&#252; kurallara g&#246;re gruplandırmaya olanak tanır. Herhangi bir ge&#231;erli k&#252;lt&#252;r adı olabilir. &#214;rneğin, &quot;ja-JP&quot; K&#252;lt&#252;r se&#231;eneği, kayıtları Japon k&#252;lt&#252;r&#252;ne g&#246;re gruplandırır. Varsayılan değer: &quot;&quot;. Bu değer, kayıtları Sabit İngiliz k&#252;lt&#252;r&#252;ne g&#246;re gruplandırır.</li>\r\n<li><code>IgnoreCase</code> : B&#252;y&#252;k/k&#252;&#231;&#252;k harfe duyarsız anahtar gruplandırmasına olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z&#252;mler&quot;, &quot;&#252;z&#252;mler&quot; ile gruplandırılır. Varsayılan değer true&#39;dur.</li>\r\n<li><code>IgnoreSpace</code> : Grupları bulmak i&#231;in metin par&#231;alarının birleştirilmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z &#252;mler&quot;, &quot;&#220;z&#252;mler&quot; ile gruplandırılır. Varsayılan değer true&#39;dur.</li>\r\n<li><code>SimilarityColumnName</code> : Bir giriş değeri ile o giriş i&#231;in temsili değer arasındaki benzerliği g&#246;steren s&#252;tun adı. Varsayılan değer null&#39;dur, bu durumda benzerlikler i&#231;in yeni bir s&#252;tun eklenmeyecektir.</li>\r\n<li><code>Threshold</code> : İki değerin gruplandırılacağı benzerlik puanını belirten, 0,00 ile 1,00 arasında bir sayı.\r\n    &#214;rneğin, &quot;&#220;z&#252;mler&quot; ve &quot;&#220;z&#252;ler&quot; (&quot;m&quot; eksik), yalnızca bu se&#231;enek 0,90&#39;dan az olarak ayarlandıysa birlikte gruplandırılır.\r\n    1,00 eşiği, yalnızca tam eşleşmelere izin verir.\r\n    (Benzer bir &quot;tam eşleşmenin&quot; b&#252;y&#252;k/k&#252;&#231;&#252;k harf, s&#246;zc&#252;k sırası ve noktalama işaretleri gibi farklılıkları g&#246;rmezden gelebileceğini unutmayın.)\r\n     Varsayılan değer 0,80&#39;dir.</li>\r\n<li><code>TransformationTable</code> : Kayıtları &#246;zel değer eşlemelerine g&#246;re gruplandırmaya olanak tanıyan tablo. &quot;Kaynak&quot; ve &quot;Hedef&quot; s&#252;tunlarını i&#231;ermelidir. &#214;rneğin, &quot;Kaynak&quot; s&#252;tununda &quot;&#220;z&#252;mler&quot;, &quot;Hedef&quot; s&#252;tununda &quot;Kuru &#252;z&#252;mler&quot; değerlerini i&#231;eren bir d&#246;n&#252;ş&#252;m tablosu sağlanmışsa &quot;&#220;z&#252;mler&quot;, &quot;Kuru &#252;z&#252;mler&quot; ile gruplandırılır. D&#246;n&#252;ş&#252;m&#252;n, d&#246;n&#252;ş&#252;m tablosundaki metnin t&#252;m oluşumlarına uygulanacağını unutmayın. Yukarıdaki d&#246;n&#252;ş&#252;m tablosu ile &quot;&#220;z&#252;mler tatlıdır&quot; c&#252;mlesi de &quot;Kuru &#252;z&#252;mler tatlıdır&quot; c&#252;mlesi ile gruplandırılır.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Her konumdaki çalışan sayısını içeren bir toplama sütun [Count] ekleyerek tabloyu gruplandırın (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Verilen anahtarlara göre benzer öğeleri eşleşen iki tablodaki satırları birleştirir.",
        "Documentation.LongDescription": "<p><code>key1</code> (<code>table1</code> için) ve <code>key2</code> (<code>table2</code> için) tarafından seçilen anahtar sütunlarının değerlerinin benzer öğe eşleştirmesini temel alarak <code>table1</code> satırlarını <code>table2</code> satırlarıyla birleştirir.</p>\r\n<p>Benzer öğe eşleştirme, metnin eşitliğinden daha çok benzerliğini temel alan bir karşılaştırmadır.</p>\r\n<p>Varsayılan olarak bir iç birleşim gerçekleştirilir ancak birleşim türünü belirtmek için isteğe bağlı olarak bir <code>joinKind</code> eklenebilir. Seçenekler şunlardır:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Anahtar sütunlarının nasıl karşılaştırılacağını belirtmek için isteğe bağlı olarak bir <code>joinOptions</code> kümesi eklenebilir. Seçenekler şunlardır:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Benzer &#246;ğe eşleştirme i&#231;in kullanılacak paralel iş par&#231;acıklarının sayısını belirten, 1 ile 8 arasında bir sayı. Varsayılan değer 1&#39;dir.</li>\r\n<li><code>Culture</code> : Kayıtları k&#252;lt&#252;re &#246;zg&#252; kurallara g&#246;re eşleştirmeye olanak tanır. Herhangi bir ge&#231;erli k&#252;lt&#252;r adı olabilir. &#214;rneğin, &quot;ja-JP&quot; K&#252;lt&#252;r se&#231;eneği, kayıtları Japon k&#252;lt&#252;r&#252;ne g&#246;re eşleştirir. Varsayılan değer: &quot;&quot;. Bu değer, kayıtları Sabit İngiliz k&#252;lt&#252;r&#252;ne g&#246;re eşleştirir.</li>\r\n<li><code>IgnoreCase</code> : B&#252;y&#252;k/k&#252;&#231;&#252;k harfe duyarsız anahtar eşleştirmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z&#252;mler&quot;, &quot;&#252;z&#252;mler&quot; ile eşleştirilir. Varsayılan değer true&#39;dur.</li>\r\n<li><code>IgnoreSpace</code> : Eşleşmeleri bulmak i&#231;in metin par&#231;alarının birleştirilmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z &#252;mler&quot; &quot;&#220;z&#252;mler&quot; ile eşleştirilir. Varsayılan değer true&#39;dur.</li>\r\n<li><code>NumberOfMatches</code> : Her giriş satırı i&#231;in d&#246;nd&#252;r&#252;lebilecek maksimum eşleşen satır sayısını belirten tamsayı. &#214;rneğin 1 değeri, her giriş satırı i&#231;in en &#231;ok bir eşleşen satır d&#246;nd&#252;r&#252;r. Bu se&#231;enek sağlanmazsa eşleşen t&#252;m satırlar d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>SimilarityColumnName</code> : Bir giriş değeri ile o giriş i&#231;in temsili değer arasındaki benzerliği g&#246;steren s&#252;tun adı. Varsayılan değer null&#39;dur, bu durumda benzerlikler i&#231;in yeni bir s&#252;tun eklenmeyecektir.</li>\r\n<li><code>Threshold</code> : İki değerin eşleştirileceği benzerlik puanını belirten, 0,00 ile 1,00 arasında bir sayı.\r\n    &#214;rneğin, &quot;&#220;z&#252;mler&quot; ve &quot;&#220;z&#252;ler&quot; (&quot;m&quot; eksik), yalnızca bu se&#231;enek 0,90&#39;dan az olarak ayarlandıysa eşleştirilir.\r\n    1,00 eşiği, yalnızca tam eşleşmelere izin verir.\r\n    (Benzer bir &quot;tam eşleşmenin&quot; b&#252;y&#252;k/k&#252;&#231;&#252;k harf, s&#246;zc&#252;k sırası ve noktalama işaretleri gibi farklılıkları g&#246;rmezden gelebileceğini unutmayın.)\r\n     Varsayılan değer 0,80&#39;dir.</li>\r\n<li><code>TransformationTable</code> : Kayıtları &#246;zel değer eşlemelerine g&#246;re eşleştirmeye olanak tanıyan tablo. &quot;Kaynak&quot; ve &quot;Hedef&quot; s&#252;tunlarını i&#231;ermelidir. &#214;rneğin, &quot;Kaynak&quot; s&#252;tununda &quot;&#220;z&#252;mler&quot;, &quot;Hedef&quot; s&#252;tununda &quot;Kuru &#252;z&#252;mler&quot; değerlerini i&#231;eren bir d&#246;n&#252;ş&#252;m tablosu sağlanmışsa &quot;&#220;z&#252;mler&quot;, &quot;Kuru &#252;z&#252;mler&quot; ile eşleştirilir. D&#246;n&#252;ş&#252;m&#252;n, d&#246;n&#252;ş&#252;m tablosundaki metnin t&#252;m oluşumlarına uygulanacağını unutmayın. Yukarıdaki d&#246;n&#252;ş&#252;m tablosu ile &quot;&#220;z&#252;mler tatlıdır&quot; c&#252;mlesi de &quot;Kuru &#252;z&#252;mler tatlıdır&quot; c&#252;mlesi ile eşleştirilir.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] temelinde iki tablonun sol iç benzer öğe birleşimi",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Tablolar arasında sağlanan sütunlar üzerinde benzer birleşim gerçekleştirir ve birleşim sonucunu yeni bir sütunda oluşturur.",
        "Documentation.LongDescription": "<p><code>key1</code> (<code>table1</code> için) ve <code>key2</code> (<code>table2</code> için) tarafından seçilen anahtar sütunlarının değerlerinin benzer eşleştirmesine dayanarak <code>table1</code> satırlarını <code>table2</code> satırlarıyla birleştirir. Sonuçlar, <code>newColumnName</code> adlı yeni bir sütunda döndürülür.</p>\r\n<p>Benzer öğe eşleştirme, metnin eşitliğinden ziyade benzerliğini temel alan bir kıyaslamadır.</p>\r\n<p>İsteğe bağlı <code>joinKind</code>, gerçekleştirilecek birleşim türünü belirtir. Bir <code>joinKind</code> belirtilmediyse varsayılan olarak bir sol dış birleştirme gerçekleştirilir. Seçenekler şunlardır:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Anahtar sütunlarının nasıl kıyaslanacağını belirtmek için isteğe bağlı olarak bir <code>joinOptions</code> kümesi eklenebilir. Seçenekler şunlardır:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Benzer &#246;ğe eşleştirme i&#231;in kullanılacak paralel iş par&#231;acıklarının sayısını belirten, 1 ile 8 arasında bir sayı. Varsayılan değer 1&#39;dir.</li>\r\n<li><code>Culture</code> : Kayıtları k&#252;lt&#252;re &#246;zg&#252; kurallara g&#246;re eşleştirmeye olanak tanır. Herhangi bir ge&#231;erli k&#252;lt&#252;r adı olabilir. &#214;rneğin, &quot;ja-JP&quot; K&#252;lt&#252;r se&#231;eneği, kayıtları Japon k&#252;lt&#252;r&#252;ne g&#246;re eşleştirir. Varsayılan değer: &quot;&quot;. Bu değer, kayıtları Sabit İngiliz k&#252;lt&#252;r&#252;ne g&#246;re eşleştirir.</li>\r\n<li><code>IgnoreCase</code> : B&#252;y&#252;k/k&#252;&#231;&#252;k harfe duyarsız anahtar eşleştirmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z&#252;mler&quot;, &quot;&#252;z&#252;mler&quot; ile eşleştirilir. Varsayılan değer true&#39;dur.</li>\r\n<li><code>IgnoreSpace</code> : Eşleşmeleri bulmak i&#231;in metin par&#231;alarının birleştirilmesine olanak tanıyan mantıksal (true/false) değer. &#214;rneğin, true olduğunda &quot;&#220;z &#252;mler&quot; &quot;&#220;z&#252;mler&quot; ile eşleştirilir. Varsayılan değer true&#39;dur.</li>\r\n<li><code>NumberOfMatches</code> : Her giriş satırı i&#231;in d&#246;nd&#252;r&#252;lebilecek maksimum eşleşen satır sayısını belirten tamsayı. &#214;rneğin 1 değeri, her giriş satırı i&#231;in en &#231;ok bir eşleşen satır d&#246;nd&#252;r&#252;r. Bu se&#231;enek sağlanmazsa eşleşen t&#252;m satırlar d&#246;nd&#252;r&#252;l&#252;r.</li>\r\n<li><code>SimilarityColumnName</code> : Bir giriş değeri ile o giriş i&#231;in temsili değer arasındaki benzerliği g&#246;steren s&#252;tun adı. Varsayılan değer null&#39;dur, bu durumda benzerlikler i&#231;in yeni bir s&#252;tun eklenmeyecektir.</li>\r\n<li><code>Threshold</code> : İki değerin eşleştirileceği benzerlik puanını belirten, 0,00 ile 1,00 arasında bir sayı.\r\n    &#214;rneğin, &quot;&#220;z&#252;mler&quot; ve &quot;&#220;z&#252;ler&quot; (&quot;m&quot; eksik), yalnızca bu se&#231;enek 0,90&#39;dan az olarak ayarlandıysa eşleştirilir.\r\n    1,00 eşiği, yalnızca tam eşleşmelere izin verir.\r\n    (Benzer bir &quot;tam eşleşmenin&quot; b&#252;y&#252;k/k&#252;&#231;&#252;k harf, s&#246;zc&#252;k sırası ve noktalama işaretleri gibi farklılıkları g&#246;rmezden gelebileceğini unutmayın.)\r\n     Varsayılan değer 0,80&#39;dir.</li>\r\n<li><code>TransformationTable</code> : Kayıtları &#246;zel değer eşlemelerine g&#246;re eşleştirmeye olanak tanıyan tablo. &quot;Kaynak&quot; ve &quot;Hedef&quot; s&#252;tunlarını i&#231;ermelidir. &#214;rneğin, &quot;Kaynak&quot; s&#252;tununda &quot;&#220;z&#252;mler&quot;, &quot;Hedef&quot; s&#252;tununda &quot;Kuru &#252;z&#252;mler&quot; değerlerini i&#231;eren bir d&#246;n&#252;ş&#252;m tablosu sağlanmışsa &quot;&#220;z&#252;mler&quot;, &quot;Kuru &#252;z&#252;mler&quot; ile eşleştirilir. D&#246;n&#252;ş&#252;m&#252;n, d&#246;n&#252;ş&#252;m tablosundaki metnin t&#252;m oluşumlarına uygulanacağını unutmayın. Yukarıdaki d&#246;n&#252;ş&#252;m tablosu ile &quot;&#220;z&#252;mler tatlıdır&quot; c&#252;mlesi de &quot;Kuru &#252;z&#252;mler tatlıdır&quot; c&#252;mlesi ile eşleştirilir.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] temelinde iki tablonun sol iç benzer öğe birleşimi",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Tabloda aynı anahtara sahip olan satırları gruplandırır.",
        "Documentation.LongDescription": "<code>table</code> satırlarını <code>key</code> ile tanımlanan anahtar sütunlara göre gruplandırır. <code>key</code> tek bir sütun adı ya da sütun adları listesi olabilir.\r\n    Her grup için, <code>aggregatedColumns</code> ile belirtilen toplu sütunlarla birlikte anahtar sütunları (ve değerlerini) içeren bir kayıt oluşturulur.\r\n    İsteğe bağlı olarak, <code>groupKind</code> ve <code>comparer</code> de belirtilebilir.<br>\r\n    <br>\r\n    Veriler anahtar sütunlara göre önceden sıralanmışsa, bir GroupKind.Local <code>groupKind</code> değeri sağlanabilir. Bu işlem, belirli durumlarda gruplandırmanın performansını iyileştirebilir;\r\n    çünkü belirli bir anahtar değerler kümesi içeren tüm satırların bitişik olduğu varsayılır.<br>\r\n    <br>\r\n    Bir <code>comparer</code> geçerken, farklı anahtarları eşit olarak değerlendirirse, bir satırın, anahtarları kendininkinden farklı olan bir gruba yerleştirilebileceğini unutmayın.<br>\r\n    <br>\r\n    Bu işlev döndürdüğü satırların sıralamasını garanti etmez.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Fiyatlar toplamını (\"each List.Sum([price])\") içeren bir [total] toplama sütunu ekleyerek tabloyu gruplandırır.",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Bir tabloya belirtilen konumda bir satır listesi ekler.",
        "Documentation.LongDescription": "<code>rows</code> verilen konumunda <code>table</code> içine eklenen <code>offset</code> satır listesini içeren bir tablo döndürür. Eklenecek satırdaki her sütun, tablonun sütun türleri ile eşleşmelidir.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Satırı 1 konumunda bulunan tabloya ekler.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "1 konumunda bulunan tabloya iki satır ekler.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "İki tablodaki verilen anahtara göre eşleşen satırları birleştirir.",
        "Documentation.LongDescription": "<p><code>table1</code> (<code>table2</code> için) ve <code>key1</code> (<code>table1</code> için) tarafından seçilen anahtar sütunu değerlerinin eşitliğine göre <code>key2</code> satırlarını <code>table2</code> satırlarıyla birleştirir.</p>\r\n<p>Varsayılan olarak iç birleşim gerçekleştirilir ancak birleşim türünü belirtmek üzere isteğe bağlı bir <code>joinKind</code> eklenebilir. Seçenekler arasında şunlar bulunur:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Anahtar sütunlarının nasıl karşılaştırılacağını belirtmek üzere isteğe bağlı bir <code>keyEqualityComparers</code> kümesi eklenebilir. Bu parametre, şu anda yalnızca şirket içinde kullanılabilir.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tek bir anahtar sütunu kullanarak iki tabloyu birleştirin.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Birden çok anahtar sütun kullanarak, çakışan sütun adlarına sahip iki tabloyu birleştirin.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "En büyük satırları verilen ölçütü kullanarak döndürür.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> durumunda, <code>table</code> öğesindeki en büyük satırları döndürür.\r\n    Satırlar sıralandıktan sonra, sonuçları daha fazla filtrelemek için <code>countOrCondition</code> parametresi belirtilmelidir. Sıralama algoritmasının, sabit sıralanmış bir sonucu garanti etmediğini unutmayın. <code>countOrCondition</code> parametresi birden fazla biçimde olabilir:\r\n    <ul>\r\n        <li> Bir sayı belirlenirse, en fazla <code>countOrCondition</code> öğe içeren, artan sıraya göre bir liste döndürülür. </li>\r\n        <li> Bir koşul belirlenirse, koşulu karşılayan bir öğe listesi döndürülür. Bir öğe koşulu karşılamazsa, diğer öğeler değerlendirilmez. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [a] > 0 koşulunu sağlayacak şekilde [a] sütununda en büyük değer bulunan satırı bulur. Satırlar, filtre uygulanmadan önce sıralanır.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Tabloda [b] > 0 koşulunu sağlayacak şekilde [a] sütununda en büyük değer bulunan satırı bulur. Satırlar, filtre uygulanmadan önce sıralanır.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "En küçük satırları verilen ölçütü kullanarak döndürür.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> durumunda, <code>table</code> öğesindeki en küçük satırları döndürür. Satırlar sıralandıktan sonra, sonuçlarını daha fazla filtrelemek için <code>countOrCondition</code> parametresi belirlenmelidir. Sıralama algoritmasının, sabit sıralanmış bir sonucu garanti vermediğini unutmayın. <code>countOrCondition</code> parametresi birden fazla form alabilir:\r\n    <ul>\r\n        <li> Bir sayı belirlenirse, artan sıraya göre <code>countOrCondition</code> kadar öğeyi içeren bir liste döndürülür. </li>\r\n        <li> Bir koşul belirlenirse, ilk olarak koşulu karşılayan bir öğe listesi döndürülür. Bir öğe koşulu karşılayamazsa, daha fazla öğe değerlendirilmez. </li>\r\n</ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [a] < 3 koşulunu sağlayacak şekilde [a] sütununda en küçük değer bulunan satırı bulur. Satırlar, filtre uygulanmadan önce sıralanır.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Tabloda [b] < 0 koşulunu sağlayacak şekilde [a] sütununda en küçük değer bulunan satırı bulur. Satırlar, filtre uygulanmadan önce sıralanır.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Tablolar arasında sağlanan sütunlar üzerinde birleştirme gerçekleştirir ve birleştirme sonucunu yeni bir sütunda oluşturur.",
        "Documentation.LongDescription": "<p><code>key1</code> (<code>table1</code> için) ve <code>key2</code> (<code>table2</code> için) tarafından seçilen anahtar sütunu değerlerinin eşitliğine göre <code>table1</code> satırlarını <code>table2</code> satırlarıyla birleştirir. Sonuçlar <code>newColumnName</code> adlı sütuna girilir.</p>\r\n<p>İsteğe bağlı <code>joinKind</code>, gerçekleştirilecek birleşimin türünü belirtir. <code>joinKind</code> belirtilmezse varsayılan olarak sol dış birleştirme işlemi gerçekleştirilir.</p>\r\n<p>Anahtar sütunlarının nasıl karşılaştırılacağını belirtmek üzere isteğe bağlı bir <code>keyEqualityComparers</code> kümesi eklenebilir. Bu özellik, şu anda yalnızca şirket içinde kullanılabilir.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tek bir anahtar sütunu kullanarak iki tabloyu birleştirin.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Öznitelik değer çiftlerini temsil eden sütun çiftleri ile öznitelik sütunundaki verileri bir sütun başlığı olarak döndürür.",
        "Documentation.LongDescription": "Öznitelik değer çiftlerini temsil eden sütun çiftleri ile öznitelik sütunundaki verileri bir sütun başlığı olarak döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> tablosundaki öznitelik sütunundaki \"a\", \"b\" ve \"c\" değerlerini alır ve kendi sütunlarına özetler.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> tablosundaki öznitelik sütunundaki \"a\", \"b\" ve \"c\" değerlerini alır ve kendi sütunlarına özetler.  \"x\" anahtarına ait \"c\" özniteliği kendisi ile ilişkili birden çok değer içeriyor, bu nedenle çakışmayı gidermek için List.Max işlevini kullanın.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Tüm belirtilen aralıktaki satırları sağlanan satırlarla değiştirir.",
        "Documentation.LongDescription": "<code>table</code> girdisinde <code>count</code> belirtilen sayısındaki satırı <code>offset</code> sonrasında başlayan, belirtilen <code>rows</code> ile değiştirir. <code>rows</code> parametresi bir kayıt listesidir.\r\n    <ul>\r\n       <li><code>table</code>: Değiştirmenin gerçekleştirildiği tablo.</li>\r\n       <li><code>offset</code>: Değiştirmeyi yapmadan önce atlanacak satır sayısı.</li>\r\n       <li><code>count</code>: Değiştirilecek satırların sayısı.</li>\r\n       <li><code>rows</code>: <code>table</code> öğesine, <code>offset</code> tarafından belirtilen konumda eklenecek satır kayıtlarının listesi.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "1 konumundan başlayarak 3 satır değiştirir.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Seçili sütunlardaki bir değeri belirtilen değerle değiştirir.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> sütunlarında <code>oldValue</code> öğesini <code>newValue</code> ile değiştirir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "B sütununda “hoşça kal” metnini yalnızca tüm değerle eşleşen “dünya” ile değiştirin.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "B sütununda “al” metnini değerin bir parçasıyla eşleşen “el” ile değiştirin.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "ABD’li çalışanların adlarını anonimleştirin.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "ABD’li çalışanlarla ilgili tüm sütunları anonimleştirin.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Belirtilen sütunları belirtilen bölücü işlevi kullanarak ek sütun kümelerine ayırır.",
        "Documentation.LongDescription": "Belirtilen sütunları belirtilen bölücü işlevi kullanarak ek sütun kümelerine ayırır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "\"i\" konumundaki [Name] sütununu iki sütuna ayırın",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Bir tablodaki sütun kümesini öznitelik-değer çiftlerine çevirir.",
        "Documentation.LongDescription": "Bir tablodaki sütun kümesini her satırdaki geri kalan değerler ile birleştirilmiş öznitelik-değer çiftlerine çevirir.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> tablosundaki \"a\", \"b\" ve \"c\" sütunlarını alır ve öznitelik-değer çiftlerine özetler.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Belirtilen küme dışındaki tüm sütunları öznitelik-değer çiftlerine çevirir.",
        "Documentation.LongDescription": "Belirtilen küme dışındaki tüm sütunları, her satırdaki değerlerin geri kalanıyla birlikte öznitelik-değer çiftlerine çevirir.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Belirtilen küme dışındaki tüm sütunları, her satırdaki değerlerin geri kalanıyla birlikte öznitelik-değer çiftlerine çevirir.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Kişisel Analiz",
        "Documentation.LongDescription": "<p>Teams Analizi bağlayıcısı, Teams kullanımınıza yönelik içgörüler elde etmenizi sağlar. Hem Teams'deki kişisel etkinlikleriniz hem de Teams'de üyesi olduğunuz etkinlikler için veriler sunulur.</p>\r\n<p>Önceki 90 güne ait veriler kullanılabilir.</p>\r\n<p> Mevcut veri türlerinin ayrıntıları için lütfen şu yardım belgelerine bakın: </p>\r\n<ul>\r\n<li><b>Teams Kullanımı:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams Kullanıcı Etkinliği:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Kuruluşu ve proje adlarını girin.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps tarafından sunulan bir OData akışları tablosu döndürür."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Bir ikili değeri okuyan ikili biçimi döndürür.",
        "Documentation.LongDescription": "İkili değeri okuyan bir ikili biçim döndürür. <code>length</code> belirtilirse, ikili değer bu kadar bayt içerecektir. <code>length</code> belirtilmezse, ikili değer kalan baytları içerecektir. <code>length</code>, bir sayı olarak veya ikili veriden önce gelen uzunluğun ikili biçimi olarak belirtilebilir.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Verilen iki değer üzerinde yapılan eşitlik kontrolüne bağlı olarak mantıksal bir değer döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>comparer</code> öğesini kullanarak <code>x</code> ve <code>y</code> olmak üzere verilen iki değer üzerinde gerçekleştirilen eşitlik kontrolüne göre <code>mantıksal</code> bir değer döndürür.\r      \n     <div>\r\n       <code>comparer</code>, karşılaştırmanın denetlenmesi için kullanılan bir <code>Karşılaştırıcıdır</code>.\r\n       Karşılaştırıcı, iki bağımsız değişken kabul eden ve ilk değerin ikinci değerden küçük, ona eşit veya ikinciden büyük olup olmadığını temel alarak -1, 0 veya 1 döndüren bir işlevdir.\r\n       Karşılaştırıcılar, büyük/küçük harfe duyarlı olmayan veya kültüre ve yerel ayara duyarlı karşılaştırmaların sağlanması için kullanılabilir.\r      \n     </div>\r\n     <div>\r\n        Aşağıdaki yerleşik karşılaştırıcılar formül dilinde kullanılabilir:\r\n      </div>\r\n      <ul>\r\n       <li><code>Comparer.Ordinal</code>: Tam sıralı karşılaştırma gerçekleştirilmek için kullanılır</li>\r\n     <li><code>Comparer.OrdinalIgnoreCase</code>: Tam sıralı büyük/küçük harfe duyarlı olmayan karşılaştırma gerçekleştirmek için kullanılır</li>\r\n     <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı karşılaştırma gerçekleştirmek için kullanılır</li>\r\n     </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Değerlerin eşit olup olmadığını belirlemek için \"en-US\" yerel ayarını kullanarak \"1\" ve \"A\" karşılaştırması yapın.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Yerel saat dilimindeki geçerli tarih ve saati döndürür. Bu değer sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.LongDescription": "Sistemdeki geçerli tarih ve saate ayarlanan bir <code>datetime</code> değeri döndürür. Bu değer, bir ifadenin yürütülmesi sırasında farklı değerler döndürebilecek DateTime.LocalNow öğesinin aksine sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Yerel saat dilimindeki geçerli tarih ve saati döndürür.",
        "Documentation.LongDescription": "Sistemdeki geçerli tarih ve saate ayarlanan bir <code>datetime</code> değeri döndürür.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Yerel saat dilimindeki geçerli tarih ve saati döndürür. Bu değer sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.LongDescription": "Sistemdeki geçerli tarih ve saate ayarlanan bir <code>datetime</code> değeri döndürür. Döndürülen değer yerel saat dilimini temsil eden saat dilimi bilgilerini içerir. Bu değer, bir ifadenin yürütülmesi sırasında farklı değerler döndürebilecek DateTimeZone.LocalNow öğesinin aksine sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "UTC (GMT saat dilimi) biçiminde geçerli tarih ve saati döndürür. Bu değer sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.LongDescription": "UTC (GMT saat dilimi) biçiminde geçerli tarih ve saati döndürür. Bu değer sabittir ve sonraki çağrılarla değişmez.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Yerel saat dilimindeki geçerli tarih ve saati döndürür.",
        "Documentation.LongDescription": "Sistemdeki geçerli tarih ve saate ayarlanan bir <code>datetimezone</code> değeri döndürür.\r\n    Döndürülen değer, yerel saat dilimini temsil eden saat dilimi bilgilerini içerir.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "UTC (GMT saat dilimi) biçiminde geçerli tarih ve saati döndürür.",
        "Documentation.LongDescription": "UTC (GMT saat dilimi) biçiminde geçerli tarih ve saati döndürür.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Geçerli tarih ve saati UTC biçiminde alır.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "O sırada çalıştırılan değerlendirme için genel olmayan bir tanımlayıcı döndürür.",
        "Documentation.LongDescription": "O sırada çalıştırılan değerlendirme için genel olmayan bir tanımlayıcı döndürür.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Gelen istekleri giden isteklerle ilişkilendirmek için genel olmayan bir tanımlayıcı döndürür.",
        "Documentation.LongDescription": "Gelen istekleri giden isteklerle ilişkilendirmek için genel olmayan bir tanımlayıcı döndürür.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "İzleme etkinse bir izleme girişi yazar ve değeri döndürür.",
        "Documentation.LongDescription": "İzleme etkinse bir izleme <code>message</code> yazar ve <code>value</code> döndürür. İsteğe bağlı <code>delayed</code> parametresi, ileti izlenene kadar <code>value</code> değerlendirmesinin ertelenip ertelenmeyeceğini belirtir. <code>traceLevel</code> şu değerlerden birini alabilir:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Text.From işlevini çağırmadan önce iletiyi izler ve sonucu döndürür.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Geçerli konak için varsayılan kimlik sağlayıcısı.",
        "Documentation.LongDescription": "Geçerli konak için varsayılan kimlik sağlayıcısı.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Bir toplam değerini listedeki öğelerden hesaplar.",
        "Documentation.LongDescription": "Bir toplam değerini <code>list</code> listesindeki öğelerden <code>accumulator</code> kullanarak hesaplar.\r\n    <code>seed</code> isteğe bağlı çekirdek parametresi ayarlanabilir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesindeki öğelerden toplam değeri ((state, current) => state + current ) kullanarak hesaplar.",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Verilen ilk değer, sayı ve artımlı süre değerinden datetimezone değer listesi oluşturur.",
        "Documentation.LongDescription": "<code>count</code> boyutunda <code>start</code> konumunda başlayan bir <code>datetimezone</code> değer listesi döndürür. <code>step</code> verilen artışı her değere eklenen bir <code>duration</code> değeridir.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Yıl başından 5 dakika önce başlayan (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)), 1 dakika artan (#duration(0, 0, 1, 0)) 10 değer içeren bir liste oluşturur.",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Verilen ilk değer, sayı ve artımlı duration değerinden datetime değer listesi oluşturur.",
        "Documentation.LongDescription": "<code>count</code> boyutunda <code>start</code> konumunda başlayan bir <code>datetime</code> değer listesi döndürür. <code>step</code> verilen artışı her değere eklenen bir <code>duration</code> değeridir.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Yıl başından 5 dakika önce başlayan (#datetime(2011, 12, 31, 23, 55, 0)), 1 dakika artan (#duration(0, 0, 1, 0)) 10 değer içeren bir liste oluşturur.",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Verilen ilk değer, sayı ve artımlı duration değerinden date değer listesi oluşturur.",
        "Documentation.LongDescription": "<code>count</code> boyutunda <code>start</code> konumunda başlayan bir <code>date</code> değer listesi döndürür. <code>step</code> verilen artışı her değere eklenen bir <code>duration</code> değeridir.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Yılın son gününden başlayarak (#date(2011, 12, 31)) 1'er gün artacak (#duration(1, 0, 0, 0)) şekilde 5 değer içeren bir liste oluşturur.",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Verilen ilk değer, sayı ve artımlı duration değerinden duration değer listesi oluşturur.",
        "Documentation.LongDescription": "<code>start</code> ile başlayan ve verilen <code>duration</code> <code>step</code> ile artan bir <code>count</code> <code>duration</code> değer listesi döndürür.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1 saat ile başlayarak birer saat artacak şekilde 5 değer içeren bir liste oluşturur.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Bir değerler listesi oluşturur.",
        "Documentation.LongDescription": "Sağlanan işlevleri kullanarak bir değerler listesi oluşturur. <code>initial</code> işlevi daha sonra <code>condition</code> ile sınanacak bir başlangıç aday değeri oluşturur.\r\n    Aday değer onaylanırsa sonuç listesinin parçası olarak döndürülür ve yeni onaylanan değer <code>next</code> öğesine geçirilerek sonraki aday değer oluşturulur.\r\n    Bir aday değer <code>condition</code> ile eşleşmediğinde, liste oluşturma işlemi durur.\r\n    Sonuç listesindeki öğeleri dönüştürmek için isteğe bağlı <code>selector</code> parametresi de sağlanabilir.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "On sayısından başlayıp tekrarlı şekilde bir azaltarak ve her öğenin sıfırdan büyük olmasına dikkat ederek bir liste oluşturun.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "x'in bir değer y'nin ise bir liste olduğu x ve y'ler içeren bir kayıt listesi oluşturur. x 10'dan az kalmalı ve y listesindeki öğelerin sayısını göstermelidir. Liste oluşturulduktan sonra yalnızca x değerlerini döndürür.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Verilen dizindeki bir listeye değer ekler.",
        "Documentation.LongDescription": "<code>values</code> içindeki değerleri <code>index</code> konumundaki <code>list</code> içine ekleme ile oluşan yeni bir liste döndürür. Listedeki ilk konum dizin 0'dadır.\r\n      <ul>\r\n        <li><code>list</code>: Değerlerin ekleneceği hedef liste.</li>\r\n        <li><code>index</code>: Değerlerin ekleneceği hedef listenin (<code>list</code>) dizini. Listenin dizin 0 konumundaki ilk konum.</li>\r\n        <li><code>values</code>: <code>list</code> öğesine eklenecek değerlerin listesi.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "({3, 4}) listesini dizin 2 konumunda ({1, 2, 5}) hedef listesine ekler.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "({1, {1.1, 1.2}}) iç içe yerleştirilmiş listeli listeyi dizin 0 konumunda ({2, 3, 4}) hedef listesine ekler.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Değerlerin count sayısını değiştirme değeri konumundan başlayarak değiştirir.",
        "Documentation.LongDescription": "<code>list</code> içindeki <code>count</code> değeri <code>replaceWith</code> listesi ile belirtilen <code>index</code> konumundan başlayarak kaldırır.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 7, 8, 9, 5} listesindeki {7, 8, 9} değerlerini {3, 4} ile değiştirir.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Belirtilen değer için bir liste arar ve değiştirir.",
        "Documentation.LongDescription": "<code>oldValue</code> değeri için bir <code>list</code> değer listesi arar ve her oluşumu <code>newValue</code> değiştirme değeri ile değiştirir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"B\", \"a\", \"a\"} listesindeki tüm \"a\" değerlerini \"A\" ile değiştirir.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Verilen ilk değer, sayı ve artımlı süre değerinden time değer listesi oluşturur.",
        "Documentation.LongDescription": "<code>count</code> boyutunda <code>start</code> konumunda başlayan bir <code>time</code> değer listesi döndürür. <code>step</code> verilen artışı her değere eklenen bir <code>duration</code> değeridir.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Öğleden sonra başlayan (#time(12, 0, 0)), 1 saat artan (#duration(0, 1, 0, 0)) 4 değer içeren bir liste oluşturur.",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Öğeleri girdi listesinden belirtilen işlevler kullanılarak dönüştürülen listeyi döndürür.",
        "Documentation.LongDescription": "Öğeleri giriş listesinden yansıtılan bir liste döndürür.<br>\r\n    <br>\r\n    <code>collectionTransform</code> işlevi her öğeyi bir ara listeye dönüştürür ve <code>resultTransform</code> işlevi nihai sonucu oluşturmak amacıyla orijinal öğenin yanı sıra ara listeden bir öğe alır.<br>\r\n    <br>\r\n    <code>collectionTransform</code> işlevi, <code>(x as any) as list => ...</code> imzasını içerir, burada <code>x</code>, <code>list</code> konumunda bulunan bir öğedir.\r\n    <code>resultTransform</code> işlevi sonucun şeklini yansıtır ve <code>(x as any, y as any) as any => ...</code> imzasını içerir, burada <code>x</code>, <code>list</code> konumunda bulunan bir öğedir ve <code>y</code>, <code>x</code> öğesi <code>collectionTransform</code> konumuna aktarılarak oluşturulan listeden alınan bir öğedir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kişiler ve sahip oldukları evcil hayvanlar listesini düzleştirin.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Rastgele bir sayı döndürür.",
        "Documentation.LongDescription": "0 ve 1 arasında rastgele bir sayı döndürür.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Rastgele bir sayı alır.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Bir kayda alan ekler.",
        "Documentation.LongDescription": "<code>fieldName</code> alan adı ve <code>value</code> değeri verildiğinde <code>record</code> kaydına bir alan ekler.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kayda alan Adresini ekler.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Sağlanan girdideki metni değiştirir.",
        "Documentation.LongDescription": "Asıl <code>text</code> içindeki <code>old</code> metnini <code>new</code> metni ile değiştirir. Bu değiştirici işlevi <code>List.ReplaceValue</code> ve <code>Table.ReplaceValue</code> içinde kullanılabilir.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "\"hEllo world\" dizesindeki \"hE\" ifadesini \"He\" olarak değiştirir.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Sağlanan girdideki değerleri değiştirir.",
        "Documentation.LongDescription": "Asıl <code>value</code> içindeki <code>old</code> değerini <code>new</code> değeri ile değiştirir. Bu değiştirici işlevi <code>List.ReplaceValue</code> ve <code>Table.ReplaceValue</code> içinde kullanılabilir.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "11 değerini 10 değeri ile değiştirir.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Smartsheet API'sinden bir JSON sonucu döndürür",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Belirtilen uç noktadan Smartsheet 2.0 REST API'sine çağrıda bulunur ve sonuçları bir JSON kaydı olarak döndürür.",
        "Documentation.Examples": [
          {
            "Description": "Ek olarak belirtilen bağımsız değişkenlerle birlikte sayfalardaki Smartsheet API uç noktasından veri çeker",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Smartsheet API'si tarafından döndürülen şekilde, sayfalarla ilgili bilgilerin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Bölme gerçekleştirmeyen bir işlevi döndürür ve bu işlevin bağımsız değişkenini tek öğe listesi olarak döndürür.",
        "Documentation.LongDescription": "Bölme gerçekleştirmeyen bir işlevi döndürür ve bu işlevin bağımsız değişkenini tek öğe listesi olarak döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Bir metin listesine boşlukta metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine boşlukta metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tırnaklara diğer karakterler gibi davranarak girişi boşluk karakterleriyle bölün.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Tabloyu belirtilen grup ve sütun sayısına bağlı olarak tablo listesi olarak bölümler.",
        "Documentation.LongDescription": "<code>table</code> öğesini <code>column</code> değerine ve <code>hash</code> işlevine bağlı olarak <code>groups</code> tablo listesi olarak bölümler.\r\n    <code>hash</code> işlevi, satırın karma değerini almak üzere <code>column</code> satırının değerine uygulanır. <code>groups</code> karma değer modulo işleci, satırın döndürülen tabloların hangilerine ekleneceğini belirler.\r\n    <ul>\r\n       <li><code>table</code>: Bölümlenecek tablo.</li>\r\n       <li><code>column</code>: Satırın hangi döndürülen tabloda olduğunu belirlemek üzere karma sütunu.</li>\r\n       <li><code>groups</code>: Girdi tablosunun bölümleneceği tablo sayısı.</li>\r\n       <li><code>hash</code>: Karma değeri almak üzere uygulanan işlev.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> tablosunu sütunların değerini karma işlevi olarak kullanarak [a] sütunu üzerinde 2 tabloya bölümler.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Belirtilen <code>startDelimiter</code> ile <code>endDelimiter</code> değeri arasındaki <code>text</code> bölümünü döndürür.\r\n    İsteğe bağlı bir sayısal <code>startIndex</code> hangi <code>startDelimiter</code> oluşumunun hesaba katılması gerektiğini belirtir.\r\n    İsteğe bağlı bir liste <code>startIndex</code> hangi <code>startDelimiter</code> oluşumunun hesaba katılması gerektiğini ve dizin oluşturmanın girişin başından mı sonundan mı başlaması gerektiğini belirtir.\r\n    <code>endIndex</code> buna benzer, ancak dizin oluşturma <code>startIndex</code> değeriyle göreli olarak yapılır.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "İlk açık parantez ve takip eden ilk kapalı parantez arasındaki \"111 (222) 333 (444)\" bölümünü alır.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "İkinci açık parantez ve takip eden ilk kapalı parantez arasındaki \"111 (222) 333 (444)\" bölümünü alır.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Sondan ikinci açık parantez ve takip eden ikinci kapalı parantez arasındaki \"111 (222) 333 (444)\" bölümünü alır.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Bir metin değerini verilen konumda başka bir metin değerine ekler.",
        "Documentation.LongDescription": "<code>newText</code> metin değerini <code>offset</code> konumunda <code>text</code> metin değerine eklemenin sonucunu döndürür. Konumlar 0'dan başlar.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABD\" ifadesinde \"B\" ile \"D\" arasına \"C\" ekler.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Yeni, rastgele bir genel benzersiz tanımlayıcı (GUID) döndürür.",
        "Documentation.LongDescription": "Yeni, rastgele bir genel benzersiz tanımlayıcı (GUID) döndürür.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Metninde verilen alt dizenin tüm oluşumlarını değiştirir.",
        "Documentation.LongDescription": "<code>old</code> metin değerinin <code>text</code> metin değerindeki tüm oluşumlarını <code>new</code> metin değeri ile değiştirmenin sonucunu döndürür. Bu işlev büyük/küçük harfe duyarlıdır.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Bir tümcedeki tüm \"the\" örneklerini \"a\" ile değiştirir.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Bir aralıktaki karakterleri kaldırır ve belirtilen konumda yeni bir değer ekler.",
        "Documentation.LongDescription": "<code>text</code> metin değerinden <code>offset</code> konumunda <code>count</code> karakteri kaldırmanın ve <code>text</code> içindeki aynı konuma <code>newText</code> metin değerini eklemenin sonucunu döndürür.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABGF\" metin değerinde 2 konumundaki tek karakteri \"CDE\" yeni metin değeri ile değiştirir.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Verilen tablo türüne anahtar ekler.",
        "Documentation.LongDescription": "Verilen tablo türüne anahtar ekler.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Koşulun kabul edeceği kimliklerin bir listesini döndürür.",
        "Documentation.LongDescription": "<p>Belirtilen <code>identityProvider</code> öğesini kullanarak <code>condition</code> öğesini kimlik listesine dönüştürür. Bu liste için <code>condition</code>, kimlik sağlayıcısı <code>identityProvider</code> olarak tüm yetkilendirme bağlamlarında <code>true</code> döndürür. <code>condition</code> öğesinin kimlik listesine dönüştürülmesi mümkün değilse, örneğin <code>condition</code> bir karar almak için kullanıcı veya grup kimliklerinden farklı özniteliklere danışıyorsa bir hata oluşur.</p>\r\n    <p>Kimlik listesinin, kimlikleri <code>condition</code> öğesinde göründüğü gibi temsil ettiğini ve kimliklerde normalleştirme (grup genişletme gibi) uygulanmadığını unutmayın.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Belirtilen sıkıştırma türünü kullanarak ikili bir değeri sıkıştırır.",
        "Documentation.LongDescription": "Belirtilen sıkıştırma türünü kullanarak ikili bir değeri sıkıştırır. Bu çağrının sonucunda girdinin sıkıştırılmış bir kopyası oluşur. Sıkıştırma türleri şunlardır:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "İkili değeri sıkıştırın.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Sıkıştırılmış bir ikili değeri belirtilen sıkıştırma türünü kullanarak genişletir.",
        "Documentation.LongDescription": "Bir ikili değerin sıkıştırmasını belirtilen sıkıştırma türünü kullanarak açar. Bu çağrının sonucu girdinin sıkıştırılmamış bir kopyasıdır. Sıkıştırma türleri şunları kapsar:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Sıkıştırılmış ikili değeri açar.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "İkili değerin bir uzaklıktan başlayan bir alt kümesini döndürür.",
        "Documentation.LongDescription": "<code>binary</code> uzaklığından başlayarak ikili değerin bir alt kümesini döndürür. <code>offset</code> isteğe bağlı parametresi, alt kümenin maksimum uzunluğunu belirler.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "İkili değerin 6 uzaklığından başlayan bir alt kümesini döndürür.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "İkili değerin 6 uzaklığından 2 uzunluklu bir alt kümesini döndürür.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Belirtilen sayfa boyutunu kullanarak belirtilen ikiliyi bir ikililer listesine ayırır.",
        "Documentation.LongDescription": "<code>binary</code> öğesini; çıkış listesinin ilk öğesinin kaynak ikilideki ilk <code>pageSize</code> baytı barındıran bir ikili olduğu, sonraki öğenin ise\r\n    kaynak ikiliden sonraki <code>pageSize</code> baytı barındıran bir ikili olduğu ve bu şekilde devam eden bir ikili listesine ayırır.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Sorgu ve eylem işlemlerine ilişkin kullanıcı tanımlı işleyicileri bulunan bir ikili oluşturur veya ikiliyi genişletir.",
        "Documentation.LongDescription": "<p>İşlem görünüme uygulandığında varsayılan işlem davranışı yerine <code>handlers</code> içinde belirtilen işlevlerin kullanıldığı bir <code>binary</code> görünümü döndürür.</p>\r\n<p><code>binary</code> sağlanırsa işleyici işlevleri isteğe bağlıdır. <code>binary</code> sağlanmazsa <code>GetStream</code> işleyici işlevi gerekir. İşleme yönelik bir işleyici işlevinin belirtilmemesi durumunda bunun yerine (<code>GetExpression</code> durumu dışında) <code>binary</code> için varsayılan işlem davranışı uygulanır.</p>\r\n<p>İşleyici işlevleri, <code>binary</code> üzerinde işlem uygulandıktan sonra elde edilen sonuç (veya <code>GetExpression</code> durumunda ortaya çıkan görünüm) ile anlamsal olarak eşdeğer bir değer döndürmelidir.</p>\r\n<p>İşleyici işlevinin hata vermesi durumunda, görünüme varsayılan işlem davranışı uygulanır.</p>\r\n<p>Kaynağa özgü işlemlere ilişkin M sorgularının çevirisi gibi bir veri kaynağına katlama işlemi uygulamak üzere (örneğin, bir dosyanın bir bölümünü indirmek için) <code>Binary.View</code> kullanılabilir.</p>\r\n<p><code>Binary.View</code> hakkında yapılan tüm açıklamalar için yayınlanmış Power Query özel bağlayıcı belgelerine bakın.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Uzunluğu belirlemek için verilere erişmeyi gerektirmeyen temel bir görünüm oluşturun.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Bir işlev tarafından belirtilen bayt sırasına sahip ikili biçimi döndürür.",
        "Documentation.LongDescription": "<code>binaryFormat</code> tarafından belirtilen bayt sırasına sahip bir ikili biçimi döndürür.  Varsayılan bayt sırası: <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Zaten kullanılan bir değere dayalı olan bir sonraki ikili biçimi seçen bir ikili biçimi döndürür.",
        "Documentation.LongDescription": "Zaten kullanılan bir değere dayalı olan bir sonraki ikili biçimi seçen bir ikili biçimi döndürür.  Bu işlev tarafından oluşturulan ikili biçim değeri şu aşamalarda çalışır:<ul>\r\n<li> <code>binaryFormat</code> parametresi tarafından belirtilen ikili biçimi bir değer okumak için kullanılır.</li>\r\n<li>Değer <code>chooseFunction</code> parametresi tarafından belirtilen seçim işlevine geçirilir.</li>\r\n<li>Seçim işlevi değeri denetler ve ikinci bir ikili biçimi döndürür.</li>\r\n<li>İkinci ikili biçimi ikinci bir değeri okumak için kullanılır.</li>\r\n<li>Birleştirme işlevi belirtilirse, birinci ve ikinci değerler birleştirme işlevine geçirilir ve sonuç değeri döndürülür.</li>\r\n<li>Birleştirme işlevi belirtilmezse, ikinci değer döndürülür.</li>\r\n<li>İkinci değer döndürülür.</li>\r\n</ul>İsteğe bağlı <code>type</code> parametresi, seçim işlevi tarafından döndürülecek ikili biçiminin türünü belirtir.  <code>type any</code>, <code>type list</code> veya <code>type binary</code> belirtilebilir.  <code>type</code> parametresi belirtilmezse, <code>type any</code> kullanılır.   <code>type list</code> veya <code>type binary</code> kullanılırsa, sistem arabelleğe alınan bir değer yerine akış yapan bir <code>binary</code> veya <code>list</code> değeri döndürebilir; bu, biçimi okumak için gerekli bellek miktarını azaltabilir.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Öğe sayısının ilk bayt tarafından belirlendiği bayt listesini okur.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Öğe sayısının ilk bayt tarafından belirlendiği bayt listesini okuyun ve okunan ilk baytı korur.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Akış yapan bir liste kullanarak öğe sayısının ilk bayt tarafından belirlendiği bayt listesini okur.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Bir öğe grubunu okuyan ikili biçimi döndürür.",
        "Documentation.LongDescription": "Parametreler şu şekildedir:\r\n<ul>\r\n<li><code>binaryFormat</code> parametresi, anahtar değerinin ikili biçimini belirtir.</li>\r\n<li><code>group</code> parametresi, bilinen öğeler grubu hakkında bilgi verir.</li>\r\n<li>İsteğe bağlı <code>extra</code> parametresi, beklenmeyen herhangi bir anahtarı takip eden değer için ikili bir biçim değeri döndürecek olan bir işlevin belirtilmesine yönelik kullanılabilir.  <code>extra</code> parametresi belirtilmezse, beklenmeyen anahtar değerlerin olması durumunda bir hata oluşur.</li>\r\n</ul>\r\n<code>group</code> parametresi, öğe tanımlarının bir listesini belirtir.  Her öğe tanımı aşağıdaki gibi 3-5 değer içeren bir listedir:\r\n<ul>\r\n<li>Anahtar değer.  Anahtarın, öğeye karşılık gelen değeri.  Bu, öğeler kümesinde benzersiz olmalıdır.</li>\r\n<li>Öğe biçimi.  Öğenin değerine karşılık gelen ikili biçim.  Bu, her öğenin farklı bir biçime sahip olmasını sağlar. </li>\r\n<li>Öğe yinelemesi.  Öğenin, grupta kaç kez görünmesinin beklendiğine ilişkin <code>BinaryOccurrence.Type</code> değeri.   Mevcut olmayan gerekli öğeler hataya neden olur.  Gerekli veya isteğe bağlı yinelenen öğeler, beklenmeyen anahtar değerler gibi işlenir.</li>\r\n<li>Varsayılan öğe değeri (isteğe bağlı).  Varsayılan öğe değeri, öğe tanımlama listesinde görünüyorsa ve null değilse varsayılanın yerine kullanılır.  Tekrarlayan veya isteğe bağlı öğeler için varsayılan değer null, tekrarlayan değerler için de boş bir listedir { }.</li>\r\n<li>Öğe değeri dönüştürme (isteğe bağlı).   Öğe değeri dönüştürme işlevi, öğe tanımı listesinde mevcutsa ve null değilse döndürülmeden önce öğeyi dönüştürmesi için çağrılır.  Dönüştürme işlevi yalnızca öğe girişte görünüyorsa çağrılır (varsayılan değerle hiçbir zaman çağrılmaz). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Aşağıdaki ifade, grupta tümü anahtarı izleyen bir baytlık veri içeren 4 beklenen öğeye sahip tek baytlık bir anahtar değerini varsayar.  Öğeler girdide şu sırayla görünür:\r\n<ul>\r\n<li> Anahtar 1 gerekir ve 11 değeriyle görünür.</li>\r\n<li>Anahtar 2 tekrarlanır ve 22 değeriyle iki kez görünür ve { 22, 22 } değeriyle sonuçlanır.</li>\r\n<li>Anahtar 3 isteğe bağlıdır ve görünmez, null değeriyle sonuçlanır.</li>\r\n<li>Anahtar 4 tekrarlanır, ancak görünmez ve { } değeriyle sonuçlanır.</li>\r\n<li>Anahtar 5 grubun parçası değildir, ancak 55 değeri ile bir kez görünür.  Ek işlev 5 anahtar değeri ile çağrılır ve bu değere karşılık gelen biçimi döndürür (BinaryFormat.Byte).  55 değeri okunur ve atılır.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Aşağıdaki örnek, öğe değer dönüşümünü ve varsayılan öğe değerini gösterir.   Anahtar 1'i içeren yinelenen öğe, List.Sum işlevini kullanarak okunan değerlerin listesini toplar.  Anahtar 2'yi içeren isteğe bağlı öğe, null yerine 123 varsayılan değerine sahiptir.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Okunabilecek veri miktarını sınırlayan bir ikili biçimi döndürür.",
        "Documentation.LongDescription": "Okunabilecek veri miktarını sınırlayan bir ikili biçim döndürür. Verilerin sonuna kadar okumak için hem <code>BinaryFormat.List</code> hem de <code>BinaryFormat.Binary</code> kullanılabilir. <code>BinaryFormat.Length</code>, okunan bayt sayısını sınırlamak için kullanılabilir. <code>binaryFormat</code> parametresi, sınırlandırılacak ikili formatı belirtir. <code>length</code> parametresi okunacak bayt sayısını belirtir. <code>length</code> parametresi, bir sayı değeri veya okunan değerden önce görünen uzunluk değerinin biçimini belirten bir ikili biçim değeri olabilir.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Bir bayt listesini okurken okunan bayt sayısını 2 ile sınırlar.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Bir bayt listesini okurken okunan bayt sayısını listeden önceki bayt değeriyle sınırlayın.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Başka bir ikili biçimi tarafından okunan değerleri dönüştüren bir ikili biçimini döndürür.",
        "Documentation.LongDescription": "Başka bir ikili biçimi tarafından okunan değerleri dönüştüren bir ikili biçimini döndürür.  <code>binaryFormat</code> parametresi değeri okumak için kullanılacak ikili biçimi belirtir.  <code>function</code> okunan değerle çağrılır ve dönüştürülen değeri döndürür.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Baytı okur ve ona bir ekler.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Değerleri karşılaştırmak için Sıralı kuralları kullanan bir karşılaştırıcı işlevi döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>x</code> ve <code>y</code> değerlerini karşılaştırmak için Sıralı kuralları kullanan bir karşılaştırıcı işlevi döndürür<br>\r\n      <br>\r\n      Karşılaştırıcı işlevi iki bağımsız değişken kabul eder ve ilk değerin ikinci değerden küçük, ona eşit veya ikinciden büyük olup olmadığını temel alarak -1, 0 veya 1 döndürür.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Sıralı kuralları kullanarak \"encyclopædia\" ve \"encyclopaedia\" değerlerinin eşdeğer olup olmadığını belirlemek üzere karşılaştırın. Bunların, <code>Comparer.FromCulture(\"en-US\")</code> kullanılırken eşdeğer olduğunu unutmayın. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Değerlerin karşılaştırılması için Sıralı kurallar kullanan büyük/küçük harf duyarsız bir karşılaştırma işlevi döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>x</code> ve <code>y</code> değerlerini karşılaştırmak için Sıralı kuralları kullanan, büyük/küçük harfe duyarsız karşılaştırıcı işlevi döndürür.<br>\r\n      <br>\r\n        Karşılaştırıcı işlevi iki bağımsız değişken kabul eder ve ilk değerin ikinci değerden küçük, ona eşit veya ikinciden büyük olup olmadığını temel alarak -1, 0 veya 1 döndürür.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Büyük/küçük harf duyarsız Sıralı kuralları kullanarak \"Abc\"yi \"abc\" ile karşılaştırın. <code>Comparer.Ordinal</code> kullanıldığında \"Abc\"nin \"abc\"den küçük olduğunu unutmayın. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Boyut özniteliğinin bir özelliğini döndürür.",
        "Documentation.LongDescription": "<code>attribute</code> boyut özniteliğinin <code>propertyName</code> özelliğini döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Bir ölçünün bir özelliğini (hücre özelliği) döndürür.",
        "Documentation.LongDescription": "<code>measure</code> ölçüsünün <code>propertyName</code> özelliğini döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL Sorgu Kaynağı",
        "Documentation.LongDescription": "SQL sorgularını çalıştırmak için bir Databricks veri kaynağı tanımlayın"
      },
      "ReturnType": "Databricks SQL Sorgusu",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL Sorgu Kaynağı",
        "Documentation.LongDescription": "SQL sorgularını çalıştırmak için bir Databricks veri kaynağı tanımlayın"
      },
      "ReturnType": "Databricks SQL Sorgusu",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Belirtilen günleri tarihe ekler.",
        "Documentation.LongDescription": "<code>numberOfDays</code> günü <code>datetime</code> değeri olan <code>dateTime</code> öğesine eklemeden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> sonucunu döndürür.\r\n      <ul>\r\n      <li><code>dateTime</code>: Günlerin eklendiği <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>numberOfDays</code>: Eklenecek gün sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14/05/2011 tarihini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 5 gün ekler.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Belirtilen ayları tarihe ekler.",
        "Documentation.LongDescription": "<code>numberOfMonths</code> ayı <code>datetime</code> değeri olan <code>dateTime</code> öğesine ekleme nedeniyle oluşan <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> sonucunu döndürür.\r\n      <ul>\r\n        <li><code>dateTime</code>: Ayların eklendiği <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n        <li><code>numberOfMonths</code>: Eklenecek ay sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14/05/2011 tarihini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 5 ay ekler.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "14/05/2011 08:15:22 tarih ve saatini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 18 ay ekler.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Belirtilen çeyrekleri tarihe ekler.",
        "Documentation.LongDescription": "<code>numberOfQuarters</code> çeyreği <code>datetime</code> değeri olan <code>dateTime</code> öğesine eklemeden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> sonucunu döndürür.\r\n      <ul>\r\n      <li><code>dateTime</code>: Çeyreklerin eklendiği <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>numberOfQuarters</code>: Eklenecek çeyrek sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14/05/2011 tarihini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 1 çeyrek ekler.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Belirtilen haftaları tarihe ekler.",
        "Documentation.LongDescription": "<code>numberOfWeeks</code> haftayı <code>datetime</code> değeri olan <code>dateTime</code> öğesine eklemeden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> sonucunu döndürür.\r\n      <ul>\r\n      <li><code>dateTime</code>: Haftaların eklendiği <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>numberOfWeeks</code>: Eklenecek hafta sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14/05/2011 tarihini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 2 hafta ekler.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Belirtilen yılları tarihe ekler.",
        "Documentation.LongDescription": "<code>numberOfYears</code> yılı <code>datetime</code> değeri olan <code>dateTime</code> öğesine ekleme nedeniyle oluşan <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> sonucunu döndürür.\r\n      <ul>\r\n        <li><code>dateTime</code>: Yılların eklendiği <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n        <li><code>numberOfYears</code>: Eklenecek yıl sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14/05/2011 tarihini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 4 yıl ekler.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "14/05/2011 08:15:22 tarih ve saatini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerine 10 yıl ekler.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, sonraki birkaç gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>days</code>: Gün sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki günün, sonraki iki gün içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, sonraki birkaç ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>months</code>: Ay sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki ayın, sonraki iki ay içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, sonraki üç aylık dönemlerde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki üç aylık dönemlerde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>quarters</code>: Üç aylık dönem sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki üç aylık dönemin, sonraki iki üç aylık dönem içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, sonraki birkaç hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>weeks</code>: Hafta sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki haftanın, sonraki iki hafta içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, sonraki birkaç yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>years</code>: Yıl sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki yılın, sonraki iki yıl içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki birkaç gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde önceki, birkaç gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>days</code>: Gün sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki günün, önceki iki gün içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki birkaç ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>months</code>: Ay sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki ayın, önceki iki ay içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki üç aylık dönemlerde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki üç aylık dönemlerde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>quarters</code>: Üç aylık dönem sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki üç aylık dönemin, önceki iki üç aylık dönem içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki birkaç hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>weeks</code>: Hafta sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki haftanın, önceki iki hafta içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki birkaç yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>years</code>: Yıl sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki yılın, önceki iki yıl içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Tarih saat değerine saat dilimi bilgisini ekler.",
        "Documentation.LongDescription": "<code>dateTime</code> değerine saat dilimi bilgisini ekler. Saat dilimi bilgisi <code>timezoneHours</code> ve isteğe bağlı olarak istenen UTC saati farkını belirten <code>timezoneMinutes</code> verisini içerir.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Saat dilimini UTC+7:30 (UTC’den 7 saat ve 30 dakika sonra) olarak ayarlar.",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, sonraki birkaç saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>hours</code>: Saat sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki saatin, sonraki iki saat içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, sonraki birkaç dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>minutes</code>: Dakika sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki dakikanın, sonraki iki dakika içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, sonraki birkaç saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, sonraki birkaç saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>seconds</code>: Saniye sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki saniyenin, sonraki iki saniye içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, önceki birkaç saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>hours</code>: Saat sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki saatin, önceki iki saat içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, önceki birkaç dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>minutes</code>: Dakika sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki dakikanın, önceki iki dakika içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, önceki birkaç saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki birkaç saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      <li><code>seconds</code>: Saniye sayısı.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki saniyenin, önceki iki saniye içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Değerin saat dilimini değiştirir.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> datetimezone değerindeki saat dilimi bilgilerini <code>timezoneHours</code> ve isteğe bağlı olarak <code>timezoneMinutes</code> tarafından sağlanan yeni saat dilimi bilgileri ile değiştirir.\r\n    <code>dateTimeZone</code> bir saat dilimi bileşenine sahip değilse, bir özel durum oluşur.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) için saat dilimi bilgilerini 8 saat olarak değiştirir.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) için saat dilimi bilgisini -30 dakika olarak değiştirir.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Bir ekli karmadaki bir değere ad ile erişir.",
        "Documentation.LongDescription": "Bir ekli karmadaki bir değere ad ile erişir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Tek bir liste bağımsız değişkenini alan bir işlevin üstüne belirli bir parametre imzasına sahip bir işlev oluşturur",
        "Documentation.LongDescription": "Birli işlevi <code>function</code> alır ve bağımsız değişkenlerinden bir liste oluşturan <code>functionType</code> türünde yeni bir işlev oluşturur ve bunu <code>function</code> işlevine geçirir.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "List.Sum'ı bağımsız değişkenleri bir araya getirilen iki bağımsız değişkenli bir işleve dönüştürür",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Bir liste alan işlevi iki bağımsız değişkenli bir işleve dönüştürür",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Verilen işlevi çağırır",
        "Documentation.LongDescription": "Belirtilen bağımsız değişken listesini kullanarak verilen işlevi çağırır ve sonucu döndürür.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Bir bağımsız değişken ile Record.FieldNames öğesini çağırır [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Belirtilen süre dolduktan sonra verilen işlevi çağırır.",
        "Documentation.LongDescription": "<code>delay</code> süresi dolduktan sonra <code>function</code> çağırmanın sonucunu döndürür.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Vektör işlevin üzerinde skaler bir işlev oluşturarak birden fazla çağrı grubu oluşturur.",
        "Documentation.LongDescription": "<p>Tek sıra bağımsız değişkenler ile <code>vectorFunction</code> çağıran ve bunun tekli çıkışını döndüren <code>scalarFunctionType</code> türü bir skaler işlev döndürür. Buna ek olarak, bir skaler işlev Table.AddColumn gibi bir giriş tablosunda tekrar tekrar uygulandığında tüm girişlerin yerine bir kez <code>vectorFunction</code> uygulanır.</p>\r\n<p> Sütunlarının adları eşleşen ve <code>scalarFunctionType</code> parametrelerini konumlandıran bir tablo, <code>vectorFunction</code> öğesine geçirilir. Bu tablodaki her bir satır, skaler işleve bir çağrı için bağımsız değişkenler barındırır ve sütunlar <code>scalarFunctionType</code> parametrelerine karşılık gelir.</p>\r\n<p><code>vectorFunction</code>, giriş tablosuyla aynı uzunlukta olan bir liste döndürmelidir. Bu listede tüm konumlardaki öğeler, giriş tablosunda aynı konumda bulunan satırın skaler işlevinin değerlendirme sonucuna karşılık gelmelidir.</p>\r\n<p>Giriş tablosunun akışla içeri aktarılması beklenir, bu nedenle <code>vectorFunction</code> öğesinin de tek seferde yalnızca bir giriş öbeğiyle çalışarak giriş akışla aktarıldıkça çıkışını akışla aktarması beklenir. <code>vectorFunction</code> öğesinin giriş tablosunu bir kereden fazla sıralamaması özellikle önemlidir.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Parçalardan coğrafi noktayı temsil eden bir kayıt oluşturur.",
        "Documentation.LongDescription": "Boylam, enlem ve varsa yükseklik (Z) ve ölçü (M) gibi bileşen parçalarından coğrafi noktayı temsil eden bir kayıt oluşturur. Varsayılan değerden (4326) farklı olduğunda isteğe bağlı bir uzamsal başvuru tanımlayıcısı (SRID) verilebilir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Parçalardan geometrik noktayı temsil eden bir kayıt oluşturur.",
        "Documentation.LongDescription": "X koordinatı, Y koordinatı, varsa Z koordinatı ve ölçü (M) gibi bileşen parçalarından geometrik noktayı temsil eden bir kayıt oluşturur. Varsayılan değerden (0) farklı olduğunda isteğe bağlı bir uzamsal başvuru tanımlayıcısı (SRID) verilebilir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Bir kimlik oluşturur.",
        "Documentation.LongDescription": "Bir kimlik oluşturur.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Kimliğin bir kimlik koleksiyonunun üyesi olup olmadığını belirler.",
        "Documentation.LongDescription": "Kimliğin bir kimlik koleksiyonunun üyesi olup olmadığını belirler.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Bir listedeki tüm tek sayılı uzaklık öğelerinden oluşan bir liste döndürür.",
        "Documentation.LongDescription": "Bir listedeki tüm tek sayılı uzaklık öğelerinden oluşan bir liste döndürür. Parametrelere bağlı olarak <code>list</code> listesindeki değerleri alma veya atlama arasında geçiş yapar.\r\n    <ul>\r\n    <li><code>count</code>: Her defasında atlanan değerlerin sayısını belirtir.</li>\r\n    <li><code>repeatInterval</code>: Atlanan değerler arasına kaç değerin eklendiğini belirtmeye yönelik isteğe bağlı bir yineleme aralığı.</li>\r\n    <li><code>offset</code>: İlk uzaklıktaki değerleri atlamaya başlamaya yönelik bir isteğe bağlı uzaklık parametresi.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10} listesinden ilk sayıyı atlayan bir liste oluşturur.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "{1..10} listesinden tüm diğer sayıları atlayan bir liste oluşturur.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "{1..10} listesinden 1 ile başlayıp tüm diğer sayıları atlayan bir liste oluşturur.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "{1..10} listesinden 1 ile başlayan, bir değeri atlayıp iki değeri saklayan ve bu şekilde devam eden bir liste oluşturur.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Listenin değeri içerip içermediğini belirtir.",
        "Documentation.LongDescription": "<code>list</code> listesinin <code>value</code> değerini içerip içermediğini belirtir.\r\n    Değer listede bulunursa true, aksi takdirde false değerini döndürür. Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı denklem ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 3'ü içerip içermediğini bulur.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 6'ü içerip içermediğini bulur.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Listenin başka bir listedeki tüm değerleri içerip içermediğini belirtir.",
        "Documentation.LongDescription": "<code>list</code> listesinin başka bir <code>values</code> listesindeki tüm değerleri nerede içerdiğini belirtir.\r\n    Değer listede bulunursa doğru, aksi takdirde yanlış değerini döndürür. Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı eşitlik ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 3 ve 4'ü içerip içermediğini bulur.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 5 ve 6'ü içerip içermediğini bulur.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Listenin başka bir listedeki herhangi bir değeri içerip içermediğini belirtir.",
        "Documentation.LongDescription": "<code>list</code> listesinin başka bir <code>values</code> listesindeki herhangi bir değeri içerip içermediğini belirtir.\r\n        Değer listede bulunursa doğru, aksi takdirde yanlış değerini döndürür. Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı eşitlik ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 3 veya 9'u içerip içermediğini bulur.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} listesinin 6 veya 7'yi içerip içermediğini bulur.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "İki sayı listesi arasındaki kovaryansı döndürür.",
        "Documentation.LongDescription": "<code>numberList1</code> ve <code>numberList2</code> sayı listeleri arasındaki kovaryansı döndürür. <code>numberList1</code> ve <code>numberList2</code> aynı sayıda <code>number</code> değerini içermelidir.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "İki liste arasındaki kovaryansı hesaplar.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Verilen iki listenin farkını döndürür.",
        "Documentation.LongDescription": "<code>list1</code> listesindeki <code>list2</code> listesinde görünmeyen öğeleri döndürür. Yinelenen değerler desteklenir.\r\n    Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı denklem ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinde yer alan ve {4, 5, 3} listesinde görünmeyen öğeleri bulur.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "{1, 2} listesindeki {1, 2, 3} listesinde görünmeyen öğeleri bulur.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Belirtilen metni içeren bir değer listesi (kayıt alanları dahil) döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinden <code>text</code> değerini içeren değerlerin listesini döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"b\", \"ab\"} listesinde \"a\" ile eşleşen metin değerlerini bulur. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Döndürülecek öğe sayısını veya bir uygun şart belirterek listedeki ilk öğe kümesini döndürür.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Sayı belirtilirse, bu sayı kadar öğe döndürülür. </li>\r\n  <li>Koşul belirtilirse, bu koşulu sağlayan tüm öğeler döndürülür. Tüm öğeler koşulu sağlamadığında, başka öğe değerlendirilmez. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} listesinde 0'dan büyük olan ilk değerleri bulur.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Koşul işlevi listedeki tüm değerler tarafından sağlanıyorsa doğru değerini döndürür.",
        "Documentation.LongDescription": "<code>condition</code> koşul işlevi <code>list</code> listesindeki tüm değerler tarafından sağlanıyorsa <code>true</code> değerini, aksi halde <code>false</code> değerini döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{11, 12, 13} listesindeki tüm değerlerin 10'dan büyük olup olmadığını bulur.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} listesindeki tüm değerlerin 10'dan büyük olup olmadığını bulur.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Koşul işlevi listedeki herhangi bir değer tarafından sağlanıyorsa doğru değerini döndürür.",
        "Documentation.LongDescription": "<code>condition</code> koşul işlevi <code>list</code> listesindeki herhangi bir değer tarafından sağlanıyorsa <code>true</code> değerini, aksi halde <code>false</code> değerini döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{9, 10, 11} listesindeki herhangi bir değerin 10'dan büyük olup olmadığını bulur.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} listesindeki herhangi bir değerin 10'dan büyük olup olmadığını bulur.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Listedeki en büyük değerleri döndürür. Döndürülecek değer sayısı veya filtre koşulu belirtilmelidir.",
        "Documentation.LongDescription": "<code>list</code> listesindeki en büyük değerleri döndürür.\r\n    Satırlar sıralandıktan sonra sonucu daha fazla filtrelemek için isteğe bağlı parametreler belirtilebilir. İsteğe bağlı <code>countOrCondition</code> parametresi döndürülecek değer sayısını veya filtre koşulunu belirtir. İsteğe bağlı <code>comparisonCriteria</code> parametresi, listedeki değerlerin nasıl karşılaştırılacağını belirtir.\r\n <ul>\r\n        <li> <code>list</code>: Değer listesi.</li>\r\n        <li> <code>countOrCondition</code>: Sayı belirtilirse en fazla <code>countOrCondition</code> öğeye sahip, artan sırada bir liste döndürülür. Koşul belirtilirse bu koşulu sağlayan tüm öğelerin listesi döndürülür. Öğe koşulu sağlamadığında diğer öğeler değerlendirilmez.</li>\r\n<li><code>comparisonCriteria</code>: <i>[İsteğe bağlı]</i> Listedeki öğelerin nasıl karşılaştırılacağını belirlemek için isteğe bağlı bir <code>comparisonCriteria</code> değeri belirtilebilir. Bu parametre null ise varsayılan karşılaştırıcı kullanılır.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Listedeki en küçük değerleri döndürür. Döndürülecek değer sayısı veya filtre koşulu belirtilebilir.",
        "Documentation.LongDescription": "<code>list</code> listesindeki en küçük değerleri döndürür.\r\n    <code>countOrCondition</code> parametresi döndürülecek değer sayısını veya filtre koşulunu belirtir. İsteğe bağlı <code>comparisonCriteria</code> parametresi, listedeki değerlerin nasıl karşılaştırılacağını belirtir.\r\n <ul>\r\n        <li> <code>list</code>: Değer listesi.</li>\r\n        <li> <code>countOrCondition</code>: Sayı belirtilirse en fazla <code>countOrCondition</code> öğeye sahip, artan sırada bir liste döndürülür. Koşul belirtilirse bu koşulu sağlayan tüm öğelerin listesi döndürülür. Öğe bu koşulu sağlamadığında diğer öğeler değerlendirilmez. Parametre null ise listedeki tek en küçük öğe döndürülür.</li>\r\n<li><code>comparisonCriteria</code>: <i>[İsteğe bağlı]</i> Listedeki öğelerin nasıl karşılaştırılacağını belirlemek için isteğe bağlı bir <code>comparisonCriteria</code> değeri belirtilebilir. Bu parametre null ise varsayılan karşılaştırıcı kullanılır.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{3, 4, 5, -1, 7, 8, 2}</code> listesinin en küçük 5 değerini bulur.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Verilen ilk değer, sayı ve isteğe bağlı increment değerinden bir sayı listesi döndürür.",
        "Documentation.LongDescription": "Verilen ilk değer, sayı ve isteğe bağlı increment değerinden bir sayı listesi döndürür. Varsayılan increment değeri 1'dir.\r\n<ul>\r\n   <li><code>start</code>: Listedeki ilk değer.</li>\r\n   <li><code>count</code>: Oluşturulacak değer sayısı.</li>\r\n   <li><code>increment</code>: <i>[İsteğe bağlı]</i> Artım değeri. Dahil edilmezse, değerler 1 artırılır.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Art arda gelen 10 sayıdan oluşan ve 1 ile başlayan bir liste oluşturur.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "10 sayı içeren, 1 ile başlayan ve sonraki her sayı için 2 artışı içeren bir liste oluşturur.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Verilen olasılıklara karşılık gelen bir veya daha fazla örnek yüzdebirlik değeri döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinin bir veya daha fazla örnek yüzdebirlik değerini döndürür. <code>percentiles</code> değeri 0,0 ile 1,0 arasında bir sayıysa yüzdebirlik olarak değerlendirilir ve sonuç, olasılığa karşılık gelen\r\n    tek bir değer olur. <code>percentiles</code> değeri 0,0 ile 1,0 arasındaki değerlere sahip sayıların bir listesiyse sonuç, giriş olasılığına karşılık gelen\r\n    yüzdebirliklerin bir listesi olur. İleri düzey kullanıcılar, daha belirgin bir ilişkilendirme yöntemi seçmek için <code>options</code> içindeki PercentileMode seçeneğini kullanabilir ancak bu, çoğu kullanım için önerilmez.\r\n    Önceden tanımlanan <code>PercentileMode.ExcelInc</code> ve <code>PercentileMode.ExcelExc</code> sembolleri, \r\n    <code>YÜZDEBİRLİK.DHL</code> ve <code>YÜZDEBİRLİK.HRC</code> Excel işlevleri tarafından kullanılan ilişkilendirme yöntemleriyle eşleşir. Varsayılan davranış <code>PercentileMode.ExcelInc</code> ile eşleşir.\r\n    <code>PercentileMode.SqlCont</code> ve <code>PercentileMode.SqlDisc</code> sembolleri sırasıyla <code>PERCENTILE_CONT</code> ve\r\n    <code>PERCENTILE_DISC</code> için SQL Server davranışıyla eşleşir.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> listesindeki ilk dörttebirliği bulun.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Excel'in <code>YÜZDEBİRLİK.HRC</code> işleviyle eşleşen ilişkilendirme yöntemini kullanarak <code>{5, 3, 1, 7, 9}</code> listesindeki dörttebirlikleri bulun.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Bir listedeki bir değerin uzaklıklarını döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinde <code>value</code> değerinin göründüğü uzaklığı döndürür. Değer görünmüyorsa -1 döndürülür.\r\n    <code>occurrence</code> isteğe bağlı oluşum parametresi de belirtilebilir.\r\n<ul>\r\n   <li><code>occurrence</code>: Bildirilecek oluşum sayısı üst sınırı.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesinde 3 değerinin göründüğü konumu bulur.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Bir listedeki bir değerin ilk uzaklığını döndürür.",
        "Documentation.LongDescription": "<code>values</code> listesindeki bir değerin ilk örneğinin <code>list</code> listesindeki uzaklığını döndürür. Hiçbir oluşum bulunmadıysa -1 döndürür.\r\n    <code>occurrence</code> isteğe bağlı oluşum parametresi de belirtilebilir.\r\n<ul>\r\n   <li><code>occurrence</code>: Döndürülebilecek oluşum sayısı üst sınırı.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesinde 2 veya 3 değerinin göründüğü ilk konumu bulur.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Bir uzaklıktan başlayarak listenin bir alt kümesini döndürür.",
        "Documentation.LongDescription": "<code>list</code> uzaklığından başlayarak listenin bir alt kümesini döndürür. <code>offset</code> isteğe bağlı parametresi, alt kümedeki öğe sayısı üst sınırını belirler.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "1-10 arasındaki sayıları içeren listenin 6 uzaklığından başlayan alt kümesini bulur.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "1-10 arasındaki sayıları içeren listenin 6 uzaklığından başlayan 2 uzunluğuna sahip alt kümesini bulur.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Listede mevcut olan öğeleri list1'den kaldırır.",
        "Documentation.LongDescription": "<code>list2</code> içindeki verilen değerleri <code>list1</code> öğesinden kaldırır. <code>list2</code> içindeki değerler <code>list1</code> içinde yoksa, asıl liste döndürülür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{2, 4, 6} listesindeki öğeleri {1, 2, 3, 4, 2, 5, 5} listesinden kaldırır.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Girdi değerlerinin tüm oluşumlarını kaldırır.",
        "Documentation.LongDescription": "<code>list2</code> içindeki verilen değerleri <code>list1</code> listesinden kaldırır. <code>list2</code> içindeki değerler <code>list1</code> içinde yoksa, asıl liste döndürülür.\r\n    Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı eşitlik ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5, 5} listesinden {1, 5} değerlerini içermeyen bir liste oluşturur.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Değerlerin count sayısını belirtilen konumdan başlayarak kaldırır.",
        "Documentation.LongDescription": "<code>list</code> içindeki <code>count</code> değeri belirtilen <code>index</code> konumundan başlayarak kaldırır.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, -6, -2, -1, 5} listesindeki 3 değeri 4 dizininden başlayarak kaldırır.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Asıl listenin sayı tekrarları olan bir liste döndürür.",
        "Documentation.LongDescription": "<code>list</code> asıl listesinin <code>count</code> tekrarları olan bir liste döndürür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} değerlerinin 3 kez tekrarlandığı bir liste oluşturur.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Her { old, new } değişimini uygular.",
        "Documentation.LongDescription": "<code>list</code> listesine verilen değişiklikleri uygular. <code>replacements</code> değiştirme işlemi bir listede sağlanan eski ve yeni değer olmak üzere iki değer içeren bir listeden oluşur.\r\n    Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı eşitlik ölçüt değeri belirtilebilir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinden 5 değerini -5, 1 değerini -1 ile değiştirerek bir liste oluşturur.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Koşulu sağlayan bir değer listesi döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinden <code>selection</code> seçim koşulu ile eşleşen değerlerin listesini döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, -3, 4, 9, -2} listesinde 0'dan büyük olan son değerleri bulur.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Belirtilen sayfa boyutunu kullanarak belirtilen listeyi bir listeler listesine ayırır.",
        "Documentation.LongDescription": "<code>list</code> öğesini; çıkış listesinin ilk öğesinin kaynak listedeki ilk <code>pageSize</code> öğeyi barındıran bir liste olduğu, sonraki öğenin ise\r\n    kaynak listeden sonraki <code>pageSize</code> öğeyi barındıran bir liste olduğu ve bu şekilde devam eden bir listeler listesine ayırır.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Bu listeden hesaplanan yeni bir değer listesi döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesine <code>transform</code> dönüştürme işlevi uygulayarak yeni bir değer listesi döndürür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} listesindeki her öğeye 1 ekler.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "İki sayının bölümünün arktanjantını döndürür.",
        "Documentation.LongDescription": "<code>y</code> ve <code>x</code> sayılarının bölümünün arktanjantını döndürür. Bölüm <code>y</code>/<code>x</code> olarak oluşturulur.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "İki girdi arasında bit tabanlı \"And\" işlemi uygulamanın sonucunu döndürür.",
        "Documentation.LongDescription": "<code>number1</code> ve <code>number2</code> arasında bit tabanlı \"And\" işlemi uygulamanın sonucunu döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "İki girdi arasında bit tabanlı \"Or\" işlemi uygulamanın sonucunu döndürür.",
        "Documentation.LongDescription": "<code>number1</code> ve <code>number2</code> arasında bit tabanlı \"Or\" işlemi uygulamanın sonucunu döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Bit kümesini sola kaydırır.",
        "Documentation.LongDescription": "<code>number1</code> üzerinde <code>number2</code> belirtilen bit sayısı kadar sola bit tabanlı kaydırma gerçekleştirmenin sonucunun döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Bit kümesini sağa kaydırır.",
        "Documentation.LongDescription": "<code>number1</code> üzerinde <code>number2</code> belirtilen bit sayısı kadar sağa bit tabanlı kaydırma gerçekleştirmenin sonucunun döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "İki girdi arasında bit tabanlı \"XOR\" (Hariç VEYA) işlemi uygulamanın sonucunu döndürür.",
        "Documentation.LongDescription": "<code>number1</code> ve <code>number2</code> arasında bit tabanlı \"XOR\" (Hariç VEYA) işlemi uygulamanın sonucunu döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Benzersiz birleşim sayısını döndürür.",
        "Documentation.LongDescription": "<code>setSize</code> öğe listesinden <code>combinationSize</code> belirtilen birleşim boyutuna sahip benzersiz birleşim sayısını döndürür.\r\n<ul>\r\n    <li><code>setSize</code>: Listedeki öğe sayısı.</li>\r\n    <li><code>combinationSize</code>: Her birleşimdeki öğe sayısı.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5 öğe ile oluşturulan ve her birleşimin 3'lü grup olduğu birleşimlerin sayısını bulur.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "İki sayıyı böler ve sonucun tamsayı kısmını döndürür.",
        "Documentation.LongDescription": "<code>number1</code> sayısını başka bir <code>number2</code> sayısına bölme işlemi sonucunun tamsayı kısmını döndürür.\r\n    <code>number1</code> veya <code>number2</code> null ise <code>Number.IntegerDivide</code> null döndürür.\r\n      <ul>\r\n        <li><code>number1</code>: Bölünen.</li>\r\n        <li><code>number2</code>: Bölen.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "6'yı 4'e böler.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "8.3'ü 3'e böler.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Tamsayı iki sayıyı böler ve kalanı döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin <code>divisor</code> değerine tamsayı bölümünden kalanı döndürür.\r\n    <code>number</code> veya <code>divisor</code> null ise <code>Number.Mod</code> null döndürür.\r\n      <ul>\r\n        <li><code>number</code>: Bölünen.</li>\r\n        <li><code>divisor</code>: Bölen.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5'i 3'e bölmeden kalanı bulur.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Permütasyon sayısını döndürür.",
        "Documentation.LongDescription": "<code>setSize</code> öğe sayısından <code>permutationSize</code> permütasyon boyutuna sahip oluşturulabilecek permütasyon sayısını döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5 öğeden 3'lü gruplarda oluşturulabilecek permütasyon sayısını bulur.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Bir sayıyı verilen üsse yükseltir.",
        "Documentation.LongDescription": "<code>number</code> öğesini <code>power</code> üssüne yükseltme işleminin sonucunu döndürür.\r\n    <code>number</code> veya <code>power</code> null ise <code>Number.Power</code> null döndürür.\r\n      <ul>\r\n        <li><code>number</code>: Taban.</li>\r\n        <li><code>power</code>: Üs.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5'in 3 üssüne yükseltilmiş değerini bulur (5'in küpü).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "İki sayı arasında rastgele bir sayı döndürür.",
        "Documentation.LongDescription": "<code>bottom</code> ve <code>top</code> arasında rastgele bir sayı döndürür.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "1 ve 5 arasında rastgele bir sayı alır.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Alanda belirtilen alanın değerini döndürür.",
        "Documentation.LongDescription": "<code>record</code> içindeki belirtilen <code>field</code> öğesinin değerini döndürür. Alan bulunmazsa, özel durum oluşur.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kayıtta \"CustomerID\" alanına ilişkin değeri bulur.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Bir kayıttaki belirtilen alanın değerini veya alan bulunamazsa varsayılan değeri döndürür.",
        "Documentation.LongDescription": "<code>record</code> kaydında <code>field</code> belirtilen alanının değerini döndürür. Alan bulunmazsa, isteğe bağlı <code>defaultValue</code> döndürülür.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kayıtta \"Phone\" alanına ilişkin değeri bulur veya bu değerin var olmaması halinde null döndürür.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Kayıtta \"Phone\" alanına ilişkin değeri bulur veya bu değerin var olmaması halinde varsayılan değeri döndürür.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Verilen alan değeri listesi ve alan kümesinden bir kaydı döndürür.",
        "Documentation.LongDescription": "Verilen alan değeri <code>list</code> öğesinden ve alan kümesinden bir kaydı döndürür.  <code>fields</code> metin değeri listesi veya kayıt türü ile belirtilebilir.  Alanlar benzersiz değilse, hata oluşur.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Bir alan değerleri listesinden ve alan adları listesinden kayıt oluşturur.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Bir alan değerleri listesinden ve kayıt türünden kayıt oluşturur.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Kaydın belirtilen alanlara sahip olup olmadığını gösterir.",
        "Documentation.LongDescription": "<code>record</code> kaydının <code>fields</code> içinde belirtilen alanları içerip içermediğini bir mantıksal değer döndürerek (doğru veya yanlış) gösterir.\r\n    Birden çok alan değeri liste kullanılarak belirtilebilir.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Kayıtta \"CustomerID\" alanının bulunup bulunmadığını denetler.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Kayıtta \"CustomerID\" ve \"Address\" alanlarının bulunup bulunmadığını denetler.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Belirtilen alanları girdi kaydından kaldırır.",
        "Documentation.LongDescription": "<code>fields</code> listesinde belirtilen tüm alanları <code>record</code> girdisinden kaldıran bir kayıt döndürür. Belirtilen alan yoksa, özel durum oluşur.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kayıttan \"Price\" alanını kaldırır.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Kayıttan \"Price\" ve \"Item\" alanlarını kaldırır.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Bir listeden { old, new } biçiminde yeniden adlandırmaları uygular.",
        "Documentation.LongDescription": "<code>record</code> girdisindeki alanları yeniden adlandırdıktan sonra <code>renames</code> listesinde belirtilen yeni alan adlarına bir kayıt döndürür. Birden çok yeniden adlandırma için iç içe yerleştirilmiş liste kullanılabilir ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki \"UnitPrice\" alanını \"Price\" olarak yeniden adlandırır.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Kayıttaki \"UnitPrice\" alanını \"Price\" olarak ve \"OrderNum\" alanını \"OrderID\" olarak adlandırır.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Belirtilen alanları yeni düzen ile yeniden sıralar.",
        "Documentation.LongDescription": "<code>record</code> içindeki alanları yeniden sıraladıktan sonra <code>fieldOrder</code> listesinde belirtilen alan sıralamasında bir kayıt döndürür. Alan değerleri korunur ve <code>fieldOrder</code> içinde listelenmeyen alanlar asıl konumlarında bırakılır.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki bazı alanları yeniden sıralar.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Yalnızca belirtilen alanları içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "<code>record</code> girdisinden yalnızca <code>fields</code> listesinde belirtilen alanları içeren bir kayıt döndürür.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki \"Item\" ve \"Price\" alanlarını seçer.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Belirtilen dönüşümleri uyguladıktan sonra bir kayıt döndürür.",
        "Documentation.LongDescription": "<code>transformOperations</code> listesinde belirtilen dönüşümleri <code>record</code> öğesine uyguladıktan sonra bir kayıt döndürür.\r\n    Aynı anda bir veya daha fazla alan dönüştürülebilir.\r\n      <div>Tek bir alan dönüştürülürken, <code>transformOperations</code> öğesinin iki öğe içeren bir liste olması beklenir. <code>transformOperations</code> içindeki ilk öğe alan adını, <code>transformOperations</code> içindeki ikinci öğe ise dönüşüm için kullanılacak işlevi belirtir. Örneğin, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Birden çok alan dönüştürülürken, <code>transformOperations</code> öğesinin her iç listenin bir alan adı ve dönüşüm işlemi çifti olduğu bir listeler listesi olması beklenir. Örneğin, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Price\" alanını sayıya dönüştürün.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "\"OrderID\" ve \"Price\" alanlarını sayıya dönüştürün.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Bir karakter türünden diğerine geçişe göre metni metin listesine ayıran bir işlev döndürür. {0} ve {1} parametreleri bir karakter listesi olabilir veya bir karakteri alıp true/false döndüren bir işlev olabilir.",
        "Documentation.LongDescription": "Bir karakter türünden diğerine geçişe göre metni metin listesine ayıran bir işlev döndürür. <code>before</code> ve <code>after</code> parametreleri bir karakter listesi olabilir veya bir karakteri alıp true/false döndüren bir işlev olabilir.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Bir büyük veya küçük harften sonra bir rakam geldiğinde girişi bölün.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Sağlanan SQL sorgusunu M koduna dönüştürür. Bu işlev yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Sağlanan <code>sql</code> sorgusunu <code>environment</code> tarafından tanımlanan kullanılabilir tanımlayıcılarla birlikte M koduna dönüştürür. Bu işlev yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Tablodan belirtilen veri sütununu liste olarak döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosundan <code>column</code> tarafından belirtilen veri sütununu liste olarak döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki [Name] sütununda bulunan değerleri döndürür.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Sütunların, belirtilen türlerle eşleşen adlarıyla bir liste döndürür.",
        "Documentation.LongDescription": "<code>listOfTypes</code> içinde belirtilen türlerle eşleşen <code>table</code> tablosunadki sütunların adlarıyla bir liste döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tabloda yer alan Number.Type türündeki sütun adlarını döndürür.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Belirtilen kaydın tabloda satır olarak görünüp görünmediğini gösterir.",
        "Documentation.LongDescription": "<code>row</code> belirtilen kaydının <code>table</code> içinde satır olarak görünüp görünmediğini gösterir.\r\n    Tablonun satırları arasındaki karşılaştırmayı denetlemek üzere <code>equationCriteria</code> isteğe bağlı parametresi belirtilebilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tabloda satır bulunup bulunmadığını belirler.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tabloda satır bulunup bulunmadığını belirler.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Yalnızca [Name] sütunlarını karşılaştırarak tabloda satır bulunup bulunmadığını belirler.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Belirtilen tüm kayıtların tabloda satır olarak görünüp görünmediğini gösterir.",
        "Documentation.LongDescription": "<code>rows</code> kayıt listesindeki belirtilen tüm kayıtların <code>table</code> içinde satır olarak görünüp görünmediğini gösterir.\r\n    Tablonun satırları arasındaki karşılaştırmayı denetlemek üzere <code>equationCriteria</code> isteğe bağlı parametresi belirtilebilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Yalnızca [CustomerID] sütununu karşılaştırarak tabloda tüm satırların bulunup bulunmadığını belirleyin.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tabloda tüm satırların bulunup bulunmadığını belirler.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Belirtilen kayıtlardan herhangi birinin tabloda satır olarak görünüp görünmediğini gösterir.",
        "Documentation.LongDescription": "<code>rows</code> kayıt listesindeki belirtilen kayıtlardan herhangi birinin <code>table</code> içinde satır olarak görünüp görünmediğini gösterir.\r\n    Tablonun satırları arasındaki karşılaştırmayı denetlemek üzere <code>equationCriteria</code> isteğe bağlı parametresi belirtilebilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosunun <code>[a = 1, b = 2]</code> veya <code>[a = 3, b = 5]</code> satırlarını içerip içermediğini belirler.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosunun <code>[a = 1, b = 3]</code> veya <code>[a = 3, b = 5]</code> satırlarını içerip içermediğini belirler.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> tablosunun <code>[a = 1, b = 3]</code> veya <code>[a = 3, b = 5]</code> satırlarını içerip içermediğini yalnıza [a] sütununu karşılaştırarak belirler.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Tablonun belirtilen sütunları içerip içermediğini belirtir.",
        "Documentation.LongDescription": "<code>table</code> tablosunun belirtilen <code>columns</code> sütunlarını içerip içermediğini belirtir. Tablo sütunları içeriyorsa <code>true</code>, içermiyorsa <code>false</code> değerini döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [Name] sütununun bulunup bulunmadığını belirler.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tabloda [Name] ve [PhoneNumber] sütunlarının bulunup bulunmadığını belirler.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Tablodaki tüm satırların verilen koşulu sağlayıp sağlamadığını belirtir.",
        "Documentation.LongDescription": "<code>table</code> içindeki tüm satırların verilen <code>condition</code> öğesini sağlayıp sağlamadığını belirtir. Tüm satırlar eşleşiyorsa <code>true</code>, aksi halde <code>false</code> döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "[a] sütunundaki tüm satır değerlerinin tabloda eşit olup olmadığını belirler.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosundaki tüm satır değerlerinin [a = 1, b = 2] olup olmadığını bulur.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Tablodaki herhangi bir satırın verilen koşulu sağlayıp sağlamadığını belirtir.",
        "Documentation.LongDescription": "<code>table</code> içindeki herhangi bir satırın verilen <code>condition</code> öğesini sağlayıp sağlamadığını belirtir. Herhangi bir satır eşleşiyorsa <code>true</code>, aksi halde <code>false</code> döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "[a] sütunundaki herhangi bir satır değerinin <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> tablosunda çift olup olmadığını belirler.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> tablosunda herhangi bir satır değerinin [a = 1, b = 2] olup olmadığını belirler.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "En büyük satırı veya varsayılan değeri, verilen ölçütü kullanarak döndürür.",
        "Documentation.LongDescription": "<code>table</code> içindeki en büyük satırı verilen <code>comparisonCriteria</code> öğesini kullanarak döndürür. Tablo boşsa, isteğe bağlı <code>default</code> değeri döndürülür. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8]})</code> tablosunda [a] sütunundaki en büyük değere sahip satırı bulur.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "<code>({})</code> tablosunda [a] sütunundaki en büyük değere sahip satırı bulur. Boşsa -1 döndürür.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "En küçük satırı veya varsayılan değeri, verilen ölçütü kullanarak döndürür.",
        "Documentation.LongDescription": "<code>table</code> içindeki en küçük satırı verilen <code>comparisonCriteria</code> öğesini kullanarak döndürür. Tablo boşsa, isteğe bağlı <code>default</code> değeri döndürülür.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tabloda [a] sütununda en küçük değer bulunan satırı bulur.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Tabloda [a] sütununda en küçük değer bulunan satırı bulur. Boş olması halinde -1 döndürür.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Tablodaki satırın konum veya konumlarını döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>table</code> öğesinde <code>row</code> öğesinin ilk oluşumuna ait satır konumunu döndürür. Hiçbir oluşum bulunmadıysa -1 döndürülür.\r\n    <ul>\r\n       <li><code>table</code>: Girdi tablosu.</li>\r\n       <li><code>row</code>: Tabloda konumun bulunacağı satır.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Satırın hangi oluşumlarının döndürüleceğini belirtir.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Tablo satırları arasındaki karşılaştırmayı denetler.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> tablosunda [a = 2, b = 4] değerlerinin ilk oluşum konumunu bulur.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> tablosunda [a = 2, b = 4] değerlerinin ikinci oluşum konumunu bulur.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> tablosunda [a = 2, b = 4] değerlerinin tüm oluşumlarının konumunu bulur.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Tablodaki belirtilen satırlardan herhangi birinin konum veya konumlarını döndürür.",
        "Documentation.LongDescription": "<code>rows</code> listesinin ilk oluşumuna ait <code>table</code> öğesinden satır konumlarını döndürür. Hiçbir oluşum bulunmadıysa -1 döndürülür.\r\n    <ul>\r\n    <li><code>table</code>: Girdi tablosu.</li>\r\n       <li><code>rows</code>:  Tabloda konumların bulunacağı satır listesi.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Satırın hangi oluşumlarının döndürüleceğini belirtir.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Tablo satırları arasındaki karşılaştırmayı denetler.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> tablosunda [a = 2, b = 4] veya [a = 6, b = 8] değerlerinin ilk oluşum konumunu bulur.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> tablosunda [a = 2, b = 4] veya [a = 6, b = 8] değerlerinin tüm oluşumlarının konumunu bulur.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Belirtilen sayfa boyutunu kullanarak belirtilen tabloyu bir tablolar listesine ayırır.",
        "Documentation.LongDescription": "<code>table</code> öğesini; listenin ilk öğesinin kaynak tablodaki ilk <code>pageSize</code> satırı barındıran bir tablo olduğu, sonraki öğenin ise\r\n    kaynak listeden sonraki <code>pageSize</code> satırı barındıran bir tablo olduğu ve bu şekilde devam eden bir tablolar listesine ayırır.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Beş kayıtlık bir tabloyu, iki kayıtlık tablolara ayırır.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Belirtilen ilk sayı satırlarını ve kalan satırları içeren bir liste döndürür.",
        "Documentation.LongDescription": "İki tablo içeren bir liste geri gönderir: <code>table</code> öğesinin ilk N satırını içeren bir tablo ( <code>count</code> tarafından belirtildiği gibi) ve <code>table</code> öğesinin kalan satırlarını içeren bir tablo.\r\n\r\nElde edilen listedeki tablolar tam olarak bir kez ve sırayla listeleniyorsa, işlev <code>table</code> öğesini yalnızca bir kez listeler.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk iki satırını ve tablonun kalan satırlarını geri gönderir.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Tablonun satırlarını belirtilen dönüşüm işlevini kullanarak dönüştürür.",
        "Documentation.LongDescription": "<code>table</code> içindeki her satıra <code>transform</code> işlemini uygulayarak bir <code>liste</code> oluşturur.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Bir tablonun satırlarını sayı listesine dönüştürün.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Bir sayısal tablonun satırlarını metin biçiminde kayıtlara dönüştürün.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Belirtilen <code>delimiter</code> değerinden sonraki <code>text</code> bölümünü döndürür.\r\n    İsteğe bağlı bir sayısal <code>index</code> hangi <code>delimiter</code> oluşumunun hesaba katılması gerektiğini belirtir.\r\n    İsteğe bağlı bir liste <code>index</code> hangi <code>delimiter</code> oluşumunun hesaba katılması gerektiğini ve dizin oluşturmanın girişin başından mı sonundan mı başlaması gerektiğini belirtir.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "İlk kısa çizgiden sonraki \"111-222-333\" bölümünü alır.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "İkinci kısa çizgiden sonraki \"111-222-333\" bölümünü alır.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Sondan ikinci kısa çizgiden sonraki \"111-222-333\" bölümünü alır.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Belirtilen konumdaki karakteri döndürür.",
        "Documentation.LongDescription": "<code>text</code> metin değerindeki, <code>index</code> konumundaki karakteri döndürür. Metindeki ilk karakter 0 konumundadır.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" dizesinde 4 konumunda bulunan karakteri bulur.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Belirtilen <code>delimiter</code> değerinden önceki <code>text</code> bölümünü döndürür.\r\n    İsteğe bağlı bir sayısal <code>index</code> hangi <code>delimiter</code> oluşumunun hesaba katılması gerektiğini belirtir.\r\n    İsteğe bağlı bir liste <code>index</code> hangi <code>delimiter</code> oluşumunun hesaba katılması gerektiğini ve dizin oluşturmanın girişin başından mı sonundan mı başlaması gerektiğini belirtir.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "İlk kısa çizgiden önceki \"111-222-333\" bölümünü alır.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "İkinci kısa çizgiden önceki \"111-222-333\" bölümünü alır.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Sondan ikinci kısa çizgiden önceki \"111-222-333\" bölümünü alır.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Metnin alt dizeyi içerip içermediğini döndürür.",
        "Documentation.LongDescription": "<code>text</code> öğesinin <code>substring</code> değerini içerip içermediğini algılar. Değer bulunursa true döndürür. Bu işlev, joker karakterleri ve normal ifadeleri desteklemez.\r\n      <br>\r\n      <br>\r\n      Büyük/küçük harfe duyarsız ya da kültüre ve yerel ayara duyarlı karşılaştırmalar belirtmek için isteğe bağlı <code>comparer</code> bağımsız değişkeni kullanılabilir.\r\n      Şu yerleşik karşılaştırıcılar formül dilinde kullanılabilir:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Büyük/küçük harfe duyarlı sıralı karşılaştırma gerçekleştirmek için kullanılır</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Büyük/küçük harfe duyarsız sıralı karşılaştırma gerçekleştirmek için kullanılır</li>\r\n        <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı karşılaştırma gerçekleştirmek için kullanılır</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" metninin \"Hello\" ifadesini içerip içermediğini bulur.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "\"Hello World\" metninin \"hello\" ifadesini içerip içermediğini bulur.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Büyük/küçük harfe duyarsız karşılaştırma kullanarak \"Merhaba Dünya\" metninin \"merhaba\" sözcüğünü içerip içermediğini bulun.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Metnin son karakterlerini döndürür.",
        "Documentation.LongDescription": "<code>text</code> değeri olan <code>text</code> öğesinin son <code>count</code> karakteri olan bir <code>text</code> değeri döndürür.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" metninin son 5 karakterini alır.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Metnin belirtilen değerde sonlanıp sonlanmadığını gösterir.",
        "Documentation.LongDescription": "Verilen <code>text</code> metninin belirtilen <code>substring</code> değeri ile bitip bitmediğini gösterir. Gösterge büyük/küçük harfe duyarlıdır.\r\n\r\n      <div>\r\n        <code>comparer</code>, karşılaştırmanın kontrol edilmesi için kullanılan bir <code>Karşılaştırıcıdır</code>. Karşılaştırıcılar, büyük/küçük harfe duyarlı olmayan veya kültüre ve yerel ayara duyarlı karşılaştırmaların sağlanması için kullanılabilir.\r\n      </div>\r\n      <div>\r\n        Aşağıdaki yerleşik karşılaştırıcılar formül dilinde kullanılabilir:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Tam sıralı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Tam sıralı büyük/küçük harfe duyarlı olmayan karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n        <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" metninin \"world\" ifadesi ile bitip bitmediğini denetler.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "\"Hello, World\" metninin \"World\" ifadesi ile bitip bitmediğini denetler.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Biçim dizesinden veya bağımsız değişkenlerden biçimlendirilmiş metin döndürür.",
        "Documentation.LongDescription": "<code>formatString</code> biçim dizesine listeden veya kayıttan <code>arguments</code> uygulanarak oluşturulan biçimlendirilmiş metni döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Sayılardan oluşan bir liste biçimlendirin.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Amerika Birleşik Devletleri İngilizce kültürüne uygun şekilde, bir kayıttan farklı veri türlerini biçimlendirin.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Belirli bir uzunluğun alt dizesini döndürür.",
        "Documentation.LongDescription": "<code>count</code> karakter döndürür veya <code>start</code> uzaklığında <code>text</code> bitişine kadar döndürür.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "5 karakter içeren 6 dizininden başlayarak \"Merhaba Dünya\" metninden alt dizeyi bulur.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "6 dizininden başlayarak bitişe kadar \"Merhaba Dünya\" metninden alt dizeyi bulur.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Verilen metnin sonunu doldurarak belirtilen uzunluktaki metni döndürür.",
        "Documentation.LongDescription": "<code>text</code> metin değerinin sonuna boşluk ekleyerek <code>count</code> uzunluğuna doldurulan bir <code>text</code> değeri döndürür.\r\n    Doldurma için kullanılan karakteri belirtmek için isteğe bağlı bir <code>character</code> karakteri kullanılabilir. Varsayılan doldurma karakteri boşluktur.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Metin değerinin sonunu, uzunluğu 10 karakter olacak şekilde doldurur.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Metin değerinin sonunu, uzunluğu 10 karakter olacak şekilde \"|\" ile doldurur.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Verilen metnin başını doldurarak belirtilen uzunluktaki metni döndürür.",
        "Documentation.LongDescription": "<code>text</code> metin değerinin başına boşluk ekleyerek <code>count</code> uzunluğuna doldurulan bir <code>text</code> değeri döndürür.\r\n    Doldurma için kullanılan karakteri belirtmek için isteğe bağlı bir <code>character</code> karakteri kullanılabilir. Varsayılan doldurma karakteri boşluktur.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Metin değerinin başını, uzunluğu 10 karakter olacak şekilde doldurur.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Metin değerinin başını, uzunluğu 10 karakter olacak şekilde \"|\" ile doldurur.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Değerin ilk konumunu döndürür (bulunmazsa -1).",
        "Documentation.LongDescription": "<code>text</code> içinde bulunan <code>substring</code> metin değerinin belirtilen oluşumunun konumunu döndürür.\r\n    Hangi oluşum konumunun döndürüleceğini belirtmek için isteğe bağlı bir <code>occurrence</code> parametresi kullanılabilir (varsayılan olarak ilk oluşumdur).\r\n    <code>substring</code> bulunmazsa -1 döndürür.\r\n\r\n      <div>\r\n        <code>comparer</code>, karşılaştırmayı denetlemek için kullanılan bir <code>Karşılaştırıcıdır</code>. Karşılaştırıcılar büyük/küçük harfe duyarlı olmayan veya kültüre ve bölgeye duyarlı karşılaştırmalar döndürür.\r\n      </div>\r\n      <div>\r\n        Aşağıdaki yerleşik karşılaştırıcılar formül dilinde kullanılabilir:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Tam bir sırasal karşılaştırma yapmak için kullanılır</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Tam bir büyük/küçük harfe duyarlı olmayan karşılaştırma yapmak için kullanılır</li>\r\n        <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı bir karşılaştırma yapmak için kullanılır</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World! Hello, World!\" metninde \"World\" ifadesinin ilk oluşum konumunu bulur.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "\"Dünya\"nın \"Merhaba Dünya! Merhaba Dünya!\" içindeki son yinelemesinin konumu alınır.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Listelenen herhangi bir karakterin metin değerindeki ilk konumunu döndürür (bulunmazsa -1).",
        "Documentation.LongDescription": "<code>text</code> öğesinde bulunan <code>characters</code> listesindeki herhangi bir karakterin ilk konumunu döndürür.\n    Döndürülecek oluşum konumunu belirtmek üzere isteğe bağlı <code>occurrence</code> parametresi kullanılabilir.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Merhaba Dünya!\" metninde \"M\" veya \"D\" harfinin ilk konumunu bulur.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "\"Merhaba Dünya!\" metninde \"M\" veya \"D\" harfinin tüm konumlarını bulur.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Uzaklıkta bulunan alt dizeyi döndürür.",
        "Documentation.LongDescription": "<code>offset</code> uzaklığında bulunan <code>text</code> metninden alt dizeyi döndürür.\r\n    Kaç karakterin döndürüleceğini belirtmek için isteğe bağlı bir <code>count</code> parametresi eklenebilir. Yeterli sayıda karakter bulunmazsa hata verir.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" metninde 6 dizininden başlayarak alt dizeyi bulur.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "\"Hello World Hello\" metninde 6 dizininden başlayarak ve 5 karakteri kapsayarak alt dizeyi bulur.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Verilen karakterin veya karakter listesinin girdi metin değerindeki tüm oluşumlarını kaldırır.",
        "Documentation.LongDescription": "<code>text</code> metin değerinin <code>removeChars</code> konumundaki tüm karakterler kaldırılmış şekilde kopyasını döndürür.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Metin değerinden , ve ; karakterlerini kaldırır.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Verilen uzaklıkta başlayan belirli sayıda karakteri kaldırır",
        "Documentation.LongDescription": "<code>text</code> metin değerinin <code>offset</code> konumundaki tüm karakterler kaldırılmış şekilde kopyasını döndürür.\r\n    Kaldırılacak karakter sayısını belirtmek üzere <code>count</code> isteğe bağlı parametresi kullanılabilir. <code>count</code> varsayılan değeri 1'dir. Konum değerleri 0'dan başlar.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABEFC\" metin değerinden 2 konumundaki 1 karakteri kaldırır.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "\"ABEFC\" metin değerinden 2 konumundan başlayarak iki karakteri kaldırır.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Belirtilen sayıda yinelenen girdi metninden oluşan bir metin değerini döndürür.",
        "Documentation.LongDescription": "<code>count</code> kez yinelenen <code>text</code> girdi metninden oluşan bir metin değerini döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"a\" metnini beş kez yineler.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "\"helloworld\" metnini üç kez yineler.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Verilen karakterin veya karakter listesinin girdi metin değerindeki tüm oluşumlarını seçerer.",
        "Documentation.LongDescription": "<code>text</code> metin değerinin <code>selectChars</code> konumundaki tüm karakterler kaldırılmamış şekilde kopyasını döndürür.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "'a' - 'z' aralığındaki metin değerinden tüm karakterleri seçin.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Metni belirtilen sınırlayıcıya dayalı olarak bir metin değerleri listesine ayırır.",
        "Documentation.LongDescription": "<code>text</code> metin değerini <code>separator</code> belirtilen sınırlayıcısına dayalı olarak ayırmanın sonucu olan metin değerleri listesini döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"|\" ile sınırlandırılmış metin değeri olan \"Name|Address|PhoneNumber\" öğesinden liste oluşturur.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Sınırlayıcıdaki karakterlerden herhangi birinde ayrılmış metin değerleri listesi döndürür.",
        "Documentation.LongDescription": "<code>text</code> metin değerini <code>separators</code> belirtilen sınırlayıcısındaki herhangi bir karaktere dayalı olarak ayırmanın sonucu olan metin değerleri listesini döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\" metin değerinden bir liste oluşturur.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Metnin başlangıcını döndürür",
        "Documentation.LongDescription": "<code>text</code> öğesinin ilk <code>count</code> karakterini metin değeri olarak döndürür.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" metninin ilk 5 karakterini alır.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Metnin belirtilen değerle başlayıp başlamadığını gösterir.",
        "Documentation.LongDescription": "<code>text</code> metin değerinin <code>substring</code> metin değeriyle başlaması halinde true döndürür.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Aranacak <code>metin</code> değeri</li>\r\n        <li><code>substring</code>: <i></i> <code>substring</code> içinde aranacak alt dize olan bir <code>metin</code> değeri</li>\r\n        <li><code>comparer</code>: <i>[İsteğe bağlı]</i> Karşılaştırmayı denetlemek üzere kullanılan bir <code>Karşılaştırıcı</code>. Örneğin, büyük/küçük harfe duyarlı olmayan aramalar gerçekleştirmek üzere <code>Comparer.OrdinalIgnoreCase</code> kullanılabilir</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code>, karşılaştırmayı denetlemek üzere kullanılan bir <code>Karşılaştırıcıdır</code>. Karşılaştırıcılar, büyük/küçük harfe duyarlı olmayan veya kültüre ve yerel ayara duyarlı karşılaştırmaların sağlanması için kullanılabilir.\r\n      </div>\r\n      <div>\r\n        Aşağıdaki yerleşik karşılaştırıcılar formül dilinde kullanılabilir:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Tam sıralı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Tam sıralı, büyük/küçük harfe duyarlı olmayan karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n        <li> <code>Comparer.FromCulture</code>: Kültüre duyarlı karşılaştırma gerçekleştirilmesi için kullanılır</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" metninin \"hello\" metni ile başlayıp başlamadığını denetler.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "\"Hello, World\" metninin \"Hello\" metni ile başlayıp başlamadığını denetler.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Belirli bir parametreyle ve döndürülen tür kısıtlamalarıyla işlevleri temsil eden bir tür döndürür.",
        "Documentation.LongDescription": "Bir <code>function type</code> oluşturur, bunu <code>signature</code>, <code>ReturnType</code> ve <code>Parameters</code> ve <code>min</code>, işlevin çalıştırılabilmesi için gerekli olan minimum sayıda bağımsız değişkenden gerçekleştirir.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "X adında bir sayı parametresi alan ve bir sayı döndüren bir işlevin türünü oluşturur.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Alanlarda belirli kısıt türünü içeren kayıtları temsil eden bir tür döndürür.",
        "Documentation.LongDescription": "Alanlarda belirli kısıt türünü içeren kayıtları temsil eden bir tür döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dinamik olarak bir tablo türü oluşturun.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "İlk türün değerinin her zaman ikinci türle uyumlu olup olmadığını belirler.",
        "Documentation.LongDescription": "<code>type1</code> değerinin her zaman <code>type2</code> ile uyumlu olup olmayacağını belirler.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Sayı türündeki bir değerin her zaman herhangi bir değer olarak da değerlendirilip değerlendirilmeyeceğini belirler.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Herhangi bir türdeki değerin her zaman sayı olarak da değerlendirilip değerlendirilmeyeceğini belirler.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Bir türe ilişkin modelleri değiştirir.",
        "Documentation.LongDescription": "<code>type</code> modellerini <code>facets</code> kaydında bulunan modellerle değiştirir.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Tüm anahtarlarının belirtilen anahtar listesi ile değiştirildiği yeni bir tablo döndürür.",
        "Documentation.LongDescription": "Tüm anahtarların belirtilen anahtar listesiyle değiştirilmesiyle yeni bir tablo türü döndürür.<br>\r\n    <br>\r\n    Her anahtar aşağıdaki formda bir kayıt kullanılarak tanımlanır:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: \ranahtar adını tanımlayan sütun adlarının listesi\n      </li>\r\n      <li>\r\n        Anahtar tablonun birincil anahtarı ise, <code>Primary</code>: <code>true</code>; aksi halde, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Belirtilen anahtar listesi, en fazla bir birincil anahtar tanımlandığından ve tüm anahtar sütun adlarının tablo türünde mevcut olduğundan emin olmak için doğrulanır.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tablo türündeki anahtar bilgilerini değiştirin.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Daha önce bir tablo türünde tanımlanan anahtar bilgilerini temizleyin.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Bir tablodaki sütunun türünü döndürür.",
        "Documentation.LongDescription": "<code>tableType</code> tablo türündeki <code>column</code> sütununun türünü döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Girdi taban URI'si ile göreli URL birleşimi olan tam bir URI döndürür.",
        "Documentation.LongDescription": "<code>baseUri</code> ve <code>relativeUri</code> girdisinin birleşimi olan tam bir URI döndürür.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "İki değerin toplamını döndürür.",
        "Documentation.LongDescription": "<code>value1</code> ve <code>value2</code> değerinin toplamını döndürür. İsteğe bağlı bir <code>precision</code> parametresi belirtilebilir, varsayılan olarak <code>Precision.Double</code> kullanılır.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Değer belirtilen türle uyumluysa değeri döndürür.",
        "Documentation.LongDescription": "Değer belirtilen türle uyumluysa değeri döndürür. Bu, Number.Type gibi tanımlayıcı türü başvurularını kabul edebilmesi dışında M'deki \"as\" operatörüne eşdeğerdir.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Sayıyı sayıya dönüştürün.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Metin değerini sayıya dönüştürmeyi deneyin.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "İlk değerin ikinciden küçük, ona eşit veya ondan büyük olup olmamasına göre -1, 0 veya 1 döndürür.",
        "Documentation.LongDescription": "İlk değerin ikinciden küçük, ona eşit veya ondan büyük olup olmamasına göre -1, 0 veya 1 döndürür.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "İlk değeri ikinciye bölmenin sonucunu döndürür.",
        "Documentation.LongDescription": "<code>value1</code> değerini <code>value2</code> değerine bölmenin sonucunu döndürür. İsteğe bağlı bir <code>precision</code> parametresi belirtilebilir, varsayılan olarak <code>Precision.Double</code> kullanılır.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "İki değerin eşit olup olmadığını döndürür.",
        "Documentation.LongDescription": "<code>value1</code> değeri <code>value2</code> değerine eşitse doğru, aksi halde yanlış değerini döndürür.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Değerin belirtilen türle uyumlu olup olmadığını belirler.",
        "Documentation.LongDescription": "Değerin belirtilen türle uyumlu olup olmadığını belirler. Bu, Number.Type gibi tanımlayıcı türü başvurularını kabul edebilmesi dışında M'deki \"is\" operatörüne eşdeğerdir.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Sayının sayı türüyle uyumlu olup olmadığını belirlemeye yönelik iki yolu karşılaştırın.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "İki değerin çarpımını döndürür.",
        "Documentation.LongDescription": "<code>value1</code> ile <code>value2</code> değerini çarpmanın sonucunu döndürür. İsteğe bağlı bir <code>precision</code> parametresi belirtilebilir, varsayılan olarak <code>Precision.Double</code> kullanılır.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Bir sorguyu hedefe yönelik değerlendirir.",
        "Documentation.LongDescription": "<p><code>parameters</code> içinde belirtilen parametreleri ve <code>options</code> içinde belirtilen seçenekleri kullanarak <code>target</code> öğesine yönelik <code>query</code> öğesini değerlendirir.</p>\r\n<p>Sorgunun çıktısı <code>target</code> tarafından tanımlanır.</p>\r\n<p><code>target</code>, <code>query</code> tarafından tanımlandığı şekilde işlemin bağlamını sağlar.</p>\r\n<p><code>query</code>, <code>target</code> öğesine yönelik yürütülecek sorguyu tanımlar. <code>query</code>, <code>target</code> öğesine özgü bir şekilde (örneğin, T-SQL deyimi) ifade edilir.</p>\r\n<p>İsteğe bağlı <code>parameters</code> değeri, <code>query</code> tarafından beklenen parametre değerlerinin sağlanması için uygun şekilde bir liste veya kayıt içerebilir.</p>\r\n<p>İsteğe bağlı <code>options</code> kaydı, <code>query</code> öğesinin, <code>target</code> öğesine yönelik değerlendirme davranışını etkileyen seçenekler içerebilir. Bu seçenekler <code>target</code> öğesine özgüdür.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "İki değerin eşit olup olmadığını döndürür.",
        "Documentation.LongDescription": "'<code>value1</code>', '<code>value2</code>' bağımsız değişkenlerinden biri null ise null döndürür, aksi halde Value.Equals ile eşdeğer bir değer döndürür.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Girdinin meta veri bilgilerini değiştirir.",
        "Documentation.LongDescription": "Girdinin meta veri bilgilerini değiştirir.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Değerin türünü değiştirir.",
        "Documentation.LongDescription": "<code>value</code> türünü sağlanan <code>type</code> ile değiştirir.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Kaydın varsayılan türünü daha belirli bir türle değiştirin.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "İki değerin farkını döndürür.",
        "Documentation.LongDescription": "<code>value1</code> ve <code>value2</code> değerinin farkını döndürür. İsteğe bağlı bir <code>precision</code> parametresi belirtilebilir, varsayılan olarak <code>Precision.Double</code> kullanılır.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Yürütüldüğünde bir HTTP isteğinin gerçekleştirilmesine ilişkin sonuçları ikili bir değer olarak döndürecek olan bir eylem oluşturur.",
        "Documentation.LongDescription": "Yürütüldüğünde, ikili değer olarak HTTP kullanılarak <code>url</code> üzerinde <code>method</code> isteğinde bulunmanın sonuçlarını döndürecek bir eylem oluşturur.\r\n    Ek özellikleri belirtmek için isteğe bağlı kayıt parametresi (<code>options</code>) sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>Query</code> : Sorgu parametrelerini, ka&#231;ış uygulama hakkında endişe etmenize gerek kalmadan programlama yoluyla URL&#39;ye ekleyin.</li>\r\n<li><code>ApiKeyName</code> : Hedef sitede bir API anahtarı g&#246;sterimi varsa, bu parametre URL&#39;de kullanılması gereken anahtar parametresinin adını (değerini değil) belirtmek i&#231;in kullanılabilir. Ger&#231;ek anahtar değeri kimlik bilgilerinde sağlanır.</li>\r\n<li><code>Headers</code> : Bu değerin kayıt olarak belirtilmesi, HTTP isteğine ek &#252;st bilgiler sağlar.</li>\r\n<li><code>Timeout</code> : Bu değerin s&#252;re olarak belirtilmesi, HTTP isteğinin zaman aşımı s&#252;resini değiştirir. Varsayılan değer 100 saniyedir.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Bu değerin liste olarak belirtilmesi, bu HTTP &#252;st bilgi anahtarlarını, verileri &#246;nbelleğe alma işleminin kapsamı dışında tutar.</li>\r\n<li><code>IsRetry</code> : Bu mantıksal değerin true olarak belirtilmesi, veriler getirilirken &#246;nbellekteki t&#252;m mevcut yanıtları yoksayar.</li>\r\n<li><code>ManualStatusHandling</code> : Bu değerin liste olarak belirtilmesi, bu durum kodlarından birine sahip yanıtı olan HTTP istekleri i&#231;in t&#252;m yerleşik işlemeyi engeller.</li>\r\n<li><code>RelativePath</code> : Bu değerin metin olarak belirtilmesi, isteği yapmadan &#246;nce değeri temel URL&#39;ye ekler.</li>\r\n<li><code>Content</code> : Bu değerin belirtilmesi, i&#231;eriğinin HTTP isteğinin g&#246;vdesi olmasına neden olur.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Bu işlevin çoğu bağlamda devre dışı bırakıldığına dikkat edin. Bunun yerine Web.Contents veya Web.Headers kullanmayı deneyin.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Bing'de bir GET isteği gerçekleştirin.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Kaydınızla ilişkilendirilen Azure Kurumsal REST API uç noktasının URL'sini girin",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Azure Kurumsal API'si için sağlanmış URL'ye yapılan çağrının ikili sonuçlarını döndürür.",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Contents işlevini kullanarak belirli bir raporun sonuçlarını döndürme.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tablo"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Belirtilen blob içeriğini bir Azure depolama kasasından döndürür.",
        "Documentation.LongDescription": "Azure depolama kasasından, <code>url</code> URL'sindeki blobun içeriğini döndürür. Şu seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>BlockSize</code> : Veri t&#252;keticisini beklemeden okunacak baytların sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>RequestSize</code> : Sunucuya tek bir HTTP isteğinde okunması denenecek bayt sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests se&#231;eneği, bellek kullanımı karşılığında paralel olarak yapılacak isteklerin sayısı belirtilerek verilerin daha hızlı indirilmesini destekler. Gereken bellek (ConcurrentRequest * RequestSize). Varsayılan değer 16&#39;dır.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Bir Azure Data Lake Storage dosya sisteminden belirtilen dosyanın içeriğini döndürür.",
        "Documentation.LongDescription": "Azure Data Lake Storage dosya sisteminden <code>url</code> URL'sindeki dosyanın içeriğini döndürür. Şu seçenekleri denetlemek için <code>options</code> belirtilebilir:\r\n    <ul>\r\n<li><code>BlockSize</code> : Veri t&#252;keticisini beklemeden okunacak baytların sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>RequestSize</code> : Sunucuya tek bir HTTP isteğinde okunması denenecek bayt sayısı. Varsayılan değer 4 MB&#39;tır.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests se&#231;eneği, bellek kullanımı karşılığında paralel olarak yapılacak isteklerin sayısı belirtilerek verilerin daha hızlı indirilmesini destekler. Gereken bellek (ConcurrentRequest * RequestSize). Varsayılan değer 16&#39;dır.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "İkilinin yaklaşık uzunluğunu döndürür.",
        "Documentation.LongDescription": "Veri kaynağı yaklaşık bir uzunluğu desteklemiyorsa, yaklaşık <code>binary</code> uzunluğunu veya bir hata döndürür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "İkili değerin yaklaşık uzunluğunu alın.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "İkili değeri arabelleğe alır.",
        "Documentation.LongDescription": "İkili değeri arabelleğe alır. Bu çağrının sonucu kararlı bir ikili değerdir; böylece belirleyici bir uzunluk ve bayt sırasına sahip olur.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "İkili değerin kararlı sürümünü oluşturur.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Bir ikili listesini tek bir ikili olarak birleştirir.",
        "Documentation.LongDescription": "Bir ikili listesini tek bir ikili olarak birleştirir.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Verilen değerden ikili oluşturur",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>binary</code> değeri döndürür. Verilen <code>value</code> <code>null</code> olduğunda <code>Binary.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>binary</code> olduğunda <code>value</code> döndürülür. Aşağıdaki türde olan değerler bir <code>binary</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin gösteriminden bir <code>binary</code> değeri. Ayrıntılar için bkz. <code>Binary.FromText</code>.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1011\"</code> öğesinin <code>binary</code> değerini alır.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Bir sayı listesini ikili değerine dönüştürür.",
        "Documentation.LongDescription": "Bir sayı listesini ikili değerine dönüştürür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Bir metin biçimindeki verilerin kodunu ikili olarak çözer.",
        "Documentation.LongDescription": "<code>text</code> metin değerini dönüştürmenin sonucunu bir ikiliye döndürür (<code>number</code> listesi). <code>encoding</code>, metin değerinde kullanılan kodlamayı göstermek için belirtilebilir.\r\n      Aşağıdaki <code>BinaryEncoding</code> değerleri, <code>encoding</code> için kullanılabilir.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: 64 tabanlı kodlama</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Onaltılık kodlama</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "\"1011\" değerinin kodunu ikili olarak çözer.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "\"1011\" değerinin kodunu Onaltılık kodlama ile ikili olarak çözer.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "İkili akışı okur ve akışın içerik türü ve biçim bilgilerini belirlemeye çalışır.",
        "Documentation.LongDescription": "Çıkarsanan MIME türünü içeren Content.Type alanıyla bir kayıt döndürür.\r\n    Çıkarsanan içerik türü metin/* ise ve bir kodlama kod sayfası algılandıysa ek olarak akışın kodlamasını içeren Content.Encoding alanını döndürür.\r\n    Çıkarsanan içerik türü metin/csv ise ve biçimi sınırlandırılmışsa ayrıca olası sınırlayıcıların analizini içeren bir tabloya sahip Csv.PotentialDelimiter alanını döndürür.\r\n    Çıkarsanan içerik türü metin/csv ise ve biçimi sabit genişlikteyse ayrıca olası sabit genişlikte sütun konumları analizinin bir listesini içeren Csv.PotentialPositions alanını döndürür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Karakterlerin sayısını döndürür.",
        "Documentation.LongDescription": "Karakterlerin sayısını döndürür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Bir ikili değeri sayı listesine dönüştürür.",
        "Documentation.LongDescription": "Bir ikili değeri sayı listesine dönüştürür.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "İkili verinin kodunu metin biçimi olarak çözer.",
        "Documentation.LongDescription": "<code>binary</code> sayı ikili listesini dönüştürmenin sonucunu bir metin değerine döndürür. İsteğe bağlı olarak <code>encoding</code>, oluşturulan metin değerinde kullanılan kodlamayı göstermek için belirtilebilir.\r\n      Aşağıdaki <code>BinaryEncoding</code> değerleri, <code>encoding</code> için kullanılabilir.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: 64 tabanlı kodlama</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Onaltılık kodlama</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Görünümde (Binary.View aracılığıyla) tanımlanan bir işleyici tarafından oluşturulduğunda geri dönüşü tetiklemeyen değiştirilmiş bir hata kaydı oluşturur.",
        "Documentation.LongDescription": "Görünümde (Binary.View aracılığıyla) tanımlanan bir işleyici tarafından oluşturulduğunda geri dönüşü tetiklemeyen <code>errorRecord</code> kaynaklı değiştirilmiş bir hata kaydı oluşturur.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Görünümde (Binary.View aracılığıyla) tanımlanan bir işleyici tarafından kesilebilecek bir işlev oluşturur.",
        "Documentation.LongDescription": "<p><code>Binary.View</code> tarafından oluşturulan bir görünümde işlenebilecek <code>function</code> temelli bir görünüm işlevi oluşturur.</p>\r\nBir <p><code>Binary.View</code> işleyicisi olan <code>OnInvoke</code> kullanılarak görünüm işlevi için bir işleyici tanımlanabilir.</p>\r\n<p>Yerleşik işlemlere yönelik işleyicilerde olduğu gibi, <code>OnInvoke</code> işleyicisi belirtilmezse veya belirtilen işleyici tarafından görünüm işlevi işlenmezse ya da işleyici tarafından bir hata oluşturulursa görünümün üzerine <code>function</code> uygulanır.</p>\r\n<p><code>Binary.View</code> ve özel görünüm işlevleri hakkında yapılan tüm açıklamalar için yayınlanmış Power Query özel bağlayıcı belgelerine başvurun.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Bir 7 bit değişken uzunluğunda kodlama kullanılarak kodlanan bir 64 bit işaretli tamsayıyı okuyan bir ikili biçimi.",
        "Documentation.LongDescription": "Bir 7 bit değişken uzunluğunda kodlama kullanılarak kodlanan bir 64 bit işaretli tamsayıyı okuyan bir ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "7 bit değişken uzunlukta kodlama kullanılarak kodlanan bir 64 bit işaretsiz tamsayıyı okuyan bir ikili biçimi.",
        "Documentation.LongDescription": "7 bit değişken uzunlukta kodlama kullanılarak kodlanan bir 64 bit işaretsiz tamsayıyı okuyan bir ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Bir 8 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 8 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Bir .NET 16 bayt ondalık değeri okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir .NET 16 bayt ondalık değeri okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Bir 8 bayt IEEE çift duyarlıklı kayan noktalı değeri okuyan bir ikili biçimi.",
        "Documentation.LongDescription": "Bir 8 bayt IEEE çift duyarlıklı kayan noktalı değeri okuyan bir ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Bir öğe sırasını okuyan ikili biçimi döndürür ve bir liste döndürür.",
        "Documentation.LongDescription": "Bir öğe sırasını okuyan ikili biçimi döndürür ve bir <code>list</code> döndürür.  <code>binaryFormat</code> parametresi, her öğenin ikili biçimini belirtir.  Okunan öğe sayısını belirlemenin üç yolu vardır: <ul><li><code>countOrCondition</code> belirtilmezse, ikili biçimi öğe kalmayana kadar okur.</li><li><code>countOrCondition</code> bir sayıysa, ikili biçimi aynı miktarda öğeyi okur.</li><li><code>countOrCondition</code> bir işlevse, bu işlev okunan her öğe için çağrılır.  İşlev devam etmek için true değerini, öğeleri okumayı durdurmak için false değerini döndürür.  Son öğe listeye dahil edilir.</li><li><code>countOrCondition</code> bir ikili biçimi ise, öğe sayısının listeden önce gelmesi beklenir ve belirtilen biçim sayıyı okumak için kullanılır.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Verilerin sonuna kadar baytları okur.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "İki baytı okur.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Bayt değeri ikiden büyük veya buna eşit olana kadar baytları okur.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Sıfır baytlarını okuyan ve null döndüren bir ikili biçimi.",
        "Documentation.LongDescription": "Sıfır baytlarını okuyan ve null döndüren bir ikili biçimi.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Bir kaydı okuyan ikili biçimi döndürür.",
        "Documentation.LongDescription": "Bir kaydı okuyan ikili biçimi döndürür.  <code>record</code> parametresi, kaydın ikili biçimini belirtir.  Kayıttaki her alan farklı bir ikili biçimine sahip olabilir.  Bir alan ikili biçimi değeri olmayan bir değer içeriyorsa, bu alan için veri okunmaz ve alan değeri sonuca yansıtılır.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Bir 16 bit tamsayı ve bir 32 bit tamsayı içeren bir kaydı okur.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Bir 16 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 16 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Bir 32 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 32 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Bir 64 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 64 bit işaretli tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Bir 4 bayt IEEE tek duyarlıklı kayan noktalı değeri okuyan bir ikili biçimi.",
        "Documentation.LongDescription": "Bir 4 bayt IEEE tek duyarlıklı kayan noktalı değeri okuyan bir ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Bir metin değeri okuyan ikili biçimi döndürür.",
        "Documentation.LongDescription": "Bir metin değeri okuyan bir ikili biçim döndürür. <code>length</code>, kodu çözülecek bayt sayısını veya metinden önce gelen uzunluğun ikili biçimini belirtir. İsteğe bağlı <code>encoding</code>değeri, metnin kodlamasını belirtir. <code>encoding</code>belirtilmemişse, kodlama Unicode bayt sıra işaretlerinden belirlenir. Bayt sırası işaretleri yoksa, <code>TextEncoding.Utf8</code> kullanılır.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "İki baytın kodunu ASCII metni olarak çözer.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Metnin bayt cinsinden uzunluğunun metinden önce bayt olarak göründüğü ASCII metninin kodunu çözer.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Bir 16 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 16 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Bir 32 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 32 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Bir 64 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.LongDescription": "Bir 64 bit işaretsiz tamsayıyı okuyan ikili biçimi.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Verilen değerden 8 bitlik bir tamsayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden 8 bitlik bir tamsayı <code>number</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda, <code>Byte.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri kesirli kısmı olmayan 8 bitlik tamsayı aralığında bir <code>number</code> olduğunda <code>value</code> döndürülür. Kesirli kısmı varsa, sayı belirtilen yuvarlama moduyla yuvarlanır. Varsayılan yuvarlama modu <code>RoundingMode.ToEven</code> modudur. <code>value</code> başka herhangi bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Ayrıca isteğe bağlı <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin 8 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> kullanıldığında <code>\"4.5\"</code> değerinin 8 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Bir sayıyı metin karakterine dönüştürür.",
        "Documentation.LongDescription": "Sayı ile denk olan karakteri döndürür.<br>\r\n    <br>\r\n    Sağlanan <code>number</code> 21 bit Unicode kod noktası olması gerekir.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Bir sayıyı eşdeğer karakter değerine dönüştürün.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Bir karakteri sayıya dönüştürün ve tekrar geri dönün.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "\"Sırıtan yüz\" ifadesi için onaltılık kod noktasını eşdeğer UTF-16 vekil bileşen çiftine dönüştürün.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Bir karakteri sayı değerine dönüştürür.",
        "Documentation.LongDescription": "<code>character</code> ile denk olan sayıyı döndürür.<br>\r\n    <br>\r\n    Sonuç, sağlanan karakter veya vekil bileşen çifti tarafından temsil edilen 21 bitlik Unicode kod noktası olur.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Bir karakteri eşdeğer sayı değerine dönüştürün.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "\"Sırıtan yüz\" ifadesi için UTF-16 vekil bileşen çiftini eşdeğer onaltılık kod noktasına dönüştürün.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Belirtilen sınırlayıcıyı kullanarak bir metin listesini birleştiren bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin değerleri listesini belirtilen sınırlayıcıyı kullanarak tek bir metin değerine dönüştüren bir işlev döndürür.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Metin değerleri listesini noktalı virgül sınırlayıcı kullanarak birleştirin.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Virgül sınırlayıcı ve CSV stili alıntılama özelliğini kullanarak iki sütunlu metni birleştirin.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Bir sınırlayıcılar dizisi kullanarak bir metin listesini birleştiren bir işlev döndürür.",
        "Documentation.LongDescription": "Bir dizi sınırlayıcı kullanarak metin değerleri listesini tek bir metin değerinde birleştiren bir işlev döndürür.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Bir sınırlayıcı dizisi kullanarak bir metin değerleri listesini birleştirin.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Belirtilen uzunlukları kullanarak bir metin listesini birleştiren bir işlev döndürür.",
        "Documentation.LongDescription": "Belirtilen uzunlukları kullanarak metin değerleri listesini tek bir metin değerinde birleştiren bir işlev döndürür.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Her giriş değerinden belirtilen sayıda karakteri çıkararak bir metin değerleri listesini birleştirin.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Sonucu şablon metniyle önceden doldurduktan sonra, belirtilen sayıda karakteri çıkararak bir metin değerleri listesini birleştirin.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Belirtilen çıktı konumlarını kullanarak bir metin listesini birleştiren bir işlev döndürür.",
        "Documentation.LongDescription": "Belirtilen çıktı konumlarını kullanarak metin değerleri listesini tek bir metin değerinde birleştiren bir işlev döndürür.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Metin değerleri listesini çıktıda belirtilen konumlara yerleştirerek birleştirin.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Belirtilen konum ve uzunlukları kullanarak bir metin listesini birleştiren bir işlev döndürür.",
        "Documentation.LongDescription": "Belirtilen çıktı konumlarını ve uzunluklarını kullanarak metin değerleri listesini tek bir metin değerinde birleştiren bir işlev döndürür. Uzunluk değerinin null olarak belirlenmesi, metin değerinin tamamının çıktı değerine dahil edilmesi gerektiğini belirtir.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Belirtilen çıkış konumlarını ve uzunluklarını kullanarak metin değerlerinin listesini birleştirin.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Belirtilen kültürü ve büyük/küçük harfe duyarlılığı temel alan bir karşıtlık işlevi döndürür.",
        "Documentation.LongDescription": "Karşılaştırma yapmak için <code>culture</code> yanı sıra, <code>ignoreCase</code> tarafından belirtilen büyük/küçük harf duyarlılığını kullanan bir karşılaştırıcı işlevi döndürür.<br> \r\n      <br> \r\n      Karşılaştırıcı işlevi iki bağımsız değişken kabul eder ve ilk değerin ikinci değerden küçük, ona eşit veya ikinciden büyük olup olmadığını temel alarak -1, 0 veya 1 döndürür.<br>\r\n      <br>\r\n      <code>ignoreCase</code> için varsayılan değer false'tur. Bu <code>culture</code>, .NET framework (ör. \"en-US\") tarafından desteklenen yerel ayarlardan biri olmalıdır .\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Değerlerin eşit olup olmadığını belirlemek için \"en-US\" yerel ayarını kullanarak \"a\" ve \"A\" karşılaştırması yapın.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Değerlerin eşit olup olmadığını belirlemek için büyük/küçük harfi yok sayarak ve \"en-US\" yerel ayarını kullanarak \"a\" ve \"A\" karşılaştırması yapın.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "members özellik değerindeki benzersiz üye tanımlayıcısını döndürür.",
        "Documentation.LongDescription": "Bir member özellik değerindeki benzersiz üye tanımlayıcısını döndürür. <code>attribute</code>. Diğer tüm değerler için null döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Bir özelliğin anahtarını döndürür.",
        "Documentation.LongDescription": "<code>property</code> özelliğinin anahtarını döndürür.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Verilen değerden bir para birimi değeri döndürür.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>currency</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda <code>Currency.From</code> <code>null</code> döndürür. Verilen <code>value</code>, para birimi aralığında <code>number</code> olduğunda <code>value</code> değerinin kesir kısmı, 4 basamaklı bir ondalık sayıya yuvarlanarak döndürülür. <code>value</code> başka bir türde olduğunda önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Para birimi için geçerli aralık <code>-922.337.203.685.477,5808</code> - <code>922.337.203.685.477,5807</code> aralığıdır. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Varsayılan mod <code>RoundingMode.ToEven</code> modudur. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.23455\"</code> değerinin <code>currency</code> değerini alın.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "<code>RoundingMode.Down</code> kullanarak <code>\"1.23455\"</code> değerinin <code>currency</code> değerini alın.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Gün bileşenini döndürür.",
        "Documentation.LongDescription": "Verilen <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerinin gün bileşenini döndürür.\r\n      <ul>\r\n        <li><code>dateTime</code>: Gün bileşeninin ayıklandığı bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 17:00:00 tarih ve saatini temsil eden <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerinin gün bileşenini alır.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Sağlanan değerin karşılık geldiği haftanın gününü gösteren (0 ile 6 arasında) bir sayı döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>dateTime</code> değerinin karşılık geldiği haftanın gününü gösteren (0 ile 6 arasında) bir sayı döndürür.\r\n  <ul>\r\n        <li><code>dateTime</code>: Bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n        <li><code>firstDayOfWeek</code>: Haftanın ilk günü olarak kabul edilecek günü gösteren bir <code>Day</code> değeri. Kabul edilebilir değerler: Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday ve Day.Saturday. Belirtilmezse, kültüre bağımlı bir varsayılan değer kullanılır.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pazar'ı haftanın ilk günü kabul ederek 21 Şubat 2011 Pazartesi'nin haftanın hangi gününe karşılık geldiğini göster.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Pazartesi'yi haftanın ilk günü kabul ederek 21 Şubat 2011 Pazartesi'nin haftanın hangi gününe karşılık geldiğini göster.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Günün adını döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>date</code> için hafta gününün adını döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Günün adını alır.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Yılın gününü temsil eden 1 ile 366 arasında bir sayı döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olan <code>dateTime</code> değerindeki yılın gününü temsil eden bir sayıyı döndürür.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "1 Mart 2011 için yılın günü.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Aydaki gün sayısını gösteren 28 ile 31 arasında bir sayı döndürür.",
        "Documentation.LongDescription": "<code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olan <code>dateTime</code> öğesindeki ay içinde bulunan gün sayısını döndürür.\r\n <ul>\r\n        <li><code>dateTime</code>: Aydaki gün sayısının döndürüldüğü bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code>değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 01)></code> ile gösterilen, Aralık ayındaki gün sayısı.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Gün sonunu döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> tarafından temsil edilen gün sonunu döndürür. Saat dilimi bilgileri korunur.\r\n      <ul>\r\n      <li><code>dateTime</code>: Kendisinden itibaren günün sonunun hesaplandığı <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 17:00:00 için günün sonunu alır.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "17.05.2011 19:00 için günün sonunu alır.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Ay sonunu döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren ay sonunu döndürür.\r\n      <ul>\r\n        <li><code>dateTime</code>: Kendisinden itibaren ayın sonunun hesaplandığı <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 için ayın sonunu alır.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "17.05.2011 17:00:00 -7:00 için ayın sonunu alır.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Çeyrek sonunu döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren çeyrek sonunu döndürür. Saat dilimi bilgileri korunur.\r\n      <ul>\r\n      <li><code>dateTime</code>: Kendisinden itibaren çeyreğin sonunun hesaplandığı <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:00 için çeyrek sonunu bulun.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Haftanın sonunu döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren bulunan haftanın sonunu döndürür.\r\n    Bu işlev, bu göreli hesaplama için haftanın ilk günü olarak ayarlamak üzere isteğe bağlı <code>Day</code> <code>firstDayOfWeek</code> değerini alır. Varsayılan değer: <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Kendisinden itibaren haftanın son gününün hesaplandığı <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[İsteğe bağlı]</i> Haftanın ilk gününü temsil eden bir <code>Day.Type</code> değeri. Olası değerler: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> ve <code>Day.Saturday.</code>. Varsayılan değer: <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 için haftanın sonunu alır.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Haftanın ilk günü Pazar olmak üzere 17.05.2011 17:00:00 -7:00 için haftanın sonunu alır.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Yıl sonunu döndürür.",
        "Documentation.LongDescription": "Kesirlik saniyeler dahil olmak üzere <code>dateTime</code> içeren yıl sonunu döndürür. Saat dilimi bilgileri korunur.\r\n      <ul>\r\n        <li><code>dateTime</code>: Kendisinden itibaren yılın sonunun hesaplandığı <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 17:00:00 için yılın sonunu alır.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "17.05.2011 19:00 için saatin sonunu alır.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Verilen değerden tarih oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>date</code> değeri döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").\r\nVerilen <code>value</code> <code>null</code> ise <code>Date.From</code>, <code>null</code> döndürür. Verilen <code>value</code> <code>date</code> ise <code>value</code> döndürülür. Aşağıdaki türde olan değerler bir <code>date</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin gösteriminden bir <code>date</code> değeri. Ayrıntılar için bkz. <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> değerinin tarih bileşeni.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> değerinin yerel tarih saat eşdeğerinin tarih bileşeni.</li>\r\n        <li><code>number</code>: <code>value</code> ile ifade edilen OLE Otomasyon Tarihinin tarih saat eşdeğerinin tarih bileşeni.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>43910</code> değerini bir <code>date</code> değerine dönüştürür.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> değerini bir <code>date</code> değerine dönüştürür.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Yerel, evrensel ve özel Tarih biçimlerinden bir Tarih oluşturur.",
        "Documentation.LongDescription": "Bir metin gösteriminden <code>text</code> <code>date</code> değeri oluşturur. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi <code>options</code> sağlanabilir. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin mümkün olan en uygun şekilde ayrıştırılmasıyla sonuçlanır.</li>\r\n   <li><code>Culture</code>:<code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"en-US\"</code> için <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> metin değeri de olabilir. Bunun davranışı <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> ile aynıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31\"</code> değerini bir <code>date</code> değerine dönüştürün.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Gregoryen takvimde, Hicri takvimde 1400 başlangıcına karşılık gelen tarihi bulun.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli gün sırasında oluşup oluşmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli gün sırasında oluşup oluşmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin geçerli gün içinde olup olmadığını belirler.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli ay sırasında oluşup oluşmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli ay sırasında oluşup oluşmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin geçerli ay içinde olup olmadığını belirler.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli çeyrek sırasında oluşup oluşmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli çeyrek sırasında oluşup oluşmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin geçerli çeyrek içinde olup olmadığını belirler.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli hafta sırasında oluşup oluşmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli hafta sırasında oluşup oluşmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin geçerli hafta içinde olup olmadığını belirler.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli yıl sırasında oluşup oluşmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli yıl sırasında oluşup oluşmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin geçerli yıl içinde olup olmadığını belirler.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde bir sonraki gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir sonraki günün sonraki gün içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde bir sonraki ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir sonraki ayın sonraki ay içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde bir sonraki üç aylık dönem içinde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki üç aylık dönem içinde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir sonraki çeyreğin sonraki çeyrek içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde bir sonraki hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir sonraki haftanın sonraki hafta içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde bir sonraki yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir sonraki yılın sonraki yıl içinde olup olmadığını belirler.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki gün içinde olup olmadığını gösterir. Geçerli gün içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir önceki günün önceki gün içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki ay içinde olup olmadığını gösterir. Geçerli ay içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir önceki ayın önceki ay içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki üç aylık dönem içinde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki üç aylık dönem içinde olup olmadığını gösterir. Geçerli üç aylık dönem içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir önceki çeyreğin önceki çeyrek içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki hafta içinde olup olmadığını gösterir. Geçerli hafta içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir önceki haftanın önceki hafta içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Bu tarihin, sistemdeki geçerli tarih saat tarafından belirlendiği şekilde, önceki yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, önceki yıl içinde olup olmadığını gösterir. Geçerli yıl içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden bir önceki yılın önceki yıl içinde olup olmadığını belirler.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Bu tarihin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli yıl sırasında oluşup oluşmadığını ve geçerli gün içinde veya ondan önce olup olmadığını gösterir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde, geçerli yıl sırasında oluşup oluşmadığını ve geçerli gün içinde veya ondan önce olup olmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin yıl başından bugüne kadarki dönem içinde olup olmadığını belirler.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Bu tarihin artık yıl içinde olup olmadığını belirtir.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin artık yıl içinde olup olmadığını gösterir.\r\n <ul>\r\n        <li><code>dateTime</code>: Değerlendirilecek <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2012, 01, 01)</code> ile temsil edilen 2012 yılının artık yıl olup olmadığını belirler.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Ay bileşenini döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>datetime</code> değeri olan <code>dateTime</code> değerinin ay bileşenini döndürür.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) içindeki ayı bulur.",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Ay bileşeninin adını döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>date</code> için ay bileşeninin adını döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ayın adını alır.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Tarihin yılın hangi çeyreği içinde olduğunu gösteren bir sayı döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> tarihinin yılın hangi çeyreği içinde olduğunu gösteren, 1 ile 4 arasındaki bir sayıyı döndürür. <code>dateTime</code> bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olabilir.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#date(2011, 12, 31) tarihinin yılın hangi çeyreği içinde olduğunu bulur.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Gün başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code>tarafından temsil edilen gün başlangıcını döndürür.\r\n    <code>dateTime</code>, bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:00 için günün başlangıcını bulun.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Ay başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren ay başlangıcını döndürür. \r\n    <code>dateTime</code>, bir <code>date</code> veya <code>datetime</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:10:32 için ay başlangıcını bulun.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Çeyrek başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren çeyrek başlangıcını döndürür.\r\n      <code>dateTime</code>, bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:00 için çeyrek başlangıcını bulun.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Haftanın başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren hafta başlangıcını döndürür.\r\n      <code>dateTime</code>, bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "11 Ekim 2011 Salı için haftanın başlangıcını bulun.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Pazartesiyi haftanın başlangıcı olarak kullanarak 11 Ekim 2011 Salı için haftanın başlangıcını bulun.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Yıl başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> içeren yıl başlangıcını döndürür.\r\n    <code>dateTime</code>, bir <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:10:32 için yıl başlangıcını bulun.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Tarih değerinin parçalarını içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "Verilen <code>date</code> tarih değerinin parçalarını içeren bir kayıt döndürür.\r\n <ul>\r\n        <li><code>date</code>: Parçalarının kaydının hesaplanacağı bir <code>date</code>değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 31)</code> değerini tarih değerinin parçalarını içeren bir kayda dönüştürür.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Tarih değerinin metinsel gösterimini döndürür.",
        "Documentation.LongDescription": "<code>date</code> öğesinin metin gösterimini döndürür. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi (<code>options</code>) sağlanabilir. <code>culture</code> yalnızca eski iş akışları için kullanılır. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin <code>Culture</code> tarafından tanımlanan varsayılan kullanılarak biçimlendirilmesiyle sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"tr-TR\"</code> için <code>\"MMM\"</code> <code>\"Oca\", \"Şub\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda, kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> ve <code>culture</code> metin değerleri de olabilir. Bunun davranışı <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> ile aynıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2010, 12, 31)</code> değerini <code>metin</code> değerine dönüştürün. <i>Sonuç çıkışı geçerli kültüre bağlı olarak değişebilir.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Hicri takvimde, Gregoryen takvimde 1 Ocak 2000’e karşılık gelen yılı bulun.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Bu tarihin ayın hangi haftası içinde olduğunu gösteren, 1 ile 6 arasındaki bir sayıyı döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> tarihinin ayın hangi haftası içinde olduğunu gösteren, 1 ile 6 arasındaki bir sayı döndürür.\r\n <ul>\r\n        <li><code>dateTime</code>: Ayın haftasının belirlendiği <code>datetime</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "15 Mart 2011'in yılın hangi haftasında olduğunu belirleyin.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Bu tarihin yılın hangi haftası içinde olduğunu gösteren, 1 ile 54 arasındaki bir sayıyı döndürür.",
        "Documentation.LongDescription": "Yılın hangi haftasının <code>dateTime</code> tarihinin girildiğini gösteren 1 ile 54 arasında bir sayı döndürür.\r\n <ul>\r\n        <li><code>dateTime</code>: Yılın belirlenen haftası için bir <code>datetime</code> değeri.</li>\r\n        <li><code>firstDayOfWeek</code>: İsteğe bağlı <code>Day.Type</code> değeri, yeni bir haftanın hangi gününün başlangıç olarak düşünüleceğini belirtir (örneğin, <code>Day.Sunday</code>). Belirtilmezse, kültüre bağlı bir varsayılan kullanılır.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Yılın hangi haftasının 27 Mart 2011'i içerdiğini belirleyin.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Haftanın başlangıcı olarak Pazartesi kullanıldığında, yılın hangi haftasının 27 Mart 2011'i içerdiğini belirleyin.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Yıl bileşenini döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>datetime</code> değeri olan <code>dateTime</code> değerinin yıl bileşenini döndürür.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) içindeki yılı bulur.",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Verili bir date, datetime, or datetimezone değerinin tarih bileşenini döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> değerinin, verilen <code>date</code>, <code>datetime</code> veya <code>datetimezone</code> değerinin tarih bileşenini döndürür.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) değerinin tarih değerini bulur.",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Verilen değerden bir datetime oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>datetime</code> değeri döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").\r\nVerilen <code>value</code> <code>null</code> ise <code>DateTime.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>datetime</code> ise <code>value</code> döndürülür. Aşağıdaki türde olan değerler bir <code>datetime</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metinsel gösterimden bir <code>datetime</code> değeri. Ayrıntılar için bkz. <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: Tarih bileşeni olarak <code>value</code> ve saat bileşeni olarak <code>00:00:00</code> içeren bir <code>datetime</code>.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> değerinin yerel <code>datetime</code> eşdeğeri.</li>\r\n        <li><code>time</code>: Tarih bileşeni olarak <code>0</code> OLE Otomasyon Tarihinin tarih eşdeğeri ve saat bileşeni olarak <code>value</code> içeren bir <code>datetime</code>.</li>\r\n        <li><code>number</code>: <code>value</code> ile ifade edilen OLE Otomasyon Tarihinin <code>datetime</code> eşdeğeri. </li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(06, 45, 12)</code> değerini bir <code>datetime</code> değerine dönüştürür.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "<code>#date(1975, 4, 4)</code> değerini bir <code>datetime</code> değerine dönüştürür.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "64 bit uzunluğundaki bir sayıdan datetime oluşturur.",
        "Documentation.LongDescription": "<code>fileTime</code> değerinden <code>datetime</code> oluşturur ve bunu yerel saat dilimine dönüştürür. Dosya zamanı, 1 Ocak 1601 gece yarısı 12:00'den bu yana 100 nano saniyelik aralıkların sayısını temsil eden bir Windows dosya zamanı değeridir. (C.E.) Eşgüdümlü Evrensel Saat (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> değerini bir datetime değerine dönüştürür.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Yerel ve evrensel datetime biçimlerinden bir datetimezone oluşturur.",
        "Documentation.LongDescription": "Bir metin gösteriminden (<code>text</code>) <code>datetime</code> değeri oluşturur. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi (<code>options</code>) sağlanabilir. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin mümkün olan en uygun şekilde ayrıştırılmasıyla sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"tr-TR\"</code> için <code>\"MMM\"</code> <code>\"Oca\", \"Şub\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> metin değeri de olabilir. Bunun davranışı <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> ile aynıdır.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> değerini bir tarih saat değerine dönüştürün.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00.121212\"</code> değerini bir tarih saat değerine dönüştürün.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> değerini bir tarih saat değerine dönüştürün.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "<code>\"20101231T013000\"</code> değerini bir tarih saat değerine dönüştürün.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Bu tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli saatte olup olmadığını gösterir.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli saatte olup olmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilmek üzere bir <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin, geçerli saatte olup olmadığını belirler.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Bu tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli dakikada olup olmadığını gösterir.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli dakikada olup olmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilmek üzere bir <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin, geçerli dakikada olup olmadığını belirler.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Bu tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli saniyede olup olmadığını gösterir.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin sistemdeki geçerli tarih ve saat tarafından belirlenen geçerli saniyede olup olmadığını gösterir.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilmek üzere bir <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinin, geçerli saniyede olup olmadığını belirler.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde bir sonraki saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki saatin, bir sonraki saat içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde bir sonraki dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki dakikanın, bir sonraki dakika içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, bir sonraki saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir sonraki saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden sonraki saniyenin, sonraki saniyede olup olmadığını belirler.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde bir önceki saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir önceki saat içinde olup olmadığını gösterir. Geçerli saat içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki saatin, bir önceki saat içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde bir önceki dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir önceki dakika içinde olup olmadığını gösterir. Geçerli dakika içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki dakikanın, bir önceki dakika içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Bu tarih saatin, sistemdeki geçerli tarih ve saat ile belirlendiği şekilde, bir önceki saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> tarih saat değerinin, sistemdeki geçerli tarih ve saat tarafından belirlendiği şekilde bir önceki saniye içinde olup olmadığını gösterir. Geçerli saniye içinde olan bir değer geçirildiğinde bu işlevin false döndürdüğünü unutmayın.\r\n      <ul>\r\n      <li><code>dateTime</code>: Değerlendirilecek <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Geçerli sistem saatinden önceki saniyenin, önceki bir önceki saniye içinde olup olmadığını belirler.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Verilen datetime değerinin saat bölümünü döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> verilen datetime değerinin saat bölümünü döndürür.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) değerinin saat değerini bulur.",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "datetime değerinin parçalarını içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "Verilen <code>dateTime</code> datetime değerinin parçalarını içeren bir kayıt döndürür.\r\n <ul>\r\n        <li><code>dateTime</code>: Parçalarının kaydının hesaplanacağı bir <code>datetime</code>değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2011, 12, 31, 11, 56, 2)</code> değerini Tarih ve Saat değerlerini içeren bir kayda dönüştürür.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "datetime değerinin metinsel gösterimini döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> öğesinin metin gösterimini döndürür. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi (<code>options</code>) sağlanabilir. <code>culture</code> yalnızca eski iş akışları için kullanılır. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin <code>Culture</code> tarafından tanımlanan varsayılan kullanılarak biçimlendirilmesiyle sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"tr-TR\"</code> için <code>\"MMM\"</code> <code>\"Oca\", \"Şub\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda, kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> ve <code>culture</code> metin değerleri de olabilir. Bunun davranışı <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> ile aynıdır.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2010, 12, 31, 01, 30, 25)</code> değerini <code>metin</code> değerine dönüştürün. <i>Sonuç çıkışı geçerli kültüre bağlı olarak değişebilir.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "ISO 8601 desenini kullanarak dönüştürün.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Verilen değerden bir datetimezone oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>datetimezone</code> değeri döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"en-US\").\r\nVerilen <code>value</code> <code>null</code> olduğunda <code>DateTimeZone.From</code>, <code>null</code> döndürür. Verilen <code>value</code> <code>datetimezone</code> ise <code>value</code> döndürülür. Aşağıdaki türde olan değerler bir <code>datetimezone</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin gösteriminden bir <code>datetimezone</code> değeri. Ayrıntılar için bkz. <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: Tarih bileşeni olarak <code>value</code>, saat bileşeni olarak <code>00:00:00</code> ve yerel saat dilimine karşılık gelen uzaklığı içeren bir <code>datetimezone</code>.</li>\r\n        <li><code>datetime</code>: Tarih saat olarak <code>value</code> içeren bir <code>datetimezone</code> ve yerel saat dilimine karşılık gelen uzaklık.</li>\r\n        <li><code>time</code>: Tarih bileşeni olarak <code>0</code> OLE Otomasyon Tarihinin tarih eşdeğerini, saat bileşeni olarak <code>value</code> değerini ve yerel saat dilimine karşılık gelen uzaklığı içeren bir <code>datetimezone</code>.</li>\r\n        <li><code>number</code>: <code>value</code> ile ifade edilen OLE Otomasyon Tarihinin tarih saat eşdeğeri ve yerel saat dilimine karşılık gelen uzaklığı içeren bir <code>datetimezone</code>.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2020-10-30T01:30:00-08:00\"</code> değerini bir <code>datetimezone</code> değerine dönüştürür.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "64 bit uzunluğundaki bir sayıdan datetimezone oluşturur.",
        "Documentation.LongDescription": "<code>fileTime</code> değerinden bir <code>datetimezone</code> değeri oluşturur ve bu değeri yerel saat dilimine dönüştürür. filetime, 1 Ocak 1601 M.S. (C.E.) Eşgüdümlü Evrensel Saat (UTC) ile gece 12:00'den itibaren geçen 100 nanosaniyelik aralık sayısını temsil eden bir Windows dosya zamanı değeridir.\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> değerini bir datetimezone değerine dönüştürür.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Yerel, evrensel ve özel datetimezone biçimlerinden bir datetimezone oluşturur.",
        "Documentation.LongDescription": "Bir metin gösteriminden (<code>text</code>) <code>datetimezone</code> değeri oluşturur. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi (<code>options</code>) sağlanabilir. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin mümkün olan en uygun şekilde ayrıştırılmasıyla sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"tr-TR\"</code> için <code>\"MMM\"</code> <code>\"Oca\", \"Şub\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> metin değeri de olabilir. Bunun davranışı <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> ile aynıdır.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00-08:00\"</code> değerini bir <code>datetimezone</code> değerine dönüştürün.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "ISO 8601 kullanarak dönüştürün.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Verilen datetimezone değerinden saat dilimi bilgilerini kaldırır.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> öğesinden saat dilimi bilgileri kaldırılmış olarak bir #datetime değeri döndürür.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) değerinden saat dilimi bilgilerini kaldırır.",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Saat dilimi bileşenini yerel saat dilimine dönüştürür.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> datetimezone değerinin saat dilimi bilgilerini yerel saat dilimi bilgileri ile değiştirir.\r\n    <code>dateTimeZone</code> bir saat dilimi bileşenine sahip değilse, yerel saat dilimi bilgileri eklenir.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) için saat dilimi bilgilerini yerel saat dilimi olarak değiştirin (PST varsayılarak).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "datetimezone değerinin parçalarını içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "Verilen <code>dateTimeZone</code> datetimezone değerinin parçalarını içeren bir kayıt döndürür.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Parçalarının kaydının hesaplanacağı bir <code>datetimezone</code>değeri.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> değerini Tarih, Saat ve Bölge değerlerini içeren bir kayda dönüştürür.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "datetimezone değerinin metinsel gösterimini döndürür.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> öğesinin metin gösterimini döndürür. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi (<code>options</code>) sağlanabilir. <code>culture</code> yalnızca eski iş akışları için kullanılır. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin <code>Culture</code> tarafından tanımlanan varsayılan kullanılarak biçimlendirilmesiyle sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"tr-TR\"</code> için <code>\"MMM\"</code> <code>\"Oca\", \"Şub\", \"Mar\", ...</code> iken <code>\"ru-RU\"</code> için <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> olur. <code>Format</code> <code>null</code> olduğunda, kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> ve <code>culture</code> metin değerleri de olabilir. Bunun davranışı <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> ile aynıdır.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> değerini <code>metin</code> değerine dönüştürün. <i>Sonuç çıkışı geçerli kültüre bağlı olarak değişebilir.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "ISO 8601 desenini kullanarak dönüştürün.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Zaman dilimi bileşenini UTC saat dilimine dönüştürür.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> saat dilimi değerinin saat dilimi bilgilerini UTC veya Evrensel Saat saat dilimi bilgileri ile değiştirir.\r\n    <code>dateTimeZone</code> bir saat dilimi bileşenine sahip değilse, UTC saat dilimi bilgileri eklenir.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) için saat dilimi bilgilerini UTC saat dilimi olarak değiştirir.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Değerin saat dilimini değiştirir.",
        "Documentation.LongDescription": "Değerin saat dilimini değiştirir.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Değerin saat dilimini değiştirir.",
        "Documentation.LongDescription": "Değerin saat dilimini değiştirir.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Verilen değerden Ondalık bir değer oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden Decimal <code>number</code> değerini döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda <code>Decimal.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri Decimal aralığında <code>number</code> olduğunda <code>value</code> döndürülür; aksi takdirde hata döndürülür. Verilen <code>value</code> değeri başka bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> değerine dönüştürülür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (örneğin \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4.5\"</code> değerinin Ondalık <code>number</code> değerini verir.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Delta Lake tablosunun içeriğini döndürür.",
        "Documentation.LongDescription": "Delta Lake tablosunun içeriğini döndürür.",
        "Documentation.Category": "Verilere erişme",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Verilen değerden Çift değer oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden Double <code>number</code> değerini döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda <code>Double.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri Double aralığında <code>number</code> olduğunda <code>value</code> döndürülür; aksi takdirde hata döndürülür. Verilen <code>value</code> değeri başka bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> değerine dönüştürülür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (örneğin \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin Çift <code>number</code> değerini verir.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Sürenin gün kısmını döndürür.",
        "Documentation.LongDescription": "<code>duration</code> için gün kısmını döndürür",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "İki tarih arasındaki gün sayısını ayıklar.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Verilen değerden bir süre oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>duration</code> değeri döndürür. Verilen <code>value</code> <code>null</code> ise <code>Duration.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>duration</code> ise <code>value</code> döndürülür. Aşağıdaki türde olan değerler bir <code>duration</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin biçimindeki geçen zaman biçimlerinden bir <code>duration</code> değeri (g.s:d:s). Ayrıntılar için bkz. <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: <code>value</code> ile ifade edilen tam ve kesirli günlerle eşdeğer bir <code>duration</code>.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>2.525</code> değerini bir <code>duration</code> değerine dönüştürür.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Metinsel geçen zaman biçimlerinden bir süre değeri döndürür (g.s:d:s).",
        "Documentation.LongDescription": "Belirtilen metinden (<code>text</code>) bir süre değeri döndürür. Şu biçimler bu işlev tarafından ayrıştırılabilir:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Tüm aralıklar dahildir)<br>\r\n        ddd: Gün sayısı.<br>\r\n        hh: 0 ila 23 arasında saat sayısı.<br>\r\n        mm: 0 ila 59 arasında dakika sayısı.<br>\r\n        ss: 0 ila 59 arasında saniye sayısı.<br>\r\n        ff: 0 ila 9999999 arasında kesirli saniye sayısı.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2.05:55:20\"</code> değerini bir <code>duration</code> değerine dönüştürür.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Sürenin saat kısmını döndürür.",
        "Documentation.LongDescription": "<code>duration</code> için saat kısmını döndürür",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Süre değerinden saatleri ayıklayın.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Sürenin gün dakika kısmını döndürür.",
        "Documentation.LongDescription": "<code>duration</code> için dakika kısmını döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Süre değerinden dakikaları ayıklayın.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Sürenin saniye kısmını döndürür.",
        "Documentation.LongDescription": "<code>duration</code> için saniye kısmını döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Süre değerinden saniyeleri ayıklayın.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Sürenin parçalarını içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "<code>duration</code> süre değerinin parçalarını içeren bir kayıt döndürür.\r\n  <ul>\r\n        <li><code>duration</code>: Kaydın oluşturulduğu <code>duration</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> değerini mümkünse gün, saat, dakika ve saniyeleri içeren parçalarından oluşan bir kayda dönüştürür.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "\"g.s:d:s\" biçiminde metni döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>duration</code> süre değerinin \"gün.saat:dakika:sn\" biçiminde bir metinsel gösterimini döndürür.\r\n <ul>\r\n        <li><code>duration</code>: Metinsel gösterimin hesaplanması için kullanılan <code>süredir</code>.</li>\r\n  <li><code>format</code>: <i>[İsteğe bağlı]</i> Kullanım dışıdır, değer null değilse hata oluşur</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> değerini bir metin değerine dönüştürür.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Bu sürenin kapsadığı toplam günü döndürür.",
        "Documentation.LongDescription": "<code>duration</code> değerine yayılan toplam gün sayısını döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Bir süre değerine yayılan toplam gün sayısını bulun.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Bu sürenin kapsadığı toplam saati döndürür.",
        "Documentation.LongDescription": "<code>duration</code> değerine yayılan toplam saati döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Bir süre değerine yayılan toplam saati bulun.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Bu sürenin kapsadığı toplam dakikayı döndürür.",
        "Documentation.LongDescription": "<code>duration</code> değerine yayılan toplam dakikayı döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Bir süre değerine yayılan toplam dakikayı bulun.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Bu sürenin kapsadığı toplam saniyeyi döndürür.",
        "Documentation.LongDescription": "<code>duration</code> değerine yayılan toplam saniyeyi döndürür.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Bir süre değerine yayılan toplam saniyeyi bulun.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Neden, ileti ve ayrıntı için sağlanan metin değerlerinden bir hata kaydı döndürür.",
        "Documentation.LongDescription": "Neden, ileti ve ayrıntı için sağlanan metin değerlerinden bir hata kaydı döndürür.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Sabit bir değerin M kaynak kodu gösterimini döndürür.",
        "Documentation.LongDescription": "Sabit bir değerin M kaynak kodu gösterimini döndürür.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Bir sayı değerinin M kaynak kodu gösterimini alır.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Bir tarih değerinin M kaynak kodu gösterimini alır.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Bir metin değerinin M kaynak kodu gösterimini alır.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Bir M ifadesinin değerlendirilme sonucunu döndürür.",
        "Documentation.LongDescription": "Bir M ifadesinin <code>document</code> değerlendirilme sonucunu, <code>environment</code> tarafından tanımlanan mevcut tanımlayıcılarla birlikte döndürür.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Basit bir toplamı değerlendirin.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Daha karmaşık bir toplamı değerlendirin.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Bir metin değerinin bir tanımlayıcı ile birleştirilmesini değerlendirin.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Bir tanımlayıcının M kaynak kodu gösterimini döndürür.",
        "Documentation.LongDescription": "Bir tanımlayıcının <code>name</code> M kaynak kodu gösterimini döndürür.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Bir tanımlayıcının M kaynak kodu gösterimini alır.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Boşluk içeren bir tanımlayıcının M kaynak kodu gösterimini alır.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Belirtilen dosyanın içeriğini ikili olarak döndürür.",
        "Documentation.LongDescription": "<code>path</code> dosyasının içeriğini ikili olarak döndürür. <code>options</code> parametresi şu anda yalnızca dahili kullanıma yöneliktir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Değer döndürüp döndürmediğine bakılmaksızın belirli bir işlev veri kaynağı olarak değerlendirilir.",
        "Documentation.LongDescription": "Değer döndürüp döndürmediğine bakılmaksızın <code>function</code> bir veri kaynağı olarak değerlendirilir.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "İyi Bilinen Metin (WKT) biçimindeki bir coğrafi değeri temsil eden metni yapılandırılmış bir kayda çevirir.",
        "Documentation.LongDescription": "İyi Bilinen Metin (WKT) biçimindeki bir coğrafi değeri temsil eden metni yapılandırılmış bir kayda çevirir. WKT, Open Geospatial Consortium (OGC) tarafından tanımlanan standart bir biçimdir ve SQL Server dahil olmak üzere veritabanları tarafından kullanılan tipik seri hale getirme biçimidir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Yapılandırılmış bir coğrafi noktanın değerini İyi Bilinen Metin (WKT) gösterimine çevirir.",
        "Documentation.LongDescription": "Yapılandırılmış bir coğrafi nokta değerini, SQL Server dahil olmak üzere birçok veritabanı tarafından kullanılan seri hale getirme biçimi olan Open Geospatial Consortium (OGC) tarafından tanımlandığı şekilde İyi Bilinen Metin (WKT) gösterimine çevirir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "İyi Bilinen Metin (WKT) biçimindeki bir geometrik değeri temsil eden metni yapılandırılmış bir kayda çevirir.",
        "Documentation.LongDescription": "İyi Bilinen Metin (WKT) biçimindeki bir geometrik değeri temsil eden metni yapılandırılmış bir kayda çevirir. WKT, Open Geospatial Consortium (OGC) tarafından tanımlanan standart bir biçimdir ve SQL Server dahil olmak üzere veritabanları tarafından kullanılan tipik seri hale getirme biçimidir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Yapılandırılmış bir geometrik noktanın değerini İyi Bilinen Metin (WKT) gösterimine çevirir.",
        "Documentation.LongDescription": "Yapılandırılmış bir geometrik nokta değerini, SQL Server dahil olmak üzere birçok veritabanı tarafından kullanılan seri hale getirme biçimi olan Open Geospatial Consortium (OGC) tarafından tanımlandığı şekilde İyi Bilinen Metin (WKT) gösterimine çevirir.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Verilen değerden bir guid değeri döndürür.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>Guid.Type</code> değeri döndürür. Verilen <code>value</code> <code>null</code> olduğunda <code>Guid.From</code>, <code>null</code> değerini döndürür. Verilen <code>value</code> değerinin kabul edilebilir bir biçimde olup olmadığını saptamak için bir denetim gerçekleştirilecektir. Kabul edilebilir biçimler örneklerde verilmiştir.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Guid, 32 bitişik onaltılık basamak olarak sağlanabilir.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid, kısa çizgi ile ayrılmış 8-4-4-4-12'lik bloklarda 32 onaltılık basamak olarak sağlanabilir.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid, kısa çizgi ile ayrılmış ve küme ayraçları ile kapatılmış 32 onaltılık basamak olarak sağlanabilir.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid, kısa çizgilerle ayrılmış ve parantez ile kapatılan 32 onaltılık basamak olarak sağlanabilir.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Verilen değerden 16 bit tam sayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden 16 bitlik bir tamsayı <code>number</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda, <code>Int16.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri kesirli kısmı olmayan 16 bitlik tamsayı aralığında bir <code>number</code> olduğunda <code>value</code> döndürülür. Kesirli kısmı varsa, sayı belirtilen yuvarlama moduyla yuvarlanır. Varsayılan yuvarlama modu <code>RoundingMode.ToEven</code> modudur. <code>value</code> başka herhangi bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Ayrıca isteğe bağlı <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin 16 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> kullanıldığında <code>\"4.5\"</code> değerinin 16 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Verilen değerden 32 bit tam sayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden 32 bitlik bir tamsayı <code>number</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda, <code>Int32.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri kesirli kısmı olmayan 32 bitlik tamsayı aralığında bir <code>number</code> olduğunda <code>value</code> döndürülür. Kesirli kısmı varsa, sayı belirtilen yuvarlama moduyla yuvarlanır. Varsayılan yuvarlama modu <code>RoundingMode.ToEven</code> modudur. <code>value</code> başka herhangi bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Ayrıca isteğe bağlı <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin 32 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> kullanıldığında <code>\"4.5\"</code> değerinin 32 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Verilen değerden 64 bit tam sayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden 64 bitlik bir tamsayı <code>number</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda, <code>Int64.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri kesirli kısmı olmayan 64 bitlik tamsayı aralığında bir <code>number</code> olduğunda <code>value</code> döndürülür. Kesirli kısmı varsa, sayı belirtilen yuvarlama moduyla yuvarlanır. Varsayılan yuvarlama modu <code>RoundingMode.ToEven</code> modudur. <code>value</code> başka herhangi bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Ayrıca isteğe bağlı <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin 64 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> kullanarak <code>\"4.5\"</code> değerinin 64 bit <code>number</code> tam sayı değerini alın.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Verilen değerden işaretli 8 bit tam sayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden 8 bitlik bir işaretli tamsayı <code>number</code> değeri döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda, <code>Int8.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri kesirli kısmı olmayan 8 bitlik işaretli tamsayı aralığında bir <code>number</code> olduğunda <code>value</code> döndürülür. Kesirli kısmı varsa, sayı belirtilen yuvarlama moduyla yuvarlanır. Varsayılan yuvarlama modu <code>RoundingMode.ToEven</code> modudur. <code>value</code> başka herhangi bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> türüne dönüştürülür. Kullanılabilir yuvarlama modları için bkz. <code>Number.Round</code>. Ayrıca isteğe bağlı <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> değerinin işaretli 8 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> kullanıldığında <code>\"4.5\"</code> değerinin işaretli 8 bit tam sayı <code>number</code> değerini verir.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "İşlevin gövdesi için soyut söz dizimi ağacını (AST) döndürür.",
        "Documentation.LongDescription": "<p><code>function</code> gövdesine ilişkin <i>öğe ifadesinde</i> normalleştirilmiş soyut söz dizimi ağacını (AST) döndürür:\r\n<ul>\r\n  <li>İşlevin 1 bağımsız değişkenli lambda olması gerekir.</li>\r\n  <li>İşlev parametresine yönelik tüm başvurular <code>ItemExpression.Item</code> ile değiştirilir.</li>\r\n  <li>AST yalnızca şu tür düğümleri içerecek şekilde basitleştirilir:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> gövdesi için öğe ifadesi AST'sinin döndürülemediği durumlarda hata oluşur.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "<code>each _ <> null</code> işlevinin gövdesi için AST'yi döndürür",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "JSON belgesinin içeriğini döndürür.",
        "Documentation.LongDescription": "JSON belgesinin içeriğini döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Verilen değere göre bir JSON temsili üretir.",
        "Documentation.LongDescription": "<p><code>encoding</code> tarafından belirtilen bir metin kodlaması ile birlikte belirtilen <code>value</code> değerinin JSON gösterimini oluşturur. <code>encoding</code> atlandıysa UTF8 kullanılır. Değerler şu şekilde gösterilmektedir:</p>\r\n <ul>\r\n        <li>Null değerler, metin değerleri ve mantıksal değerler karşılık gelen JSON türleri ile gösterilir</li>\r\n        <li><code>#infinity</code> hariç olmak üzere sayılar JSON'da sayı olarak gösterilir, <code>-#infinity</code> ve <code>#nan</code> null'a dönüştürülür</li>\r\n        <li>Listeler JSON dizileri olarak gösterilir</li>\r\n        <li>Kayıtlar JSON nesneleri olarak gösterilir</li>\r\n        <li>Tablolar nesne dizisi olarak gösterilir</li>\r\n        <li>Tarihler, saatler, tarih saatler, tarih saat dilimleri ve süreler ISO-8601 metni olarak gösterilir</li>\r\n        <li>İkili değerler Base 64 kodlu metin olarak gösterilir</li>\r\n        <li>Türlerde ve işlevlerde hata oluşur</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Karmaşık bir değeri JSON biçimine dönüştür.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "İkili bir değeri, satır sonlarında bölünen bir metin değerleri listesine dönüştürür. Alıntı stili belirtilirse alıntıların içinde satır sonları görünebilir. includeLineSeparators true ise satır sonu karakterleri metne dahil edilir.",
        "Documentation.LongDescription": "İkili bir değeri, satır sonlarında bölünen bir metin değerleri listesine dönüştürür. Alıntı stili belirtilirse alıntıların içinde satır sonları görünebilir. includeLineSeparators true ise satır sonu karakterleri metne dahil edilir.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Bir metin değerini, satır sonlarında bölünen bir metin değerleri listesine dönüştürür. includeLineSeparators true ise satır sonu karakterleri metne dahil edilir.",
        "Documentation.LongDescription": "Bir metin değerini, satır sonlarında bölünen bir metin değerleri listesine dönüştürür. includeLineSeparators true ise satır sonu karakterleri metne dahil edilir.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (varsayılan) Tırnak işareti davranışı gerekli değildir.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Tırnak işareti, Csv'ye dayalıdır. Çift tırnak karakteri, söz konusu bölümlerin ayrılması için kullanılır ve çift tırnak karakterleri çifti, söz konusu bölüm içindeki tek bir çift tırnak karakterinin belirtilmesi için kullanılır. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Bir metin listesini belirtilen kodlama ve lineSeparator öğesini kullanarak ikili değere dönüştürür. Belirtilen lineSeparator her satıra eklenir.  Belirtilmezse, satır başı ve satır akış karakterleri kullanılır.",
        "Documentation.LongDescription": "Bir metin listesini belirtilen kodlama ve lineSeparator öğesini kullanarak ikili değere dönüştürür. Belirtilen lineSeparator her satıra eklenir.  Belirtilmezse, satır başı ve satır akış karakterleri kullanılır.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Metin listesini tek bir metne dönüştürür.  Belirtilen lineSeparator her satıra eklenir.  Belirtilmezse, satır başı ve satır akış karakterleri kullanılır.",
        "Documentation.LongDescription": "Metin listesini tek bir metne dönüştürür.  Belirtilen lineSeparator her satıra eklenir.  Belirtilmezse, satır başı ve satır akış karakterleri kullanılır.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Tüm ifadeler doğru ise doğru değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki tüm ifadeler doğru ise doğru değerini döndürür.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, true, 2 > 0} listesindeki tüm ifadelerin doğru olup olmadığını belirler.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "{true, true, 2 < 0} listesindeki tüm ifadelerin doğru olup olmadığını belirler.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Herhangi bir ifade doğru ise doğru değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki herhangi bir ifade doğru ise doğru değerini döndürür.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, false, 2 > 0} listesindeki herhangi bir ifadenin doğru olup olmadığını belirler.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "{2 = 0, false, 2 < 0} listesindeki herhangi bir ifadenin doğru olup olmadığını belirler.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Değerlerin ortalamasını döndürür. number, date, datetime, datetimezone ve duration değerleri ile çalışır.",
        "Documentation.LongDescription": "<code>list</code> listesindeki öğelerin ortalama değerini döndürür. Sonuç, listedeki değerler ile aynı veri türünde sağlanır. Yalnızca number, date, time, datetime, datetimezone ve duration değerleri ile çalışır.\r\n    Liste boş ise null döndürülür.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{3, 4, 6}</code> sayı listesinin ortalamasını bulur.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "1 Ocak 2011, 2 Ocak 2011 ve 3 Ocak 2011 tarih değerlerinin ortalamasını bulur.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Bir listeyi arabelleğe alır.",
        "Documentation.LongDescription": "<code>list</code> listesini arabelleğe alır. Bu çağrının sonucu kararlı bir listedir.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10} listesinin kararlı bir kopyasını oluşturur.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Birden çok listeyi birleştirerek tek bir liste döndürür.",
        "Documentation.LongDescription": "<code>lists</code> liste listesini alır ve tek bir yeni liste olarak birleştirir.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} ve {3, 4} basit listelerini birleştirir.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Biri iç içe yerleştirilmiş liste içeren {1, 2} ve {3, {4, 5}} listelerini birleştirir.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Listedeki öğe sayısını döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki öğe sayısını döndürür.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesindeki değerlerin sayısını bulur.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Yinelenen değerleri kaldırılmış bir değer listesi döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki tüm değerleri içeren ve yinelenen değerleri kaldırılmış bir liste döndürür. Liste boşsa, sonuç boş bir listedir.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 1, 2, 3, 3, 3} listesinden yinelenen değerleri kaldırır.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Listenin ilk değerini veya boşsa belirtilen varsayılanı döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki ilk öğeyi veya liste boşsa <code>defaultValue</code> isteğe bağlı varsayılan değerini döndürür.\r\n    Liste boşsa ve varsayılan değer belirtilmemişse, bu işlev <code>null</code> döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesinin ilk değerini bulur.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "{} listesinin ilk değerini bulur. Liste boşsa, -1 döndürür.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Girdide bulunan liste değerlerinin kesişimini döndürür.",
        "Documentation.LongDescription": "<code>lists</code> girdi listesinde bulunan liste değerlerinin kesişimini geri gönderir. <code>equationCriteria</code> isteğe bağlı parametre de belirtilebilir.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1..5}, {2..6}, {3..7} listelerinin kesişimini bulur.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Listede yinelenen değerlerin olup olmadığını gösterir.",
        "Documentation.LongDescription": "<code>list</code> listesinde yinelenen değerlerin olup olmadığı ile ilgili mantıksal bir değer döndürür; liste farklı değerler içeriyorsa <code>true</code>, listede yinelenen değerler varsa <code>false</code> döndürür. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesinin farklı olup olmadığını bulur (örn. yinelenen değer yok).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 3} listesinin farklı olup olmadığını bulur (örn. yinelenen değer yok).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Liste boşsa, doğru değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesi değer içermiyorsa (uzunluk 0) <code>true</code> döndürür. Liste değer içeriyorsa (uzunluk > 0) <code>false</code> döndürür.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{} listesinin boş olup olmadığını bulur.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "{1, 2} listesinin boş olup olmadığını bulur.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Listenin son değerini veya boşsa belirtilen varsayılanı döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki son öğeyi veya liste boşsa <code>defaultValue</code> isteğe bağlı varsayılan değerini döndürür.\r\n    Liste boşsa ve varsayılan değer belirtilmemişse, bu işlev <code>null</code> döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} listesinin son değerini bulur.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "{} listesindeki son değeri bulur veya boşsa -1 döndürür.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Listedeki son değeri döndürür.  Döndürülecek değer sayısı veya belirleyici bir şart isteğe bağlı olarak belirtilebilir.",
        "Documentation.LongDescription": "<code>list</code> listesindeki son öğeyi döndürür. Liste boşsa bir özel durum oluşur.\r\n Bu işlev birden çok öğe veya filtre öğesini desteklemek üzere isteğe bağlı bir <code>countOrCondition</code> parametresini alır. <code>countOrCondition</code> üç yolla belirtilebilir:\r\n <ul>\r\n  <li>Sayı belirtilirse, bu sayı kadar öğe döndürülür. </li>\r\n  <li>Koşul belirtilirse, listenin sonundan başlayarak bu koşulu sağlayan tüm öğeler döndürülür. Tüm öğeler koşulu sağlamadığında, başka öğe değerlendirilmez. </li>\r\n  <li>Parametre null ise, listedeki son öğe döndürülür.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} listesinin son değerini bulur.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} listesinde 0'dan büyük olan son değerleri bulur.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Bir boş listenin en büyük veya varsayılan değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki en büyük öğeyi veya liste boşsa <code>default</code> isteğe bağlı varsayılan değerini döndürür.\r\n    <code>comparisonCriteria</code> isteğe bağlı comparisonCriteria değeri, listedeki öğelerin nasıl karşılaştırılacağını belirlemek için belirtilebilir. Bu parametre null ise varsayılan karşılaştırıcı kullanılır.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} listesinin en büyük değerini bulur.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "{} listesindeki en büyük değeri bul veya boşsa -1 döndür. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Listedeki medyan değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinin ortanca öğesini döndürür. Liste <code>null</code> olmayan bir değer içermiyorsa bu işlev <code>null</code> döndürür.\r\n    Çift sayıda öğe varsa liste yalnızca tarih ve saat, süre, sayı veya saatlerden oluşmadığı sürece işlev iki ortanca öğeden daha küçük olanı seçer,\r\n    aksi takdirde iki öğenin ortalamasını döndürür.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> listesindeki medyan öğeyi bulur.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Bir boş listenin en küçük veya varsayılan değerini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki en küçük öğeyi veya liste boşsa <code>default</code> isteğe bağlı varsayılan değerini döndürür.\r\n    <code>comparisonCriteria</code> isteğe bağlı comparisonCriteria değeri, listedeki öğelerin nasıl karşılaştırılacağını belirlemek için belirtilebilir. Bu parametre null ise varsayılan karşılaştırıcı kullanılır.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} listesinin en küçük değerini bulur.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "{} listesindeki en küçük değeri bul veya boşsa -1 döndür. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Listedeki en sık değeri döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinde en sık görünen öğeyi döndürür. Liste boşsa bir özel durum oluşur. Birden çok öğe aynı en yüksek sıklıkla görünüyorsa son öğe seçilir.\r\n    Eşitlik sınamasını denetlemek için isteğe bağlı <code>comparisonCriteria</code> değeri, <code>equationCriteria</code>, belirtilebilir. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5}</code> listesinde en sık görünen öğeyi bulur.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> listesinde en sık görünen öğeyi bulur.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Listedeki en sık değerin listesini döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinde en sık görünen öğeyi döndürür. Liste boşsa bir özel durum oluşur. Birden çok öğe aynı en yüksek sıklıkla görünüyorsa son öğe seçilir.\r\n    Eşitlik sınamasını denetlemek için isteğe bağlı <code>comparisonCriteria</code> değeri, <code>equationCriteria</code>, belirtilebilir. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> listesinde en sık görünen öğeleri bulur.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Listedeki null olmayan öğe sayısını döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki null olmayan öğe sayısını döndürür.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Girdi için uzaklık listesi döndürür.",
        "Documentation.LongDescription": "<code>list</code> girdi listesi için uzaklık listesi döndürür.\r\n    Bir listeyi değiştirmek için List.Transform kullanılırken, konuma dönüştürme erişimi vermek üzere konum listesi kullanılabilir.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, null, 5} listesindeki değerlerin uzaklıklarını bulur.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Listedeki sayıların çarpımını döndürür.",
        "Documentation.LongDescription": "<code>numbersList</code> listesindeki null olmayan sayıların çarpımını döndürür. Listede null olmayan değer yoksa null döndürülür.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3, 3, 4, 5, 5}</code> listesindeki sayıların çarpımını bulur.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Rastgele sayı listesi döndürür.",
        "Documentation.LongDescription": "Oluşturulacak değer sayısı ve isteğe bağlı bir çekirdek değeri ile 0 ve 1 arasında rastgele bir sayı listesi döndürür.\r\n<ul>\r\n   <li><code>count</code>: Oluşturulacak rastgele değer sayısı.</li>\r\n   <li><code>seed</code>:  <i>[Optional]</i> Rastgele sayı oluşturucusunu oluşturmak için kullanılan sayısal değer. Dahil edilmezse her işlev çağrısında benzersiz bir rastgele sayı listesi döndürülür. Çekirdek değerini bir sayı olarak belirtirseniz her işlev çağrısı aynı rastgele sayı listesini döndürür.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "3 rastgele sayıdan oluşan bir liste oluşturur.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Dağıtım değeri belirterek 3 rastgele sayı içeren bir liste oluşturur.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Listenin başında belirtilen sayıda öğeyi atlayan bir liste döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinin ilk öğesini kaldıran bir liste döndürür. Eğer <code>list</code> boş bir liste ise boş bir liste döndürülür.\r\nBu işlev, aşağıda listelendiği gibi birden fazla değerin kaldırılmasını desteklemek için isteğe bağlı bir parametre (<code>countOrCondition</code>) alır.\r\n <ul>\r\n <li>Bir sayı belirtilirse, o kadar öğe kaldırılır. </li>\r\n <li>Bir koşul belirtilirse, <code>list</code> başındaki eşleşen tüm öğeler kaldırılır.</li>\r\n <li>Bu parametre null ise varsayılan davranış gözlemlenir. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinden ilk 3 sayı hariç olmak üzere liste oluşturur.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} listesinden 3'ten az olan bir sayı ile başlayan bir liste oluşturur.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Belirtilen sayıda öğeyi listenin sonundan kaldıran bir liste döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinin sonundaki son <code>countOrCondition</code> öğeyi kaldıran bir liste döndürür. <code>list</code> <code>countOrCondition</code> öğeden daha az öğeye sahipse boş bir liste döndürülür.\r\n <ul>\r\n <li>Bir sayı belirtilirse, o kadar öğe kaldırılır. </li>\r\n <li>Bir koşul belirtilirse, <code>list</code> sonundaki eşleşen tüm öğeler kaldırılır.</li>\r\n <li>Bu parametre null ise yalnızca bir öğe kaldırılır. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinden son 3 sayı hariç olmak üzere liste oluşturur.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "{5, 4, 2, 6, 4} listesinden 3'ten az olan bir sayı ile biten bir liste oluşturur.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Belirtilen listeden tüm \"null\" değerleri kaldırır.",
        "Documentation.LongDescription": "<code>list</code> içindeki \"null\" değerlerin tüm oluşumlarını kaldırır. Listede \"null\" değer yoksa, asıl liste döndürülür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, null, 4, 5, null, 6} listesinden \"null\" değerleri kaldırır.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Listedeki değerlerin sırasını tersine çevirir.",
        "Documentation.LongDescription": "<code>list</code> listesindeki değerleri tersine çevrilmiş sırada içeren bir liste döndürür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1..10} listesinden ters sırada bir liste oluşturur.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Bir birim uzunluktaki bir liste için bir liste öğesi döndürür, aksi halde özel durum atar.",
        "Documentation.LongDescription": "<code>list</code> listesinde yalnızca bir öğe varsa bu öğeyi döndürür.\r\n    Listede birden çok öğe varsa veya liste boşsa işlev bir özel durum döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} listesindeki tek değeri bulur.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "{1, 2, 3} listesindeki tek değeri bulur.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Bir birim uzunluktaki bir liste için bir liste öğesi ve boş bir liste için varsayılan değeri döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinde yalnızca bir öğe varsa bu öğeyi döndürür.\r\n    Liste boşsa isteğe bağlı bir <code>default</code> belirtilmediyse işlev null döndürür. Listede birden çok öğe varsa işlev bir hata döndürür.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} listesindeki tek değeri bulur.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "{} listesindeki tek değeri bulur.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "{} listesindeki tek değeri bulur. Boşsa -1 döndürür.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Listenin başında belirtilen sayıda öğeyi atlayan bir liste döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesinin ilk öğesini atlayan bir liste döndürür. Eğer <code>list</code> boş bir liste ise boş bir liste döndürülür.\r\nBu işlev, aşağıda listelendiği gibi birden fazla değerin atlanmasını desteklemek için isteğe bağlı bir parametre (<code>countOrCondition</code>) alır.\r\n <ul>\r\n <li>Bir sayı belirtilirse, o kadar öğe atlanır. </li>\r\n <li>Bir koşul belirtilirse, <code>list</code> başındaki eşleşen tüm öğeler atlanır.</li>\r\n <li>Bu parametre null ise varsayılan davranış gözlemlenir. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} listesinden ilk 3 sayı hariç olmak üzere liste oluşturur.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} listesinden 3'ten az olan bir sayı ile başlayan bir liste oluşturur.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Belirtilen ölçüte göre bir veri listesini sıralar.",
        "Documentation.LongDescription": "Belirtilen isteğe bağlı ölçüte göre <code>list</code> veri listesini sıralar.\r\n    Karşılaştırma ölçütü olarak <code>comparisonCriteria</code> isteğe bağlı parametresi belirtilebilir. Bu, şu değerleri alabilir:\r\n    <ul>\r\n    <li> Sırayı denetlemek için karşılaştırma ölçütü bir Order enum değeri olabilir. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Sıralama için kullanılacak anahtarı hesaplamak üzere 1 bağımsız değişkenden oluşan bir işlev kullanılabilir. </li>\r\n    <li> Bir anahtar ve denetim sırası seçmek için, karşılaştırma ölçütü anahtar ile sırayı içeren bir liste olabilir (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Karşılaştırmayı tam olarak denetlemek için 2 bağımsız değişkenden oluşan bir işlev kullanılabilir. Bu işleve listeden iki öğe (rastgele sırada herhangi iki öğe) geçirilir. İşlev şu değerlerden birini döndürmelidir:\r\n        <ul>\r\n            <li> <code>-1</code>: İlk öğe, ikinci öğeden daha azdır.</li>\r\n            <li> <code>0</code>: Öğeler eşittir.</li>\r\n            <li> <code>1</code>: İlk öğe, ikinci öğeden büyüktür.</li>\r\n        </ul>\r\n        Value. Compare, bu mantığı temsil etmek için kullanılabilecek bir yöntemdir. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{2, 3, 1} listesini sıralar.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "{2, 3, 1} listesini azalan düzende sıralar.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "{2, 3, 1} listesini Value.Compare yöntemini kullanarak azalan düzende sıralar.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Standart sapmanın örneklem tabanlı tahminini döndürür.",
        "Documentation.LongDescription": "Bir örneği temel alarak <code>numbersList</code> listesindeki değerlerin standart sapma tahminlerini döndürür.\r\n    <code>numbersList</code> sayılardan oluşan bir listeyse bir sayı döndürülür.\r\n    Boş listeler veya <code>number</code> türünde olmayan öğelerden oluşan listeler için özel durum oluşturulur.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "1 ile 5 arasındaki sayıların standart sapmasını bulur.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Listedeki öğelerin toplamını döndürür.",
        "Documentation.LongDescription": "<code>list</code> listesindeki null olmayan değerlerin toplamını döndürür.  Listede null olmayan değer yoksa null döndürülür.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3}</code> listesindeki sayıların toplamını bulur.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Girdide bulunan liste değerlerinin birleşimini döndürür.",
        "Documentation.LongDescription": "<code>lists</code> liste listesini alır, her listedeki öğeleri birleştirir ve çıktı listesinde döndürür. Sonuç olarak, döndürülen liste tüm girdi listelerindeki bütün öğeleri içerir.\r\n    Bu işlem geleneksel torba semantiğini korur, böylece yinelenen değerler Birleşimin parçası olarak eşleştirilir.\r\n    Eşitlik sınamasını denetlemek için <code>equationCriteria</code> isteğe bağlı denklem ölçüt değeri belirtilebilir. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1..5}, {2..6}, {3..7} listelerinin birleşimini oluşturur.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Birçok listede aynı konumda bulunan öğeleri birleştirerek listelerin yer aldığı bir liste döndürür.",
        "Documentation.LongDescription": "Liste listesi (<code>lists</code>) ve aynı konumdaki öğeleri bir araya getirerek listelerin bulunduğu bir liste döndürür.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "İki basit listeyi ({1, 2} ve {3, 4}) sıkıştırır.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Farklı uzunluklardaki iki basit listeyi ({1, 2} ve {3}) sıkıştırır.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Verilen değerden bir mantıksal değer oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>logical</code> değeri döndürür. Verilen <code>value</code> <code>null</code> olduğunda <code>Logical.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>logical</code> olduğunda <code>value</code> döndürülür. Aşağıdaki türlerde olan değerler bir <code>logical</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin değerindeki <code>\"true\"</code> veya <code>\"false\"</code> olan bir <code>logical</code> değeri. Ayrıntılar için bkz. <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>value</code> <code>0</code> ile eşitse <code>false</code>, aksi takdirde <code>true</code>.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>2</code> değerini bir <code>logical</code> değerine dönüştürür.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "\"true\" ve \"false\" metin değerlerinden bir metinsel değer oluşturur.",
        "Documentation.LongDescription": "\"true\" veya \"false\" olan <code>text</code> metin değerinden bir metinsel değer oluşturur. <code>text</code> farklı bir dize içeriyorsa, özel durum oluşur. <code>text</code> metin değeri büyük/küçük harfe duyarlıdır.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "\"true\" metin dizesinden mantıksal bir değer oluşturur.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "\"a\" metin dizesinden mantıksal bir değer oluşturur.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Verilen mantıksal değerden \"true\" veya \"false\" metnini döndürür.",
        "Documentation.LongDescription": "<code>true</code> veya <code>false</code> olan <code>logicalValue</code> mantıksal değerinden bir metin değeri oluşturur. <code>logicalValue</code> mantıksal değer değilse, özel durum oluşur.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>true</code> mantıksal değerinden metin değeri oluşturur.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Sayının mutlak değerini döndürür.",
        "Documentation.LongDescription": "<code>number</code> öğesinin mutlak değerini döndürür. <code>number</code> null ise <code>Number.Abs</code> null döndürür.\r\n    <ul>\r\n        <li><code>number</code>: Mutlak değeri hesaplanacak olan <code>sayı</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3'ün mutlak değeri.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Sayının arkkosinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin arkkosinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Sayının arksinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin arksinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Sayının arktanjantını döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin arktanjantını döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Her bitin girdinin karşıtı olduğu bir bayt döndürür.",
        "Documentation.LongDescription": "<code>number</code> üzerinde bit tabanlı \"Not\" işlemi uygulamanın sonucunu döndürür.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Sayının kosinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin kosinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "0 açısının kosinüsünü bulur.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Sayının hiperbolik kosinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin hiperbolik kosinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "e değerini verilen üsse yükseltir.",
        "Documentation.LongDescription": "e değerini <code>number</code> üssüne yükseltme işleminin sonucunu döndürür (üstel işlev)\r\n      <ul>\r\n        <li><code>number</code>: Üstel işlevi hesaplanacak olan <code>sayı</code>. <code>number</code> null ise <code>Number.Exp</code> null döndürür. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "e değerini 3 üssüne yükseltir.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Sayının faktöriyelini döndürür.",
        "Documentation.LongDescription": "<code>number</code> sayısının faktöriyelini döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "10'un faktöriyelini bulur.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Verilen değerden sayı oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>number</code> değeri döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").\r\nVerilen <code>value</code> <code>null</code> olduğunda <code>Number.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>number</code> olduğunda <code>value</code> döndürülür. Aşağıdaki türlerde olan değerler bir <code>number</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin gösteriminden bir <code>number</code> değeri. Genel metin biçimleri işlenir (\"15\", \"3.423,10\", \"5,0E-10\"). Ayrıntılar için bkz. <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: <code>true</code> için 1, <code>false</code> için 0.</li>\r\n        <li><code>datetime</code>: OLE Otomasyonu tarih eşdeğerini içeren çift duyarlıklı kayan noktalı sayı.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> yerel tarih ve saatinin OLE Otomasyonu tarih eşdeğerini içeren çift duyarlıklı kayan noktalı sayı.</li>\r\n        <li><code>date</code>: OLE Otomasyonu tarih eşdeğerini içeren çift duyarlıklı kayan noktalı sayı.</li>\r\n        <li><code>time</code>: Kesirli günler ile ifade edilir.</li>\r\n        <li><code>duration</code>: Tam ve kesirli günler ile ifade edilir.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> sayısının <code>number</code> değerini alır.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>#datetime(2020, 3, 20, 6, 0, 0)</code> öğesinin <code>number</code> değerini alır.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "<code>\"12.3%\"</code> <code>number</code> değerini al.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Genel metin biçimlerinden sayılar oluşturur (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Verilen <code>text</code> metin değerinden bir <code>number</code> değeri döndürür.\r\n <ul>\r\n  <li><code>text</code>: Sayı değerinin metinsel gösterimi. Gösterim bir genel sayı biçiminde olmalıdır: Örneğin \"15\", \"3.423,10\" veya \"5,0E-10\".</li>\r\n  <li><code>culture</code>: <code>text</code> değerinin nasıl yorumlanacağını denetleyen isteğe bağlı kültür (ör. \"tr-TR\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> sayısının number değerini alır.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>\"5.0e-10\"</code> değerinin sayı değerini alır.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Değerin çift olup olmadığını gösterir.",
        "Documentation.LongDescription": "<code>number</code> değeri çift ise <code>true</code>, aksi halde <code>false</code> döndürerek değerin çift olup olmadığını gösterir.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625'in çift sayı olup olmadığını denetler.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "82'in çift sayı olup olmadığını denetler.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Değerin NaN (Sayı değil) olup olmadığını gösterir.",
        "Documentation.LongDescription": "Değerin NaN (Sayı değil) olup olmadığını gösterir. <code>number</code> <code>Number.IsNaN</code> ile eşdeğer ise <code>true</code>, aksi halde <code>false</code> döndürür.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "0'ın 0'a bölümünün NaN olup olmadığını denetler.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "1'ın 0'a bölümünün NaN olup olmadığını denetler.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Değerin tek olup olmadığını gösterir.",
        "Documentation.LongDescription": "Değerin tek olup olmadığını gösterir. <code>number</code> bir tek sayı ise <code>true</code>, aksi halde <code>false</code> döndürür.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625'in tek sayı olup olmadığını denetler.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "82'in tek sayı olup olmadığını denetler.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Sayının doğal logaritmasını döndürür.",
        "Documentation.LongDescription": "Sayıların doğal logaritmasını döndürür, <code>number</code>. <code>number</code> null ise <code>Number.Ln</code> null döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "15'in doğal logaritmasını alır.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Sayının belirtilen tabanda (varsayılan e) logaritmasını döndürür.",
        "Documentation.LongDescription": "Bir sayının (<code>number</code>) belirtilen <code>base</code> tabanında logaritmasını döndürür. <code>base</code> belirtilmediyse varsayılan değer Number.E değeridir.\r\n    <code>number</code> null ise <code>Number.Log</code>, null döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2'nin 10 tabanındaki logaritmasını alır.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "2'nin e tabanındaki logaritmasını alır.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Sayının 10 tabanındaki logaritmasını döndürür.",
        "Documentation.LongDescription": "Bir sayının (<code>number</code>) 10 tabanındaki logaritmasını döndürür. <code>number</code> null ise <code>Number.Log10</code> null döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2'nin 10 tabanındaki logaritmasını alır.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Yuvarlanmış sayıyı döndürür. Basamak sayısı ve yuvarlama modu belirtilebilir.",
        "Documentation.LongDescription": "<code>number</code> değerini en yakın sayıya yuvarlamanın sonucunu döndürür. <code>number</code> null olduğunda <code>Number.Round</code> null döndürür.<br>\r\n      <br>\r\n      <code>number</code>, varsayılan olarak en yakın tamsayıya yuvarlanır ve <code>RoundingMode</code> (\"bankacı yuvarlaması\" olarak da bilinir) kullanılıp en yakın sayıya yuvarlanarak eşitlikler bozulur<br>\r\n      <br>\r\n      ancak bu varsayılanlar, aşağıdaki isteğe bağlı parametreler aracılığıyla geçersiz kılınabilir.\r\n      <ul>\r\n        <li><code>digits</code>, <code>number</code> değerini belirtilen ondalık basamağa yuvarlar.</li>\r\n        <li><code>roundingMode</code>, <code>number</code> değeri iki olası yuvarlanan değer arasında olduğunda varsayılan eşitlik bozma davranışını geçersiz kılar.\r\n      (olası değerler için bkz. <code>RoundingMode.Type</code>)</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 değerini en yakın tamsayıya yuvarlar.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "1,56 değerini en yakın tamsayıya yuvarlar.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "1,2345 değerini iki ondalık basamak içerecek şekilde yuvarlar.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "1,2345 değerini üç ondalık basamak içerecek şekilde yuvarlayın (yukarı yuvarlayarak).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "1,2345 değerini üç ondalık basamak içerecek şekilde yuvarlayın (aşağı yuvarlayarak).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Pozitif sayıları yukarı yuvarlama ve negatif sayıları aşağı yuvarlama sonucunu döndürür. Basamakların sayısı belirlenebilir.",
        "Documentation.LongDescription": "<code>number</code> yuvarlamasının sonucunu, sayının işaretine göre döndürür. Bu işlev pozitif sayıları yukarı, negatif sayıları ise aşağı yuvarlar.\r\n    <code>digits</code> belirlenirse, <code>number</code> değeri, <code>digits</code> değerinin onlu basamak sayısına yuvarlanır.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "-1,2 sayısını sıfırdan uzağa doğru yuvarlar.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "-1,2 sayısını sıfırdan uzağa doğru yuvarlar.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "1234 sayısını sıfır değerinin iki onlu basamak uzağına yuvarlayın.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "En yüksek önceki sayıyı döndürür. Basamakların sayısı belirlenebilir.",
        "Documentation.LongDescription": "<code>number</code> sayısının aşağı yuvarlama sonucunu önceki en yüksek tamsayıya döndürür. <code>number</code> null ise bu işlev null değerini döndürür.\r\n\r\n    <code>digits</code> belirtilmişse <code>number</code> belirtilen ondalık basamak sayısına yuvarlanır.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 değerini aşağı doğru tamsayıya yuvarlar.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "1,999 değerini aşağı doğru tamsayıya yuvarlar.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "1999 değerini iki onlu basamak aşağıya yuvarlayın.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Pozitif sayıları aşağı yuvarlama ve negatif sayıları yukarı yuvarlama sonucunu döndürür. Basamakların sayısı belirlenebilir.",
        "Documentation.LongDescription": "<code>number</code> yuvarlamasının sonucunu, sayının işaretine göre döndürür. Bu işlev pozitif sayıları aşağı, negatif sayıları ise yukarı yuvarlar.\r\n    <code>digits</code> belirlenirse <code>number</code> değeri, <code>digits</code> değerinin onlu basamak sayısına yuvarlanır.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "-1,2 sayısını sıfıra doğru yuvarlar.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "1,2 sayısını sıfıra doğru yuvarlar.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "-1234 sayısını sıfır değerinin iki onlu basamak yakınına yuvarlayın.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "En yüksek bir sonraki sayıyı döndürür. Basamakların sayısı belirlenebilir.",
        "Documentation.LongDescription": "<code>number</code> sayısının yukarı yuvarlama sonucunu sonraki en yüksek tamsayıya döndürür. <code>number</code> null ise bu işlev null değerini döndürür.\r\n    <code>digits</code> belirtilmişse <code>number</code> belirtilen ondalık basamak sayısına yuvarlanır.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 değerini yukarı doğru tamsayıya yuvarlar.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "1,999 değerini yukarı doğru tamsayıya yuvarlar.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "1,234 değerini iki onlu basamak yukarı yuvarlayın.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Sayı pozitifse 1, negatifse -1 ve sıfırsa 0 döndürür.",
        "Documentation.LongDescription": "<code>number</code> pozitif bir sayı ise 1, negatif sayı ise -1 ve sıfırsa 0 döndürür.\r\n    <code>number</code> null ise <code>Number.Sign</code> null döndürür.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "182'nin işaretini belirler.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "-182'nin işaretini belirler.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "0'nin işaretini belirler.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Sayının sinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin sinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "0 açısının sinüsünü bulur.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Sayının hiperbolik sinüsünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin hiperbolik sinüsünü döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Sayının kare kökünü döndürür.",
        "Documentation.LongDescription": "<code>number</code> sayısının kare kökünü döndürür.\r\n    <code>number</code> null ise <code>Number.Sqrt</code> null döndürür. Negatif bir değer ise <code>Number.NaN</code> döndürülür (Sayı değil).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "625'in kare kökünü bulur.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "85'in kare kökünü bulur.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Sayının tanjantını döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin tanjantını döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "1 açısının tanjantını bulur.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Sayının hiperbolik tanjantını döndürür.",
        "Documentation.LongDescription": "<code>number</code> değerinin hiperbolik tanjantını döndürür.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Belirtilen sayıyı metne dönüştürür.",
        "Documentation.LongDescription": "<code>number</code> sayısal değerini <code>format</code> ile belirtilen biçime göre bir metin değerine döndürür.<br>\r\n    <br>\r\n    Biçim, sayının nasıl dönüştürülmesi gerektiğini gösteren bir metin değeridir. Desteklenen biçim değerleri hakkında daha fazla ayrıntı için https://go.microsoft.com/fwlink/?linkid=2241210 ve https://go.microsoft.com/fwlink/?linkid=2240884 sayfalarına gidin.<br>\r\n    <br>\r\n   <code>format</code> değerinin kültüre bağlı davranışını kontrol etmek için isteğe bağlı bir <code>culture</code> (örneğin, “tr-TR”) sağlanabilir.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Bir sayıyı biçim belirtmeden metne dönüştürün.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Bir sayıyı üstel biçime dönüştürün.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Bir sayıyı yalnızca bir ondalık basamaklı yüzdeye dönüştürün.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Bir OData hizmeti tarafından sunulan OData akışlarının bir tablosunu döndürür.",
        "Documentation.LongDescription": "<code>serviceUri</code> uri'sinden, <code>headers</code> üst bilgilerinden bir OData hizmeti tarafından sunulan OData akışlarının bir tablosunu döndürür. Eşzamanlı bağlantıların mı yoksa isteğe bağlı bir kayıt parametresi olan <code>options</code> parametresinin mi kullanılacağını belirten bir boole değeri, aşağıdaki seçenekleri kontrol etmek için belirtilebilir:\r\n    <ul>\r\n    <li><code>Sorgu</code>: Kaçma konusunda endişelenmenize gerek kalmadan URL'ye programlı olarak sorgu parametreleri ekleyin. </li>\r\n    <li> <code>Üst bilgiler</code> : Bu değerin bir kayıt olarak belirtilmesi, bir HTTP isteğine ek üst bilgiler sağlayacaktır.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Bu değerin bir liste olarak belirtilmesi, bu HTTP üst bilgi anahtarlarının verileri önbelleğe alma hesaplamasının bir parçası olmasını engeller.</li>\r\n    <li> <code>ApiKeyName</code> : Hedef sitenin bir API anahtarı kavramı varsa, bu parametre URL'de kullanılması gereken anahtar parametresinin adını (değerini değil) belirtmek için kullanılabilir. Gerçek anahtar değeri, kimlik bilgisinde sağlanır.</li>\r\n    <li> <code>Zaman aşımı</code> : Bu değerin bir süre olarak belirtilmesi, bir HTTP isteğinin zaman aşımını değiştirir. Varsayılan değer 600 saniyedir.</li>\r\n    <li> <code>EnableBatch</code> : MaxUriLength aşılırsa (varsayılan false’tur) bir OData $batch isteğinin oluşturulmasına izin verilip verilmeyeceğini ayarlayan bir mantıksal (true/false).</li>\r\n    <li> <code>MaxUriLength</code> : Bir OData hizmetine gönderilen izin verilen bir URI'nin maksimum uzunluğunu gösteren bir sayı. Aşılırsa ve EnableBatch true ise, istek bir OData $batch uç noktasına yapılır, aksi takdirde başarısız olur (varsayılan 2048'dir).</li>\r\n    <li> <code>Eşzamanlı</code> : True olarak ayarlandığında mantıksal (true/false), hizmete yönelik istekler eşzamanlı olarak yapılır. False olarak ayarlandığında, istekler sırayla yapılacaktır. Belirtilmediğinde değer, hizmetin AsynchronousRequestsSupported ek açıklaması tarafından belirlenir. Hizmet, AsynchronousRequestsSupported'ın desteklenip desteklenmediğini belirtmezse, istekler sırayla yapılır.</li>\r\n    <li> <code>ODataVersion</code> : Bu OData hizmeti için kullanılacak OData protokolü sürümünü belirten bir sayı (3 veya 4). Belirtilmediğinde, desteklenen tüm sürümler istenecektir. Hizmet sürümü, hizmet tarafından döndürülen OData-Version üst bilgisi tarafından belirlenir.</li>\r\n    <li> <code>FunctionOverloads</code> : True olarak ayarlandığında mantıksal (true/false), işlev içe aktarma aşırı yüklemeleri gezginde ayrı girişler olarak listelenir, false olarak ayarlandığında işlev içe aktarma aşırı yüklemeleri gezginde birleşim işlevi olarak listelenecektir. V3 için varsayılan değer: false. V4 için varsayılan değer: true.</li>\r\n    <li> <code>MoreColumns</code> : True olarak ayarlandığında mantıksal (true/false), açık türleri ve polimorfik türleri içeren her varlık akışına bir \"Daha Fazla Sütun\" sütunu ekler. Bu, temel tipte bildirilmeyen alanları içerecektir. False olduğunda, bu alan mevcut değildir. Varsayılan olarak false olur.</li>    \r\n    <li> <code>IncludeAnnotations</code> : Joker karakter olarak \"*\" ile dahil edilecek ad alanı nitelikli terim adlarının veya kalıplarının virgülle ayrılmış listesi. Varsayılan olarak, ek açıklamaların hiçbiri dahil edilmez.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : Bir joker karakter olarak \"*\" ile meta veri belgesi isteklerine dahil edilecek ad alanı nitelikli terim adlarının veya kalıplarının virgülle ayrılmış listesi. Varsayılan olarak, IncludeAnnotations ile aynı ek açıklamaları içerir.</li> \r\n    <li> <code>OmitValues</code> : OData hizmetinin yanıtlarda belirli değerleri yazmaktan kaçınmasına izin verir. Hizmet tarafından onaylanırsa, bu değerleri atlanan alanlardan çıkaracağız. Seçenekler şunları içerir:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : OData hizmetinin null değerleri atlamasına izin verir.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Uygulama</code> : Kullanılacak OData bağlayıcısının uygulamasını belirtir. Geçerli değerler \"2.0\" veya null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "TripPin OData hizmetine bağlan.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Bir ODBC sürücüsü için SQL yeteneklerini çıkarsama denemesinin sonucunu döndürür.",
        "Documentation.LongDescription": "<code>connectionString</code> dizesiyle ODBC kullanarak SQL yeteneklerini çıkarsama denemesinin sonucunu döndürür. <code>connectionString</code> metin veya özellik değeri çiftlerinin kaydı olabilir. Özellik değerleri metin veya sayı olabilir.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Bağlantı dizesi için çıkarsanan SQL özelliklerini döndürün.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Parquet belgesinin içeriğini tablo olarak döndürür.",
        "Documentation.LongDescription": "Parquet belgesinin içeriklerini tablo olarak döndürür. Seçenekler şunlardır:\n    <ul>\n    <li> <code>TypeMapping</code> : Dosyaları okurken ve yazarken varsayılan tür eşlemesini denetleyen bir metin değeri. Varsayılan değer null'dur ve özgün türe mümkün olduğunca uygun bir şekilde korumaya çalışır. \"Sql\" değeri, Sql Server ile en uyumlu sonuçları üretir.</li>\n    </ul>",
        "Documentation.Category": "Verilere erişme",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Verilere erişme",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Verilen değerden bir yüzde değeri döndürür.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>percentage</code> değeri döndürür. Verilen <code>value</code> <code>null</code> olduğunda <code>Percentage.From</code> <code>null</code> döndürür. Verilen <code>value</code> sonunda yüzde sembolü bulunan <code>text</code> olduğunda dönüştürülen ondalık sayı döndürülür. Aksi takdirde, değer <code>Number.From</code> kullanılarak bir <code>number</code> değerine dönüştürülür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (örneğin, \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"12.3%\"</code> <code>percentage</code> değerini al.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "RData dosyasından veri çerçevelerine ilişkin bir kayıt döndürür.",
        "Documentation.LongDescription": "RData dosyasından veri çerçevelerine ilişkin bir kayıt döndürür.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Verilen listedeki kayıtları birleştirir.",
        "Documentation.LongDescription": "Verilen <code>records</code> içindeki kayıtları birleştirir. <code>records</code> kayıt olmayan değerler içeriyorsa hata döndürülür.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kayıtlardan birleşik bir kayıt oluşturur.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Kayıttaki alan sayısını döndürür.",
        "Documentation.LongDescription": "<code>record</code> kaydındaki alan sayısını döndürür.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki alan sayısını bulur.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Alanların adlarını döndürür.",
        "Documentation.LongDescription": "<code>record</code> kaydındaki alanların adını metin olarak döndürür.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki alanların adlarını bulur.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Alan değerlerinin listesini döndürür.",
        "Documentation.LongDescription": "<code>record</code> kaydındaki alan değerlerinin listesini döndürür.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kayıttaki alan değerlerini bulur.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "{[Name = name, Value = value]} biçimindeki bir tablodan kayıt oluşturur.",
        "Documentation.LongDescription": "<code>table</code> kayıt tablosundan alan ve değer adlarını içeren bir kaydı döndürür <code>{[Name = name, Value = value]}</code>. Alan adları benzersiz değilse, özel durum oluşur.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}) form tablosundan bir kayıt oluşturur.",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Girdi kaydının alan değerlerini içeren bir değer listesi döndürür.",
        "Documentation.LongDescription": "<code>record</code> girdisinden alan değerlerini içeren bir değer listesi döndürür.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Bir kayıttaki alan değerlerini ayıklar.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Satır ifadesinde sütuna erişimi temsil eden bir soyut söz dizimi ağacı (AST) döndürür.",
        "Documentation.LongDescription": "Satır ifadesinde satırın <code>columnName</code> sütununa erişimi temsil eden bir soyut söz dizimi ağacını (AST) döndürür.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "\"CustomerName\" sütununa yönelik erişimi temsil eden bir AST oluşturur.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "İşlevin gövdesi için soyut söz dizimi ağacını (AST) döndürür.",
        "Documentation.LongDescription": "<p><code>function</code> gövdesine ilişkin <i>satır ifadesinde</i> normalleştirilmiş soyut söz dizimi ağacını (AST) döndürür:\r\n<ul>\r\n  <li>İşlevin 1 bağımsız değişkenli lambda olması gerekir.</li>\r\n  <li>İşlev parametresine yönelik tüm başvurular <code>RowExpression.Row</code> ile değiştirilir.</li>\r\n  <li>Sütunlara yönelik tüm başvurular <code>RowExpression.Column(<i>columnName</i>)</code> ile değiştirilir.</li>\r\n  <li>AST, yalnızca şu tip düğümleri içerecek şekilde basitleştirilir:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> gövdesi için satır ifadesi AST'sinin döndürülemediği durumlarda hata oluşur.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "<code>each [CustomerID] = \"ALFKI\"</code> işlev gövdesine ilişkin AST'yi döndürür",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Verilen değerden Tek değer oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden Single <code>number</code> değerini döndürür. Verilen <code>value</code> değeri <code>null</code> olduğunda <code>Single.From</code> <code>null</code> döndürür. Verilen <code>value</code> değeri Single aralığında <code>number</code> olduğunda <code>value</code> döndürülür; aksi takdirde hata döndürülür. Verilen <code>value</code> değeri başka bir türde olduğunda, önce <code>Number.FromText</code> kullanılarak <code>number</code> değerine dönüştürülür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (örneğin \"tr-TR\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.5\"</code> değerinin Tek <code>number</code> değerini verir.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Smartsheet dizin uç noktasına ilişkin verilerin yer aldığı bir tablo döndürür.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Belirtilen uç noktadan Smartsheet 2.0 REST API'sine çağrıda bulunur ve bir tabloya döndürülen veri öğesini dönüştürür.",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet API'sinden kullanıcılarla ilgili bilgilerin yer aldığı bir tablo çeker",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Smartsheet API'si tarafından döndürülen şekilde, kullanıcılarla ilgili bilgilerin yer aldığı bir tablo"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Bir metin listesine belirtilen sınırlayıcılardan birini kullanarak metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine belirtilen sınırlayıcılardan birini kullanarak metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tırnak işaretleri ve alıntı sınırlayıcıları yok sayarak ve girişin başından başlayarak girişi virgül veya noktalı virgülle bölün.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Tırnak işaretleri ve alıntı sınırlayıcıları yok sayarak ve girişin sonundan başlayarak girişi virgül veya noktalı virgülle bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Bir metin listesine belirtilen sınırlayıcıya göre metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine belirtilen sınırlayıcıya göre metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Tırnak işaretli virgülleri yok sayarak girişi virgülle bölün.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Bir metin listesine sırada belirtilen her sınırlayıcıda metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine sırada belirtilen her sınırlayıcıda metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Girişi virgülle, ardından girişin başından başlayarak noktalı virgülle bölün.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Girişi virgülle, ardından noktalı virgülle, tırnak işaretlerini diğer herhangi bir karakter gibi ele alarak ve girişin sonundan başlayarak bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Bir metin listesine belirtilen her uzunlukta metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine belirtilen her uzunlukta metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Girişi, girişin başlangıcından başlayarak ilk iki karaktere ve ardından sonraki üç karaktere bölün.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Girişin sonundan başlayarak girişi ilk üç karaktere ve ardından sonraki iki karaktere bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Bir metin listesine belirtilen her konumda metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine belirtilen her konumda metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Girişin başlangıcından başlayarak girişi belirtilen pozisyonlarda bölün.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Girişin sonundan başlayarak girişi belirtilen pozisyonlarda bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Bir metin listesine belirtilen uzaklığa göre metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Metni belirtilen uzaklıklara ve uzunluklara göre bölerek metin listesi oluşturan bir işlev döndürür. Uzunluk değerinin null olarak belirlenmesi, girişin kalan kısmının çıktı değerine dahil edilmesi gerektiğini belirtir.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Girişin başlangıcından başlayarak girişi belirtilen pozisyon ve uzunluk çiftlerine bölün. Bu örnekteki aralıkların çakıştığını unutmayın.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Girişin sonundan başlayarak girişi belirtilen pozisyon ve uzunluk çiftlerine bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Girişi, sabit uzunlukta bir posta kodundan ve onu takip eden, değişken uzunlukta bir şehir adından oluşacak şekilde bölün.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Bir metin listesine belirtilen uzunluktan sonra metin ayıran bir işlev döndürür.",
        "Documentation.LongDescription": "Bir metin listesine belirtilen uzunluktan sonra metin ayıran bir işlev döndürür.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Girişin başlangıcından başlayarak girişi tekrar tekrar üç karakterlik parçalara bölün.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Girişin sonundan başlayarak girişi tekrar tekrar üç karakterlik parçalara bölün.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Tablodaki yaklaşık satır sayısını geri gönderir.",
        "Documentation.LongDescription": "<code>table</code> içindeki yaklaşık satır sayısını veya veri kaynağı yaklaşıklığı desteklemiyorsa bir hata döndürür.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Sütunlar için kardinalite tahmini olarak kullanılabilecek büyük bir tabloda farklı şehir ve eyalet kombinasyonlarının sayısını tahmin edin. Kardinalite tahminleri, çeşitli veri kaynaklarının (SQL Server gibi) genellikle HyperLogLog adlı bir algoritma kullanarak bu belirli yaklaşımı desteklemesi için yeterince önemlidir.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Tablodaki sütun sayısını döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosundaki sütun sayısını döndürür.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki sütun sayısını bulur.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Sütun adlarını liste olarak döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosundaki sütun adlarını metin listesi olarak döndürür.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki sütun adlarını bulur.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "İlk satırı veya belirtilen varsayılan değeri döndürür.",
        "Documentation.LongDescription": "<code>table</code> öğesinin ilk satırını veya tablo boşsa <code>default</code> isteğe bağlı varsayılan değerini döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun ilk satırını bulur.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "<code>({})</code> tablosunun ilk satırını bulur veya boşsa [a = 0, b = 0] döndürür.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Tablonun ilk satırının ilk sütununu veya belirtilen varsayılan bir değeri döndürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunun ilk satırının ilk sütununu veya belirtilen bir varsayılan değeri döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Tabloda yalnızca ayrı satırların bulunup bulunmadığını (yinelenen satır olmadığını) gösterir.",
        "Documentation.LongDescription": "<code>table</code> içinde yalnızca ayrı satırların bulunup bulunmadığını (yinelenen satır olmadığını) gösterir. Satırların tümü ayrıysa <code>true</code> döndürür, ayrı değilse <code>false</code> döndürür.\r\n    İsteğe bağlı <code>comparisonCriteria</code> parametresi, tablodaki hangi sütunların yineleme için test edildiğini belirtir. <code>comparisonCriteria</code> belirtilmediği takdirde tüm sütunlar test edilir.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tablonun benzersiz olup olmadığını belirler.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Tablonun sütunlar açısından benzersiz olup olmadığını belirler.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Tabloda herhangi bir satır bulunup bulunmadığını gösterir.",
        "Documentation.LongDescription": "<code>table</code> içinde herhangi bir satır bulunup bulunmadığını gösterir. Hiç satır olmaması halinde (örneğin, tablo boşsa) <code>true</code> döndürür, satır varsa <code>false</code> döndürür.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Tablonun boş olup olmadığını belirler.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({})</code> tablosunun boş olup olmadığını belirler.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Belirtilen tablonun anahtarlarını döndürür.",
        "Documentation.LongDescription": "Belirtilen tablonun anahtarlarını döndürür.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Bir tablonun anahtarlarının listesini alın.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Son satırı veya belirtilen varsayılan değeri döndürür.",
        "Documentation.LongDescription": "<code>table</code> öğesinin son satırını veya tablo boşsa <code>default</code> isteğe bağlı varsayılan değerini döndürür.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablonun son satırını bulur.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "<code>({})</code> tablosunun son satırını bulur veya boşsa [a = 0, b = 0] döndürür.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Tablodaki satır sayısını döndürür.",
        "Documentation.LongDescription": "<code>table</code> içindeki satır sayısını döndürür.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki satır sayısını bulur.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Tablodaki tek bir satırı döndürür.",
        "Documentation.LongDescription": "<code>table</code> satırındaki tek bir satırı döndürür. <code>table</code> birden fazla satır içeriyorsa, özel durum oluşur.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Tablodaki tek satırı döndürür.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Bir tablodan sütun değerlerine yönelik iç içe yerleştirilmiş tablo listesi oluşturur.",
        "Documentation.LongDescription": "<code>table</code> tablosundan iç içe yerleştirilmiş tablo listesi oluşturur.  Her liste öğesi, sütun değerlerini içeren bir iç listedir.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tabloda yer alan sütun değerlerinin bir listesini oluşturur.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Bir tabloyu belirtilen ayırma işlevini tablodaki her değer satırına uygulayarak bir listeye dönüştürür.",
        "Documentation.LongDescription": "Bir tabloyu belirtilen ayırma işlevini tablodaki her değer satırına uygulayarak bir listeye dönüştürür.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Her bir satır metnini virgül ile birleştirin.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Bir tabloyu kayıt listesine dönüştürür.",
        "Documentation.LongDescription": "<code>table</code> tablosunu kayıt listesine dönüştürür.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tabloyu kayıt listesine dönüştürür.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Bir tablodan satır değerlerine yönelik iç içe yerleştirilmiş tablo listesi oluşturur.",
        "Documentation.LongDescription": "<code>table</code> tablosundan iç içe yerleştirilmiş tablo listesi oluşturur.  Her liste öğesi, satır değerlerini içeren bir iç listedir.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Tabloda yer alan satır değerlerinin bir listesini oluşturur.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Görünümde (Table.View aracılığıyla) tanımlanan bir işleyici tarafından oluşturulduğunda geri dönüşü tetiklemeyen değiştirilmiş bir hata kaydı oluşturur.",
        "Documentation.LongDescription": "Görünümde (Table.View aracılığıyla) tanımlanan bir işleyici tarafından oluşturulduğunda <code>errorRecord</code> kaynağından geri dönüşü tetiklemeyen değiştirilmiş bir hata kaydı oluşturur.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Bir görünümde Table.View aracılığıyla tanımlanan bir işleç tarafından kesilebilecek bir işlev oluşturur.",
        "Documentation.LongDescription": "<p><code>Table.View</code> tarafından oluşturulan bir görünümde işlenebilen <code>function</code> temelli bir görünüm işlevi oluşturur.</p>\r\n Bir <p><code>Table.View</code> işleyicisi olan <code>OnInvoke</code> kullanılarak görünüm işlevi için bir işleyici tanımlanabilir.</p>\r\n<p>Yerleşik işlemlere yönelik işleyicilerde olduğu gibi, <code>OnInvoke</code> işleyicisi belirtilmezse veya belirtilen işleyici tarafından görünüm işlevi işlenmezse ya da işleyici tarafından bir hata oluşturulursa görünümün üzerine <code>function</code> uygulanır.</p>\r\n<p><code>Table.View</code> ve özel görünüm işlevlerinin daha kapsamlı bir açıklaması için yayımlanmış Power Query özel bağlayıcı belgelerini gözden geçirin.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Metin değerini tüm denetim karakterleri kaldırılmış şekilde döndürür.",
        "Documentation.LongDescription": "Metin değerini tüm <code>text</code> denetim karakterleri kaldırılmış şekilde döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Bir metin değerinden satır besleme ve diğer denetim karakterlerini kaldırın.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Bir metin değeri listesini tek bir metin değerine birleştirir.",
        "Documentation.LongDescription": "<code>texts</code> metin değerleri listesini tek bir metin değeri olarak birleştirmenin sonucunu döndürür. <code>texts</code> içindeki tüm <code>null</code> değerleri yoksayılır.\r\n    Birleştirilmiş son metinde kullanılan isteğe bağlı bir <code>separator</code> belirtilebilir.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Seattle\" ve \"WA\" metin değerlerini birleştirir.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "\"Seattle\" ve \"WA\" metin değerlerini virgül ve boşluk ile ayrılmış şekilde birleştirir.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "\"Seattle\", <code>null</code> ve \"WA\" değerlerini virgül ve boşluk ile ayrılmış şekilde birleştirin. (<code>null</code> değerinin yoksayıldığına dikkat edin.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Verilen değerden bir metin değeri oluşturur.",
        "Documentation.LongDescription": "<code>value</code> değerinin metin gösterimini döndürür. <code>value</code> bir <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> veya <code>binary</code> olabilir.\r\n    Verilen değer null ise <code>Text.From</code> null döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "3 sayısından metin değeri oluşturur.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Bir ikili biçimindeki verilerin kodunu metin olarak çözer.",
        "Documentation.LongDescription": "<code>encoding</code> türünü kullanarak bir ikili değerinden <code>binary</code> verisinin kodunu metin değeri olarak çözer.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Metinde kodlanmış bir sayının ayrıntılı sayı türünü (Int64.Type, Double.Type, vb.) çıkarsar.",
        "Documentation.LongDescription": "<code>text</code> değerinin ayrıntılı sayı türünü (Int64.Type, Double.Type vb.) çıkarsar. <code>text</code> bir sayı değilse hata oluşturur. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Karakterlerin sayısını döndürür.",
        "Documentation.LongDescription": "<code>text</code> metnindeki karakter sayısını verir.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" metninde kaç karakterin olduğunu bulur.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Tüm karakterleri küçük harfe çevirir.",
        "Documentation.LongDescription": "<code>text</code> içindeki tüm karakterlerin küçük harfe dönüştürülmesinin sonucu döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör \"tr-TR\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"AbCd\" ifadesinin küçük harfli sürümünü alır.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Her sözcüğün ilk harfini büyük yapar.",
        "Documentation.LongDescription": "<code>text</code> metin değerindeki her sözcüğün yalnızca ilk harfini büyük yapmanın sonucunu döndürür. Tüm diğer harfler küçük harfe döndürülür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Basit bir tümce üzerinde <code>Text.Proper</code> kullanır.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Sağlanan <code>text</code> değerini tersine çevirir.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"123\" metnini tersine çevirir.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Metnin kodunu ikili biçimi olarak çözer.",
        "Documentation.LongDescription": "Verilen <code>text</code> metin değerinin kodunu belirtilen <code>encoding</code> öğesini kullanarak ikili değer olarak çözer.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Verilen metin değerinden bir karakter değerleri listesi döndürür.",
        "Documentation.LongDescription": "<code>text</code> verilen metin değerinden bir karakter değerleri listesi döndürür.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "\"Hello World\" metninden bir karakter değerleri listesi oluşturur.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Tüm öndeki ve sondaki boşlukları kaldırır.",
        "Documentation.LongDescription": "<code>text</code> metin değerinden tüm öndeki ve sonraki boşlukları kaldırmanın sonucunu döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" ifadesinden öndeki ve sondaki boşlukları kaldırır.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Tüm sonraki boşlukları kaldırır.",
        "Documentation.LongDescription": "<code>text</code> metin değerinden tüm sonraki boşlukları kaldırmanın sonucunu döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" ifadesinden sondaki boşlukları kaldırır.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Tüm öndeki boşlukları kaldırır.",
        "Documentation.LongDescription": "<code>text</code> metin değerinden tüm öndeki boşlukları kaldırmanın sonucunu döndürür.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" ifadesinden öndeki boşlukları kaldırır.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Tüm karakterleri büyük harfe çevirir.",
        "Documentation.LongDescription": "<code>text</code> içindeki tüm karakterlerin büyük harfe dönüştürülmesinin sonucu döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"aBcD\" ifadesinin büyük harfli sürümünü alır.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Saat sonunu döndürür.",
        "Documentation.LongDescription": "Kesirlik saniyeler dahil olmak üzere <code>dateTime</code> tarafından temsil edilen saat sonunu döndürür. Saat dilimi bilgileri korunur.\r\n      <ul>\r\n        <li><code>dateTime</code>: Kendisinden itibaren saatin sonunun hesaplandığı <code>time</code>, <code>datetime</code> veya <code>datetimezone</code> değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "14.05.2011 17:00:00 için saatin sonunu alır.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "17.05.2011 17:00:00 -7:00 için saatin sonunu alır.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Verilen değerden saat oluşturur.",
        "Documentation.LongDescription": "Verilen <code>value</code> değerinden bir <code>time</code> değeri döndürür. Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").\r\nVerilen <code>value</code> <code>null</code> olduğunda <code>Time.From</code> <code>null</code> döndürür. Verilen <code>value</code> <code>time</code> olduğunda <code>value</code> döndürülür. Aşağıdaki türlerde olan değerler bir <code>time</code> değerine dönüştürülebilir:\r\n      <ul>\r\n        <li><code>text</code>: Metin gösteriminden bir <code>time</code> değeri. Ayrıntılar için bkz. <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> değerinin saat bileşeni.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> değerinin yerel tarih saat eşdeğerinin saat bileşeni.</li>\r\n        <li><code>number</code>: <code>value</code> ile ifade edilen tam ve kesirli günlere eşdeğer bir <code>time</code>. <code>value</code> negatifse veya 1'den büyük ya da 1'e eşitse hata döndürülür.</li>\r\n      </ul>\r\n<code>value</code> başka bir türde olduğunda hata döndürülür.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>0.7575</code> değerini bir <code>time</code> değerine dönüştürür.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> değerini bir <code>time</code> değerine dönüştürür.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Yerel ve evrenselden Saat ve özel Saat biçimleri oluşturur.",
        "Documentation.LongDescription": "Bir metin gösteriminden <code>text</code> <code>time</code> değeri oluşturur. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi <code>options</code> sağlanabilir. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, zamanın mümkün olan en uygun şekilde ayrıştırılmasıyla sonuçlanır.</li>\r\n   <li><code>Culture</code>:<code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"en-US\"</code> için <code>\"tt\"</code> <code>\"AM\" veya \"PM\"</code> iken <code>\"ar-EG\"</code> için <code>\"tt\"</code> <code>\"ص\" veya \"م\"</code> olur. <code>Format</code> <code>null</code> olduğunda kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> metin değeri de olabilir. Bunun davranışı <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> ile aynıdır.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>\"10:12:31am\"</code> değerini bir Saat değerine dönüştürür.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "<code>\"1012\"</code> değerini bir Saat değerine dönüştürür.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "<code>\"10\"</code> değerini bir Saat değerine dönüştürür.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Saat bileşenini döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>time</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olan <code>dateTime</code> değerinin saat bileşenini döndürür.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) içindeki saati bulur.",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Dakika bileşenini döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>time</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olan <code>dateTime</code> değerinin dakika bileşenini döndürür.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) içindeki dakikayı bulur.",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Saniye bileşenini döndürür.",
        "Documentation.LongDescription": "Sağlanan <code>time</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olan <code>dateTime</code> değerinin saniye bileşenini döndürür.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Bir tarih saat değerinden ikinci değeri bulur.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Saat başlangıcını döndürür.",
        "Documentation.LongDescription": "<code>dateTime</code> tarafından temsil edilen saat başlangıcını döndürür.\r\n    <code>dateTime</code>, bir <code>time</code>, <code>datetime</code> veya <code>datetimezone</code> değeri olmalıdır.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 Ekim 2011, 08:10:32 için saatin başlangıcını bulun.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Saat değerinin parçalarını içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "Verilen <code>time</code> Saat değerinin parçalarını içeren bir kayıt döndürür.\r\n <ul>\r\n        <li><code>time</code>: Parçalarının kaydının hesaplanacağı bir <code>time</code>değeri.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(11, 56, 2)</code> değerini Saat değerlerini içeren bir kayda dönüştürür.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Saat değerinin metinsel gösterimini döndürür.",
        "Documentation.LongDescription": "<code>time</code> öğesinin metin gösterimini döndürür. Ek özellikleri belirtmek için isteğe bağlı bir <code>record</code> parametresi <code>options</code> sağlanabilir. <code>culture</code> yalnızca eski iş akışları için kullanılır. <code>Record</code> şu alanları içerebilir:\r\n<ul>\r\n   <li><code>Format</code>: Kullanılacak biçimi gösteren <code>text</code> değeri. Diğer ayrıntılar için https://go.microsoft.com/fwlink/?linkid=2180104 ve https://go.microsoft.com/fwlink/?linkid=2180105 adreslerine gidin. Bu alanın atlanması veya <code>null</code> sağlanması, tarihin <code>Culture</code> tarafından tanımlanan varsayılan kullanılarak biçimlendirilmesiyle sonuçlanır.</li>\r\n   <li><code>Culture</code>: <code>Format</code> null olmadığında <code>Culture</code> bazı biçim tanımlayıcılarını denetler. Örneğin, <code>\"en-US\"</code> için <code>\"tt\"</code> <code>\"AM\" veya \"PM\"</code> iken <code>\"ar-EG\"</code> için <code>\"tt\"</code> <code>\"ص\" veya \"م\"</code> olur. <code>Format</code> <code>null</code> olduğunda, kullanılacak varsayılan biçimi <code>Culture</code> denetler. <code>Culture</code> <code>null</code> olduğunda veya atlandığında <code>Culture.Current</code> kullanılır.</li>\r\n</ul>\r\nEski iş akışlarını desteklemek için <code>options</code> ve <code>culture</code> metin değerleri de olabilir. Bunun davranışı <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> ile aynıdır.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(01, 30, 25)</code> değerini <code>metin</code> değerine dönüştürün. <i>Sonuç çıkışı geçerli kültüre bağlı olarak değişebilir.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Özel bir biçim ve Alman kültürü kullanarak dönüştürün.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Standart saat biçimini kullanarak dönüştürün.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Verilen kayıt türünün kapalı bir sürümünü (veya zaten kapalıysa aynı türü) döndürür.",
        "Documentation.LongDescription": "Verilen <code>record</code> <code>type</code> türünün kapalı bir sürümünü (veya zaten kapalıysa aynı) türü döndürür).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number]</code> için kapalı bir sürüm oluşturun.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Bir türe ilişkin modelleri döndürür.",
        "Documentation.LongDescription": "<code>type</code> modellerinin bulunduğu bir kayıt döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Bir işlev türünün parametrelerinin adına ayarlanan alan değerleriyle ve bunların karşılık gelen türlerine ayarlanan değerleriyle bir kayıt döndürür.",
        "Documentation.LongDescription": "<code>type</code> parametrelerinin adına ayarlanan alan değerleriyle ve bunların karşılık gelen türlerine ayarlanan değerleriyle bir kayıt döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, y as text)</code> işlevi için parametre türlerini bulun.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "İşlev türünü çalıştırılabilmesi için gereken minimum parametre sayısını belirten bir sayı döndürür.",
        "Documentation.LongDescription": "İşlevin <code>type</code> girişinin çalıştırılabilmesi için gereken minimum parametre sayısını belirten bir sayı döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, optional y as text)</code> işlevi için gerekli parametre sayısını bulun.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Bir işlev türü tarafından döndürülen bir türü döndürür.",
        "Documentation.LongDescription": "Bir <code>type</code> işlevi tarafından döndürülen bir türü döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>() as any)</code> döndürme türünü bulun.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Bir tür boş değer atanabilir türde ise true değerini döndürür; aksi takdirde false değerini döndürür.",
        "Documentation.LongDescription": "Bir tür <code>nullable</code> tipinde ise <code>true</code> değerini döndürür; aksi takdirde <code>false</code> değerini döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>number</code> değerinin boş değer atanabilir türde olup olmadığını belirleyin.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "<code>type nullable number</code> değerinin boş değer atanabilir türde olup olmadığını belirleyin.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Bir kayıt türünün açık olup olmadığını döndürür.",
        "Documentation.LongDescription": "Bir <code>type</code> kaydının açık olup olmadığı belirten bir <code>logical</code> değeri döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Kaydın <code>type [ A = number, ...]</code> açık olup olmadığı belirlenir.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Bir liste türünden öğe türü döndürür.",
        "Documentation.LongDescription": "Bir <code>type</code> listesinden bir öğe türü döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Liste <code>{number}</code> içinden öğe türünü bulun.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Bir türden boş değer atanabilir olmayan türü döndürür.",
        "Documentation.LongDescription": "<code>type</code> kaynağından <code>nullable</code> olmayan türü döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type nullable number</code> için boş değer atanabilir olmayan türü döndürür.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Verilen kayıt türünün açık bir sürümünü (veya zaten açıksa aynı türü) döndürür.",
        "Documentation.LongDescription": "Verilen <code>record</code> <code>type</code> türünün açık bir sürümünü (veya zaten açıksa aynı türü) döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number]</code> için açık bir sürüm oluşturun.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Karşılık gelen bir ada ve değere sahip döndürülen kayıt türünün her alanıyla kayıt türünün alanlarını açıklayan bir kayıt döndürür.",
        "Documentation.LongDescription": "Bir <code>type</code> kaydının alanlarını açıklayan bir kayıt döndürür. Döndürülen kayıt türünün her alanı, <code>[ Type = type, Optional = logical ]</code> kaydı türünde bir ada ve değere sahiptir.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Kaydın adını ve değerini bulun <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Verilen tablo türü için boş olması muhtemel anahtar listesini döndürür.",
        "Documentation.LongDescription": "Verilen tablo türü için boş olması muhtemel anahtar listesini döndürür.<br>\r\n    <br>\r\n    Her anahtar aşağıdaki formda bir kayıt kullanılarak tanımlanır:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: \ranahtar adını tanımlayan sütun adlarının listesi\n      </li>\r\n      <li>\r\n        Anahtar tablonun birincil anahtarı ise, <code>Primary</code>: <code>true</code>; aksi halde, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tablo türü için anahtar bilgilerini döndür.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Tablo türündeki satır türünü döndürür.",
        "Documentation.LongDescription": "Belirtilen tablo türündeki satır türünü döndürür. Sonuç her zaman bir kayıt türü olur.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Basit bir tablo için satır türü bilgilerini döndürün.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Türlerin bir listesinin birleşimini döndürür.",
        "Documentation.LongDescription": "<code>types</code> içindeki türlerin birleşimini döndürür.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Bir kaydı bir URI sorgu dizesinde derleyin.",
        "Documentation.LongDescription": "<code>query</code> kaydını bir URI sorgu dizesinde derleyin ve gerekirse karakterleri atlayın.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Özel karakterler içeren bir sorgu dizesini kodlayın.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Özel karakterleri RFC 3986 kurallarına göre kodlar.",
        "Documentation.LongDescription": "<code>data</code> girişindeki özel karakterleri RFC 3986 kurallarına göre kodlar.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "\"+money$\" içindeki özel karakterleri kodlayın.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Girdi tam URI'sinin bölümlerini kayıt olarak döndürür.",
        "Documentation.LongDescription": "<code>absoluteUri</code> girdisinin bölümlerini Scheme, Host, Port, Path, Query, Fragment, UserName ve Password gibi değerler içeren bir kayıt olarak döndürür.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "\"www.adventure-works.com\" tam URI'sinin bölümlerini bulur.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Yüzde olarak kodlanmış bir dizeyi çözün.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics Hizmetinizin Url'sini girin.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps Analytics Hizmeti URL'sinden indirilen içeriği ikili değer olarak döndürür. Bu işlev, farklı kuruluşlar için farklı kimlik bilgileri kullanır."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Analytics Hizmetinizin Url'sini girin.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Azure DevOps Analytics Hizmeti URL'sinden indirilen içeriği ikili değer olarak döndürür. Bu işlev, erişilebilen tüm kuruluşlar için aynı genel kimlik bilgilerini kullanır."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Alternatif sorgu planlarını ifade eder.",
        "Documentation.LongDescription": "Value.Expression(Value.Optimize(...)) aracılığıyla edinilen bir sorgu planı ifadesi içindeki alternatif sorgu planlarını ifade eder. Diğer kullanımlar için tasarlanmamıştır.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Değerin ifadesini temsil eden bir soyut söz dizimi ağacını (AST) döndürür.",
        "Documentation.LongDescription": "Değerin ifadesini temsil eden bir soyut söz dizimi ağacını (AST) döndürür",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Bir metinsel gösterimden kesin türü belirtilmiş bir değer oluşturur.",
        "Documentation.LongDescription": "Metinsel gösterimdeki (<code>text</code>) bir değerin kodunu çözer ve uygun türe sahip bir değer olarak yorumlar.\r\n    <code>Value.FromText</code> bir metin değeri alır ve sayı, mantıksal değer, null değeri, tarih saat değeri, süre değeri veya metin değeri döndürür. Boş metin değeri null değeri olarak değerlendirilir.\r\n    Ayrıca, isteğe bağlı bir <code>culture</code> sağlanabilir (ör. \"tr-TR\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Girdinin meta verilerini içeren bir kayıt döndürür.",
        "Documentation.LongDescription": "Girdinin meta verilerini içeren bir kayıt döndürür.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Bir değer için iyileştirilmiş ifadeyi döndürmek üzere Value.Expression'a sinyal gönderir.",
        "Documentation.LongDescription": "Value.Expression içinde kullanıldığında, <code>value</code> iyileştirilebilecek bir sorguyu temsil ediyorsa bu işlev, iyileştirilmiş ifadenin döndürüleceğini belirtir. Aksi takdirde <code>value</code>, hiçbir etki olmadan geçirilir.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Girdideki meta verileri kaldırır.",
        "Documentation.LongDescription": "Girdideki meta verileri kaldırır.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Verilen değerin türünü döndürür.",
        "Documentation.LongDescription": "Verilen değerin türünü döndürür.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.LongDescription": "Bu işlev, yalnızca iç kullanıma yöneliktir.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Bir web tarayıcısı tarafından görüntülendiği şekliyle belirtilen URL için HTML'yi döndürür.",
        "Documentation.LongDescription": "Belirtilen <code>url</code> için bir web tarayıcısı tarafından göründüğü haliyle HTML döndürür. İsteğe bağlı <code>options</code> kayıt parametresi, ek özellikleri belirtmek için sağlanabilir. Kayıt, şu alanları barındırabilir:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Hedef sitede bir API anahtarı gösterimi varsa, bu parametre URL'de kullanılması gereken anahtar parametresinin adını (değerini değil) belirtmek için kullanılabilir. Gerçek anahtar değeri kimlik bilgilerinde sağlanır.</li>\r\n        <li><code>WaitFor</code>: HTML'yi indirmeden önce sayfanın yüklenmesini beklemenin (her zaman yapılır) yanı sıra beklenecek bir koşul belirtir. Bu, Timeout ve/veya Selector alanları barındıran bir kayıt olabilir. Yalnızca Timeout belirtilirse işlev, HTML'yi indirmeden önce belirtilen süre boyunca bekler. Hem Selector hem Timeout belirtilir ve Selector henüz sayfada yokken Timeout süresi geçerse, bir hata oluşur. Timeout olmadan Selector belirtilirse, varsayılan olarak 30 saniyelik bir Timeout uygulanır.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Verilere erişiliyor",
        "Documentation.Examples": [
          {
            "Description": "https://microsoft.com için HTML döndürür.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Bir CSS seçicisinin mevcut olması beklendikten sonra https://microsoft.com için HTML döndürür.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "On saniye bekledikten sonra https://microsoft.com için HTML döndürür.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "On saniyeye kadar bir CSS seçicisinin mevcut olması beklendikten sonra https://microsoft.com için HTML döndürür.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Url'den indirilen içeriği ikili olarak döndürür.",
        "Documentation.LongDescription": "<code>url</code> kaynağından indirilen içerikleri ikili olarak döndürür. Ek özellikler belirtmek için isteğe bağlı bir kayıt parametresi (<code>options</code>) sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>Query</code> : Sorgu parametrelerini, ka&#231;ış uygulama hakkında endişe etmenize gerek kalmadan programlama yoluyla URL&#39;ye ekleyin.</li>\r\n<li><code>ApiKeyName</code> : Hedef sitede bir API anahtarı g&#246;sterimi varsa, bu parametre URL&#39;de kullanılması gereken anahtar parametresinin adını (değerini değil) belirtmek i&#231;in kullanılabilir. Ger&#231;ek anahtar değeri kimlik bilgilerinde sağlanır.</li>\r\n<li><code>Headers</code> : Bu değerin kayıt olarak belirtilmesi, HTTP isteğine ek &#252;st bilgiler sağlar.</li>\r\n<li><code>Timeout</code> : Bu değerin s&#252;re olarak belirtilmesi, HTTP isteğinin zaman aşımı s&#252;resini değiştirir. Varsayılan değer 100 saniyedir.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Bu değerin liste olarak belirtilmesi, bu HTTP &#252;st bilgi anahtarlarını, verileri &#246;nbelleğe alma işleminin kapsamı dışında tutar.</li>\r\n<li><code>IsRetry</code> : Bu mantıksal değerin true olarak belirtilmesi, veriler getirilirken &#246;nbellekteki t&#252;m mevcut yanıtları yoksayar.</li>\r\n<li><code>ManualStatusHandling</code> : Bu değerin liste olarak belirtilmesi, bu durum kodlarından birine sahip yanıtı olan HTTP istekleri i&#231;in t&#252;m yerleşik işlemeyi engeller.</li>\r\n<li><code>RelativePath</code> : Bu değerin metin olarak belirtilmesi, isteği yapmadan &#246;nce değeri temel URL&#39;ye ekler.</li>\r\n<li><code>Content</code> : Bu değerin belirtilmesi, web isteğini GET&#39;ten POST&#39;a değiştirir ve POST&#39;un i&#231;eriği olarak se&#231;eneğin değerini kullanır.</li>\r\n</ul>\r\n\r\n    HTTP isteği GET (İçerik belirtilmediğinde) veya POST (İçerik olduğunda) olarak yapılır. POST istekleri yalnızca anonim olarak yapılabilir.\r\n    <br>\r\n    HTTP yanıtının üst bilgileri ikili sonuç üzerinde meta veri olarak kullanılabilir. Özel veri bağlayıcısı bağlamı dışında yalnızca yanıt üst bilgileri alt kümesi kullanılabilir (güvenlik nedeniyle).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath ve Query seçeneklerini kullanarak <code>\"https://bing.com/search?q=Power+Query\"</code> içeriğini alır. Bu seçenekler, statik temel URL'yi dinamik olarak sorgulamak için kullanılabilir.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "İkili bir JSON yükü geçirip yanıtı JSON olarak ayrıştırarak URL'de bir POST eylemi gerçekleştirin.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Sorgu dizesinin parçası olarak bir kimlik doğrulama anahtarını kabul eden güvenli bir URL'ye bağlanın. M'de gizli anahtarı sabit kodlamak yerine (bu, güvenlik riski oluşturur), \r\n    anahtar, M'de adını (değerini değil) belirterek, Web API’si kimlik doğrulamasını seçerek ve anahtar değerini Web API’si kimlik bilgisinin bir parçası olarak girerek güvenli bir şekilde sağlanabilir.\r\n    Bu şekilde kullanıldığında, aşağıdaki örnek şuna yönelik bir istek oluşturur: <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "URL'den indirilen HTTP üst bilgilerini kayıt değeri olarak döndürür.",
        "Documentation.LongDescription": "<code>url</code> kaynağından indirilen üst bilgileri kayıt olarak döndürür. Ek özellikler belirtmek için isteğe bağlı bir kayıt parametresi (<code>options</code>) sağlanabilir. Kayıt şu alanları içerebilir:\r\n    <ul>\r\n<li><code>Query</code> : Sorgu parametrelerini, ka&#231;ış uygulama hakkında endişe etmenize gerek kalmadan programlama yoluyla URL&#39;ye ekleyin.</li>\r\n<li><code>ApiKeyName</code> : Hedef sitede bir API anahtarı g&#246;sterimi varsa, bu parametre URL&#39;de kullanılması gereken anahtar parametresinin adını (değerini değil) belirtmek i&#231;in kullanılabilir. Ger&#231;ek anahtar değeri kimlik bilgilerinde sağlanır.</li>\r\n<li><code>Headers</code> : Bu değerin kayıt olarak belirtilmesi, HTTP isteğine ek &#252;st bilgiler sağlar.</li>\r\n<li><code>Timeout</code> : Bu değerin s&#252;re olarak belirtilmesi, HTTP isteğinin zaman aşımı s&#252;resini değiştirir. Varsayılan değer 100 saniyedir.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Bu değerin liste olarak belirtilmesi, bu HTTP &#252;st bilgi anahtarlarını, verileri &#246;nbelleğe alma işleminin kapsamı dışında tutar.</li>\r\n<li><code>IsRetry</code> : Bu mantıksal değerin true olarak belirtilmesi, veriler getirilirken &#246;nbellekteki t&#252;m mevcut yanıtları yoksayar.</li>\r\n<li><code>ManualStatusHandling</code> : Bu değerin liste olarak belirtilmesi, bu durum kodlarından birine sahip yanıtı olan HTTP istekleri i&#231;in t&#252;m yerleşik işlemeyi engeller.</li>\r\n<li><code>RelativePath</code> : Bu değerin metin olarak belirtilmesi, isteği yapmadan &#246;nce değeri temel URL&#39;ye ekler.</li>\r\n</ul>\r\n\r\n    HTTP isteği HEAD yöntemiyle yapılır. Özel veri bağlayıcısı bağlamı dışında yalnızca yanıt üst bilgileri alt kümesi kullanılabilir (güvenlik nedeniyle).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath ve Query seçeneklerini kullanarak <code>\"https://bing.com/search?q=Power+Query\"</code> için HTTP üst bilgilerini alın.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Erişim denetim girdisi (ACE) koşulunun değerlendirildiği yetkilendirme bağlamı.",
        "Documentation.LongDescription": "Erişim denetim girdisi (ACE) koşulunun değerlendirildiği yetkilendirme bağlamı.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Erişim denetim girdileri (ACE) tablosu.",
        "Documentation.LongDescription": "Yetkilendirme kurallarını temsil eden, sıralı bir erişim denetim girdileri (ACE) tablosu. Her bir satır sırayla geçerli yetkilendirme bağlamına karşı değerlendirilir ve <code>Condition</code> ifadesinin true döndürdüğü ilk satır hangi kuralın uygulanacağını belirler. <code>Action</code> sütunu kuralın uygulayacağı eylem türünü temsil eder. <code>AccessControlKind</code> sütunu eylem için erişime izin verilip verilmeyeceğini belirler.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Erişim denetimi türünü belirtir.",
        "Documentation.LongDescription": "Erişim denetimi türünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tüm değerleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm değerleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tüm ikili değerleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm ikili değerleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "İkili kodlama türünü belirtir.",
        "Documentation.LongDescription": "İkili kodlama türünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Öğenin grupta kaç kez görünmesinin beklendiğini belirtir.",
        "Documentation.LongDescription": "Öğenin grupta kaç kez görünmesinin beklendiğini belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Gerçekleştirilecek arabelleğe alma işleminin türünü tanımlar.",
        "Documentation.LongDescription": "Gerçekleştirilecek arabelleğe alma işleminin türünü tanımlar.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tüm baytları temsil eden tür.",
        "Documentation.LongDescription": "Tüm baytları temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Bayt sırasını belirtir.",
        "Documentation.LongDescription": "Bayt sırasını belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tüm karakterleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm karakterleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Sıkıştırma türünü belirtir.",
        "Documentation.LongDescription": "Sıkıştırma türünü belirtir.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Csv belgelerindeki alıntıların anlamlı değerini belirtir.",
        "Documentation.LongDescription": "Csv belgelerindeki alıntıların anlamlı değerini belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Para birimi değerini temsil eden türdür.",
        "Documentation.LongDescription": "Para birimi değerini temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tüm tarih değerlerini temsil eden tür.",
        "Documentation.LongDescription": "Tüm tarih değerlerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "İlişkili bir saat dilimi olmayan tüm tarih ve saat değerlerini temsil eden tür.",
        "Documentation.LongDescription": "İlişkili bir saat dilimi olmayan tüm tarih ve saat değerlerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Bir saat dilimi ile ilişkili tüm tarih ve saat değerlerini temsil eden tür.",
        "Documentation.LongDescription": "Bir saat dilimi ile ilişkili tüm tarih ve saat değerlerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Haftanın bir gününü belirtir.",
        "Documentation.LongDescription": "Haftanın bir gününü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Sabit noktalı ondalık sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "Sabit noktalı ondalık sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Çift duyarlıklı kayan noktalı sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "Çift duyarlıklı kayan noktalı sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tüm süre değerlerini temsil eden tür",
        "Documentation.LongDescription": "Tüm süre değerlerini temsil eden tür",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Beklenenden daha fazla sütun içeren bir satırda ek değerler için beklenen eylemi belirtir.",
        "Documentation.LongDescription": "Beklenenden daha fazla sütun içeren bir satırda ek değerler için beklenen eylemi belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tüm işlevleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm işlevleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Gruplama türünü belirtir.",
        "Documentation.LongDescription": "Birden çok yerel grup aynı anahtar değeri ile üretilebilir, ancak belirli bir anahtar değeri için yalnızca tek bir genel grup üretilir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Guid değerini temsil eden tür.",
        "Documentation.LongDescription": "Guid değerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Bir kimlik kullanıcı, grup, cihaz veya tanımlanabilir başka bir öğeyi temsil eder.",
        "Documentation.LongDescription": "Bir kimlik kullanıcı, grup, cihaz veya tanımlanabilir başka bir öğeyi temsil eder.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Kimliklerin oluşturulduğu ve kıyaslandığı bir kapsam tanımlar.",
        "Documentation.LongDescription": "Kimliklerin oluşturulduğu ve kıyaslandığı bir kapsam tanımlar.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "İşaretli 16 bit tam sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "İşaretli 16 bit tam sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "İşaretli 32 bit tam sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "İşaretli 32 bit tam sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "İşaretli 64 bit tam sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "İşaretli 64 bit tam sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "İşaretli 8 bit tam sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "İşaretli 8 bit tam sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Katılma işleminde kullanılacak olan katılma algoritmasını belirtir.",
        "Documentation.LongDescription": "Katılma işleminde kullanılacak olan katılma algoritmasını belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Katılma işlemi türünü belirtir.",
        "Documentation.LongDescription": "Katılma işlemi türünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Bir birleşimin sol veya sağ tablosunu belirtir.",
        "Documentation.LongDescription": "Bir birleşimin sol veya sağ tablosunu belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Bu veri kaynağı tarafından kullanılan SQL diyalektinin desteklediği sınırlama yan tümcesi türünü açıklar.",
        "Documentation.LongDescription": "Bu veri kaynağı tarafından kullanılan SQL diyalektinin desteklediği sınırlama yan tümcesi türünü açıklar.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tüm listeleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm listeleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tüm mantıksal değerleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm mantıksal değerleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Beklenenden daha az sütun içeren bir satırda eksik değerler için beklenen eylemi belirtir.",
        "Documentation.LongDescription": "Beklenenden daha az sütun içeren bir satırda eksik değerler için beklenen eylemi belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Null değerini temsil eden tür.",
        "Documentation.LongDescription": "Null değerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tüm sayıları temsil eden tür.",
        "Documentation.LongDescription": "Tüm sayıları temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "OData hizmetinin atlayabileceği değer türlerini belirtir.",
        "Documentation.LongDescription": "OData hizmetinin atlayabileceği değer türlerini belirtir.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Bir öğenin yinelemesini sıralı olarak belirtir.",
        "Documentation.LongDescription": "Bir öğenin yinelemesini sıralı olarak belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Sıralama yönünü belirtir.",
        "Documentation.LongDescription": "Sıralama yönünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Bir metin parolasını temsil eden tür.",
        "Documentation.LongDescription": "Bir metin parolasını temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Yüzde değerini temsil eden tür.",
        "Documentation.LongDescription": "Yüzde değerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Yüzdebirlik mod türünü belirtir.",
        "Documentation.LongDescription": "Yüzdebirlik mod türünü belirtir.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Karşılaştırmanın duyarlılığını belirtir.",
        "Documentation.LongDescription": "Karşılaştırmanın duyarlılığını belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Tırnak stilini belirtir.",
        "Documentation.LongDescription": "Tırnak stilini belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Sıralamanın türünü belirtir.",
        "Documentation.LongDescription": "Sıralamanın türünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tüm kayıtları temsil eden tür.",
        "Documentation.LongDescription": "Tüm kayıtları temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Dizin oluşturmanın girişin başından mı sonundan mı başlayarak yapılması gerektiğini belirtir.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Yuvarlanacak olası sayılar arasında bağ olduğunda yuvarlama yönünü belirtir.",
        "Documentation.LongDescription": "Yuvarlanacak olası sayılar arasında bağ olduğunda yuvarlama yönünü belirtir.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "SAP Business Warehouse yürütme modu seçeneği için geçerli seçenekler.",
        "Documentation.LongDescription": "SAP Business Warehouse yürütme modu seçeneği için geçerli seçenekler.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA dağıtım seçeneği için geçerli seçenekler.",
        "Documentation.LongDescription": "SAP HANA dağıtım seçeneği için geçerli seçenekler.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA aralık giriş parametrelerine ilişkin bir aralık işleci.",
        "Documentation.LongDescription": "SAP HANA aralık giriş parametrelerine ilişkin bir aralık işleci.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tek duyarlıklı kayan noktalı sayıyı temsil eden türdür.",
        "Documentation.LongDescription": "Tek duyarlıklı kayan noktalı sayıyı temsil eden türdür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Spark örneğine bağlanılırken kullanılacak olan protokol.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tüm tabloları temsil eden tür.",
        "Documentation.LongDescription": "Tüm tabloları temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tüm metin değerlerini temsil eden tür.",
        "Documentation.LongDescription": "Tüm metin değerlerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Metin kodlama türünü belirtir.",
        "Documentation.LongDescription": "Metin kodlama türünü belirtir.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tüm saat değerlerini temsil eden tür.",
        "Documentation.LongDescription": "Tüm saat değerlerini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "İzleme düzeyini belirtir.",
        "Documentation.LongDescription": "İzleme düzeyini belirtir.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tüm türleri temsil eden tür.",
        "Documentation.LongDescription": "Tüm türleri temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Bir metin URI'sini temsil eden tür.",
        "Documentation.LongDescription": "Bir metin URI'sini temsil eden tür.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Bir HTTP yöntemi belirtir.",
        "Documentation.LongDescription": "Bir HTTP yöntemi belirtir.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
