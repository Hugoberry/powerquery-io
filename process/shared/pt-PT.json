{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Devolve uma representação estrutural de uma base de dados do Access.",
        "Documentation.LongDescription": "Devolve uma representação estrutural de uma base de dados do Access, <code>database</code>. Pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...], por exemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Devolve as bases de dados do Analysis Services num anfitrião específico.",
        "Documentation.LongDescription": "Devolve as bases de dados numa instância do Analysis Services, <code>server</code>. Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Um valor l&#243;gico que indica se os tipos especificados no modelo multidimensional ou em tabela ser&#227;o utilizados para os tipos de colunas de medida adicionados. Quando definido como false, ser&#225; utilizado o tipo de &quot;n&#250;mero&quot; para todas as colunas de medida. O valor predefinido para esta op&#231;&#227;o &#233; false.</li>\r\n<li><code>Culture</code> : Um nome de cultura a especificar a cultura para os dados. Isto corresponde &#224; propriedade de cadeia de liga&#231;&#227;o &quot;Identificador de Localiza&#231;&#227;o&quot;.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>SubQueries</code> : Um n&#250;mero (0, 1 ou 2) que define o valor da propriedade &quot;SubQueries&quot; na cadeia de liga&#231;&#227;o. Isto controla o comportamento de membros calculados em subsele&#231;&#245;es ou subcubos. (O valor predefinido &#233; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Cubos AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Importar/DirectQuery dados de cubo de um AtScale.",
        "Documentation.LongDescription": "\r\nDevolve dados de cubo do AtScale no servidor <code>servidor</code>. Um parâmetro de registo opcional, <code>opções</code>, podem ser especificados para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Um valor lógico a indicar se os tipos especificados no modelo multidimensional ou tabular irão ser usados nos tipos das colunas de medida adicionadas. Quando definido como falso, o tipo \"número\" será usado em todas as colunas de medida. O valor predefinido desta opção é falso.</li>\r\n        <li><code>CommandTimeout</code>: Uma duração (em segundos) que controla o tempo máximo de execução permitido da consulta do lado do servidor antes do seu cancelamento. O valor predefinido é dependente do controlador. </li>\r\n        <li><code>ConnectionTimeout</code>: Uma duração (em segundos) que controla o tempo máximo de espera antes de abandonar uma tentativa de estabelecer uma ligação ao servidor. O valor predefinido é dependente do controlador. </li>\r\n\r\n</ul>\r\nO parâmetro de registo está especificado como [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Listar os dados de cubo no cubo AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importa dados do Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa dados da instância do seu Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela de informações dos Eventos do Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Uma tabela com Eventos do Storm da base de dados \"Amostras\" no cluster \"ajuda\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do seu Serviço de Análise do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Devolve o conteúdo transferido a partir do URL do Serviço de Análise do Azure DevOps como um valor binário. Esta função utiliza credenciais diferentes para organizações diferentes."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Feed dos Serviços do Azure DevOps",
        "Documentation.DisplayName": "Feed dos Serviços do Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Devolve uma tabela de feeds OData oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Insira o URL do ponto final de API REST do Azure Enterprise associado à sua inscrição",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Devolve uma lista de relatórios e meses disponíveis da API do Azure Enterprise",
        "Documentation.Name": "Importar dados do Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Utilizar a função AzureEnterprise.Tables e navegar para um valor particular para obter os resultados.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Conteúdos",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Consulte https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli para obter amostras de consultas básicas.",
        "Documentation.Examples": [
          {
            "Description": "Devolver uma tabela com os resultados da consulta do utilizador \"recursos\"",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Listar as tabelas numa instância do Azure Spark.",
        "Documentation.LongDescription": "Listar as tabelas numa instância do Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas numa instância do Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Devolve uma tabela de navegação que contém os contentores encontrados na conta especificada a partir de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Devolve uma tabela de navegação que contém uma linha para cada contentor encontrado no URL da conta, <code>account</code>, a partir de um cofre de armazenamento do Azure. Cada linha contém uma ligação para os blobs do contentor. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a ler antes de aguardar pelo consumidor de dados. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes a tentar ler num &#250;nico pedido HTTP para o servidor. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests suporta o descarregamento de dados mais r&#225;pido, especificando o n&#250;mero de pedidos a serem feitos em paralelo, ao custo da utiliza&#231;&#227;o da mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor predefinido &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Devolve uma tabela de navegação que contém os documentos que se encontram no contentor especificado e as suas subpastas do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Devolve uma tabela de navegação que contém os documentos que se encontram no contentor especificado e as suas subpastas no URL da conta, <code>endpoint</code>, a partir de um sistema de ficheiros do Azure Data Lake Storage. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a ler antes de aguardar pelo consumidor de dados. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes a tentar ler num &#250;nico pedido HTTP para o servidor. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests suporta o descarregamento de dados mais r&#225;pido, especificando o n&#250;mero de pedidos a serem feitos em paralelo, ao custo da utiliza&#231;&#227;o da mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor predefinido &#233; 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (verdadeiro/falso) que controla se os ficheiros s&#227;o devolvidos numa vista de diret&#243;rio tipo &#225;rvore ou numa lista n&#227;o hier&#225;rquica. O valor predefinido &#233; falso.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Devolve uma tabela de navegação que contém as tabelas encontradas na conta especificada a partir de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Devolve uma tabela de navegação que contém uma linha para cada tabela que se encontra no URL da conta, <code>account</code>, a partir de um cofre de armazenamento do Azure. Cada linha contém uma ligação para a tabela do Azure. Pode fornecer um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar o pedido ao servidor. O valor predefinido &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight no AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Dados e análises Bloomberg  v1.1.3",
        "Documentation.Description": "Utilizado para obter dados Bloomberg"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Esta função não está disponível porque requer .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Legado)",
        "Documentation.Caption": "Common Data Service (Legado)",
        "Documentation.LongDescription": "Ligue-se à sua instância do Common Data Service (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Devolve o conteúdo do documento CSV como uma tabela.",
        "Documentation.LongDescription": "Devolve o conteúdo do documento CSV como uma tabela.\r\n    <ul>\r\n     <li> \r\n        <code>columns</code> pode ser nulo, o número de colunas, uma lista de nomes de colunas, um tipo de tabela ou um registo de opções.\r\n    </li>\r\n     <li>\r \n      <code>delimiter</code> pode ser um único caráter, uma lista de carateres, ou o valor <code>\"\"</code>, que indica que as linhas têm de ser divididas por carateres de espaço em branco consecutivos. Predefinição: <code>\",\"</code>.\r\n     </li>\r\n     <li>\r\n      Consulte o <code>ExtraValues.Digite </code> para saber os valores suportados de <code>extraValues</code>.\r\n     </li>\r\n     <li>\r\n        <code>encoding</code> especifica o tipo de codificação do texto.\r\n     </li>\r\n    </ul>\r\n\r\n    Se um registo for especificado para <code>columns</code> (e <code>delimiter</code>, <code>extraValues</code>, e<code>encoding</code> forem nulos), podem ser fornecidos os seguintes campos de registo:\r\n    <ul>\r\n      <li>\r\n     <code>Delimiter</code>: o delimitador de colunas. Predefinição: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n     <code>Columns</code>: pode ser nulo, o número de colunas, uma lista de nomes de colunas ou um tipo de tabela. Se o número de colunas for inferior ao número encontrado na entrada, as colunas adicionais são ignoradas. Se o número de colunas for superior ao número encontrado na entrada, as colunas adicionais irão ser nulas. Quando não for especificado, o número de colunas é determinado pelo que é encontrado na entrada.\r\n      </li>\r\n      <li>\r\n     <code>Encoding</code>: a codificação de texto do ficheiro. Predefinição: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n     <code>CsvStyle</code>: especifica como são processadas as aspas.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (predefinição): as aspas num campo são apenas significantes se imediatamente a seguir ao delimitador.\r\n          </li>\r\n          <li>\r\n             <code>CsvStyle.QuoteAlways</code>: as aspas num campo são sempre significantes, independentemente de onde apareçam.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: especifica como são processadas as quebras de linha em aspas.\r\n        <ul>\r\n          <li>\r \n             <code>QuoteStyle.Csv</code> (predefinição): As quebras de linha entre aspas são tratadas como parte dos dados e não como o fim da linha atual.\r\n          </li>\r\n          <li>\r \n          <code>QuoteStyle.None</code>: Todas as quebras de linha são tratadas como o fim da linha atual, mesmo quando elas ocorrem dentro de um valor entre aspas.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Processar texto em formato CSV com cabeçalhos de colunas",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Devolve uma tabela que contém o conjunto de dimensões disponíveis.",
        "Documentation.LongDescription": "Devolve uma tabela que contém o conjunto de dimensões disponíveis no <code>cube</code>. Cada dimensão é uma tabela que contém um conjunto de atributos de dimensão e cada atributo de dimensão é representado como uma coluna na tabela de dimensão. É possível expandir as dimensões no cubo utilizando Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Devolve uma árvore de tabelas aninhada que representa a hierarquia de pastas de apresentação dos objetos (por ex.: dimensões e medidas).",
        "Documentation.LongDescription": "Devolve uma árvore de tabelas aninhada que representa a hierarquia de pastas de apresentação dos objetos (por exemplo: dimensões e medidas) disponíveis para utilização no <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Devolve uma tabela que contém o conjunto de propriedades disponíveis para as medidas que são expandidas no cubo.",
        "Documentation.LongDescription": "Devolve uma tabela que contém o conjunto de propriedades disponíveis para as dimensões que são expandidas no cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Devolve uma tabela que contém o conjunto de medidas disponíveis.",
        "Documentation.LongDescription": "Devolve uma tabela que contém o conjunto de medidas disponíveis no <code>cube</code>.\r\n    Cada medida é representada como uma função. É possível aplicar medidas ao cubo utilizando Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Devolve uma tabela que contém o conjunto dos parâmetros que podem ser aplicados ao cubo.",
        "Documentation.LongDescription": "Devolve uma tabela que contém o conjunto dos parâmetros que podem ser aplicados a <code>cube</code>. Cada parâmetro é uma função que pode ser invocado para obter <code>cube</code> com o parâmetro e os seus argumentos aplicados.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Devolve uma tabela que contém o conjunto de propriedades disponíveis para as dimensões que são expandidas no cubo.",
        "Documentation.LongDescription": "Devolve uma tabela que contém o conjunto de propriedades disponíveis para as dimensões que são expandidas no cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Introduza o URL da sua conta do Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Devolve uma tabela com uma linha para cada pasta e ficheiro presentes no <code>url</code> do Azure Data Lake Storage Gen1. Cada linha contém as propriedades da pasta ou do ficheiro e uma ligação para o respetivo conteúdo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Introduza o URL da sua conta do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Devolve uma tabela com uma linha para cada ficheiro presente no <code>url</code> do Azure Data Lake Storage Gen1. Cada linha contém as propriedades da pasta ou do ficheiro e uma ligação para o respetivo conteúdo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (API de SQL)",
        "Documentation.Description": "Introduzir o URL de uma conta do Azure Cosmos DB.",
        "Documentation.LongDescription": "Devolve uma tabela de bases de dados do Azure Cosmos DB em <code>url</code>. Se <code>database</code> estiver especificado, será antes devolvida uma tabela de coleções. Além disso, se o campo <code>Query</code> estiver especificado no registo <code>options</code>, serão devolvidos os resultados da consulta em execução na base de dados e/ou coleção especificada."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do seu ponto final de serviço OData do Dynamics 365 Business Central (no local).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (no local)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (no local)",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics 365 Business Central (no local). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do seu ponto final de serviço OData do Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Devolve os cubos numa instância de Essbase agrupada pelo servidor Essbase.",
        "Documentation.LongDescription": "Devolve uma tabela de cubos agrupados pelo servidor Essbase a partir de uma instância de Essbase no servidor APS <code>url</code>. Um parâmetro de registo opcional, <code>options</code>, poderá ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Devolve o conteúdo do livro Excel.",
        "Documentation.LongDescription": "Devolve os conteúdos do livro Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> pode ser nulo, um valor lógico (verdadeiro/falso) que indica se a primeira linha de cada tabela devolvida deve ser tratada como cabeçalho, ou um registo de opções. Predefinição: falso.</li>\r\n     <li> <code>delayTypes</code> pode ser nulo ou lógico um valor (verdadeiro/falso) que indica se as colunas de cada tabela devolvida devem ser deixadas sem tipo. Predefinição: falso.</li>\r\n    </ul>\r\n\r\n    Se for especificado um registo para <code>useHeaders</code> (e <code>delayTypes</code> for nulo), podem ser fornecidos os seguintes campos de registo:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Pode ser nulo ou lógico um valor (verdadeiro/falso) que indica se a primeira linha de cada tabela devolvida deve ser tratada como cabeçalho. Predefinição: falso.</li>\r\n     <li> <code>DelayTypes</code>: pode ser nulo ou lógico um valor (verdadeiro/falso) que indica se as colunas de cada tabela devolvida devem ser deixadas sem tipo. Predefinição: falso.</li>\r\n     <li> <code>InferSheetDimensions</code>: pode ser nulo ou lógico um valor (verdadeiro/falso) que indica se a área de uma folha de cálculo que contenha dados deve ser inferida ao ler a própria folha de cálculo, em vez de ao ler os metadados de dimensões do ficheiro. Pode ser útil nos casos em que os metadados de dimensões estão incorretos. Tenha em atenção que esta opção só é suportada para ficheiros Excel Open XML e não para ficheiros Excel legados. Predefinição: falso.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Devolve os conteúdos da Folha1 a partir de um livro do Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Devolve uma tabela que contém as propriedades e conteúdos dos ficheiros e pastas encontrados na pasta especificada.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada pasta e ficheiro encontrados na pasta <code>path</code>. Cada linha contém as propriedades da pasta ou ficheiro e uma hiperligação para o respetivo conteúdo. O parâmetro <code>options</code> destina-se atualmente apenas a utilização interna.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Devolve uma tabela que contém as propriedades e conteúdos dos ficheiros encontrados na pasta especificada e nas respetivas subpastas.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada ficheiro encontrados na pasta <code>path</code> e nas respetivas subpastas. Cada linha contém as propriedades do ficheiro e uma hiperligação para o respetivo conteúdo. O parâmetro <code>options</code> destina-se atualmente apenas a utilização interna.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importe dados de uma base de dados Google BigQuery com o Azure AD",
        "Documentation.LongDescription": "\r\n      Devolve uma tabela que lista os projetos disponíveis no Google BigQuery com o Azure AD para <code>Billing Project ID</code>. Pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla o tempo de espera antes de abandonar uma tentativa de fazer uma ligação ao servidor. O valor predefinido é o valor de Tempo Limite de Ligação de ODBC.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla durante quanto tempo a consulta do lado do servidor é autorizada a ser executada antes de ser cancelada.</li>\r\n        <li><code>UseStorageApi</code>: especifica se a API de Armazenamento do BigQuery deve ser utilizada para conjuntos de resultados grandes. O valor predefinido é true para utilizar a API de Armazenamento. Defina como false para não utilizar a API de Armazenamento</li>\r\n        <li><code>AudienceUri</code>: este é o URI da audiência que o controlador ODBC pode utilizar para os pedidos de troca de tokens. Este campo tem de ser um URI completamente qualificado (ou seja, //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) em que o pool_id é um nome globalmente exclusivo para identificar o conjunto da equipa de trabalhadores.</li>\r\n      </ul>\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listar os projetos disponíveis no Google BigQuery com o Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Folhas de Cálculo do Google",
        "Documentation.Caption": "Folhas de Cálculo do Google",
        "Documentation.Description": "Importa dados das Folhas de Cálculo do Google",
        "Documentation.LongDescription": "Importa dados das Folhas de Cálculo do Google"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Devolve uma tabela de navegação que contém os contentores encontrados na conta especificada a partir de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Devolve uma tabela de navegação que contém uma linha para cada contentor encontrado no URL da conta, <code>account</code>, a partir de um cofre de armazenamento do Azure. Cada linha contém uma ligação para os blobs do contentor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Devolve uma tabela de navegação que contém os contentores encontrados na conta especificada a partir de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Devolve uma tabela de navegação que contém uma linha para cada contentor encontrado no URL da conta, <code>account</code>, a partir de um cofre de armazenamento do Azure. Cada linha contém uma ligação para os blobs do contentor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Devolve uma tabela que contém as propriedades e conteúdos dos ficheiros e pastas encontrados na pasta especificada a partir de um sistema de ficheiros Hadoop.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada pasta e ficheiro encontrados no URL da pasta, <code>url</code>, a partir de um sistema de ficheiros Hadoop. Cada linha contém as propriedades da pasta ou ficheiro e uma hiperligação para o respetivo conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Devolve uma tabela que contém as propriedades e conteúdos dos ficheiros e pastas encontrados na pasta especificada e nas respetivas subpastas a partir de um sistema de ficheiros Hadoop.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada pasta e ficheiro encontrados no URL da pasta, <code>url</code>, e nas respetivas subpastas a partir de um sistema de ficheiros Hadoop. Cada linha contém as propriedades do ficheiro e uma hiperligação para o respetivo conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importar dados de um cluster de Impala",
        "Documentation.LongDescription": "Importar dados de um cluster de Impala <code>server</code>. Se não foi especificada uma porta, será utilizada a porta predefinida 21050.",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas de um cluster de Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importa dados do Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa dados da instância do seu Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela de informações dos Eventos do Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Uma tabela com Eventos do Storm da base de dados \"Amostras\" no cluster \"ajuda\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela com dados de um ponto final do MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Efetua uma chamada à API do MailChimp e devolve o conjunto de dados resultante como tabela. Percorre automaticamente todos os resultados. O parâmetro opcional entityName pode ser utilizado para pontos finais de API em que o ponto final de raiz e o entityName principal na resposta JSON não correspondem.",
        "Documentation.Examples": [
          {
            "Description": "Solicita uma tabela de dados do ponto final lists da API do MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Uma tabela com dados de lista."
          },
          {
            "Description": "Solicita uma tabela de dados do ponto final campaign-folders da API do MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Uma tabela com dados de campaign-folders."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Devolve resultados de resposta não processados de um ponto final de API do MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Efetua uma camada à API do MailChimp e devolve a resposta não processada.",
        "Documentation.Examples": [
          {
            "Description": "Devolve dados não processados do ponto final reports/click-details de API do MailChimp de uma campanha especificada.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Dados não processados de detalhes de cliques da campanha especificada."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy para Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Fornecer funções de consulta avançada.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Fornecer funções de consulta avançada.",
        "Documentation.Examples": [
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os resumos de dados entre 01-05-2017 e 15-06-2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados de resumo entre 01-05-2017 e 15-06-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os dados de resumo para abril de 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-04-2017 e 30-04-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os dados de resumos de abril de 2017 até ao momento.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-04-2017 e 15-06-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os dados de resumos do último mês de dezembro até este fevereiro",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-12-2016 e 28-02-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os encargos do marketplace para os últimos 18 meses",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-12-2015 e 15-06-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os encargos detalhados para junho e maio de 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-05-2017 e 15-06-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 03-07-2017, obter os encargos detalhados de julho de 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-07-2016 e 31-07-2016"
          },
          {
            "Description": "Partindo do princípio que hoje é 13-07-2017, obter os resumos de saldo para os últimos 10 meses e mais 13 dias deste mês",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "A função devolve os dados entre 01-09-2016 e 13-07-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Devolve uma tabela de tabelas de SQL e vistas da origem de dados ODBC.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas de SQL e vistas da origem de dados ODBC especificada pela cadeia de ligação <code>connectionString</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Poderá ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Devolver as tabelas e vistas SQL da cadeia de ligação fornecida.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Devolve uma tabela de tabelas SQL e vistas da origem de dados OLE DB.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas SQL e vistas da origem de dados OLE DB especificadas pela cadeia de ligação <code>connectionString</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores de propriedade. Os valores de propriedade podem ser texto ou número. Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; true).</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [opção1 = valor1, opção2 = valor2...] ou [Consulta = \"selecione ...\"] por exemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL a partir da Oracle Database.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL a partir da Oracle Database existente no servidor <code>server</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n\\    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Devolve todas as tabelas encontradas num ficheiro PDF.",
        "Documentation.LongDescription": "Devolve as bases de dados encontradas em <code>pdf</code>. Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Implementation</code> : A vers&#227;o do algoritmo a utilizar ao identificar tabelas. As vers&#245;es antigas est&#227;o dispon&#237;veis apenas para retrocompatibilidade, para evitar que consultas antigas sejam interrompidas por atualiza&#231;&#245;es de algoritmos. A vers&#227;o mais recente deve sempre dar os melhores resultados. Os valores v&#225;lidos s&#227;o &quot;1.3&quot;, “1.2”, &quot;1.1&quot; ou nulo.</li>\r\n<li><code>StartPage</code> : Especifica a primeira p&#225;gina no intervalo de p&#225;ginas a examinar. Predefini&#231;&#227;o: 1.</li>\r\n<li><code>EndPage</code> : Especifica a &#250;ltima p&#225;gina no intervalo de p&#225;ginas a examinar. Predefini&#231;&#227;o: a &#250;ltima p&#225;gina do documento.</li>\r\n<li><code>MultiPageTables</code> : Controla se as tabelas semelhantes em p&#225;ginas consecutivas v&#227;o ser combinadas automaticamente numa &#250;nica tabela. Predefini&#231;&#227;o: verdadeiro.</li>\r\n<li><code>EnforceBorderLines</code> : Controla se as linhas dos limites s&#227;o sempre impostas como limites da c&#233;lula (se for verdadeiro) ou simplesmente utilizadas como uma sugest&#227;o entre muitas para determinar os limites da c&#233;lula (se for falso). Predefini&#231;&#227;o: falso.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": [
          {
            "Description": "Devolve as tabelas contidas em sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Introduza o URL da sua conta do Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þуŧħøή šсгΐφτ",
        "Documentation.Description": "Эхεсϋτêş РУţĥσй şςŕїрť ąήð ѓēťΰŕйѕ đάтд ƒŗαmęś",
        "Documentation.Examples": {
          "Description": "Эхεсϋτêş РУţĥσй şςŕїрť ąήð ѓēťΰŕйѕ đάтд ƒŗαmęś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я ščŕĭþţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Devolve uma tabela em que cada linha é um nome de campo e o valor do registo de entrada.",
        "Documentation.LongDescription": "Devolve uma tabela que contém as colunas <code>Name</code> e <code>Value</code> com uma linha para cada campo existente em <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Devolver a tabela a partir do registo.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Devolve os pacotes numa base de dados SAP HANA.",
        "Documentation.LongDescription": "Devolve uma tabela de pacotes multidimensionais da base de dados SAP HANA <code>server</code>. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>Distribution</code> : Uma SapHanaDistribution que define o valor da propriedade &quot;Distribution&quot; na cadeia de liga&#231;&#227;o. O encaminhamento de instru&#231;&#227;o &#233; um m&#233;todo de avaliar o n&#243; de servidor correto de um sistema distribu&#237;do antes da execu&#231;&#227;o de instru&#231;&#227;o. O valor predefinido &#233; SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Especifica a implementa&#231;&#227;o do conector de SAP HANA a utilizar.</li>\r\n<li><code>EnableColumnBinding</code> : Vincula vari&#225;veis &#224;s colunas de um conjunto de resultados do SAP HANA ao obter dados. Pode potencialmente melhorar o desempenho &#224; custa de uma utiliza&#231;&#227;o de mem&#243;ria ligeiramente superior. O valor predefinido &#233; falso.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Devolve uma tabela com conteúdos de um site SharePoint.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada pasta e documento encontrados no site SharePoint especificado, <code>url</code>. Cada linha contém as propriedades da pasta ou ficheiro e uma ligação para o conteúdo correspondente. <code>options</code> poderá ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot; que especifica a vers&#227;o da API do SharePoint a utilizar para este site. Quando n&#227;o &#233; especificado, &#233; utilizada a vers&#227;o 14 da API. Quando o texto Auto &#233; especificado, a vers&#227;o do servidor ser&#225; detetada automaticamente, se poss&#237;vel, caso contr&#225;rio, a vers&#227;o assume o valor predefinido, ou seja, 14. Os sites SharePoint que n&#227;o estejam em ingl&#234;s requerem, pelo menos, a vers&#227;o 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Devolve uma tabela que contém os documentos de um site SharePoint.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada documento encontrado no site SharePoint especificado, <code>url</code>, e nas subpastas. Cada linha contém as propriedades da pasta ou ficheiro e uma ligação para o conteúdo correspondente. <code>options</code> poderá ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot; que especifica a vers&#227;o da API do SharePoint a utilizar para este site. Quando n&#227;o &#233; especificado, &#233; utilizada a vers&#227;o 14 da API. Quando o texto Auto &#233; especificado, a vers&#227;o do servidor ser&#225; detetada automaticamente, se poss&#237;vel, caso contr&#225;rio, a vers&#227;o assume o valor predefinido, ou seja, 14. Os sites SharePoint que n&#227;o estejam em ingl&#234;s requerem, pelo menos, a vers&#227;o 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Devolve uma tabela com conteúdos de uma Lista do SharePoint.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada item de Lista encontrado na lista do SharePoint especificada, <code>url</code>. Cada linha contém as propriedades da Lista. <code>options</code> poderá ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Um n&#250;mero (14 ou 15) ou o texto &quot;Auto&quot; que especifica a vers&#227;o da API do SharePoint a utilizar para este site. Quando n&#227;o &#233; especificado, &#233; utilizada a vers&#227;o 14 da API. Quando o texto Auto &#233; especificado, a vers&#227;o do servidor ser&#225; detetada automaticamente, se poss&#237;vel, caso contr&#225;rio, a vers&#227;o assume o valor predefinido, ou seja, 14. Os sites SharePoint que n&#227;o estejam em ingl&#234;s requerem, pelo menos, a vers&#227;o 15.</li>\r\n<li><code>Implementation</code> : Opcional. Especifica a vers&#227;o do conector do SharePoint a utilizar. Os valores aceites s&#227;o &quot;2.0&quot; ou nulo. Se o valor for &quot;2.0&quot;, &#233; utilizada a implementa&#231;&#227;o 2.0 do conector do SharePoint. Se o valor for nulo, &#233; utilizada a implementa&#231;&#227;o original do conector do SharePoint.</li>\r\n<li><code>ViewMode</code> : Opcional. Esta op&#231;&#227;o s&#243; &#233; v&#225;lida para a implementa&#231;&#227;o 2.0. Os valores aceites s&#227;o &quot;Todos&quot; e &quot;Predefini&#231;&#227;o&quot;. Se n&#227;o for especificado nenhum valor, o valor &#233; definido como &quot;Todos&quot;. Quando &quot;Todos&quot; &#233; especificado, a vista incluir&#225; todas as colunas criadas pelo utilizador e definidas pelo sistema. Quando &quot;Predefini&#231;&#227;o&quot; &#233; especificado, a vista corresponder&#225; ao que o utilizador v&#234; ao consultar a lista online em qualquer vista definida pelo utilizador como Predefini&#231;&#227;o nas respetivas defini&#231;&#245;es. Se o utilizador editar a vista predefinida para adicionar ou remover colunas criadas pelo utilizador ou definidas pelo sistema ou ao criar uma nova vista e defini-la como predefini&#231;&#227;o, estas altera&#231;&#245;es ser&#227;o propagadas atrav&#233;s do conector.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Impede o conector de utilizar um ponto final separado para colunas de notas.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Devolve uma tabela com o conteúdo do URL especificado formatado em conformidade com a API SODA 2.0.",
        "Documentation.LongDescription": "Devolve uma tabela com o conteúdo do URL especificado <code>url</code> formatado em conformidade com a API SODA 2.0. O URL tem de apontar para uma origem compatível com SODA que termine numa extensão de nome de ficheiro .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Esta função pode ser utilizada para chamar qualquer um dos pontos finais \"Listas\" oferecidos pela API do SparkPost v1. Ao fazer chamadas à API do SparkPost com esta função, tenha em atenção que a API do SparkPost tem um limite de velocidade de API restrito. Se vir um código de estado 429 devolvido pelo servidor do SparkPost, isso significa que atingiu o limite de velocidade e que terá de aguardar até poder fazer mais chamadas.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com uma única coluna povoada com dados de um dos pontos finais \"Listas\" da API do SparkPost v1 (para obter mais detalhes, veja a documentação do SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Obtenha as tabelas incorporadas expostas pelo conector do SparkPost com dados agregados durante um número de dias especificado pelo utilizador. Ao atualizar estas tabelas ou ao fazer chamadas à API do SparkPost com este conector, tenha em atenção que a API do SparkPost tem um limite de velocidade de API restrito. Se vir um código de estado 429 devolvido pelo servidor do SparkPost, isso significa que atingiu o limite de velocidade e que terá de aguardar até poder fazer mais chamadas. Ao escolher um valor para o parâmetro \"Número de dias\", não se esqueça de que a API apenas armazena 6 meses de dados."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Devolve uma tabela de bases de dados num SQL Server.",
        "Documentation.LongDescription": "Devolve uma tabela de bases de dados no servidor SQL especificado, <code>server</code>. Pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Um n&#250;mero que define o valor da cl&#225;usula de consulta &quot;maxdrop&quot; na consulta SQL gerada.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n<li><code>MultiSubnetFailover</code> : Uma l&#243;gica (true/false) que define o valor da propriedade &quot;MultiSubnetFailover&quot; na cadeia de liga&#231;&#227;o (a predefini&#231;&#227;o &#233; falsa).</li>\r\n<li><code>UnsafeTypeConversions</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, tenta dobrar convers&#245;es de tipo, o que pode falhar e resultar na falha de toda a consulta. N&#227;o recomendado para utiliza&#231;&#227;o geral.</li>\r\n<li><code>ContextInfo</code> : Um valor bin&#225;rio utilizado para definir o CONTEXT_INFO antes de executar cada comando.</li>\r\n<li><code>OmitSRID</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, omite o SRID ao produzir Well-Known Text a partir de tipos de geometria e geografia.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, permite a dobragem de consultas entre bases de dados no mesmo servidor. O valor predefinido &#233; falso.</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...], por exemplo.\r\n    <br>\r\n    Não suporta que a definição de uma consulta SQL seja executada no servidor. <code>Sql.Database</code> deve ser utilizada, ao invés de executar uma consulta SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Efetua uma chamada à API do Stripe, com a opção de limitar o número de chamadas à API.",
        "Documentation.LongDescription": "Efetua uma chamada à API do Stripe em https://api.stripe.com/v1/<code>method</code>, com <code>query</code> de registo opcional transmitido como parâmetros adicionais e <code>pageLimit</code> opcional como um limite do número de pedidos da API. Os dados mais recentes são devolvidos em primeiro lugar. Se <code>pageLimit</code> não for especificado, todos os dados são devolvidos. É utilizada a versão do Stripe de 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Devolve todos os dados de taxas",
            "Code": "Stripe.Contents(\"taxas\")",
            "Result": "Uma tabela com todos os dados de taxas para a conta do Stripe atual"
          },
          {
            "Description": "Devolve uma página de dados de taxas",
            "Code": "Stripe.Contents(\"taxas\", [], 1)",
            "Result": "Uma tabela com os dados de taxas mais recentes para a conta do Stripe atual"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Coloca uma tabela em memória intermédia, isolando-a de alterações externas durante a avaliação.",
        "Documentation.LongDescription": "Coloca uma tabela em memória intermédia, isolando-a de alterações externas durante a avaliação.\r\n    A colocação em memória intermédia é superficial. A mesma força a avaliação de quaisquer valores de célula escalares, deixando os valores não escalares (registos, listas, tabelas, etc) como estão.\r\n    <br>\r\n    <br>\r\n    Note que a utilização desta função poderá ou não acelerar as suas consultas. Em certos casos, poderá tornar as suas consultas mais lentas devido ao custo \r\n    adicional de ler todos os dados e de armazenar os mesmos em memória, para além do facto de que a colocação em memória intermédia impede a dobragem a jusante.  Se os dados não necessitarem de ser\r\n    colocados em memória intermédia e apenas quiser evitar a dobragem a jusante, utilize antes <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Carregue todas as linhas de uma tabela SQL para a memória, para que quaisquer operações a jusante deixem de poder consultar o SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Devolve uma tabela que é o resultado da intercalação de uma lista de tabelas.",
        "Documentation.LongDescription": "Devolve uma tabela que é o resultado da intercalação de uma lista de tabelas, <code>tables</code>. A tabela resultante vai ter uma linha de tipo de estrutura definida por <code>columns</code> ou por uma união dos tipos de entrada, caso <code>columns</code> não esteja especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Intercalar as três tabelas juntas.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Intercale três tabelas com estruturas diferentes.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Intercale duas tabelas e projeto para o tipo especificado.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Despromove os cabeçalhos das colunas para a primeira linha de valores.",
        "Documentation.LongDescription": "Despromove os cabeçalhos das colunas (ou seja, os nomes das colunas) para a primeira linha de valores. Os nomes predefinidos das colunas são \"Coluna1\", \"Coluna2\" e assim consecutivamente.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Despromove a primeira linha de valores na tabela.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Remove linhas duplicadas da tabela.",
        "Documentation.LongDescription": "Remove linhas duplicadas da tabela.\r\n    Um parâmetro opcional, <code>equationCriteria</code>, especifica que colunas da tabela são testadas para duplicação. Se <code>equationCriteria</code> não for especificado, todas as colunas são testadas.<br>\r\n    <br>\r\n    Uma vez que o Power Query descarrega, por vezes, determinadas operações para as origens de dados de back-end (operação conhecida como \"dobragem\") e, por vezes, otimiza as consultas ao \r\n    ignorar as operações que não são estritamente necessárias, de um modo geral, não existe nenhuma garantia sobre que duplicados específicos serão preservados.\r\n    Por exemplo, não deve assumir que a primeira linha com um conjunto exclusivo de valores de coluna será preservada e que as linhas mais abaixo na tabela serão removidas.\r\n    Se quiser que a remoção de duplicados se comporte de forma previsível, primeiro coloque a tabela em memória intermédia, através de <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Remover as linhas duplicadas da tabela.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Remover as linhas duplicadas da coluna [b] na tabela <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Cria uma tabela a partir de uma lista de colunas e valores especificados.",
        "Documentation.LongDescription": "Cria uma tabela do tipo <code>columns</code> a partir de uma lista <code>lists</code> que contém listas aninhadas com os nomes e os valores das colunas.\r\n    Se algumas colunas tiverem mais valores do que outras, os valores em falta serão preenchidos com o valor predefinido, \"null\", se as colunas puderem ser nulas.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolver uma tabela a partir de uma lista de nomes de clientes numa lista. Cada valor no item da lista de clientes torna-se um valor de linha, sendo que cada lista torna-se uma coluna.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Criar uma tabela a partir de uma lista de colunas e uma lista de nomes de colunas especificadas.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela com um número diferente de colunas por linha. O valor da linha ausente é nulo.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Converte uma lista numa tabela aplicando a função de divisor especificada a cada item existente na lista.",
        "Documentation.LongDescription": "Converte uma lista, <code>list</code>, numa tabela aplicando a função de divisor opcional, <code>splitter</code>, a cada item existente na lista. Por predefinição, parte-se do princípio de que a lista é uma lista de valores de texto separados por vírgulas. O <code>columns</code> opcional pode ser o número de colunas, uma lista de colunas ou um TableType. Também é possível especificar um <code>default</code> e <code>extraValues</code> opcional.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crie uma tabela a partir de uma lista com o divisor predefinido.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Criar uma tabela a partir de uma lista ao utilizar um divisor personalizado.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela a partir da lista com o divisor Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Converte uma lista de registos numa tabela.",
        "Documentation.LongDescription": "Converte <code>records</code>, uma lista de registos, numa tabela.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Criar uma tabela a partir de registos, utilizando nomes de campos de registo como nomes de colunas.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Criar uma tabela a partir de registos com colunas de tipo definido e selecionar as colunas numéricas.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Cria uma tabela a partir de uma lista de valores de linha e colunas opcionais",
        "Documentation.LongDescription": "Cria uma tabela a partir da lista <code>rows</code>, em que cada elemento da lista é uma lista interna que contém os valores de coluna de uma linha. É possível fornecer uma lista opcional de nomes de coluna, um tipo de tabela ou um número de colunas para <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolver uma tabela com a coluna [CustomerID] com os valores {1, 2} e a coluna [Name] com os valores {\"Bob\", \"Jim\"} e a coluna [Telefone] com os valores {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Devolve uma tabela com a coluna [CustomerID] com valores {1, 2}, coluna [Nome] com os valores {\"Bob\", \"Jim\"}, e a coluna [Telefone] com os valores {\"123-4567\", \"987-6543\"}, em que [CustomerID] é do tipo número e [Nome] e [Telefone] são do tipo texto.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Cria uma tabela com uma coluna a partir dos valores fornecidos.",
        "Documentation.LongDescription": "Cria uma tabela com uma coluna que contém o valor ou a lista de valores fornecida, <code>value</code>. Um parâmetro de registo opcional, <code>options</code>, pode ser especificado para controlar as seguintes opções: \r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : o nome da coluna utilizado ao construir uma tabela a partir de uma lista ou valor escalar. </li>\r\n    </ul>\r\n.    ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Criar uma tabela a partir do valor 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Criar uma tabela a partir da lista.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Crie uma tabela a partir do valor 1, com um nome de coluna personalizado.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Devolve informações sobre o modo como uma tabela está particionada.",
        "Documentation.LongDescription": "Devolve informações sobre o modo como uma tabela está particionada.  É devolvida uma tabela em que cada coluna é uma coluna de partição na tabela original e cada linha corresponde a uma partição na tabela original.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Devolve um perfil das colunas de uma tabela.",
        "Documentation.LongDescription": "<p>Devolve um perfil para as colunas em <code>table</code>.</p>\r\n<p>São devolvidas as seguintes informações para cada coluna (quando aplicável):\r\n<ul>\r\n  <li>mínimo</li>\r\n  <li>máximo</li>\r\n  <li>média</li>\r\n  <li>desvio padrão</li>\r\n  <li>contagem</li>\r\n  <li>contagem nula </li>\r\n  <li>contagem distinta </li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Promove a primeira linha de valores como novos cabeçalhos de coluna (ou seja, nomes de colunas).",
        "Documentation.LongDescription": "Promove a primeira linha de valores como novos cabeçalhos de coluna (ou seja, nomes de colunas). Por predefinição, apenas os valores numéricos ou de texto podem ser promovidos a cabeçalhos. Opções válidas:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: Se estiver definido como <code>true</code>, todos os valores escalares na primeira linha são promovidos para cabeçalhos através de <code>Culture</code>, se estiver especificado (ou o local atual do documento).\r\n    No caso dos valores que não podem ser convertidos para texto, será utilizado um nome de coluna predefinido.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: um nome de cultura que especifica a cultura dos dados.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Promover a primeira linha de valores na tabela.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Promover todos os escalares na primeira linha da tabela a cabeçalhos.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Devolve uma tabela com as primeiras linhas de contagem ignoradas.",
        "Documentation.LongDescription": "Devolve uma tabela que não contém o primeiro número de linhas especificado, <code>countOrCondition</code>, da tabela <code>table</code>.\r\n    O número de linhas removidas depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, só é removida a primeira linha. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, será removido esse número de linhas (a partir do início). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, serão removidas as linhas que satisfaçam a condição até que uma linha não satisfaça a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a primeira linha da tabela.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover as primeiras duas linhas da tabela.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover as primeiras linhas em que [CustomerID] <=2 da tabela.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Devolve uma tabela com as últimas N linhas removidas.",
        "Documentation.LongDescription": "Devolve uma tabela que não contém as últimas <code>countOrCondition</code> linhas da tabela <code>table</code>.\r\n        O número de linhas removidas depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, só é removida a última linha. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, será removido esse número de linhas (a partir do fim). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, serão removidas as linhas que satisfaçam a condição até que uma linha não satisfaça a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a última linha da tabela.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Remover as últimas linhas em que [CustomerID] > 2 da tabela.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Devolve uma tabela com as linhas removidas da tabela de entrada que contenham um erro em pelo menos uma das células. Se for especificada uma lista de colunas, apenas as células existentes nas colunas especificadas serão inspecionadas relativamente a erros.",
        "Documentation.LongDescription": "Devolve uma tabela com as linhas removidas da tabela de entrada que contenham um erro em pelo menos uma das células. Se for especificada uma lista de colunas, apenas as células existentes nas colunas especificadas serão inspecionadas relativamente a erros.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover valor de erro da primeira linha.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Devolve uma tabela com as linhas pela ordem inversa.",
        "Documentation.LongDescription": "Devolve uma tabela com as linhas da entrada <code>table</code> em ordem inversa.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inverter as linhas existentes na tabela.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Devolve uma tabela com uma descrição das colunas (isto é, o esquema) da tabela especificada.",
        "Documentation.LongDescription": "<p>Devolve uma tabela com a descrição das colunas de <code>table</code>.</p>\r\n<p>Cada linha na tabela descreve as propriedades de uma coluna de: <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Nome da Coluna</b></td>\r\n    <td><b>Descrição</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Nome</code></td>\r\n    <td>O nome da coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Posição</code></td>\r\n    <td>A posição baseada em 0 da coluna em <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>O nome do tipo de coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Categoria</code></td>\r\n    <td>A categoria do tipo da coluna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Indica se a coluna pode ou não conter valores <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>A base numérica (por exemplo, base 2, base 10) dos campos <code>NumericPrecision</code> e <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>A precisão de uma coluna numérica na base especificada por <code>NumericPrecisionBase</code>. Este é o número máximo de dígitos que podem ser representados por um valor deste tipo (incluindo dígitos fracionários).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>A escala de uma coluna numérica na base especificada por <code>NumericPrecisionBase</code>. Este é o número de dígitos na secção fracionária de um valor deste tipo. Um valor igual a <code>0</code> indica uma escala fixa sem dígitos fracionários. Um valor igual a <code>null</code> indica que a escala não é conhecida (por ser flutuante ou por não estar definida).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>O número máximo de dígitos fracionários suportados na secção de segundos de um valor de data ou de hora.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>O número máximo de carateres permitidos numa coluna do tipo <code>text</code> ou o número máximo de bytes permitidos numa coluna do tipo <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indica se esta coluna pode variar em termos de comprimento (até <code>MaxLength</code>)  ou se é de tamanho fixo.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>O nome do tipo de coluna no sistema de tipo nativo da origem (por exemplo, <code>nvarchar</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>A expressão predefinida para um valor desta coluna na linguagem de expressão nativa da origem (por exemplo, <code>42</code> ou <code>newid()</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Descrição</code></td>\r\n    <td>A descrição da coluna.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Devolve uma tabela apenas com as linhas da tabela de entrada que contenham um erro em pelo menos uma das células. Se for especificada uma lista de colunas, apenas as células existentes nas colunas especificadas serão inspecionadas relativamente a erros.",
        "Documentation.LongDescription": "Devolve uma tabela apenas com as linhas da tabela de entrada que contenham um erro em pelo menos uma das células. Se for especificada uma lista de colunas, apenas as células existentes nas colunas especificadas serão inspecionadas relativamente a erros.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selecionar nomes de clientes com erros nas linhas correspondentes.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Devolve uma tabela com as primeiras linhas de contagem ignoradas.",
        "Documentation.LongDescription": "Devolve uma tabela que não contém o primeiro número de linhas especificado, <code>countOrCondition</code>, da tabela <code>table</code>.\r\n    O número de linhas ignorado depende do parâmetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for omitido, só é ignorada a primeira linha. </li>\r\n    <li> Se <code>countOrCondition</code> for um número, será ignorado esse número de linhas (a partir do início). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, serão ignoradas as linhas que satisfaçam a condição até que uma linha não satisfaça a condição.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ignorar a primeira linha da tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorar as primeiras duas linhas da tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorar as primeiras linhas em que [Preço] > 25 da tabela.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Impede que quaisquer operações a jusante sejam executadas na origem inicial dos dados.",
        "Documentation.LongDescription": "Impede que quaisquer operações a jusante sejam executadas na origem inicial dos dados em <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Obtém dados de uma tabela SQL de uma forma que impede que quaisquer operações a jusante sejam executadas como uma consulta no SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Transforma colunas em linhas e linhas em colunas.",
        "Documentation.LongDescription": "Transforma colunas em linhas e linhas em colunas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformar as linhas da tabela de pares nome-valor em colunas.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Obtém as relações entre um conjunto de tabelas.",
        "Documentation.LongDescription": "Obtém as relações entre um conjunto de tabelas. Parte-se do princípio de que o conjunto <code>tables</code> tem uma estrutura semelhante à de uma tabela de navegação. A coluna definida por <code>dataColumn</code> contém as tabelas de dados propriamente ditas.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL a partir da base de dados Teradata.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL a partir da base de dados Teradata existente no servidor <code>server</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Introduza o número de meses de dados históricos do Twilio a obter.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Devolve uma tabela que contém uma descrição das colunas (isto é, o esquema) do tipo de tabela especificado.",
        "Documentation.LongDescription": "<p>Devolve uma tabela que descreve as colunas de <code>tableType</code>.</p>\r\n<p>Consulte a documentação <code>Table.Schema</code> para obter uma descrição da tabela resultante.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Feed dos Serviços do Azure DevOps",
        "Documentation.DisplayName": "Feed dos Serviços do Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Devolve uma tabela de feeds OData oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Ligar a Dados do Viva Insights",
        "Documentation.LongDescription": "Importar métricas e dados de atributos semanais de Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com atributos visíveis e métricas semanais para cada funcionário medido na partição.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Devolve os conteúdos do documento HTML divididos nas estruturas que o compõem, bem como uma representação do documento completo e do respetivo texto após a remoção dos tags.",
        "Documentation.LongDescription": "Devolve os conteúdos do documento HTML divididos nas estruturas que o compõem, bem como uma representação do documento completo e do respetivo texto após a remoção dos tags.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela com métricas-chave do Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto final do Webtrends KeyMetrics e devolve todos os dados em tabela.",
        "Documentation.Examples": [
          {
            "Description": "Solicita uma tabela de métricas-chave para o inquilino 98765 nos últimos 30 dias",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Uma tabela de métricas-chave"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Introduza o ID do Perfil associado à conta do Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Devolve uma tabela com dados do Webtrends relevantes."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Ligar a Dados do Viva Insights",
        "Documentation.LongDescription": "Importar métricas e dados de atributos semanais de Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com atributos visíveis e métricas semanais para cada funcionário medido na partição.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Devolve o conteúdo do documento XML como uma tabela hierárquica.",
        "Documentation.LongDescription": "Devolve o conteúdo do documento XML como uma tabela hierárquica.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Devolve o conteúdo do documento XML como uma coleção aninhada de tabelas simples.",
        "Documentation.LongDescription": "Devolve o conteúdo do documento XML como uma coleção aninhada de tabelas simples.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Obter o conteúdo de um ficheiro xml local.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Introduza o URL da sua conta do Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Devolve a coleção de esquemas para uma origem de dados ADO.NET.",
        "Documentation.LongDescription": "Devolve a coleção de esquemas para a origem de dados ADO.NET com o nome de fornecedor <code>providerName</code> e a cadeia de ligação <code>connectionString</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valor da propriedade. Os valores da propriedade podem ser texto ou números. Poderá ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Importar dados de uma base de dados Amazon Redshift.",
        "Documentation.LongDescription": "Devolve uma tabela que lista as tabelas no cluster do Amazon Redshift <code>server</code> na base de dados <code>database</code>.  Pode ser especificado um parâmetro de gravação opcional, <code>options</code>, para controlar as seguintes opções:\r\n<ul>\r\n<li><code>Provider Name</code>: um valor de texto a utilizar como Nome do Fornecedor para a ligação. Isto é aplicado ao utilizar a Autenticação Microsoft.</li>\r\n<li><code>Batch Size</code>: o número de linhas que são obtidas numa única chamada para o server.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Devolve uma tabela de cubos multidimensionais ou modelos em tabela a partir da base de dados do Analysis Services.",
        "Documentation.LongDescription": "Devolve uma tabela de modelos de cubos multidimensionais ou em tabela a partir da base de dados do Analysis Services <code>database</code> no servidor <code>server</code>. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta de MDX nativa utilizada para obter dados.</li>\r\n<li><code>TypedMeasureColumns</code> : Um valor l&#243;gico que indica se os tipos especificados no modelo multidimensional ou em tabela ser&#227;o utilizados para os tipos de colunas de medida adicionados. Quando definido como false, ser&#225; utilizado o tipo de &quot;n&#250;mero&quot; para todas as colunas de medida. O valor predefinido para esta op&#231;&#227;o &#233; false.</li>\r\n<li><code>Culture</code> : Um nome de cultura a especificar a cultura para os dados. Isto corresponde &#224; propriedade de cadeia de liga&#231;&#227;o &quot;Identificador de Localiza&#231;&#227;o&quot;.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>SubQueries</code> : Um n&#250;mero (0, 1 ou 2) que define o valor da propriedade &quot;SubQueries&quot; na cadeia de liga&#231;&#227;o. Isto controla o comportamento de membros calculados em subsele&#231;&#245;es ou subcubos. (O valor predefinido &#233; 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Devolve uma tabela que lista as tabelas existentes no cluster Spark especificado.",
        "Documentation.LongDescription": "Devolve uma tabela que lista as tabelas existentes no <code>host</code> do cluster Spark com <code>protocol</code>. Os protocolos válidos são:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela que lista as tabelas existentes no cluster Spark especificado.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Introduzir os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Servidor Azure DevOps (apenas Placas)",
        "Documentation.LongDescription": "Devolve uma tabela de vistas de Análise oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Interactive Query do HDInsight",
        "Documentation.Caption": null,
        "Documentation.Description": "Importar dados de Interactive Query do HDInsight",
        "Documentation.LongDescription": "\r\nDevolve uma lista de tabelas do Interactive Query do HDInsight especificadas pela<code>base de dados</code> no <code>servidor</code> do Interactive Query do HDInsight. Opcionalmente, pode ser especificado um número de porta juntamente com o servidor, separado por dois pontos. Pode ser especificado um parâmetro <code>options</code>, para controlar as opções seguintes:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo aguardar até abandonar uma tentativa de realizar uma ligação ao servidor. O valor predefinido é \"dependente do controlador\".</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla durante quanto tempo é que a consulta do lado do servidor tem permissão para ser executada antes de ser cancelada. O valor predefinido é \"dependente do controlador\".</li>\r\n</ul>\r\nO parâmetro <code>options</code> é especificado como [opção1 = valor1, opção2 = valor2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Devolve uma tabela com colunas mapeadas aos atributos de uma entidade no Common Data Model, incluindo tipos de dados.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Devolve uma tabela com colunas mapeadas aos atributos de uma entidade no Common Data Model, incluindo tipos de dados. As colunas da definição de entidade serão adicionadas se não forem mapeadas e quaisquer colunas não mapeadas serão removidas.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Devolve um cubo após aplicar-lhe um parâmetro.",
        "Documentation.LongDescription": "Devolve um cubo após aplicar <code>parameter</code> com <code>arguments</code> a <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Altera a granularidade dimensional do contexto de filtro do cubo fechando os atributos mapeados para as colunas especificadas.",
        "Documentation.LongDescription": "Altera a granularidade dimensional do contexto de filtro do <code>cube</code> fechando os atributos mapeados para as colunas especificadas <code>columnNames</code>. As colunas também são removidas da vista em tabela do cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Substitui o conjunto de dimensões devolvidas por Cube.Dimensions.",
        "Documentation.LongDescription": "Substitui o conjunto de dimensões devolvidas por <code>Cube.Dimensions</code>.\r\n Por exemplo, esta função pode ser utilizada para adicionar uma coluna de ID a um atributo de dimensão, para que a origem de dados possa agrupar com base no ID em vez de no valor apresentado.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Aplica uma lista de funções de cubo.",
        "Documentation.LongDescription": "Aplica a lista de funções de cubo, <code>transforms</code>, ao <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Db2.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Db2 no servidor <code>server</code> na instância da base de dados com o nome <code>database</code>. A porta poderá ser especificada de forma opcional com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n<li><code>Implementation</code> : Especifica a implementa&#231;&#227;o do fornecedor de base de dados interna a utilizar. Os valores v&#225;lidos s&#227;o: &quot;IBM&quot; e &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Um n&#250;mero para o CCSID (Coded Character Set Identifier) descodificar os dados bin&#225;rios Db2 FOR BIT em cadeias de carateres. Aplica-se &#224; Implementa&#231;&#227;o = &quot;Microsoft&quot;. Defina 0 para desativar a convers&#227;o (predefini&#231;&#227;o). Defina 1 para converter com base na codifica&#231;&#227;o da base de dados. Defina outro n&#250;mero de CCSID para converter em codifica&#231;&#227;o de aplica&#231;&#227;o.</li>\r\n<li><code>PackageCollection</code> : Especifica um valor de cadeia para a cole&#231;&#227;o de pacote (a predefini&#231;&#227;o &#233; &quot;NULLID&quot;) para permitir a utiliza&#231;&#227;o de pacotes partilhados necess&#225;rios para processar instru&#231;&#245;es SQL. Aplica-se &#224; Implementa&#231;&#227;o = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Especifica se a liga&#231;&#227;o est&#225; a ser efetuada atrav&#233;s de um gateway de liga&#231;&#227;o DB2. Aplica-se a Implementa&#231;&#227;o = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Obtém um conjunto de dados do Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Devolve uma tabela que contém as propriedades e os conteúdos dos blobs encontrados no contentor especificado de um cofre de armazenamento Azure.",
        "Documentation.LongDescription": "Devolve uma tabela que contém uma linha para cada ficheiro blob encontrado no URL do contentor, <code>account</code>, de um cofre de armazemanento Azure. Cada linha contém propriedades do ficheiro e uma ligação para o respetivo conteúdo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Devolve uma tabela que contém os resultados da execução dos seletores CSS especificados em relação ao HTML fornecido.",
        "Documentation.LongDescription": "Devolve uma tabela contendo os resultados da execução dos seletores de CSS especificados em relação ao <code>html</code> fornecido. Um parâmetro de registo opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela de um valor de texto html de exemplo.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Extrai todos os href a partir de um valor de texto de html de exemplo.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Informix.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Informix no servidor <code>server</code> na instância da base de dados com o nome <code>database</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Devolve uma tabela com detalhes de oportunidades potenciais.",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto final da API REST do Marketo em <code>URL</code>/rest/v1/leads.json. São devolvidas todas as oportunidades potenciais na lista <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Obtém os detalhes de três oportunidades potenciais",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Uma tabela com detalhes para as oportunidades potenciais fornecidas"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do ponto final da API REST do Marketo associado à sua conta.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas, vistas e funções escalares armazenadas SQL disponíveis numa base de dados MySQL.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas, vistas e funções escalares armazenadas SQL disponíveis numa base de dados MySQL no servidor <code>server</code> na instância de base de dados com o nome <code>database</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Encoding</code> : Um valor de TextEncoding que especifica o conjunto de carateres utilizado para codificar todas as consultas enviadas para o servidor (a predefini&#231;&#227;o &#233; nulo).</li>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Uma l&#243;gica (true/false) que determina se s&#227;o for&#231;adas as colunas tinyint no servidor como valores l&#243;gicos. O valor predefinido &#233; true.</li>\r\n<li><code>OldGuids</code> : Uma l&#243;gica (true/false) que define se as colunas char(36) (se false) ou colunas bin&#225;rias(16) (se true) v&#227;o ser tratadas como GUIDs. O valor predefinido &#233; false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Uma l&#243;gica (true/false) que define se s&#227;o devolvidas todas as tabelas de todas as bases de dados (se false) ou se s&#227;o devolvidas tabelas e vistas da base de dados especificada (se true). O valor predefinido &#233; false.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importar dados de uma base de dados do IBM Netezza.",
        "Documentation.LongDescription": "\r\nDevolve uma tabela de tabelas, vistas e funções armazenadas de Netezza a partir da base de dados do Netezza Server <code>database</code> no servidor <code>server</code>. A porta pode ser especificada opcionalmente com o servidor, separada por uma vírgula. Pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: um valor lógico (verdadeiro/falso) que define se são geradas propriedades de navegação nos valores devolvidos (a predefinição é verdadeiro)</li>\r\n        <li><code>HierarchicalNavigation</code>: um valor lógico (verdadeiro/falso) que define se as tabelas agrupadas pelos seus nomes de esquema são visualizadas (a predefinição é falso)</li>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla o tempo de espera antes de abandonar uma tentativa de ligação ao servidor. O valor predefinido depende do controlador.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla durante quanto tempo a consulta do lado do servidor tem permissão para ser executado até ser cancelada. O valor predefinido depende do controlador.</li>\r\n<li><code>NormalizeDatabaseName</code>: uma lógica (verdadeiro/falso) que define se o nome da base de dados deve ser normalizado para maiúsculas ou interpretado literalmente (a predefinição é verdadeiro).</li>\r\n</ul>\r\nO parâmetro de registo é especificado como [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas num projeto do IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Devolve o resultado da execução de uma consulta nativa numa origem de dados ODBC.",
        "Documentation.LongDescription": "Devolve o resultado de executar <code>query</code> com a cadeia de carateres <code>connectionString</code> com OBDC. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Poderá ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; 15 segundos.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Devolver o resultado da execução de uma consulta simples na cadeia de ligação fornecida.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Devolve o resultado da execução de uma consulta nativa numa origem de dados OLE DB.",
        "Documentation.LongDescription": "Devolve o resultado de executar <code>query</code> com a cadeia de carateres <code>connectionString</code> com OLE DB. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Poderá ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados PostgreSQL.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados PostgreSQL no servidor <code>server</code> na instância da base de dados com o nome <code>database</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importar dados de um armazém de Informática de Snowflake.",
        "Documentation.LongDescription": "Devolve uma tabela que lista as tabelas do <code>armazém</code> de Computação da Snowflake localizado no <code>servidor</code>. Pode ser especificado um parâmetro de registo opcional, <code>opções</code>, para controlar as seguintes opções:\r\n<ul>\r\n<li><code>Função</code>: um valor de texto a utilizar como nome da Função para a ligação.</li>\r\n<li><code>CreateNavigationProperties</code>: um valor lógico (verdadeiro/falso) que define se devem ser geradas propriedades de navegação nos valores devolvidos (a predefinição é verdadeiro)</li>\r\n<li> <code>ConnectionTimeout</code>: o número de segundos a aguardar por respostas da Snowflake.</li>\r\n<li><code>CommandTimeout</code>: o número de segundos a aguardar a execução de uma consulta.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Liste as tabelas num armazém de Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Devolve uma tabela que lista as tabelas existentes no cluster Spark especificado.",
        "Documentation.LongDescription": "Devolve uma tabela que lista as tabelas existentes no <code>host</code> do cluster Spark com <code>protocol</code>. Os protocolos válidos são:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas numa instância do Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas, vistas e funções armazenadas SQL a partir da base de dados do SQL Server.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas, vistas e funções arquivadas do SQL a partir das bases de dados do SQL Server <code>database</code> no servidor <code>server</code>. A porta pode ser especificada opcionalmente com o servidor, separada por dois pontos ou uma vírgula. Pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Um n&#250;mero que define o valor da cl&#225;usula de consulta &quot;maxdrop&quot; na consulta SQL gerada.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n<li><code>MultiSubnetFailover</code> : Uma l&#243;gica (true/false) que define o valor da propriedade &quot;MultiSubnetFailover&quot; na cadeia de liga&#231;&#227;o (a predefini&#231;&#227;o &#233; falsa).</li>\r\n<li><code>UnsafeTypeConversions</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, tenta dobrar convers&#245;es de tipo, o que pode falhar e resultar na falha de toda a consulta. N&#227;o recomendado para utiliza&#231;&#227;o geral.</li>\r\n<li><code>ContextInfo</code> : Um valor bin&#225;rio utilizado para definir o CONTEXT_INFO antes de executar cada comando.</li>\r\n<li><code>OmitSRID</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, omite o SRID ao produzir Well-Known Text a partir de tipos de geometria e geografia.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Um valor l&#243;gico (verdadeiro/falso) que, se for verdadeiro, permite a dobragem de consultas entre bases de dados no mesmo servidor. O valor predefinido &#233; falso.</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Sybase.",
        "Documentation.LongDescription": "Devolve uma tabela de tabelas e vistas SQL disponíveis numa base de dados Sybase no servidor <code>server</code> na instância da base de dados com o nome <code>database</code>. A porta pode ser opcionalmente especificada com o servidor, separada por dois pontos. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; verdadeiro).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Uma fun&#231;&#227;o que &#233; utilizada para a cria&#231;&#227;o de nomes de propriedades de navega&#231;&#227;o.</li>\r\n<li><code>Query</code> : Uma consulta SQL nativa utilizada para obter dados. Se a consulta produz v&#225;rios conjuntos de resultados, apenas o primeiro vai ser devolvido.</li>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido &#233; dependente do controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n</ul>\r\n\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...] ou [Query = \"select ...\"] por exemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Acrescenta uma coluna com valores de posição explícitos.",
        "Documentation.LongDescription": "Acrescenta uma coluna chamada <code>newColumnName</code> a <code>table</code> com valores de posição explícitos.\r\n    Um valor opcional, <code>initialValue</code>, o valor de índice inicial. Um valor opcional, <code>increment</code>, especifica quanto deve ser incrementado cada valor de índice.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicionar uma coluna de índice chamada \"Índice\" à tabela.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Adicionar uma coluna de índice chamada \"índice\", começada no valor 10 e incrementada por 5, à tabela.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Criar uma cópia de uma linha para cada valor na respetiva lista, com base numa coluna de listas numa tabela especificada.",
        "Documentation.LongDescription": "Com base num <code>table</code>, em que <code>column</code> é uma lista de valores, divide a lista numa linha para cada valor. Os valores existentes nas outras colunas são duplicados em cada linha nova criada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divide a coluna de lista [Nome] existente na tabela nos valores da lista.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propaga o valor de uma célula anterior para as células com valor nulo abaixo na coluna.",
        "Documentation.LongDescription": "Devolve uma tabela a partir de <code>table</code> especificado em que o valor de uma célula anterior é propagado para as células com valor nulo abaixo do <code>columns</code> especificado.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com os valores nulos existentes na coluna [Local] preenchidos com o valor acima deles a partir da tabela.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propaga o valor de uma célula para as células com valor nulo acima na coluna.",
        "Documentation.LongDescription": "Devolve uma tabela a partir de <code>table</code> especificado em que o valor da próxima célula é propagado para as células com valor nulo acima do <code>columns</code> especificado.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com os valores nulos existentes na coluna [Column2] preenchidos com o valor abaixo deles a partir da tabela.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Devolve todas as linhas que contêm o texto especificado na tabela.",
        "Documentation.LongDescription": "Devolve as linhas na tabela <code>table</code> que contêm o texto <code>text</code>. Se o texto não for encontrado, é devolvida uma tabela vazia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar as linhas na tabela que contêm \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Devolve as primeiras linhas de contagem especificadas.",
        "Documentation.LongDescription": "Devolve as primeiras linhas da tabela <code>table</code>, dependendo do valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for um número, será devolvido esse número de linhas (a partir do início). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, serão devolvidas as linhas que satisfaçam a condição até que uma linha não satisfaça a condição.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar as primeiras duas linhas da tabela.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Determinar as primeiras linhas em que [a] > 0 na tabela.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Devolve uma tabela que é o resultado da combinação de um conjunto de tabelas particionadas.",
        "Documentation.LongDescription": "Devolve uma tabela que é o resultado da combinação de um conjunto de tabelas particionadas, <code>partitions</code>. <code>partitionColumn</code> é o nome da coluna a adicionar. O tipo da coluna é predefinido como <code>any</code>, mas pode ser especificado por <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar tipo de item a partir da lista <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Devolve o último número de linhas especificado.",
        "Documentation.LongDescription": "Devolve as últimas linhas da tabela <code>table</code>, dependendo do valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> for um número, será devolvido esse número de linhas a partir da posição (fim - <code>countOrCondition</code>). </li>\r\n    <li> Se <code>countOrCondition</code> for uma condição, serão devolvidas em posição ascendente as linhas que satisfaçam a condição até que uma linha não satisfaça a condição.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar as últimas duas linhas da tabela.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Localizar as últimas linhas em que [a] > 0 na tabela.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Devolve uma tabela em que o texto especificado foi adicionado como prefixo a todas as colunas.",
        "Documentation.LongDescription": "Devolve uma tabela em que o texto especificado, <code>prefix</code>, juntamente com um ponto no formato <code>prefix</code><code>.ColumnName</code>, é adicionado como prefixo aos nomes de todas as colunas do <code>table</code> especificado.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Adicionar o prefixo \"MinhaTabela\" às colunas existentes na tabela.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Devolve as linhas que comecem no desvio especificado.",
        "Documentation.LongDescription": "Devolve as linhas de <code>table</code> que comecem no <code>offset</code> especificado. Um parâmetro opcional, <code>count</code>, especifica o número de linhas a devolver. Por predefinição, são devolvidas todas as linhas após o desvio.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver todas as linhas que começam no desvio 1 na tabela.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Devolver uma linha que começa no desvio 1 na tabela.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Remove as colunas especificadas.",
        "Documentation.LongDescription": "Remove a <code>columns</code> especificada do <code>table</code> fornecido.\r\n    Se a coluna especificada não existir, é gerado um erro a menos que o parâmetro opcional <code>missingField</code> especifique um comportamento alternativo (por ex.: <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a coluna [Telefone] da tabela.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Tente remover uma coluna inexistente da tabela.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Remove todas as ocorrências das linhas especificadas da tabela.",
        "Documentation.LongDescription": "Remove todas as ocorrências do <code>rows</code> especificado em <code>table</code>.\r\n    É possível especificar um parâmetro opcional <code>equationCriteria</code> para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Remover quaisquer linhas em que [a = 1] na tabela <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Remove o número de linhas especificado.",
        "Documentation.LongDescription": "Remover <code>count</code> de linha a partir do início de <code>table</code>, começando no <code>offset</code> especificado. É utilizada uma contagem predefinida de 1, se o parâmetro <code>count</code> não for fornecido. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Remover a primeira linha da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover a linha na posição 1 da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Remover duas linhas começadas na posição 1 da tabela.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Aplica mudanças de nome com o formato {old, new}.",
        "Documentation.LongDescription": "Efetua as mudanças de nome especificadas nas colunas da tabela <code>table</code>. Uma operação de substituição <code>renames</code> é composta por uma lista de dois valores, o nome antigo da coluna e o nome novo da coluna, fornecidos numa lista.\r\n    Se a coluna não existir, é emitida uma exceção a menos que o parâmetro opcional <code>missingField</code> especifique uma alternativa (por ex.: <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Substituir o nome de coluna \"CustomerNum\" com \"CustomerID\" na tabela.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Substituir os nomes de coluna \"CustomerNum\" por \"CustomerID\" e \"PhoneNum\" por \"Phone\" na tabela.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Substituir o nome de coluna \"NewCol\" por \"NewColumn\" na tabela e ignorar se a coluna não existir.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Devolve uma tabela com as colunas pela ordem especificada.",
        "Documentation.LongDescription": "Devolve uma tabela a partir da entrada <code>table</code>, com as colunas pela ordem especificada por <code>columnOrder</code>. As colunas que não forem especificadas na lista não serão reordenadas.\r\n     Se a coluna não existir, é emitida uma exceção a menos que o parâmetro opcional <code>missingField</code> especifique uma alternativa (por ex.: <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Alternar a ordem das colunas [Telefone] e [Nome] na tabela.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Alternar a ordem das colunas [Telefone] e [Endereço] ou utilizar \"MissingField.Ignore\" na tabela. Não altera a tabela por a coluna [Endereço] não existir.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Repete as linhas das tabelas um número de vezes especificado.",
        "Documentation.LongDescription": "Devolve uma tabela com as linhas da entrada <code>table</code> repetidas o número de vezes <code>count</code> especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Repetir as linhas existentes na tabela duas vezes.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Substitui os valores de erro nas colunas especificadas pelo valor especificado correspondente.",
        "Documentation.LongDescription": "Substitui os valores de erro nas colunas especificadas de <code>table</code> pelos novos valores na lista <code>errorReplacement</code>. O formato da lista é {{column1, value1}, …}. Pode haver apenas um valor de substituição por coluna; especificar a coluna mais do que uma vez poderá originar um erro.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substituir o valor de erro pelo texto \"mundo\" na tabela.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Substituir o valor de erro na coluna A pelo texto \"olá\" e, na coluna B, pelo texto \"mundo\" na tabela.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Substitui as chaves da tabela especificada.",
        "Documentation.LongDescription": "Substitui as chaves da tabela especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substitua as chaves existentes de uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Substitui todas as linhas especificadas pelas linhas fornecidas.",
        "Documentation.LongDescription": "Substitui todas as linhas especificadas em <code>table</code> pelas linhas fornecidas. As linhas a substituir e as substituições são especificadas em <code>replacements</code>, utilizando o formato {old, new}.\r\n    É possível especificar um parâmetro opcional <code>equationCriteria</code> para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Substituir as linhas [a = 1, b = 2] e [a = 2, b = 3] por [a = -1, b = -2],[a = -2, b = -3] na tabela.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Devolve uma tabela apenas com as colunas especificadas.",
        "Documentation.LongDescription": "Devolve <code>table</code> apenas com as <code>columns</code> especificadas.\r\n    <ul>\r\n       <li><code>table</code>: a tabela fornecida.</li>\r\n       <li>: <code>columns</code>a lista de colunas da tabela <code>table</code> a devolver. As colunas existentes na tabela devolvida encontram-se na ordem listada em <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Opcional)</i> O que fazer se a coluna não existir.  Exemplo: <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Incluir apenas a coluna [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Incluir apenas as colunas [CustomerID] e [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Se a coluna incluída não existir, o resultado predefinição é um erro.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Se a coluna incluída não existir, a opção <code>MissingField.UseNull</code> cria uma coluna de valores nulos.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Seleciona as linhas de que satisfazem a função de condição.",
        "Documentation.LongDescription": "Devolve uma tabela de linhas a partir de <code>table</code> que corresponde à seleção <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selecionar as linhas na tabela nas quais os valores existentes na coluna [CustomerID] são maiores que 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Selecionar as linhas na tabela nas quais os nomes não podem conter um \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Ordena a tabela utilizando um ou mais nomes de coluna e critérios de comparação.",
        "Documentation.LongDescription": "Ordena <code>table</code> utilizando a lista com um ou mais nomes de colunas e <code>comparisonCriteria</code> opcional, no formato { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordena a tabela pela coluna \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Ordena a tabela pela coluna \"OrderID\" em ordem descendente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Ordena a tabela pela coluna \"CustomerID\" seguida pela \"OrderID\", estando a \"CustomerID\" em ordem ascendente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transforma os nomes das colunas utilizando a função especificada.",
        "Documentation.LongDescription": "Transforma os nomes das colunas através da função <code>nameGenerator</code> especificada. Opções válidas:\r\n    <div>\r\n      <code>MaxLength</code> especifica o comprimento máximo dos novos nomes de colunas. Se a função especificada resultar num nome de coluna maior, o nome longo será cortado.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> é utilizado para controlar a comparação enquanto são gerados novos nomes de coluna. Os comparadores podem ser utilizados para fornecer comparações não sensíveis a maiúsculas e minúsculas ou comparações baseadas na cultura ou no local.\r\n    </div>\r\n    <div>\r\n      Os seguintes comparadores incorporados estão disponíveis na linguagem da fórmula:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n      <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Remover o caráter <code>#(tab)</code> dos nomes de coluna",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformar nomes de coluna para gerar nomes não sensíveis a maiúsculas e minúsculas de comprimento 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Aplica transformações de tipo com o formato { column, type } utilizando uma cultura específica.",
        "Documentation.LongDescription": "Devolve uma tabela a partir da entrada <code>table</code> aplicando a operação de transformação às colunas especificadas no parâmetro <code>typeTransformations</code> (em que o formato é { column name, type name}) utilizando a cultura especificada no parâmetro opcional <code>culture</code> (por exemplo, \"en-US\").\r\n    Se a coluna não existir, é emitida uma exceção.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformar os valores numéricos existentes na coluna [a] em valores de texto da tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transforma os valores de uma ou mais colunas.",
        "Documentation.LongDescription": "Transforma <code>table</code> ao aplicar cada operação de coluna listada em <code>transformOperations</code> (em que o formato é { nome da coluna, transformação } ou { nome da coluna, transformação, novo tipo de coluna }).\r\n    Se for especificado um <code>defaultTransformation</code>, será aplicado a todas as colunas não listadas no <code>transformOperations</code>.\r\n    Se uma coluna listada no <code>transformOperations</code> não existir, será acionada uma exceção, a menos que o parâmetro opcional <code>missingField</code> especifique uma alternativa (por exemplo, <code>MissingField.UseNull</code> ou <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Converte os valores de texto na coluna [A] em valores de números e os valores de números na coluna [B] em valores de texto.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Converte valores numéricos na coluna [X] em falta em valores de texto, ignorando as colunas que não existem.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Converte valores numéricos na coluna [X] em falta em valores de texto; o valor assumido por predefinição nas colunas que não existem é nulo.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Incrementa os valores de número na coluna [B] e converte-os em valores de texto, convertendo as restantes colunas em números.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Cria ou expande uma tabela com processadores definidos pelo utilizador para operações de consulta e ação.",
        "Documentation.LongDescription": "<p>Devolve uma vista de <code>table</code> em que as funções especificadas em <code>handlers</code> são utilizadas em detrimento do comportamento pré-definido de uma operação quando esta é aplicada à vista.</p>\r\n<p>Se <code>table</code> for fornecido, todas as funções de processador são opcionais. Se <code>table</code> não for fornecido, serão necessárias as funções de processador <code>GetType</code> e <code>GetRows</code>. Se uma função de processador não for especificada numa operação, o comportamento predefinido da operação será antes aplicado a <code>table</code> (exceto no caso de <code>GetExpression</code>).</p>\r\n<p>As funções de processador devem devolver um valor semanticamente equivalente ao resultado da aplicação da operação em relação a <code>table</code> (ou a vista resultante, no caso de <code>GetExpression</code>).</p>\r\n<p>Se uma função de processador gerar um erro, o comportamento pré-definido da operação é aplicado à vista.</p>\r\n<p><code>Table.View</code> pode ser utilizado para implementar a dobragem a uma origem de dados – a tradução de consultas M para consultas específicas da origem (por exemplo, para criar declarações T-SQL a partir de consultas M).</p>\r\n<p>Consulte a documentação publicada sobre o conector personalizado do Power Query para obter uma descrição mais completa de <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crie uma vista básica que não requeira o acesso às linhas para determinar o tipo ou a contagem de linhas.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Introduzir os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (apenas Placas)",
        "Documentation.LongDescription": "Devolve uma tabela de vistas de Análise oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importar dados do Vertica",
        "Documentation.LongDescription": "Devolve uma tabela de esquemas disponíveis no servidor chamado pelo parâmetro de <code>servidor</code> na base de dados com o nome do parâmetro de<code>base de dados</code>.\r\nUm parâmetro de registo opcional, <code>opções</code>, pode ser fornecido para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo deve aguardar antes de abandonar uma tentativa para estabelecer uma ligação ao servidor. O valor predefinido é dependente do controlador.</li>\r\n    <li><code>CommandTimeout </code>: uma duração que controla quanto tempo a consulta do lado do servidor está autorizada a executar antes de ter sido cancelado. O valor predefinido é dependente do controlador.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Listar as tabelas no Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela com conteúdo de relatório do Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto final do relatório do Webtrends indicado e devolve todos os dados em tabela.",
        "Documentation.Examples": [
          {
            "Description": "Efetua uma chamada ao ponto final do relatório dos visitantes do Webtrends para os dados dos últimos 30 dias",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Uma tabela de dados do visitante"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Retorna o conteúdo de VisualQuery (vqr), relatórios ou funções publicadas pelo software RH Zucchetti",
        "Documentation.Examples": [
          {
            "Description": "Lista de Solicitações para colaboradores",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Devolve uma lista de domínios do Active Directory na mesma floresta que o domínio especificado ou do domínio do computador atual se não for especificado nenhum.",
        "Documentation.LongDescription": "Devolve uma lista de domínios do Active Directory na mesma floresta que o domínio especificado ou do domínio do computador atual se não for especificado nenhum.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Devolve o resultado da execução de uma consulta nativa numa origem de dados ADO.NET.",
        "Documentation.LongDescription": "Devolve o resultado da execução de <code>query</code> com a cadeia de ligação <code>connectionString</code> utilizando o fornecedor ADO.NET <code>providerName</code>. <code>connectionString</code> pode ser texto ou um registo de pares de valores da propriedade. Os valores da propriedade podem ser texto ou número. Poderá ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Uma dura&#231;&#227;o que controla o tempo em que a consulta do lado do servidor est&#225; autorizada a ser executada antes de ser cancelada. O valor predefinido &#233; dez minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Uma l&#243;gica (true/false) que determina se &#233; para produzir op&#231;&#245;es de cadeia de liga&#231;&#227;o compat&#237;veis com o SQL Server para a autentica&#231;&#227;o Windows. O valor predefinido &#233; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Devolve os conjuntos de relatório no Adobe Analytics.",
        "Documentation.LongDescription": "Devolve uma tabela de pacotes multidimensionais da base de dados do Adobe Analytics. É possível especificar um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Uma l&#243;gica (true/false) que define se s&#227;o visualizadas as tabelas agrupadas pelos respetivos nomes de esquema (a predefini&#231;&#227;o &#233; falso).</li>\r\n<li><code>MaxRetryCount</code> : O n&#250;mero de tentativas a realizar numa consulta pelo resultado da consulta. O valor predefinido &#233; 120.</li>\r\n<li><code>RetryInterval</code> : A dura&#231;&#227;o de tempo entre tentativas de repeti&#231;&#227;o. O valor predefinido &#233; 1 segundo.</li>\r\n<li><code>Implementation</code> : Especifica a vers&#227;o da API do Adobe Analytics. Os valores v&#225;lidos s&#227;o: &quot;2.0&quot;. A predefini&#231;&#227;o utiliza a vers&#227;o 1.4 da API</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "LLAP do Hive",
        "Documentation.Caption": null,
        "Documentation.Description": "Importar dados de um LLAP do Hive",
        "Documentation.LongDescription": "\r\nDevolve uma lista de tabelas do Hive LLAP especificadas pela <code>base de dados</code> no <code>servidor</code> do Hive LLAP mediante a utilização do <code>protocolo</code> selecionado. Opcionalmente, pode ser especificado um número de porta juntamente com o servidor, separado por dois pontos. O Thrift Transport Protocol é um tipo enumerado com os valores \"Standard\", \"HTTP\". Pode ser especificado um parâmetro <code>options</code> opcional, para controlar as opções seguintes:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: uma duração que controla quanto tempo aguardar até abandonar uma tentativa de fazer uma ligação ao servidor. O valor predefinido é dependente do controlador.</li>\r\n        <li><code>CommandTimeout</code>: uma duração que controla durante quanto tempo é que a consulta do lado do servidor tem permissão para ser executada antes de se cancelada. O valor predefinido é dependente do controlador.</li>\r\n</ul>\r\nO parâmetro <code>options</code> é especificado como [opção1 = valor1, opção2 = valor2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os resumos de dados entre 01-05-2017 e 15-06-2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "A função devolve os dados de resumo entre 01-05-2017 e 15-06-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os dados de resumo para abril de 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "A função devolve os dados entre 01-04-2017 e 30-04-2017"
          },
          {
            "Description": "Partindo do princípio que hoje é 15-06-2017, obter os dados de resumos de abril de 2017 até ao momento.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "A função devolve os dados entre 01-04-2017 e 15-06-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Introduzir os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Serviços do Azure DevOps",
        "Documentation.LongDescription": "Devolve uma tabela de feeds OData oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Ligue-se à sua instância do Dataverse (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Intercala a tabela de dimensão especificada com o contexto de filtro do cubo e altera a granularidade dimensional do contexto de filtro expandindo o conjunto especificado de atributos de dimensão.",
        "Documentation.LongDescription": "Intercala a tabela de dimensão especificada, <code>dimensionSelector</code>, no contexto de filtro do cubo, <code>cube</code>, e altera a granularidade dimensional expandindo o conjunto de atributos de dimensão especificado, <code>attributeNames</code>. Os atributos de dimensão são adicionados à vista em tabela com colunas chamadas <code>newColumnNames</code> ou <code>attributeNames</code> se não for especificado.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Adiciona uma coluna ao cubo que contém o resultado da medida aplicada no contexto de linha de cada linha.",
        "Documentation.LongDescription": "Adiciona uma coluna com o nome <code>column</code> ao <code>cube</code> que contém o resultado da medida <code>measureSelector</code> aplicada no contexto de linha de cada linha. A aplicação da medida é afetada por alterações à granularidade dimensional e à segmentação de dados. Os valores da medida serão ajustados após a execução de operações de cubo específicas.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 for Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Introduza a sua empresa e ambiente do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Introduza a sua empresa e ambiente do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Introduza a sua empresa e ambiente do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Introduza a sua empresa e ambiente do Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devolve uma tabela com dados relevantes do Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Devolve o conteúdo do atual livro Excel.",
        "Documentation.LongDescription": "Devolve o conteúdo do livro atual do Excel. Devolve tabelas, intervalos com nome e matrizes dinâmicas. Ao contrário de <code>Excel.Workbook</code>, não devolve folhas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Devolve uma tabela com o conteúdo de uma conta do Microsoft Exchange.",
        "Documentation.LongDescription": "Devolve um índice da conta do Microsoft Exchange <code>mailboxAddress</code>. Se <code>mailboxAddress</code> não for especificada, será utilizada a conta predefinida da credencial.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Armazém",
        "Documentation.Caption": "Armazém",
        "Documentation.Description": "Importa dados de Armazéns",
        "Documentation.LongDescription": "Importa dados de Armazéns"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Devolve as contas do Google Analytics.",
        "Documentation.LongDescription": "Devolve as contas do Google Analytics que são acessíveis a partir da credencial atual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importar dados de uma base de dados do Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Devolve uma tabela que lista os projetos disponíveis no Google BigQuery. Pode especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Uma duração que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor. O valor predefinido é o valor do Tempo Limite de Ligação ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Uma duração que controla o tempo em que a consulta do lado do servidor está autorizada a ser executada antes de ser cancelada.</li>\r\n        <li><code>BillingProject</code>: O id do projeto de faturação. O valor predefinido é o primeiro projeto disponível.</li>\r\n        <li><code>UseStorageApi</code>: Especifica se a API BigQuery Storage deve ser utilizada para conjuntos de resultados grandes. O valor predefinido é true para utilizar a API Storage. Defina como false para não utilizar a API Storage</li>\r\n      </ul>\r\n    O parâmetro do registo é especificado como [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Listar os projetos disponíveis no Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importar dados de um Lakehouse",
        "Documentation.Description": "Importar dados de um Lakehouse",
        "Documentation.LongDescription": "Ligue-se a todos os Lakehouses aos quais tem acesso e escolha as entidades que gostaria de utilizar"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela com os principais dados do MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Devolve uma tabela com os principais dados do MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com os principais dados do MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Uma tabela com os principais dados do MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Devolve uma tabela com atividades de oportunidades potenciais.",
        "Documentation.LongDescription": "Efetua uma chamada ao ponto final da API REST do Marketo em <code>URL</code>/rest/v1/activities.json. Todas as atividades na lista <code>activityIds</code> que ocorreram desde <code>startTime</code> foram devolvidas.",
        "Documentation.Examples": [
          {
            "Description": "Solicita uma tabela das atividades \"Visitar Página Web\" desde 1 de novembro de 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Uma tabela com detalhes de todas as atividades \"Visitar Página Web\" desde 1 de novembro"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Fluxos de dados do Power BI (Legado)",
        "Documentation.Caption": "Importar dados a partir de um fluxo de dados do Power BI",
        "Documentation.LongDescription": "Ligar a todos os fluxos de dados do Power BI que têm acesso e escolha as entidades que gostaria de utilizar."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Importa dados de Datamarts",
        "Documentation.LongDescription": "Importa dados de Datamarts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Fluxos de dados",
        "Documentation.Caption": "Importar dados a partir de um fluxo de dados",
        "Documentation.Description": "Importar dados a partir de um fluxo de dados",
        "Documentation.LongDescription": "Ligue-se a todos os fluxos de dados aos quais tem acesso e escolha as entidades que gostaria de utilizar"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importar dados do QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Devolve uma tabela que lista os projetos disponíveis no QuickBooks Online. Pode especificar um parâmetro de registo opcional, <code>options</code>, para controlar as opções seguintes:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Uma duração que controla o tempo que se deve aguardar antes de abandonar uma tentativa de ligar ao servidor.</li>\r\n        <li><code>CommandTimeout</code>: Uma duração que controla o tempo em que a consulta do lado do servidor está autorizada a ser executada antes de ser cancelada.</li>\r\n         </ul>\r\n    O parâmetro de registo é especificado como [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Devolve os objetos da conta do Salesforce.",
        "Documentation.LongDescription": "Devolve os objetos na conta do Salesforce fornecidos nas credenciais. A conta será ligada através do ambiente fornecido <code>loginUrl</code>. Se não for fornecido nenhum ambiente, a conta será ligada à produção (https://login.salesforce.com). Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Uma l&#243;gica (true/false) que define se s&#227;o geradas as propriedades de navega&#231;&#227;o nos valores devolvidos (a predefini&#231;&#227;o &#233; false).</li>\r\n<li><code>ApiVersion</code> : A vers&#227;o da API do SalesForce a utilizar para esta consulta. Quando n&#227;o &#233; especificada, &#233; utilizada a vers&#227;o 29.0 da API.</li>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar o pedido ao servidor. O valor predefinido &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Devolve os relatórios da conta do Salesforce.",
        "Documentation.LongDescription": "Devolve os objetos na conta do Salesforce fornecidos nas credenciais. A conta será ligada através do ambiente fornecido <code>loginUrl</code>. Se não for fornecido nenhum ambiente, a conta será ligada à produção (https://login.salesforce.com). Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>ApiVersion</code> : A vers&#227;o da API do SalesForce a utilizar para esta consulta. Quando n&#227;o &#233; especificada, &#233; utilizada a vers&#227;o 29.0 da API.</li>\r\n<li><code>Timeout</code> : Uma dura&#231;&#227;o que controla o tempo que se deve aguardar antes de abandonar o pedido ao servidor. O valor predefinido &#233; espec&#237;fico da origem.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Devolve os InfoCubes e as consultas num sistema SAP Business Warehouse agrupados por InfoArea.",
        "Documentation.LongDescription": "Devolve uma tabela de InfoCubes e consultas agrupados por InfoArea a partir de uma instância do SAP Business Warehouse no servidor <code>server</code> com o número de sistema <code>systemNumberOrSystemId</code> e o ID de Cliente <code>clientId</code>. É possível especificar um parâmetro de registo opcional, <code>optionsOrLogonGroup</code>, para controlar as seguintes opções:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela de folhas, relatórios, pastas e áreas de trabalho da API do Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Devolve uma tabela aninhada de folhas, relatórios, pastas e áreas de trabalho disponíveis da API do Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela de folhas, relatórios, pastas e áreas de trabalho disponíveis no nível mais elevado da hierarquia do Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Uma tabela de folhas, relatórios, pastas e áreas de trabalho do nível mais elevado da hierarquia do Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela de métricas disponíveis da API do SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Esta função pode ser utilizada para obter dados de um determinado ponto final \"Métricas\" da API do SparkPost v1. Ao atualizar estas tabelas ou ao fazer chamadas à API do SparkPost com este conector, tenha em atenção que a API do SparkPost tem um limite de velocidade de API restrito. Se vir um código de estado 429 devolvido pelo servidor do SparkPost, isso significa que atingiu o limite de velocidade e que terá de aguardar até poder fazer mais chamadas. Ao escolher um valor para o parâmetro \"Número de dias\", não se esqueça de que a API apenas armazena 6 meses de dados.",
        "Documentation.Examples": [
          {
            "Description": "Obtém as métricas de capacidade de entrega de count_sent e count_rejected relativamente a todos os campaign_ids agregados durante os últimos três dias. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Efetua uma chamada à API do Stripe.",
        "Documentation.LongDescription": "Efetua uma chamada à API do Stripe em https://api.stripe.com/v1/<code>method</code>, com <code>additionalParameters</code> de registo transmitido como parâmetros adicionais e lista <code>ColumnNames</code> de nomes de colunas esperados. É utilizada a versão do Stripe de 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Devolve uma tabela com eventos criados após 1 de novembro de 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Uma tabela com todos os eventos especificados para a conta do Stripe atual"
          },
          {
            "Description": "Devolve uma tabela com todos os SKUs",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Uma tabela com todos os SKUs para a conta do Stripe atual"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Devolve uma tabela que apresenta as funções e tabelas disponíveis do Stripe.",
        "Documentation.LongDescription": "Devolve uma tabela que apresenta as funções e tabelas disponíveis do Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Área de trabalho do Azure Synapse Analytics",
        "Documentation.Caption": "Área de trabalho do Azure Synapse Analytics",
        "Documentation.LongDescription": "Conector PQ para a área de trabalho do Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Adiciona uma coluna com o nome especificado. O valor é calculado utilizando a função de seleção especificada em cada linha tomada como entrada.",
        "Documentation.LongDescription": "Adiciona uma coluna chamada <code>newColumnName</code> à tabela <code>table</code>. Os valores da coluna são calculado utilizando a função de seleção especificada <code>columnGenerator</code> em cada linha tomada como entrada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicionar uma coluna de números com o nome \"Preço Total\" à tabela, sendo que cada valor é a soma das colunas [Preço] e [Envio].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Adiciona uma nova coluna com valores representativos obtidos por valores de agrupamento difusos da coluna especificada na tabela.",
        "Documentation.LongDescription": "Adiciona uma nova coluna <code>newColumnName</code> a <code>table</code> com valores representativos de <code>columnName</code>. Os valores representativos são obtidos por valores de correspondência difusa em <code>columnName</code>, para cada linha.\r\n    <p>Pode ser incluído um conjunto opcional de <code>options</code> para especificar como comparar as colunas de chaves. As opções incluem:\r\n    <ul>\r\n<li><code>Culture</code> : Permite o agrupamento de registos com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, uma op&#231;&#227;o Cultura de &quot;ja-JP&quot; agrupa registos com base na cultura japonesa. O valor predefinido &#233; &quot;&quot;, o qual efetua o agrupamento com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (verdadeiro/falso) que permite o agrupamento de chaves n&#227;o sens&#237;veis as mai&#250;sculas e min&#250;sculas. Por exemplo, quando for verdadeiro, &quot;Uvas&quot; &#233; agrupado com &quot;uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a combina&#231;&#227;o de partes de texto para encontrar grupos. Por exemplo, quando for verdadeiro, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a semelhan&#231;a entre um valor de entrada e o valor representativo dessa entrada. O valor predefinido &#233; nulo. Nesse caso, n&#227;o ser&#225; adicionada uma nova coluna para semelhan&#231;as.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a classifica&#231;&#227;o de semelhan&#231;a com base na qual ser&#227;o agrupados dois valores.\r\n    Por exemplo, &quot;Pacto&quot; e &quot;Pato&quot; (com um &quot;c&quot; em falta) s&#243; ser&#227;o agrupados se esta op&#231;&#227;o estiver definida como inferior a 0,90.\r\n    Um limiar de 1,00 s&#243; permite as correspond&#234;ncias exatas.\r\n    Tenha em aten&#231;&#227;o que uma &quot;correspond&#234;ncia exata&quot; difusa poder&#225; ignorar diferen&#231;as como a utiliza&#231;&#227;o de mai&#250;sculas/min&#250;sculas, a ordem das palavras e a pontua&#231;&#227;o.\r\n    A predefini&#231;&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite agrupar registos com base em mapeamentos de valores personalizados. Deve conter colunas &quot;De&quot; e &quot;Para&quot;. Por exemplo, &quot;Uvas&quot; &#233; agrupado com &quot;Passas&quot; se for fornecida uma tabela de transforma&#231;&#227;o com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;Para&quot; contendo &quot;Passas&quot;. Note que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;As uvas s&#227;o doces&quot; tamb&#233;m ser&#225; agrupado com &quot;As passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Encontre os valores representativos para a localização dos colaboradores.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Efetua uma junção entre as tabelas nas colunas fornecidas e produz o resultado da junção numa nova coluna.",
        "Documentation.LongDescription": "Junta as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na igualdade dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são introduzidos na coluna chamada <code>newColumnName</code>.\r\nEsta função comporta-se de forma semelhante a Table.Join com um JoinKind de LeftOuter, exceto que os resultados da junção são apresentados de forma aninhada e não de forma simples.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicionar uma coluna de junção a ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) chamada \"preço/stock\" a partir da tabela ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) associada em [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Adiciona uma chave a uma tabela.",
        "Documentation.LongDescription": "Adiciona uma chave a <code>table</code>, onde <code>columns</code> é a lista de nomes das colunas que definem a chave e <code>isPrimary</code> especifica se a chave é primária.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Adicione uma chave primária de coluna única a uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Anexa uma coluna com a classificação de uma ou mais colunas.",
        "Documentation.LongDescription": "Anexa uma coluna com o nome <code>newColumnName</code> a <code>table</code> com a classificação de uma ou mais colunas descritas por <code>comparisonCriteria</code>.\r\nA opção RankKind no <code>options</code> pode ser usada por utilizadores avançados para escolher um método de classificação mais específico.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Adicione uma coluna com o nome \"RevenueRank\" à tabela que classifica a coluna \"Receita\" por ordem decrescente.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agrega uma coluna de tabelas a várias colunas na tabela contentora.",
        "Documentation.LongDescription": "Agrega tabelas em <code>table</code>[<code>column</code>] a várias colunas que contém valores agregados para as tabelas. <code>aggregations</code> é utilizado para especificar as colunas que contêm as tabelas a agregar, as funções de agregação a aplicar às tabelas para gerar os respetivos valores e os nomes das colunas de agregação a criar.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregar colunas de tabela em <code>[t]</code> na tabela <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> na soma de <code>[t.a]</code>, o mínimo e máximo de <code>[t.b]</code> e a contagem de valores em <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Mantém o desvio inicial e, em seguida, alterna entre utilizar e ignorar as linhas seguintes.",
        "Documentation.LongDescription": "Mantém o desvio inicial e, em seguida, alterna entre utilizar e ignorar as linhas seguintes.\r\n    <ul>\r\n       <li><code>table</code>: a tabela de entrada.</li>\r\n       <li><code>offset</code>: o número de linhas a manter entre as iterações de início.</li>\r\n       <li><code>skip</code>: o número de linhas a remover em cada iteração.</li>\r\n       <li><code>take</code>: o número de linhas a manter em cada iteração.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver uma tabela a partir da tabela que, a partir da primeira linha, salta 1 valor e, em seguida, mantém 1 valor.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Combinar as colunas especificadas numa coluna nova utilizando a função de combinação especificada.",
        "Documentation.LongDescription": "Combinar as colunas especificadas numa coluna nova utilizando a função de combinação especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combine os nomes próprios e apelidos numa nova coluna, separados por uma vírgula.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Combina as colunas especificadas numa nova coluna de valor de registo, em que cada registo tem nomes de campo e valores correspondentes aos nomes e valores das colunas combinadas.",
        "Documentation.LongDescription": "Combina as colunas especificadas de <code>table</code> numa nova coluna de valor recorde denominada <code>newColumnName</code> onde cada registo tem nomes de campo e valores correspondentes aos nomes e valores das colunas que foram combinadas. Se for especificado um registo para <code>options</code>, podem ser fornecidas as seguintes opções:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: quando especificado como texto, indica que o nome da coluna fornecido deve ser tratado como o nome de apresentação do registo. Esta não precisa de ser uma das colunas do próprio registo.</li>\r\n     <li> <code></code> do NomedoTipo: quando especificado como texto, fornece um nome de tipo lógico para o registo resultante que pode ser utilizado durante a carga de dados para conduzir o comportamento pelo ambiente de carga.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplica uma coluna com o nome especificado. Os valores e o tipo são copiados da coluna de origem.",
        "Documentation.LongDescription": "Duplicar a coluna chamada <code>columnName</code> à tabela <code>table</code>. Os valores e o tipo da coluna <code>newColumnName</code> são copiados da coluna <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Duplicar a coluna \"a\" para uma coluna chamada \"coluna copiada\" na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Expande uma coluna de registos em colunas com cada um dos valores.",
        "Documentation.LongDescription": "Com base no <code>column</code> de registos existentes na entrada <code>table</code>, cria uma tabela com uma coluna para cada campo existente no registo. Opcionalmente, <code>newColumnNames</code> pode ser especificado para garantir nomes exclusivos para as colunas na tabela nova.\r\n    <ul>\r\n        <li><code>table</code>: a tabela original com a coluna de registos a expandir. </li>\r\n        <li><code>column</code>: a coluna a expandir.</li>\r\n        <li><code>fieldNames</code>: a lista de campos a expandir nas colunas da tabela.</li>\r\n        <li><code>newColumnNames</code>: a lista de nomes a atribuir às colunas novas. Os nomes das colunas novas não podem duplicar qualquer coluna na tabela nova.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expandir a coluna [a] existente na tabela <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> para 3 colunas \"aa\", \"bb\" e \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Expande uma coluna de registos ou uma coluna de tabelas para várias colunas na tabela contentora.",
        "Documentation.LongDescription": "Expande as tabelas existentes em <code>table</code>[<code>column</code>] em várias linhas e colunas. <code>columnNames</code> é utilizado para selecionar as colunas a expandir a partir da tabela interna. Especifique <code>newColumnNames</code> para evitar conflitos entre as colunas existentes e as novas colunas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expande as colunas de tabela em <code>[a]</code> na tabela <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> em 3 colunas <code>[t.a]</code>, <code>[t.b]</code> e <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Agrupa as filas na tabela com base na correspondência difusa de chaves.",
        "Documentation.LongDescription": "Agrupa as linhas de <code>table</code> por valores de correspondência difusa na coluna especificada, <code>key</code>, para cada linha.\r\n    Para cada grupo, é criado um registo contendo as colunas de chaves (e os seus valores) juntamente com quaisquer colunas agregadas especificadas por <code>aggregatedColumns</code>.\r\n    Esta função não pode garantir a devolução de uma ordem fixa de linhas.\r\n    <p>Pode ser incluído um conjunto opcional de <code>options</code> para especificar como comparar as colunas de chaves. As opções incluem:\r\n    <ul>\r\n<li><code>Culture</code> : Permite o agrupamento de registos com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, uma op&#231;&#227;o Cultura de &quot;ja-JP&quot; agrupa registos com base na cultura japonesa. O valor predefinido &#233; &quot;&quot;, o qual efetua o agrupamento com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (verdadeiro/falso) que permite o agrupamento de chaves n&#227;o sens&#237;veis as mai&#250;sculas e min&#250;sculas. Por exemplo, quando for verdadeiro, &quot;Uvas&quot; &#233; agrupado com &quot;uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a combina&#231;&#227;o de partes de texto para encontrar grupos. Por exemplo, quando for verdadeiro, &quot;U vas&quot; &#233; agrupado com &quot;Uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a semelhan&#231;a entre um valor de entrada e o valor representativo dessa entrada. O valor predefinido &#233; nulo. Nesse caso, n&#227;o ser&#225; adicionada uma nova coluna para semelhan&#231;as.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a classifica&#231;&#227;o de semelhan&#231;a com base na qual ser&#227;o agrupados dois valores.\r\n    Por exemplo, &quot;Pacto&quot; e &quot;Pato&quot; (com um &quot;c&quot; em falta) s&#243; ser&#227;o agrupados se esta op&#231;&#227;o estiver definida como inferior a 0,90.\r\n    Um limiar de 1,00 s&#243; permite as correspond&#234;ncias exatas.\r\n    Tenha em aten&#231;&#227;o que uma &quot;correspond&#234;ncia exata&quot; difusa poder&#225; ignorar diferen&#231;as como a utiliza&#231;&#227;o de mai&#250;sculas/min&#250;sculas, a ordem das palavras e a pontua&#231;&#227;o.\r\n    A predefini&#231;&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite agrupar registos com base em mapeamentos de valores personalizados. Deve conter colunas &quot;De&quot; e &quot;Para&quot;. Por exemplo, &quot;Uvas&quot; &#233; agrupado com &quot;Passas&quot; se for fornecida uma tabela de transforma&#231;&#227;o com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;Para&quot; contendo &quot;Passas&quot;. Note que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, &quot;As uvas s&#227;o doces&quot; tamb&#233;m ser&#225; agrupado com &quot;As passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrupe a tabela ao adicionar uma coluna agregada [Count] que contém o número de empregados em cada localização (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Junta as linhas das duas tabelas de correspondência difusa com base nas chaves especificadas.",
        "Documentation.LongDescription": "<p>Associa as linhas de <code>table1</code> às linhas de <code>table2</code> com base numa correspondência difusa dos valores das colunas de chaves selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>).</p>\r\n<p>A correspondência difusa consiste numa comparação baseada na semelhança do texto e não na igualdade do mesmo.</p>\r\n<p>Por predefinição, é efetuada uma associação interna; no entanto, é possível incluir um <code>joinKind</code> opcional para especificar o tipo de associação. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Pode ser incluído um conjunto opcional de <code>joinOptions</code> para especificar como comparar as colunas de chaves. As opções incluem:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Um n&#250;mero entre 1 e 8 que especifica o n&#250;mero de threads paralelos a utilizar para a correspond&#234;ncia difusa. O valor predefinido &#233; 1.</li>\r\n<li><code>Culture</code> : Permite a correspond&#234;ncia de registos com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, uma op&#231;&#227;o Cultura de &quot;ja-JP&quot; faz a correspond&#234;ncia de registos com base na cultura japonesa. O valor predefinido &#233; &quot;&quot;, o qual efetua a correspond&#234;ncia com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a correspond&#234;ncia de chaves n&#227;o sens&#237;veis a mai&#250;sculas e min&#250;sculas. Por exemplo, quando for verdadeiro, &quot;Uvas&quot; &#233; correspondido com &quot;uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a combina&#231;&#227;o de partes de texto para encontrar correspond&#234;ncias. Por exemplo, quando for verdadeiro, &quot;U vas&quot; &#233; correspondido com &quot;Uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>NumberOfMatches</code> : Um n&#250;mero inteiro que especifica o n&#250;mero m&#225;ximo de linhas correspondentes que podem ser devolvidas para cada linha de entrada. Por exemplo, um valor de 1 devolver&#225; no m&#225;ximo uma linha correspondente para cada linha de entrada. Se esta op&#231;&#227;o n&#227;o for fornecida, s&#227;o devolvidas todas as linhas correspondentes.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a semelhan&#231;a entre um valor de entrada e o valor representativo dessa entrada. O valor predefinido &#233; nulo. Nesse caso, n&#227;o ser&#225; adicionada uma nova coluna para semelhan&#231;as.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a classifica&#231;&#227;o de semelhan&#231;a com base na qual ser&#225; feita a correspond&#234;ncia entre dois valores.\r\n    Por exemplo, a correspond&#234;ncia entre &quot;Pacto&quot; e &quot;Pato&quot; (com um &quot;c&quot; em falta) s&#243; ser&#225; feita se esta op&#231;&#227;o estiver definida como inferior a 0,90.\r\n    Um limiar de 1,00 s&#243; permite as correspond&#234;ncias exatas.\r\n    Tenha em aten&#231;&#227;o que uma &quot;correspond&#234;ncia exata&quot; difusa poder&#225; ignorar diferen&#231;as como a utiliza&#231;&#227;o de mai&#250;sculas/min&#250;sculas, a ordem das palavras e a pontua&#231;&#227;o.\r\n    A predefini&#231;&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite fazer a correspond&#234;ncia de registos com base em mapeamentos de valores personalizados. Deve conter colunas &quot;De&quot; e &quot;Para&quot;. Por exemplo, &quot;Uvas&quot; &#233; combinado com &quot;Passas&quot; se uma tabela de transforma&#231;&#227;o for fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;Para&quot; contendo &quot;Passas&quot;. Note que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, tamb&#233;m ser&#225; efetuada a correspond&#234;ncia de &quot;As uvas s&#227;o doces&quot; com &quot;As passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Associação à esquerda difusa interna de duas tabelas com base em [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Efetua uma junção difusa entre as tabelas nas colunas fornecidas e produz o resultado da junção numa nova coluna.",
        "Documentation.LongDescription": "<p>Associa as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na correspondência difusa dos valores das colunas de chaves selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são devolvidos numa nova coluna com o nome <code>newColumnName</code>.</p>\r\n<p>A correspondência difusa consiste numa comparação baseada na semelhança do texto e não na igualdade do mesmo.</p>\r\n<p>O <code>joinKind</code> opcional especifica o tipo de associação a efetuar. Por predefinição, é efetuada uma associação externa à esquerda se não for especificado um <code>joinKind</code>. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Pode ser incluído um conjunto opcional de <code>joinOptions</code> para especificar de que forma comparar as colunas de chaves. As opções incluem:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Um n&#250;mero entre 1 e 8 que especifica o n&#250;mero de threads paralelos a utilizar para a correspond&#234;ncia difusa. O valor predefinido &#233; 1.</li>\r\n<li><code>Culture</code> : Permite a correspond&#234;ncia de registos com base em regras espec&#237;ficas da cultura. Pode ser qualquer nome de cultura v&#225;lido. Por exemplo, uma op&#231;&#227;o Cultura de &quot;ja-JP&quot; faz a correspond&#234;ncia de registos com base na cultura japonesa. O valor predefinido &#233; &quot;&quot;, o qual efetua a correspond&#234;ncia com base na cultura Ingl&#234;s Invari&#225;vel.</li>\r\n<li><code>IgnoreCase</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a correspond&#234;ncia de chaves n&#227;o sens&#237;veis a mai&#250;sculas e min&#250;sculas. Por exemplo, quando for verdadeiro, &quot;Uvas&quot; &#233; correspondido com &quot;uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>IgnoreSpace</code> : Um valor l&#243;gico (verdadeiro/falso) que permite a combina&#231;&#227;o de partes de texto para encontrar correspond&#234;ncias. Por exemplo, quando for verdadeiro, &quot;U vas&quot; &#233; correspondido com &quot;Uvas&quot;. O valor predefinido &#233; verdadeiro.</li>\r\n<li><code>NumberOfMatches</code> : Um n&#250;mero inteiro que especifica o n&#250;mero m&#225;ximo de linhas correspondentes que podem ser devolvidas para cada linha de entrada. Por exemplo, um valor de 1 devolver&#225; no m&#225;ximo uma linha correspondente para cada linha de entrada. Se esta op&#231;&#227;o n&#227;o for fornecida, s&#227;o devolvidas todas as linhas correspondentes.</li>\r\n<li><code>SimilarityColumnName</code> : Um nome para a coluna que mostra a semelhan&#231;a entre um valor de entrada e o valor representativo dessa entrada. O valor predefinido &#233; nulo. Nesse caso, n&#227;o ser&#225; adicionada uma nova coluna para semelhan&#231;as.</li>\r\n<li><code>Threshold</code> : Um n&#250;mero entre 0,00 e 1,00 que especifica a classifica&#231;&#227;o de semelhan&#231;a com base na qual ser&#225; feita a correspond&#234;ncia entre dois valores.\r\n    Por exemplo, a correspond&#234;ncia entre &quot;Pacto&quot; e &quot;Pato&quot; (com um &quot;c&quot; em falta) s&#243; ser&#225; feita se esta op&#231;&#227;o estiver definida como inferior a 0,90.\r\n    Um limiar de 1,00 s&#243; permite as correspond&#234;ncias exatas.\r\n    Tenha em aten&#231;&#227;o que uma &quot;correspond&#234;ncia exata&quot; difusa poder&#225; ignorar diferen&#231;as como a utiliza&#231;&#227;o de mai&#250;sculas/min&#250;sculas, a ordem das palavras e a pontua&#231;&#227;o.\r\n    A predefini&#231;&#227;o &#233; 0,80.</li>\r\n<li><code>TransformationTable</code> : Uma tabela que permite fazer a correspond&#234;ncia de registos com base em mapeamentos de valores personalizados. Deve conter colunas &quot;De&quot; e &quot;Para&quot;. Por exemplo, &quot;Uvas&quot; &#233; combinado com &quot;Passas&quot; se uma tabela de transforma&#231;&#227;o for fornecida com a coluna &quot;De&quot; contendo &quot;Uvas&quot; e a coluna &quot;Para&quot; contendo &quot;Passas&quot;. Note que a transforma&#231;&#227;o ser&#225; aplicada a todas as ocorr&#234;ncias do texto na tabela de transforma&#231;&#227;o. Com a tabela de transforma&#231;&#227;o acima, tamb&#233;m ser&#225; efetuada a correspond&#234;ncia de &quot;As uvas s&#227;o doces&quot; com &quot;As passas s&#227;o doces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Associação à esquerda difusa interna de duas tabelas com base em [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Agrupa as linhas da tabela que tenham a mesma chave.",
        "Documentation.LongDescription": "Agrupa as linhas de <code>table</code> pelas colunas-chave definidas por <code>key</code>. O <code>key</code> pode ser um nome de uma única coluna, ou uma lista de nomes de colunas.\r\n    Para cada grupo, é construído um registo contendo as colunas-chave (e os seus valores), juntamente com quaisquer colunas agregadas especificadas por <code>aggregatedColumns</code>.\r\n    Opcionalmente, <code>groupKind</code> e <code>comparer</code> também podem ser especificados.<br>\r\n    <br>\r\n    Se os dados já estiverem ordenados por colunas-chave, então pode ser fornecida uma <code>groupKind</code> do GroupKind.Local. Isto pode melhorar o desempenho do agrupamento em certos casos,\r\n    uma vez que todas as linhas com um determinado conjunto de valores-chave são assumidas como contíguas.<br>\r\n    <br>\r\n    Ao passar uma <code>comparer</code>, note que se a mesma tratar chaves diferentes como sendo iguais, pode ser colocada uma linha num grupo cujas chaves diferem das suas.<br>\r\n    <br>\r\n    Esta função não garante a ordenação das linhas que devolve.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrupar a tabela, adicionando uma coluna agregada [total] que contém a soma dos preços (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Insere uma lista de linhas na tabela na posição especificada.",
        "Documentation.LongDescription": "Devolve uma tabela com a lista de linhas, <code>rows</code>, inserida em <code>table</code> na posição especificada, <code>offset</code>. Cada coluna existente na linha a inserir tem de corresponder aos tipos de coluna da tabela.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inserir a linha na tabela na posição 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Inserir duas linhas na tabela na posição 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Junta as linhas das duas tabelas correspondentes com base nas chaves especificadas.",
        "Documentation.LongDescription": "<p>Associa as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na igualdade dos valores das colunas de chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>).</p>\r\n<p>Por predefinição, é efetuada uma associação interna; no entanto, é possível incluir um <code>joinKind</code> opcional para especificar o tipo de associação. As opções incluem:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Pode ser incluído um conjunto opcional de <code>keyEqualityComparers</code> para especificar como comparar as colunas chave. Atualmente, este parâmetro destina-se apenas a utilização interna.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Associe duas tabelas com uma única coluna de chaves.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Associe duas tabelas com nomes de colunas em conflito, ao utilizar várias colunas de chaves.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Devolve as maiores linhas utilizando os critérios especificados.",
        "Documentation.LongDescription": "Devolve as maiores linhas em <code>table</code> com base no <code>comparisonCriteria</code>.\r\n    Após as linhas serem ordenadas, o parâmetro <code>countOrCondition</code> tem de ser especificado para filtrar melhor o resultado. Note que o algoritmo de ordenação não pode garantir um resultado ordenado fixo. O parâmetro <code>countOrCondition</code> pode assumir vários formatos:\r\n    <ul>\r\n        <li> Se for especificado um número, é devolvida uma lista com um máximo de <code>countOrCondition</code> itens por ordem ascendente. </li>\r\n        <li> Se for especificada uma condição, é devolvida uma lista dos itens que satisfizerem a condição inicialmente. Quando um item não satisfizer a condição, não serão considerados mais itens. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o valor mais alto na coluna [a] com a condição [a] > 0, na tabela. Lembre-se de que as linhas são ordenadas antes do filtro ser aplicado.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Localizar a linha com o valor mais alto na coluna [a] com a condição [b] > 0, na tabela. Lembre-se de que as linhas são ordenadas antes do filtro ser aplicado.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Devolve as menores linhas utilizando os critérios especificados.",
        "Documentation.LongDescription": "Devolve as menores linhas em <code>table</code> com base no <code>comparisonCriteria</code>. Após as linhas serem ordenadas, o parâmetro <code>countOrCondition</code> tem de ser especificado para filtrar mais o resultado. Note que o algorítmo de ordenação não pode garantir um resultado de ordenação fixo. O parâmetro <code>countOrCondition</code> pode assumir vários formatos:\r\n    <ul>\r\n        <li> Se for especificado um número, é devolvida uma lista com um máximo de <code>countOrCondition</code> itens por ordem ascendente. </li>\r\n        <li> Se for especificada uma condição, é devolvida uma lista dos itens que satisfizerem a condição inicialmente. Quando um item não satisfizer a condição, não serão considerados mais itens. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o valor mais baixo na coluna [a] com a condição [a] < 3, na tabela. Lembre-se de que as linhas são ordenadas antes do filtro ser aplicado.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Localizar a linha com o valor mais baixo na coluna [a] com a condição [b] < 0, na tabela . Lembre-se de que as linhas são ordenadas antes do filtro ser aplicado.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Efetua uma junção entre as tabelas nas colunas fornecidas e produz o resultado da junção numa nova coluna.",
        "Documentation.LongDescription": "<p>Associa as linhas de <code>table1</code> com as linhas de <code>table2</code> com base na igualdade dos valores das colunas chave selecionadas por <code>key1</code> (para <code>table1</code>) e <code>key2</code> (para <code>table2</code>). Os resultados são introduzidos na coluna com o nome <code>newColumnName</code>.</p>\r\n<p>O <code>joinKind</code> opcional especifica o tipo de associação a efetuar. Por predefinição, é efetuada uma associação externa à esquerda se não for especificado um <code>joinKind</code>.</p>\r\n<p>Pode ser incluído um conjunto otimizado de <code>keyEqualityComparers</code> para especificar como comparar as colunas chave. Atualmente, esta funcionalidade destina-se apenas a utilização interna.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Associe duas tabelas com uma única coluna de chaves.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Com base num par de colunas que representam pares atributo-valor, roda os dados na coluna de atributo em títulos de coluna.",
        "Documentation.LongDescription": "Com base num par de colunas que representam pares atributo-valor, roda os dados na coluna de atributo em títulos de coluna.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Utilizar os valores \"a\", \"b\" e \"c\" na coluna de atributos da tabela <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> e transformá-los numa coluna própria.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Utilizar os valores \"a\", \"b\" e \"c\" na coluna de atributos da tabela <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> e transformá-los numa coluna própria.  O atributo \"c\" da chave \"x\" tem vários valores associados, pelo que deve ser utilizada a função List.Max para resolver o conflito.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Substitui o intervalo de linhas especificado pelas linhas fornecidas.",
        "Documentation.LongDescription": "Substitui um número de linhas especificado, <code>count</code>, na entrada <code>table</code>, pelo <code>rows</code> especificado, começando depois de <code>offset</code>. O parâmetro <code>rows</code> é uma lista de registos.\r\n    <ul>\r\n       <li><code>table</code>: a tabela em que a substituição é efetuada.</li>\r\n       <li><code>offset</code>: o número de linhas a ignorar antes de efetuar a substituição.</li>\r\n       <li><code>count</code>: o número de linhas a substituir.</li>\r\n       <li><code>rows</code>: a lista de registos de linha a inserir em <code>table</code> na localização especificada por <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "A partir da posição 1, substituir 3 linhas.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Substitui um valor por outro nas colunas especificadas.",
        "Documentation.LongDescription": "Substitui <code>oldValue</code> por <code>newValue</code> nas colunas especificadas de <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Substituir o texto \"adeus\" por \"mundo\" na coluna B, correspondendo apenas o valor completo.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Substituir o texto \"ur\" por \"or\" na coluna B, correspondendo qualquer parte do valor.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizar os nomes dos funcionários dos EUA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizar todas as colunas de funcionários dos EUA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Divide as colunas especificadas num conjunto de colunas adicionais utilizando a função de divisor especificada.",
        "Documentation.LongDescription": "Divide as colunas especificadas num conjunto de colunas adicionais utilizando a função de divisor especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividir a coluna [Name] na posição de \"i\" em duas colunas",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Converte um conjunto de colunas existentes numa tabela em pares atributo-valor.",
        "Documentation.LongDescription": "Converte um conjunto de colunas existentes numa tabela em pares atributo-valor, combinado com o resto dos valores em cada linha.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Utilizar as colunas \"a\", \"b\" e \"c\" da tabela <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> e convertê-las em pares atributo-valor.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Converte todas as colunas exceto um conjunto especificado em pares atributo-valor.",
        "Documentation.LongDescription": "Converte todas as colunas, exceto um conjunto especificado, em pares atributo-valor, combinados com os restantes valores em cada linha.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Converte todas as colunas, exceto um conjunto especificado, em pares atributo-valor, combinados com os restantes valores em cada linha.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>O conector do Teams Analytics permite-lhe obter informações sobre a sua utilização do Teams. Os dados estão disponíveis tanto para a sua atividade pessoal no Teams como para a atividade em Equipas das quais é membro.</p>\r\n<p>Estão disponíveis dados para os 90 dias anteriores. </p>\r\n<p> Para mais detalhes sobre os tipos de dados disponíveis, consulte a seguinte documentação de ajuda: </p>\r\n<ul>\r\n<li><b>Utilização do Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Atividade de Utilizador do Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Introduzir os nomes da organização e do projeto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Serviços do Azure DevOps",
        "Documentation.LongDescription": "Devolve uma tabela de feeds OData oferecida pelo Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Devolve um formato binário que lê um valor binário.",
        "Documentation.LongDescription": "Devolve um formato binário que lê um valor binário.  Se <code>length</code> for especificado, o valor binário conterá um número de bytes equivalente.  Se <code>length</code> não for especificado, o valor binário conterá os bytes restantes.  O <code>length</code> pode ser especificado como um número ou como um formato binário do comprimento que precede os dados binários.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Devolve um valor lógico baseado na verificação de igualdade dos dois valores apresentados.",
        "Documentation.LongDescription": "Devolve um valor <code>lógico</code> baseado na verificação de igualdade dos dois valores apresentados, <code>x</code> e <code>y</code>, utilizando o <code>comparer</code> fornecido.\r\n      <div>\r\n        <code>comparer</code> é um <code>Comparador</code> utilizado no controlo da comparação.\r\n        Um comparador é uma função que aceita dois argumentos e devolve -1, 0 ou 1, com base no facto de o primeiro valor ser menor, igual ou superior ao segundo.\r\n        Os comparadores podem ser utilizados para fornecer comparações não sensíveis a maiúsculas e minúsculas ou baseadas na cultura ou na região.\r\n      </div>\r\n      <div>\r\n        Os comparadores incorporados seguintes estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparador.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n        <li><code>Comparador.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparar \"1\" e \"A\" com a região \"pt-PT\" para determinar se os valores são iguais.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Devolve a data e hora atuais no fuso horário local. Este valor é fixo e não mudará com as chamadas sucessivas.",
        "Documentation.LongDescription": "Devolve um valor <code>datetime</code> definido para a data e hora atuais no sistema. Este valor é fixo e não mudará com as chamadas sucessivas, ao contrário de DateTime.LocalNow, que poderá devolver valores diferentes no decorrer da execução de uma expressão.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Devolve a data e hora atuais no fuso horário local.",
        "Documentation.LongDescription": "Devolve um valor <code>datetime</code> definido para a data e hora atuais no sistema.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Devolve a data e hora atuais no fuso horário local. Este valor é fixo e não mudará com as chamadas sucessivas.",
        "Documentation.LongDescription": "Devolve um valor <code>datetime</code> definido para a data e hora atuais no sistema. O valor devolvido contém informações de fuso horário que representam o fuso horário local. Este valor é fixo e não mudará com as chamadas sucessivas, ao contrário de DateTimeZone.LocalNow, que poderá devolver valores diferentes no decorrer da execução de uma expressão.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Devolve a data e hora atuais em UTC (o fuso horário GMT). Este valor é fixo e não mudará com as chamadas sucessivas.",
        "Documentation.LongDescription": "Devolve a data e hora atuais em UTC (o fuso horário GMT). Este valor é fixo e não mudará com as chamadas sucessivas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Devolve a data e hora atuais no fuso horário local.",
        "Documentation.LongDescription": "Devolve um valor <code>datetimezone</code> definido para a data e hora atuais no sistema.\r\n    O valor devolvido contém informações de fuso horário que representam o fuso horário local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Devolve a data e hora atuais em UTC (o fuso horário GMT).",
        "Documentation.LongDescription": "Devolve a data e hora atuais em UTC (o fuso horário GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Obter a data e hora atuais em UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Devolve um identificador opaco para a avaliação atualmente em execução.",
        "Documentation.LongDescription": "Devolve um identificador opaco para a avaliação atualmente em execução.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Devolve um identificador opaco para correlacionar pedidos recebidos com pedidos enviados.",
        "Documentation.LongDescription": "Devolve um identificador opaco para correlacionar pedidos recebidos com pedidos enviados.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Escreve uma entrada de rastreio, se o rastreio estiver ativado e devolve o valor.",
        "Documentation.LongDescription": "Escreve um rastreio <code>message</code>, se o rastreio estiver ativado e devolve <code>value</code>. Um parâmetro opcional <code>delayed</code> especifica se atrasa a avaliação de <code>value</code> até que a mensagem é rastreada. <code>traceLevel</code> pode utilizar um dos seguintes valores:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Rastreie a mensagem ates de invocar a função Text.From e devolva o resultado.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "O fornecedor de identidade predefinido do anfitrião atual.",
        "Documentation.LongDescription": "O fornecedor de identidade predefinido do anfitrião atual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Acumula um valor de resumo dos itens existentes na lista.",
        "Documentation.LongDescription": "Acumula um valor de resumo dos itens existentes na lista <code>list</code>, utilizando <code>accumulator</code>.\r\n    É possível definir um parâmetro de seed opcional, <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Acumula o valor de resumo dos itens existentes na lista {1, 2, 3, 4, 5} utilizando ((state, current) => state + current).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Gera uma lista de valores datetimezone a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Devolve uma lista de valores <code>datetimezone</code> com o tamanho <code>count</code>, começando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> que é adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 10 valores, começando 5 minutos antes do Dia de Ano Novo (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) incrementando por 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Gera uma lista de valores datetime a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Devolve uma lista de valores <code>datetime</code> com o tamanho <code>count</code>, começando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> que é adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 10 valores, começando 5 minutos antes do Dia de Ano Novo (#datetime(2011, 12, 31, 23, 55, 0)) incrementando por 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Gera uma lista de valores date a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Devolve uma lista de valores <code>date</code> com o tamanho <code>count</code>, começando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> que é adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 5 valores, começando na Véspera de Ano Novo (#date(2011, 12, 31)) incrementando por 1 dia (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Gera uma lista de valores de duração a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Devolve uma lista de valores <code>count</code> <code>duration</code>, começando em <code>start</code> e incrementados pela <code>duration</code> <code>step</code> especificada.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 5 valores começando com 1 hora e incrementando por uma hora.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Gera uma lista de valores.",
        "Documentation.LongDescription": "Gera uma lista de valores com as funções fornecidas. A função <code>initial</code> gera um valor de candidato inicial, que é testado em relação a <code>condition</code>.\r\n    Se o valor do candidato for aprovado, será devolvido como parte da lista resultante e o valor de candidato seguinte será gerado ao passar o valor recentemente aprovado para <code>next</code>.\r\n    Quando um valor candidato deixar de corresponder a <code>condition</code>, o processo de geração de lista é interrompido.\r\n    Também é possível fornecer um parâmetro opcional, <code>selector</code>, para transformar os itens na lista resultante.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crie uma lista que começa com o número dez, reduzindo repetidamente em uma unidade e garantindo que cada item é superior a zero.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Gerar uma lista de registos que contêm x e y, em que x é um valor e y é uma lista. x deve ser menor que 10 e representa o número de itens na lista y. Após a lista ser gerada, devolver apenas os valores de x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Insere valores numa lista no índice especificado.",
        "Documentation.LongDescription": "Devolve uma lista nova produzida pela inserção dos valores existentes em <code>values</code> em <code>list</code> em <code>index</code>. A primeira posição na lista encontra-se no índice 0.\r\n      <ul>\r\n        <li><code>list</code>: a lista de destino onde os valores devem ser inseridos.</li>\r\n        <li><code>index</code>: o índice da lista de destino (<code>list</code>) onde os valores devem ser inseridos. A primeira posição na lista encontra-se no índice 0.</li>\r\n        <li><code>values</code>: a lista de valores que devem ser inseridos em <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Inserir a lista ({3, 4}) na lista de destino ({1, 2, 5}) no índice 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Inserir uma lista com uma lista aninhada ({1, {1.1, 1.2}}) numa lista de destino ({2, 3, 4}) no índice 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Substitui o número da contagem de valores a partir da posição pelos valores de substituição.",
        "Documentation.LongDescription": "Substitui os valores <code>count</code> em <code>list</code> pela lista <code>replaceWith</code>, a partir da posição especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Substituir {7, 8, 9} na lista {1, 2, 7, 8, 9, 5} por {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Pesquisa um valor especificado numa lista e substitui-o.",
        "Documentation.LongDescription": "Pesquisa o valor <code>oldValue</code> numa lista de valores, <code>list</code>, e substitui cada ocorrência pelo valor de substituição <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Substituir todos os valores \"a\" existentes na lista {\"a\", \"B\", \"a\", \"a\"} por \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Gera uma lista de valores time a partir de um valor inicial, uma contagem e um valor de duração incremental.",
        "Documentation.LongDescription": "Devolve uma lista de valores <code>time</code> com o tamanho <code>count</code>, começando em <code>start</code>. O incremento especificado, <code>step</code>, é um valor <code>duration</code> que é adicionado a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 4 valores, começando ao meio dia (#time(12, 0, 0)) incrementando por uma hora (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Devolve uma lista cujos elementos são transformados a partir da lista de entrada utilizando funções especificadas.",
        "Documentation.LongDescription": "Devolve uma lista cujos elementos são projetados a partir da lista de entrada.<br>\r\n    <br>\r\n    A função <code>collectionTransform</code> transforma cada elemento numa lista intermediada e a função <code>resultTransform</code> recebe o elemento original, bem como um item da lista intermediada para construir o resultado final.<br>\r\n    <br>\r\n    A função <code>collectionTransform</code> tem a assinatura <code>(x as any) as list => ...</code>, em que <code>x</code> é um elemento em <code>list</code>.\r\n    A função <code>resultTransform</code> projeta a forma do resultado e tem a assinatura <code>(x as any, y as any) as any => ...</code>, em que <code>x</code> é um elemento em <code>list</code> e <code>y</code> é um elemento da lista gerada ao passar <code>x</code> para <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Aplane uma lista de pessoas e respetivos animais de estimação.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Devolve um número aleatório.",
        "Documentation.LongDescription": "Devolve um número aleatório entre 0 e 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obter um número aleatório.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Adiciona um campo a um registo.",
        "Documentation.LongDescription": "Adicionada um campo a um registo <code>record</code>, com base no nome do campo <code>fieldName</code> e no valor <code>value</code> especificados.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Adicionar o campo Endereço ao registo.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Substitui texto pela entrada fornecida.",
        "Documentation.LongDescription": "Substitui o texto <code>old</code> no <code>text</code> original pelo texto <code>new</code>. Esta função de substituição pode ser utilizada em <code>List.ReplaceValue</code> e <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Substituir o texto \"oL\" por \"Ol\" na cadeia \"oLá mundo\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Substitui valores pela entrada fornecida.",
        "Documentation.LongDescription": "Substitui o valor <code>old</code> no <code>value</code> original pelo valor <code>new</code>. Esta função de substituição pode ser utilizada em <code>List.ReplaceValue</code> e <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Substituir o valor 11 pelo valor 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Devolve um resultado JSON da API do Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Efetua uma chamada para a API REST do Smartsheet 2.0 no ponto final especificado e devolve resultados como um registo JSON.",
        "Documentation.Examples": [
          {
            "Description": "Solicita dados do ponto final da API do Smartsheet das folhas com argumentos adicionais especificados",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Uma tabela com informações das folhas conforme devolvidas pela API do Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Devolve uma função que não efetua divisões, devolvendo o respetivo argumento como uma lista de elemento único.",
        "Documentation.LongDescription": "Devolve uma função que não efetua divisões, devolvendo o respetivo argumento como uma lista de elemento único.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto no espaço em branco.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto no espaço em branco.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por carateres de espaço em branco, ao tratar as aspas como qualquer outro caráter.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Divide a tabela numa lista de tabelas com base no número de grupos e colunas especificado.",
        "Documentation.LongDescription": "Divide <code>table</code> numa lista de <code>groups</code> tabelas com base no valor de <code>column</code> e uma função <code>hash</code>.\r\n    A função <code>hash</code> é aplicada ao valor da linha <code>column</code> para obter o valor de hash da linha. O módulo de valor de hash <code>groups</code> determina a tabela devolvida em que a linha será colocada.\r\n    <ul>\r\n       <li><code>table</code>: a tabela a particionar.</li>\r\n       <li><code>column</code>: a coluna cujo hash deve ser calculado para determinar a tabela devolvida em que a linha se encontra.</li>\r\n       <li><code>groups</code>: o número de tabelas em que a tabela de entrada será particionada.</li>\r\n       <li><code>hash</code>: a função aplicada para obter um valor de hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Dividir a tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> em 2 tabelas na coluna [a], utilizando os valores das colunas como a função de hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Devolve a parte de <code>text</code> entre o <code>startDelimiter</code> e <code>endDelimiter</code> especificados.\r\n    Um valor numérico opcional <code>startIndex</code> indica qual a ocorrência de <code>startDelimiter</code> que deve ser considerada.\r\n    Uma lista opcional <code>startIndex</code> indica qual a ocorrência de <code>startDelimiter</code> que deve ser considerada, bem como se a indexação deve ser feita a partir do início ou do fim da entrada.\r\n    O <code>endIndex</code> é semelhante, com a exceção de que a indexação é feita relativamente a <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a parte de \"111 (222) 333 (444)\" entre o (primeiro) parêntese aberto e o (primeiro) parêntese fechado que o sucede.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Obtenha a parte de \"111 (222) 333 (444)\" entre o segundo parêntese aberto e o primeiro parêntese fechado que o sucede.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Obtenha a parte de \"111 (222) 333 (444)\" entre o segundo parêntese aberto a partir do fim e o segundo parêntese fechado que o sucede.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Insere um valor de texto noutro numa posição específica.",
        "Documentation.LongDescription": "Devolve o resultado da inserção do valor de texto <code>newText</code> no valor de texto <code>text</code> na posição <code>offset</code>. As posições começam no número 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Inserir \"C\" entre \"B\" e \"D\" em \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Devolve um novo identificador exclusivo global (GUID) aleatório.",
        "Documentation.LongDescription": "Devolve um novo identificador exclusivo global (GUID) aleatório.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Substitui todas as ocorrências da subcadeia especificada no texto.",
        "Documentation.LongDescription": "Devolve o resultado da substituição de todas as ocorrências do valor de texto <code>old</code> no valor de texto <code>text</code> pelo valor de texto <code>new</code>. Esta função é sensível às maiúsculas e minúsculas.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Substituir cada ocorrência de \"o\" numa frase por \"um\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Remove um intervalo de carateres e insere um valor novo na posição especificada.",
        "Documentation.LongDescription": "Devolve o resultado da remoção de um número de carateres, <code>count</code>, do valor de texto <code>text</code> começando na posição <code>offset</code> e, em seguida, inserindo o valor de texto <code>newText</code> na mesma posição em <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Substituir um caráter na posição 2 no valor de texto \"ABGF\" pelo novo valor de texto \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Adiciona uma chave ao tipo de tabela especificado.",
        "Documentation.LongDescription": "Adiciona uma chave ao tipo de tabela especificado.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Devolve uma lista de identidades que a condição vai aceitar.",
        "Documentation.LongDescription": "<p>Utilizar a <code>identityProvider</code> especificada converte a <code>condition</code> na lista de identidades para a qual <code>condition</code> deveria devolver <code>verdadeira</code> em todos os contextos de autorização com <code>identityProvider</code> como o fornecedor de identidade. É gerado um erro se não for possível converter <code>condition</code> numa lista de identidades, por exemplo, se <code>condition</code> consulta atributos diferentes de identidades de utilizador ou de grupo para tomar uma decisão. </p>\r\n    <p>Tenha em atenção que a lista de identidades representa as identidades conforme aparecem em <code>condition</code> e a normalização (tal como a expansão do grupo) não é executada nas mesmas.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Comprime um valor binário, utilizando o tipo de compressão especificado.",
        "Documentation.LongDescription": "Comprime um valor binário utilizando o tipo de compressão especificado. Esta chamada resulta numa cópia comprimida da informação. Os tipos de compressão incluem:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Comprime o valor binário.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Descomprime um valor binário utilizando o tipo de compressão indicado.",
        "Documentation.LongDescription": "Descomprime um valor binário utilizando o tipo de compressão indicado.  O resultado desta chamada é uma cópia descomprimida da entrada. Os tipos de compressão incluem:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Descomprime o valor binário.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Devolve um subconjunto do valor binário, começando num desvio.",
        "Documentation.LongDescription": "Devolve um subconjunto do valor binário, começando no desvio <code>binary</code>. Um parâmetro opcional, <code>offset</code>, define o comprimento máximo do subconjunto.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Devolve um subconjunto do valor binário, começando no desvio 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Devolve um subconjunto de comprimento 2 do desvio 6 do valor binário.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Divide o binário especificado numa lista de binários com o tamanho de página especificado.",
        "Documentation.LongDescription": "Divide <code>binary</code> numa lista de binários em que o primeiro elemento da lista de saída é um binário que contém os primeiros <code>pageSize</code> bytes de\r\n    o binário de origem, o elemento seguinte da lista de saída é um binário que contém os seguintes <code>pageSize</code> bytes do binário de origem, e assim sucessivamente.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Cria ou expande um binário com processadores definidos pelo utilizador para operações de consulta e ação.",
        "Documentation.LongDescription": "<p>Devolve uma vista de <code>binary</code> em que as funções especificadas em <code>handlers</code> são utilizadas em detrimento do comportamento pré-definido de uma operação quando esta é aplicada à vista.</p>\r\n<p>Se <code>binary</code> for fornecido, todas as funções de processador são opcionais. Se <code>binary</code> não for fornecido, será necessária a função de processador <code>GetStream</code>. Se uma função de processador não for especificada numa operação, o comportamento predefinido da operação será antes aplicado a <code>binary</code> (exceto no caso de <code>GetExpression</code>).</p>\r\n<p>As funções de processador devem devolver um valor semanticamente equivalente ao resultado da aplicação da operação em relação a <code>binary</code> (ou a vista resultante, no caso de <code>GetExpression</code>).</p>\r\n<p>Se uma função de processador gerar um erro, o comportamento pré-definido da operação é aplicado à vista.</p>\r\n<p><code>Binary.View</code> pode ser utilizado para implementar a dobragem a uma origem de dados – a tradução de consultas M em operações específicas da origem (por exemplo, para transferir uma secção de um ficheiro).</p>\r\n<p>Consulte a documentação publicada sobre o conector personalizado do Power Query para obter uma descrição mais completa de <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Crie uma vista básica que não requer o acesso aos dados para determinar o comprimento.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Devolve um formato binário com a ordem de bytes especificada por uma função.",
        "Documentation.LongDescription": "Devolve um formato binário com a ordem de bytes especificada por <code>binaryFormat</code>.  A ordem de bytes predefinida é <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Devolve um formato binário que escolhe o formato binário seguinte com base num valor que já foi lido.",
        "Documentation.LongDescription": "Devolve um formato binário que escolhe o formato binário seguinte com base num valor que já foi lido.  O valor de formato binário produzido por esta função funciona por fases:<ul>\r\n<li>O formato binário especificado pelo parâmetro <code>binaryFormat</code> é utilizado para ler um valor.</li>\r\n<li>O valor é transmitido para a função de escolha especificada pelo parâmetro <code>chooseFunction</code>.</li>\r\n<li>A função de escolha inspeciona o valor e devolve um segundo formato binário.</li>\r\n<li>O segundo formato binário é utilizado para ler um segundo valor.</li>\r\n<li>Se a função de combinação for especificada, o primeiro e segundo valores são transmitidos para a função de combinação e o valor resultante é devolvido.</li>\r\n<li>Se a função de combinação não for especificada, o segundo valor será devolvido.</li>\r\n<li>O segundo valor é devolvido.</li>\r\n</ul>O parâmetro <code>type</code> opcional indica o tipo de formato binário que será devolvido pela função de escolha.  Poderá ser especificado <code>type any</code>, <code>type list</code> ou <code>type binary</code>.  Se o parâmetro <code>type</code> não for especificado, <code>type any</code> será utilizado.   Se <code>type list</code> ou <code>type binary</code> for utilizado, o sistema poderá conseguir devolver um valor <code>binary</code> ou <code>list</code> de transmissão em fluxo em vez de um na memória intermédia, o que poderá reduzir a quantidade de memória necessária para ler o formato.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Ler uma lista de bytes em que o número de elementos é determinado pelo primeiro byte.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Ler uma lista de bytes em que o número de elementos é determinado pelo primeiro byte e preservar o primeiro byte lido.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Ler uma lista de bytes em que o número de elementos é determinado pelo primeiro byte através da utilização de uma lista de transmissão em fluxo.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Devolve um formato binário que lê um grupo de itens.",
        "Documentation.LongDescription": "Os parâmetros são os seguintes:\r\n<ul>\r\n<li>O parâmetro <code>binaryFormat</code> especifica o formato binário do valor de chave.</li>\r\n<li>O parâmetro <code>group</code> fornece informações sobre o grupo de itens conhecidos.</li>\r\n<li>O parâmetro <code>extra</code> opcional pode ser utilizado para especificar uma função que devolverá um valor de formato binário para o valor resultante de qualquer chave inesperada. Se o parâmetro <code>extra</code> não for especificado, será gerado um erro se surgirem valores de chave inesperados.</li>\r\n</ul>\r\nO parâmetro <code>group</code> especifica uma lista de definições de itens.  Cada definição de item é uma lista, com 3 a 5 valores, tal como se segue:\r\n<ul>\r\n<li>Valor de chave. O valor da chave que corresponde ao item.  Tem de ser exclusivo no conjunto de itens.</li>\r\n<li>Formato de item.  O formato binário que corresponde ao valor do item.  Tal permite que cada item tenha um formato diferente. </li>\r\n<li>Ocorrência de item.  O valor <code>BinaryOccurrence.Type</code> relativo ao número de vezes que se espera que o item apareça no grupo.   Os itens obrigatórios que não estejam presentes causam um erro.  Os itens duplicados obrigatórios ou opcionais são processados como valores de chave inesperados.</li>\r\n<li>Valor de item predefinido (opcional). Se o valor de item predefinido aparecer na lista de definições de itens e não for nulo, será utilizado em vez da predefinição.  A predefinição para itens de repetição ou opcionais é nula e a predefinição para valores de repetição é uma lista vazia { }.</li>\r\n<li>Transformação do valor de item (opcional). Se a função de transformação do valor de item estiver presente na lista de definições de itens e não for nula, será chamada para transformar o valor de item antes de este ser devolvido.  A função de transformação só será chamada se o item aparecer na entrada (nunca será chamada com o valor predefinido). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "O que se segue assume um valor de chave de byte único, com 4 itens esperados no grupo, sendo que todos eles têm um byte de dados a seguir à chave.  Os itens aparecem na entrada do seguinte modo:\r\n<ul>\r\n<li>A chave 1 é obrigatória e aparece com o valor 11.</li>\r\n<li>A chave 2 repete-se e aparece duas vezes com o valor 22, resultando num valor igual a { 22, 22 }.</li>\r\n<li>A chave 3 é opcional e não aparece, resultando num valor nulo.</li>\r\n<li>A chave 4 repete-se, mas não aparece, resultando num valor igual a { }.</li>\r\n<li>A chave 5 não faz parte do grupo, mas aparece uma vez com o valor 55.  A função adicional é chamada com o valor de chave 5 e devolve o formato correspondente a esse valor (BinaryFormat.Byte).  O valor 55 é lido e eliminado.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "O exemplo que se segue ilustra a transformação do valor de item e o valor de item predefinido.   O item de repetição com a chave 1 soma a lista de valores lidos com List.Sum.  O item opcional com a chave 2 tem o valor predefinido 123 em vez de nulo.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Devolve um formato binário que limita a quantidade de dados que podem ser lidos.",
        "Documentation.LongDescription": "Devolve um formato binário que limita a quantidade de dados que podem ser lidos.  Tanto <code>BinaryFormat.List</code> como <code>BinaryFormat.Binary</code> podem ser utilizados para ler até ao fim dos dados.  <code>BinaryFormat.Length</code> pode ser utilizado para limitar o número de bytes que são lidos.  O parâmetro <code>binaryFormat</code> especifica o formato binário a limitar.  O parâmetro <code>length</code> especifica o número de bytes a ler.  O parâmetro <code>length</code> pode ser um valor numérico ou um valor de formato binário que especifica o formato do valor de comprimento que precede o valor a ser lido.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Limitar o número de bytes lidos a 2 ao ler uma lista de bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Limitar o número de bytes lidos, durante a leitura de uma lista de bytes, ao valor de bytes que precede a lista.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Devolve um formato binário que irá transformar os valores lidos por outro formato binário.",
        "Documentation.LongDescription": "Devolve um formato binário que irá transformar os valores lidos por outro formato binário.  O parâmetro <code>binaryFormat</code> especifica o formato binário que será utilizado para ler o valor.  O <code>function</code> é invocado com o valor lido e devolve o valor transformado.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Ler um byte e adicionar outro ao mesmo.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Devolve uma função de comparação que utiliza regras Ordinais para comparar valores.",
        "Documentation.LongDescription": "Devolve uma função de comparador que utiliza regras Ordinais para comparar os valores fornecidos <code>x</code> e <code>y</code>.<br>\r\n        <br>\r\n        Uma função de comparação aceita dois argumentos e devolve -1, 0 ou 1, com base no facto de o primeiro valor ser menor, igual ou superior ao segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Utilizando regras Ordinais, determine se \"encyclopædia\" e \"encyclopaedia\" são equivalentes. Tenha em conta que estes são equivalentes através da utilização de <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Devolve uma função de comparador não sensível a maiúsculas/minúsculas que utiliza regras Ordinais para comparar valores.",
        "Documentation.LongDescription": "Devolve uma função de comparador não sensível a maiúsculas e minúsculas, que utiliza regras Ordinais para comparar os valores fornecidos <code>x</code> e <code>y</code>.<br>\r\n        <br>\r\n        Uma função de comparação aceita dois argumentos e devolve -1, 0 ou 1, com base no facto de o primeiro valor ser menor, igual ou superior ao segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Utilize as regras Ordinais não sensíveis a maiúsculas/minúsculas e compare \"Abc\" com \"abc\". Tenha em atenção que \"Abc\" é menor que \"abc\" quando utiliza <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Devolve uma propriedade de um atributo de dimensão.",
        "Documentation.LongDescription": "Devolve a propriedade <code>propertyName</code> do atributo de dimensão <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Devolve uma propriedade de uma medida (propriedade de célula).",
        "Documentation.LongDescription": "Devolve a propriedade <code>propertyName</code> do atributo de dimensão <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Origem de Consulta SQL do Databricks",
        "Documentation.LongDescription": "Definir uma origem de dados do Databricks para executar consultas SQL"
      },
      "ReturnType": "Consulta SQL do Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Origem de Consulta SQL do Databricks",
        "Documentation.LongDescription": "Definir uma origem de dados do Databricks para executar consultas SQL"
      },
      "ReturnType": "Consulta SQL do Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Adiciona os dias especificados à data.",
        "Documentation.LongDescription": "Devolve o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> decorrente da adição de <code>numberOfDays</code> dias ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual estão a ser adicionados dias.</li>\r\n      <li><code>numberOfDays</code>: o número de dias a adicionar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 5 dias ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data 14/5/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Adiciona os meses especificados à data.",
        "Documentation.LongDescription": "Devolve o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> decorrente da adição de <code>numberOfMonths</code> meses ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual estão a ser adicionados meses.</li>\r\n        <li><code>numberOfMonths</code>: o número de meses a adicionar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 5 meses ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data 14/5/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Adicionar 18 meses ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data e hora 14/5/2011 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Adiciona os trimestres especificados à data.",
        "Documentation.LongDescription": "Devolve o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> decorrente da adição de <code>numberOfQuarters</code> trimestres ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual estão a ser adicionados trimestres.</li>\r\n      <li><code>numberOfQuarters</code>: o número de trimestres a adicionar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 1 trimestre ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data 14/5/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Adiciona as semanas especificadas à data.",
        "Documentation.LongDescription": "Devolve o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> decorrente da adição de <code>numberOfWeeks</code> semanas ao valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual estão a ser adicionadas semanas.</li>\r\n      <li><code>numberOfWeeks</code>: o número de semanas a adicionar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 2 semanas ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data 14/5/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Adiciona os anos especificados à data.",
        "Documentation.LongDescription": "Devolve o resultado de <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> decorrente da adição de <code>numberOfYears</code> a um valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> ao qual são adicionados anos.</li>\r\n        <li><code>numberOfYears</code>: o número de anos a adicionar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 4 anos ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data 14/5/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Adicionar 10 anos ao valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data e hora 14/5/2011 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Indica se esta data ocorre durante o número de dias seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de dias, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>days</code>: o número de dias.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o dia a seguir à hora atual no sistema é nos próximos dois dias.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Indica se esta data ocorre durante o número de meses seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de meses, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>months</code>: o número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o mês a seguir à hora atual no sistema é nos próximos dois meses.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Indica se esta data ocorre durante o número de trimestres seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de trimestres, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>quarters</code>: o número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o trimestre a seguir à hora atual do sistema é nos próximos dois trimestres.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Indica se esta data ocorre durante o número de semanas seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de semanas, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>weeks</code>: o número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a semana a seguir à hora atual no sistema é nas duas próximas semanas.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Indica se esta data ocorre durante o número de anos seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de anos, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>years</code>: o número de anos.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o ano a seguir à hora atual no sistema é nos próximos dois anos.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Indica se esta data ocorre durante o número de dias anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de dias anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>days</code>: o número de dias.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o dia anterior à hora atual no sistema é nos dois últimos dias.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Indica se esta data ocorre durante o número de meses anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de meses anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>months</code>: o número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o mês anterior à hora atual no sistema é nos dois últimos meses.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Indica se esta data ocorre durante o número de trimestres anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de trimestres anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>quarters</code>: o número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o trimestre anterior à hora atual no sistema é nos dois últimos trimestres.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Indica se esta data ocorre durante o número de semanas anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de semanas anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>weeks</code>: o número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a semana anterior à hora atual no sistema é nas duas últimas semanas.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Indica se esta data ocorre durante o número de anos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de anos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>years</code>: o número de anos.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o ano anterior à hora no sistema atual é nos dois últimos anos.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Adiciona informações de fuso horário ao valor de Data/Hora.",
        "Documentation.LongDescription": "Adiciona informações de fuso horário ao valor de <code>dateTime</code>. As informações de fuso horário incluem <code>timezoneHours</code> e, opcionalmente, <code>timezoneMinutes</code>, que especificam o desfasamento pretendido da hora UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Definir o fuso horário como UTC+7:30 (7 horas e 30 minutos após UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de horas seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de horas, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>hours</code>: o número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora seguinte à hora do sistema atual ocorre nas duas horas seguintes.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de minutos seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de minutos, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>minutes</code>: o número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto seguinte à hora do sistema atual ocorre nos dois minutos seguintes.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de segundos seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo número de segundos, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>seconds</code>: o número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo seguinte à hora do sistema atual ocorre nos dois segundos seguintes.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de horas anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de horas anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>hours</code>: o número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora antes da hora do sistema atual ocorre nas duas horas anteriores.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de minutos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de minutos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>minutes</code>: o número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto antes da hora do sistema atual ocorre nos dois minutos anteriores.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Indica se este datetime ocorre durante o número de segundos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de segundos anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      <li><code>seconds</code>: o número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo antes da hora do sistema atual ocorre nos dois segundos anteriores.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera as informações de fuso horário no valor datetimezone <code>dateTimeZone</code> para as novas informações de fuso horário fornecidas por <code>timezoneHours</code> e opcionalmente <code>timezoneMinutes</code>.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, será gerada uma exceção.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Alterar informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para 8 horas.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Alterar informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para -30 minutos.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Acede a um valor por nome numa aplicação híbrida incorporada.",
        "Documentation.LongDescription": "Acede a um valor por nome numa aplicação híbrida incorporada.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Cria uma função com uma assinatura de parâmetro específico na parte superior de uma função que tem um argumento de lista único",
        "Documentation.LongDescription": "Tem uma função unária <code>function</code> e cria uma nova função com o tipo de <code>functionType</code> que constrói uma lista dos respetivos argumentos e transmite-os para <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Converte List.Sum numa função de dois argumentos cujos argumentos são adicionados em conjunto",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Converte uma função que tem uma lista numa função de dois argumentos",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Invoca a função especificada",
        "Documentation.LongDescription": "Invoca a função especificada utilizando a lista de argumentos especificada e devolve o resultado.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Invoca Record.FieldNames com um argumento [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Invoca a função indicada após a duração especificada ter passado.",
        "Documentation.LongDescription": "Devolve o resultado da invocação de <code>function</code> após a duração <code>delay</code> ter passado.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Cria uma função escalar sobre uma função de vetor, colocando várias invocações em lote.",
        "Documentation.LongDescription": "<p>Devolve uma função escalar do tipo <code>scalarFunctionType</code> que invoca <code>vectorFunction</code> com uma única linha de argumentos e devolve o resultado último. Além disso, quando a função escalar for repetidamente aplicada a cada linha de uma tabela de entradas, tal como em Table.AddColumn, <code>vectorFunction</code> será aplicado uma vez para todas as entradas.</p>\r\n<p><code>vectorFunction</code> receberá uma tabela cujas colunas correspondem em nome e posição aos parâmetros de <code>scalarFunctionType</code>. Cada linha desta tabela contém os argumentos para uma chamada para a função escalar, com as colunas correspondentes aos parâmetros de <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> tem de devolver uma lista do mesmo tamanho que a tabela de entrada, cujo item em cada posição tem de ser o mesmo resultado de avaliar a função escalar na linha de entrada na mesma posição.</p>\r\n<p>Espera-se que a tabela de entrada seja transmitida, pelo que é esperado que <code>vectorFunction</code> transmita o resultado quando a entrada chegar, trabalhando apenas com um bloco de entradas de cada vez. Especificamente, <code>vectorFunction</code> não pode enumerar a respetiva tabela de entrada mais do que uma vez.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Cria um registo que representa um ponto geográfico a partir das partes que o constituem.",
        "Documentation.LongDescription": "Cria um registo que representa um ponto geográfico a partir das partes que o constituem, como longitude, latitude e, se presente, elevação (Z) e medida (M). Pode ser indicado um identificador de referência espacial (SRID) opcional, se for diferente do valor predefinido (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Cria um registo que representa um ponto geométrico a partir das partes que o constituem.",
        "Documentation.LongDescription": "Cria um registo que representa um ponto geométrico a partir das partes que o constituem, como coordenada X, coordenada Y e, se presente, coordenada Z e medida (M). Pode ser indicado um identificador de referência espacial (SRID) opcional, se for diferente do valor predefinido (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Cria uma identidade.",
        "Documentation.LongDescription": "Cria uma identidade.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Determina se uma identidade é um membro de uma coleção de identidade.",
        "Documentation.LongDescription": "Determina se uma identidade é um membro de uma coleção de identidade.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Devolve uma lista composta por todos os elementos de desvio com numeração ímpar existentes numa lista.",
        "Documentation.LongDescription": "Devolve uma lista composta por todos os elementos de desvio com numeração ímpar existentes numa lista. Alterna entre tomar e ignorar valores da lista <code>list</code> consoante os parâmetros.\r\n    <ul>\r\n    <li><code>count</code>: especifica o número de valores que são ignorados de cada vez.</li>\r\n    <li><code>repeatInterval</code>: um intervalo de repetição opcional para indicar quantos valores são adicionados entre os valores ignorados.</li>\r\n    <li><code>offset</code>: um parâmetro de desvio opcional para começar a ignorar os valores no desvio inicial.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1..10} que ignore o primeiro número.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Criar uma lista a partir de {1..10} que ignore número sim, número não.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Criar uma lista a partir de {1..10} que comece em 1 e ignore número sim, número não.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Criar uma lista a partir de {1..10} que comece em 1, ignore um valor, mantenha dois valores e assim consecutivamente.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Indica se a lista contém o valor.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> contém o valor <code>value</code>.\r\n    Devolve true se o valor for encontrado na lista; caso contrário, devolve false. É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Indica se uma lista inclui todos os valores existentes noutra lista.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> inclui todos os valores existentes noutra lista, <code>values</code>.\r\n    Devolve true se o valor for encontrado na lista; caso contrário, devolve false. É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 3 e 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 5 e 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Indica se uma lista inclui qualquer um dos valores existentes noutra lista.",
        "Documentation.LongDescription": "Indica se a lista <code>list</code> inclui qualquer um dos valores existentes noutra lista, <code>values</code>.\r\n        Devolve true se o valor for encontrado na lista; caso contrário, devolve false. É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 3 ou 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Determinar se a lista {1, 2, 3, 4, 5} contém 6 ou 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Devolve a covariância entre as duas listas de números.",
        "Documentation.LongDescription": "Devolve a covariância entre duas listas, <code>numberList1</code> e <code>numberList2</code>. <code>numberList1</code> e <code>numberList2</code> têm de conter o mesmo número de valores <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Calcular a covariância entre duas listas.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Devolve a diferença das duas listas especificadas.",
        "Documentation.LongDescription": "Devolve os itens existentes na lista <code>list1</code> que não aparecem na lista <code>list2</code>. Os valores duplicados são suportados.\r\n    É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Encontre os itens na lista {1, 2, 3, 4, 5} que não aparecem em {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Determinar os itens existentes na lista {1, 2} que não aparecem em {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Devolve uma lista de valores (incluindo campos de registo) que contêm o texto especificado.",
        "Documentation.LongDescription": "Devolve uma lista de valores da lista <code>list</code> que contêm o valor <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os valores de texto existentes na lista {\"a\", \"b\", \"ab\"} que correspondem a \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Devolve o primeiro conjunto de itens existentes na lista, especificando a quantidade de itens a devolver ou uma condição de qualificação.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Se for especificado um número, são devolvidos tantos itens quanto esse número. </li>\r\n  <li>Se for especificada uma condição, são devolvidos todos os itens que satisfizerem a condição inicialmente. Quando um item não satisfizer a condição, não serão considerados mais itens. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os valores iniciais existentes na lista {3, 4, 5, -1, 7, 8, 2} que são maiores que 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Devolve true se a função de condição for satisfeita por todos os valores existentes na lista.",
        "Documentation.LongDescription": "Devolve <code>true</code> se a função de condição, <code>condition</code>, for satisfeita por todos os valores existentes na lista <code>list</code>; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar se todos os valores existentes na lista {11, 12, 13} são maiores que 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determinar se todos os valores existentes na lista {1, 2, 3} são maiores que 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Devolve true se a função de condição for satisfeita por qualquer valor.",
        "Documentation.LongDescription": "Devolve <code>true</code> se a função de condição, <code>condition</code>, for satisfeita por qualquer um dos valores existentes na lista <code>list</code>; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar se qualquer um dos valores existentes na lista {9, 10, 11} é maior que 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determinar se qualquer um dos valores existentes na lista {1, 2, 3} é maior que 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Devolve o(s) valor(es) máximo(s) existente(s) na lista. Tem de especificar o número de valores a devolver ou a condição de filtragem.",
        "Documentation.LongDescription": "Devolve o(s) valor(es) máximo(s) existente(s) na lista, <code>list</code>.\r\n    Após as linhas serem ordenadas, é possível especificar parâmetros opcionais para filtrar melhor o resultado. O parâmetro opcional, <code>countOrCondition</code>, especifica o número de valores a devolver ou uma condição de filtragem. O parâmetro opcional, <code>comparisonCriteria</code>, especifica como os valores existentes na lista devem ser comparados.\r\n <ul>\r\n        <li> <code>list</code>: A lista de valores.</li>\r\n        <li> <code>countOrCondition</code>: Se for especificado um número, é devolvida uma lista com um máximo de <code>countOrCondition</code> itens por ordem ascendente. Se for especificada uma condição, é devolvida uma lista dos itens que satisfaçam a condição inicial. Quando um item não satisfizer a condição, não serão considerados mais itens.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Um valor opcional<code>comparisonCriteria</code> pode ser especificado para determinar como comparar itens na lista. Se este parâmetro for nulo, será utilizado o comparador predefinido.\r\n</ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Devolve o(s) valor(es) mínimo(s) existente(s) na lista. É possível especificar o número de valores a devolver ou a condição de filtragem.",
        "Documentation.LongDescription": "Devolve o(s) valor(es) mínimo(s) existente(s) na lista, <code>list</code>.\r\n    O parâmetro, <code>countOrCondition</code>, especifica o número de valores a devolver ou uma condição de filtragem. O parâmetro opcional, <code>comparisonCriteria</code>, especifica como os valores existentes na lista devem ser comparados.\r\n <ul>\r\n        <li> <code>list</code>: a lista de valores.</li>\r\n        <li> <code>countOrCondition</code>: Se for especificado um número, é devolvida uma lista com um máximo de <code>countOrCondition</code> itens por ordem ascendente. Se for especificada uma condição, é devolvida uma lista dos itens que satisfaçam a condição inicial. Quando um item não satisfizer a condição, não serão considerados mais itens. Se este parâmetro for nulo, será devolvido o único menor valor existente na lista.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Um valor opcional<code>comparisonCriteria</code> pode ser especificado para determinar como comparar itens na lista. Se este parâmetro for nulo, será utilizado o comparador predefinido.\r\n</ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Determinar os 5 valores menores na lista <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Devolve uma lista de números a partir de um valor inicial, uma contagem e um valor de incremento opcional.",
        "Documentation.LongDescription": "Devolve uma lista de números a partir de um valor inicial, uma contagem e um valor de incremento opcional. O valor de incremento predefinido é 1.\r\n<ul>\r\n   <li><code>start</code>: o valor inicial na lista.</li>\r\n   <li><code>count</code>: o número de valores a criar.</li>\r\n   <li><code>increment</code>: <i>[Opcional]</i> O valor a incrementar. Se for omitido, os valores são incrementados por 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Gerar uma lista de 10 números consecutivos, começando em 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Gerar uma lista de 10 números começando em 1, com um incremento de 2 para cada número subsequente.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Devolve um ou mais percentis de exemplo correspondentes às probabilidades indicadas.",
        "Documentation.LongDescription": "Devolve um ou mais percentis de exemplo da lista <code>list</code>. Se o valor <code>percentiles</code> for um número entre 0,0 e 1,0, este será tratado como um percentil e o resultado será\r\n    um único valor correspondente a essa probabilidade. Se o valor <code>percentiles</code> for uma lista de números com valores entre 0,0 e 1,0, o resultado será uma lista de percentis\r\n    correspondente à probabilidade de entrada. A opção PercentileMode em <code>options</code> pode ser utilizada por utilizadores avançados para escolher um método de interpolação mais específico, mas não é recomendada para a maioria das utilizações.\r\n    Os símbolos predefinidos <code>PercentileMode.ExcelInc</code> e <code>PercentileMode.ExcelExc</code> correspondem aos métodos de interpolação utilizados pelas funções do Excel\r\n    <code>PERCENTIL.INC</code> e <code>PERCENTILE.EXC</code>. O comportamento predefinido corresponde ao <code>PercentileMode.ExcelInc</code>. Os símbolos\r\n    <code>PercentileMode.SqlCont</code> e <code>PercentileMode.SqlDisc</code> correspondem ao comportamento do SQL Server para <code>PERCENTILE_CONT</code> e\r\n    <code>PERCENTILE_DISC</code>, respetivamente.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Encontre o primeiro quartil da lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Encontre os quartis da lista <code>{5, 3, 1, 7, 9}</code> com um método de interpolação que corresponda ao <code>PERCENTILE.EXC</code> do Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Devolve o(s) desvio(s) de um valor numa lista.",
        "Documentation.LongDescription": "Devolve o desvio em que o valor <code>value</code> aparece na lista <code>list</code>. Devolve -1 se o valor não aparecer.\r\n    É possível especificar um parâmetro de ocorrência opcional <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: o número máximo de ocorrências a comunicar.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar a posição na lista {1, 2, 3} em que o valor 3 aparece.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Devolve o primeiro desvio de um valor numa lista.",
        "Documentation.LongDescription": "Devolve o desvio na lista <code>list</code> da primeira ocorrência de um valor numa lista <code>values</code>. Devolve -1 se não for encontrada nenhuma ocorrência.\r\n    É possível especificar um parâmetro de ocorrência opcional <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: o número máximo de ocorrências que podem ser devolvidas.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar a primeira posição na lista {1, 2, 3} em que o valor 2 ou 3 aparece.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Devolve um subconjunto da lista, começando num desvio.",
        "Documentation.LongDescription": "Devolve um subconjunto da lista, começando no desvio <code>list</code>. Um parâmetro opcional, <code>offset</code>, define o número máximo de itens existente no subconjunto.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o subconjunto da lista de números entre 1 e 10 começando no desvio 6.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Determinar o subconjunto de comprimento 2 da lista de números entre 1 e 10, começando no desvio 6.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Remove itens de lista1 que estejam presentes na lista.",
        "Documentation.LongDescription": "Remove todas as ocorrências dos valores especificados em <code>list2</code> a partir de <code>list1</code>. Se os valores existentes em <code>list2</code> não existirem em <code>list1</code>, é devolvida a lista original.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remove os itens existentes na lista {2, 4, 6} da lista {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Remove todas as ocorrências dos valores introduzidos.",
        "Documentation.LongDescription": "Remove todas as ocorrências dos valores especificados em <code>list2</code> a partir da lista <code>list1</code>. Se os valores existentes em <code>list2</code> não existirem em <code>list1</code>, é devolvida a lista original.\r\n    É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1, 2, 3, 4, 5, 5} sem {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Remove o número da contagem de valores a partir da posição especificada.",
        "Documentation.LongDescription": "Remove os valores <code>count</code> em <code>list</code> a partir da posição especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remover os valores 3 na lista {1, 2, 3, 4, -6, -2, -1, 5} a partir do índice 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Devolve uma lista que é uma contagem de repetições da lista original.",
        "Documentation.LongDescription": "Devolve uma lista que é <code>count</code> repetições da lista original, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista que tem {1, 2} repetido 3 vezes.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Aplica cada substituição de { old, new }.",
        "Documentation.LongDescription": "Efetua as substituições especificadas na lista <code>list</code>. Uma operação de substituição <code>replacements</code> é composta por uma lista de dois valores, o valor antigo e o valor novo, fornecidos numa lista.\r\n    É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1, 2, 3, 4, 5} substituindo o valor 5 por -5 e o valor 1 por -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Devolve uma lista de valores que correspondem à condição.",
        "Documentation.LongDescription": "Devolve uma lista de valores da lista <code>list</code> que correspondem à condição selecionada <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os valores existentes na lista {1, -3, 4, 9, -2} que são maiores que 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Divide a lista especificada numa lista de listas com o tamanho de página especificado.",
        "Documentation.LongDescription": "Divide <code>list</code> numa lista de listas em que o primeiro elemento da lista de resultados é uma lista que contém os primeiros <code>pageSize</code> elementos da\r\n    lista de origem, o elemento seguinte da lista de resultados é uma lista que contém os <code>pageSize</code> elementos seguintes da lista de origem, etc.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Devolve uma nova lista de valores calculados a partir desta lista.",
        "Documentation.LongDescription": "Devolve uma nova lista de valores aplicando a função de transformação <code>transform</code> à lista, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Adicionar 1 a cada valor existente na lista {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Devolve o arco de tangente da divisão dos dois números.",
        "Documentation.LongDescription": "Devolve o arco de tangente da divisão dos dois números, <code>y</code> e <code>x</code>. A divisão será construída como <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Devolve o resultado da execução de uma operação \"And\" bit a bit entre duas entradas.",
        "Documentation.LongDescription": "Devolve o resultado da execução de uma operação \"And\" bit a bit entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Devolve o resultado da execução de uma operação \"Or\" bit a bit entre as duas entradas.",
        "Documentation.LongDescription": "Devolve o resultado da execução de uma operação \"Or\" bit a bit entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Desvia os bits definidos para a esquerda.",
        "Documentation.LongDescription": "Devolve o resultado da execução de um desvio bit a bit para a esquerda em <code>number1</code> pelo número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Desvia os bits definidos para a direita.",
        "Documentation.LongDescription": "Devolve o resultado da execução de um desvio bit a bit para a direita em <code>number1</code> pelo número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Devolve o resultado da execução de uma operação \"XOR\" (Exclusive-OR) bit a bit entre as duas entradas.",
        "Documentation.LongDescription": "Devolve o resultado da execução de uma operação \"XOR\" (Exclusive-OR) bit a bit entre <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Devolve o número de combinações exclusivas.",
        "Documentation.LongDescription": "Devolve o número de combinações exclusivas existentes numa lista de itens, <code>setSize</code>, com o tamanho de combinação especificado, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: o número de itens existentes na lista.</li>\r\n    <li><code>combinationSize</code>: o número de itens existentes em cada combinação.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de combinações existentes num total de 5 itens em que cada combinação é um grupo de 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Divide dois números e devolve a parte inteira do resultado.",
        "Documentation.LongDescription": "Devolve a parte inteira do resultado da divisão de um número, <code>number1</code>, por outro número, <code>number2</code>.\r\n    Se <code>number1</code> ou <code>number2</code> forem nulos, <code>Number.IntegerDivide</code> devolve um valor nulo.\r\n      <ul>\r\n        <li><code>number1</code>: o dividendo.</li>\r\n        <li><code>number2</code>: o divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Dividir 6 por 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Dividir 8,3 por 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Efetua a divisão de dois números inteiros e devolve o resto.",
        "Documentation.LongDescription": "Devolve o resto resultante da divisão de números inteiros de <code>number</code> por <code>divisor</code>.\r\n    Se <code>number</code> ou <code>divisor</code> forem nulos, <code>Number.Mod</code> devolve um valor nulo.\r\n      <ul>\r\n        <li><code>number</code>: o dividendo.</li>\r\n        <li><code>divisor</code>: o divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o resto da divisão de 5 por 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Devolve o número de permutações.",
        "Documentation.LongDescription": "Devolve o número de permutações que podem ser geradas a partir de um número de itens, <code>setSize</code>, com um tamanho de permutação especificado, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de permutações existentes num total de 5 itens em grupos de 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Eleva um número à potência especificada.",
        "Documentation.LongDescription": "Devolve o resultado de elevar <code>number</code> à potência de <code>power</code>.\r\n    Se <code>number</code> ou <code>power</code> forem nulos, <code>Number.Power</code> devolve um valor nulo.\r\n      <ul>\r\n        <li><code>number</code>: a base.</li>\r\n        <li><code>power</code>: o expoente.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o valor de 5 elevado à potência de 3 (5 ao cubo).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Devolve um número aleatório entre dois números.",
        "Documentation.LongDescription": "Devolve um número aleatório entre <code>bottom</code> e <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obter um número aleatório entre 1 e 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Devolve o valor do campo especificado num registo.",
        "Documentation.LongDescription": "Devolve o valor do <code>field</code> especificado no <code>record</code>. Se o campo não for encontrado, é emitida uma exceção.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o valor do campo \"CustomerID\" no registo.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Devolve o valor do campo especificado num registo ou o valor predefinido se o campo não for encontrado.",
        "Documentation.LongDescription": "Devolve o valor do campo especificado <code>field</code> no registo <code>record</code>. Se o campo não for encontrado, o <code>defaultValue</code> opcional é devolvido.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o valor do campo \"Telefone\" no registo ou devolver null se não existir.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Determinar o valor do campo \"Telefone\" no registo ou devolver a predefinição se não existir.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Devolve um registo com base numa lista de valores de campos e num conjunto de campos especificados.",
        "Documentation.LongDescription": "Devolve um registo com base num <code>list</code> de valores de campos e num conjunto de campos especificados.  O <code>fields</code> pode ser especificado por uma lista de valores de texto ou por um tipo de registo.  E emitido um erro se os campos não forem exclusivos.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Criar um registo a partir de uma lista de valores de campos e uma lista de nomes de campos.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Criar um registo a partir de uma lista de valores de campos e um tipo de registo.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Indica se o registo tem os campos especificados.",
        "Documentation.LongDescription": "Indica se o registo <code>record</code> tem os campos especificados em <code>fields</code>, devolvendo um valor lógico (true ou false).\r\n    É possível especificar os valores de vários campos utilizando uma lista.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificar se o registo tem o campo \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Verificar se o registo tem os campos \"CustomerID\" e \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Remove os campos especificados do registo de entrada.",
        "Documentation.LongDescription": "Devolve um registo que remove todos os campos especificados na lista <code>fields</code> da entrada <code>record</code>. Se o campo especificado não existir, é emitida uma exceção.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover o campo \"Preço\" do registo.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Remover os campos \"Preço\" e \"Item\" do registo.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Aplica mudanças de nome a partir de uma lista com o formato { old, new }.",
        "Documentation.LongDescription": "Devolve um registo depois de mudar os campos existentes na entrada <code>record</code> para os novos nomes de campos especificados na lista <code>renames</code>. Para efetuar várias mudanças de nome, é possível utilizar uma lista aninhada ({ {antigo1, novo1}, {antigo2, novo2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mudar o nome do campo \"UnitPrice\" para \"Price\" no registo.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Mudar os nomes dos campos \"UnitPrice\" para \"Preço\" e \"OrderNum\" para \"OrderID\"  no registo.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Reordena os campos especificados pela nova ordem.",
        "Documentation.LongDescription": "Devolve um registo depois de reordenar os campos existentes em <code>record</code> pela ordem de campos especificada na lista <code>fieldOrder</code>. Os valores dos campos são mantidos e os campos não listados em <code>fieldOrder</code> são mantidos na posição original.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Reordenar alguns dos campos existentes no registo.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Devolve um registo que só contém os campos especificados.",
        "Documentation.LongDescription": "Devolve um registo que inclui apenas os campos especificados na lista <code>fields</code> da entrada <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Selecionar os campos \"Item\" e \"Preço\" no registo.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Devolve um registo depois de aplicar as transformações especificadas.",
        "Documentation.LongDescription": "Devolve um registo depois de aplicar as transformações especificadas na lista <code>transformOperations</code> a <code>record</code>.\r\n    É possível transformar um ou mais campos a uma hora específica.\r\n      <div>Caso só esteja a ser transformado um campo, espera-se que <code>transformOperations</code> seja uma lista com dois itens. O primeiro item existente em <code>transformOperations</code> especifica um nome de campo, enquanto que o segundo item existente em <code>transformOperations</code> especifica a função a ser utilizada para transformação. Por exemplo, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Caso estejam a ser transformados vários campos, espera-se que <code>transformOperations</code> seja uma lista de listas, em que cada lista interna é um par constituído por um nome de campo e por uma operação de transformação. Por exemplo, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Converter o campo \"Preço\" num número.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Converter os campos \"IDEncomenda\" e \"Preço\" em números.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Devolve uma função que divide o texto numa lista de texto de acordo com uma transição de um tipo de caráter para outro. Os parâmetros {0} e {1} podem ser tanto uma lista de carateres como uma função que utiliza um caráter e devolve verdeiro/falso.",
        "Documentation.LongDescription": "Devolve uma função que divide o texto numa lista de texto de acordo com uma transição de um tipo de caráter para outro. Os parâmetros <code>before</code> e <code>after</code> podem ser tanto uma lista de carateres como uma função que utiliza um caráter e devolve verdeiro/falso.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada sempre que uma letra maiúscula ou minúscula for seguida de um dígito.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Converte a consulta SQL fornecida em código M. Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Converte a consulta <code>sql</code> fornecida em código M, com os identificadores disponíveis definidos pelo <code>environment</code>. Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Devolve uma coluna especificada de dados a partir da tabela como uma lista.",
        "Documentation.LongDescription": "Devolve a coluna de dados especificada por <code>column</code> a partir da tabela <code>table</code> como uma lista.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar a data na coluna [Naome] a partir da tabela.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Devolve uma lista com os nomes das colunas correspondentes aos tipos especificados.",
        "Documentation.LongDescription": "Devolve uma lista com os nomes das colunas da tabela <code>table</code> que correspondem aos tipos especificados em <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver os nomes das colunas do tipo Number.Type a partir da tabela.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Indica se o registo especificado aparece como uma linha na tabela.",
        "Documentation.LongDescription": "Indica se o registo especificado, <code>row</code>, aparece como uma linha na <code>table</code>.\r\n    É possível especificar um parâmetro opcional <code>equationCriteria</code> para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela contém a linha.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela contém a linha.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar se a tabela contém a linha comparando apenas a coluna [Nome].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Indica se todos os registos especificados aparecem como linhas na tabela.",
        "Documentation.LongDescription": "Indica se todos os registos especificados na lista de registos <code>rows</code> aparecem como linhas na <code>table</code>.\r\n    É possível especificar um parâmetro opcional <code>equationCriteria</code> para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determine se a tabela contém todas as linhas ao comparar apenas a coluna [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela contém todas as linhas.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Indica se qualquer um dos registos especificados aparece como uma linha na tabela.",
        "Documentation.LongDescription": "Indica se qualquer um dos registos especificados na lista de registos <code>rows</code> aparece como uma linha na <code>table</code>.\r\n    É possível especificar um parâmetro opcional <code>equationCriteria</code> para controlar a comparação entre as linhas da tabela.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contém as linhas <code>[a = 1, b = 2]</code> ou <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contém as linhas <code>[a = 1, b = 3]</code> ou <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar se a tabela <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> contém as linhas <code>[a = 1, b = 3]</code> ou <code>[a = 3, b = 5]</code> comparando apenas a coluna [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Indica se a tabela contém as colunas especificadas.",
        "Documentation.LongDescription": "Indica se <code>table</code> contém as colunas especificadas, <code>columns</code>. Devolve <code>true</code> se a tabela contiver as colunas; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela contém a coluna [Nome].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela contém as colunas [Nome] e [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Indica se todas as linhas existentes na tabela satisfazem a condição especificada.",
        "Documentation.LongDescription": "Indica se todas as linhas existentes em <code>table</code> satisfazem o <code>condition</code> especificado. Devolve <code>true</code> se todas as linhas corresponderem; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar se todos os valores de linha na coluna [a] são pares na tabela.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se todos os valores de linha são [a = 1, b = 2], na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Indica se qualquer das linhas existentes na tabela satisfaz a condição especificada.",
        "Documentation.LongDescription": "Indica se qualquer uma das linhas em <code>table</code> correspondem ao <code>condition</code> especificado. Devolve <code>true</code> se qualquer linha corresponder; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar se qualquer um dos valores de linha na coluna [a] é par na tabela <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar se qualquer um dos valores de linha é [a = 1, b = 2], na tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Devolve a maior linha ou o valor predefinido utilizando os critérios especificados.",
        "Documentation.LongDescription": "Devolve a maior linha em <code>table</code> com base no <code>comparisonCriteria</code> especificado. Se a tabela estiver vazia, é devolvido o valor <code>default</code> opcional. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Determinar a linha com o maior valor na coluna [a] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Determinar a linha com o maior valor na coluna [a] na tabela <code>({})</code>. Devolver -1 se estiver vazia.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Devolve a menor linha ou um valor predefinido utilizando os critérios especificados.",
        "Documentation.LongDescription": "Devolve a menor linha em <code>table</code> com base no <code>comparisonCriteria</code> especificado. Se a tabela estiver vazia, é devolvido o valor <code>default</code> opcional.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] na tabela.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Localizar a linha com o menor valor na coluna [a] na tabela. Devolver -1 se estiver vazia.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Devolve as posições da linha na tabela.",
        "Documentation.LongDescription": "Devolve a posição da linha da primeira ocorrência de <code>row</code> no <code>table</code> especificado. Devolve -1 se não for encontrada nenhuma ocorrência.\r\n    <ul>\r\n       <li><code>table</code>: a tabela de entrada.</li>\r\n       <li><code>row</code>: a linha cuja posição pretende localizar na tabela.</li>\r\n       <li><code>occurrence</code>: <i>[Opcional]</i> Especifica as ocorrências da linha a devolver.</li>\r\n       <li><code>equationCriteria</code>: <i>[Opcional]</i> Controla a comparação entre as linhas da tabela.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar a posição da primeira ocorrência de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Determinar a posição da segunda ocorrência de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Determinar a posição de todas as ocorrências de [a = 2, b = 4] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Devolve as posições de qualquer uma das linhas especificadas na tabela.",
        "Documentation.LongDescription": "Devolve as posições de linhas de <code>table</code> da primeira ocorrência de <code>rows</code> na lista. Devolve -1 se não for encontrada nenhuma ocorrência.\r\n    <ul>\r\n    <li><code>table</code>: a tabela de entrada.</li>\r\n       <li><code>rows</code>: a lista de linhas cujas posições pretende localizar na tabela.</li>\r\n       <li><code>occurrence</code>: <i>[Opcional]</i> Especifica as ocorrências da linha a devolver.</li>\r\n       <li><code>equationCriteria</code>: <i>[Opcional]</i> Controla a comparação entre as linhas da tabela.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar a posição da primeira ocorrência de [a = 2, b = 4] ou [a = 6, b = 8] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Determinar a posição de todas as ocorrências de [a = 2, b = 4] ou [a = 6, b = 8] na tabela <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Divide a tabela especificada numa lista de tabelas com o tamanho de página especificado.",
        "Documentation.LongDescription": "Divide <code>table</code> numa lista de tabelas em que o primeiro elemento da lista é uma tabela que contém as primeiras <code>pageSize</code> linhas da\r\n    tabela de origem, o elemento seguinte da lista é uma tabela que contém as <code>pageSize</code> linhas seguintes da tabela de origem, etc.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divida uma tabela de cinco registos em tabelas com dois registos cada.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Devolve uma lista contendo as primeiras linhas de contagem especificadas e as linhas restantes.",
        "Documentation.LongDescription": "Devolve uma lista contendo duas tabelas: uma tabela com as primeiras linhas N de <code>table</code> (conforme especificado por <code>count</code>) e uma tabela contendo as restantes linhas de <code>table</code>.\r\n\r\nSe as tabelas da lista resultante forem enumeradas exatamente uma vez e para que a função enumerou <code>table</code> apenas uma vez.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver as 2 primeiras filas da tabela e as restantes filas da tabela.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transforma as linhas existentes na tabela utilizando a função de transformação especificada.",
        "Documentation.LongDescription": "Cria uma <code>lista</code> ao aplicar a operação <code>transform</code> a cada linha em <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transforme as linhas de uma tabela numa lista de números.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transforme as linhas de uma tabela numérica em registos textuais.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Devolve a parte de <code>text</code> após o <code>delimiter</code> especificado.\r\n    Um valor numérico opcional <code>index</code> indica qual a ocorrência de <code>delimiter</code> que deve ser considerada.\r\n    Uma lista opcional <code>index</code> indica qual a ocorrência de <code>delimiter</code> que deve ser considerada, bem como se a indexação deve ser feita a partir do início ou do fim da entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a parte de \"111-222-333\" após o (primeiro) hífen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Obtenha a parte de \"111-222-333\" após o segundo hífen.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Obtenha a parte de \"111-222-333\" após o segundo hífen a partir do fim.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Devolve o caráter existente na posição especificada.",
        "Documentation.LongDescription": "Devolve o caráter existente na no valor de texto, <code>text</code>, na posição <code>index</code>. O primeiro caráter no texto encontra-se na posição 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Determinar o caráter existente na posição 4 da cadeia \"Olá, Mundo\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Devolve a parte de <code>text</code> antes do <code>delimiter</code> especificado.\r\n    Um valor numérico opcional <code>index</code> indica qual a ocorrência de <code>delimiter</code> que deve ser considerada.\r\n    Uma lista opcional <code>index</code> indica qual a ocorrência de <code>delimiter</code> que deve ser considerada, bem como se a indexação deve ser feita a partir do início ou do fim da entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a parte de \"111-222-333\" antes do (primeiro) hífen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Obtenha a parte de \"111-222-333\" antes do segundo hífen.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Obtenha a parte de \"111-222-333\" antes do segundo hífen a partir do fim.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Indica se o texto contém a subcadeia.",
        "Documentation.LongDescription": "Deteta se <code>text</code> contém o valor <code>substring</code>. Devolve \"true\" se o valor for encontrado. Esta função não suporta carateres universais nem expressões regulares.\r\n      <br>\r\n      <br>\r\n      O argumento opcional <code>comparer</code> pode ser utilizado para especificar comparações não sensíveis a maiúsculas/minúsculas ou baseadas na cultura ou na região.\r\n      Os comparadores incorporados que se seguem estão disponíveis na linguagem da fórmula:\r\n      <ul>\r\n       <li><code>Comparer.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o texto \"Olá Mundo\" contém \"Olá\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Determinar se o texto \"Olá Mundo\" contém \"olá\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Saiba se o texto \"Hello World\" contém a palavra \"hello\", utilizando um comparador não sensível a maiúsculas/minúsculas.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Devolve os últimos carateres do texto.",
        "Documentation.LongDescription": "Devolve um valor <code>text</code> que corresponde aos últimos <code>count</code> carateres do valor <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obter os últimos 5 carateres do texto \"Olá, Mundo\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Indica se o texto termina no valor especificado.",
        "Documentation.LongDescription": "Indica se o texto especificado, <code>text</code>, termina com o valor especificado, <code>substring</code>. A indicação é sensível a maiúsculas e minúsculas.\r\n\r\n      <div>\r\n         <code>comparer</code>é um <code>Comparer</code> que é utilizado no controlo da comparação. Os comparadores podem ser utilizados para fornecer comparações não sensíveis a maiúsculas/minúsculas ou baseadas na cultura ou na região.\r\n      </div>\r\n      <div>\r\n        Os comparadores incorporados seguintes estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verificar se \"Olá, Mundo\" termina com \"mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Verificar se \"Olá, Mundo\" termina com \"Mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Devolve texto formatado a partir de uma cadeia de formato e argumentos.",
        "Documentation.LongDescription": "Devolve texto formatado criado com a aplicação de <code>arguments</code> de uma lista ou registo a uma cadeia de formato <code>formatString</code>. Em alternativa, poderá ser especificada uma cultura. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatar uma lista de números.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatar tipos de dados diferentes de um registo de acordo com a cultura Inglês dos Estados Unidos.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Devolve a subcadeia até um comprimento específico.",
        "Documentation.LongDescription": "Devolve <code>count</code> carateres, ou até ao fim de <code>text</code>; no desvio <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Localize a subcadeia do texto \"Hello World\" que começa no índice 6 e tem 5 carateres.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Localize a subcadeia do texto \"Hello World\" que começa no índice 6 e vai até ao fim.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Devolve texto com um comprimento especificado, preenchendo o final do texto especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>text</code> preenchido até ao comprimento <code>count</code> através da inserção de espaço no final do valor de texto <code>text</code>.\r\n    É possível utilizar um caráter opcional <code>character</code> para especificar o caráter utilizado para preenchimento. O caráter de preenchimento predefinido é um espaço.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preenche o final do valor de texto de modo a que tenha 10 carateres de comprimento.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Preencher o final de um valor de texto com \"|\" para que tenha 10 carateres de comprimento.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Devolve texto com um comprimento especificado, preenchendo o início do texto especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>text</code> preenchido até ao comprimento <code>count</code> através da inserção de espaço no início do valor de texto <code>text</code>.\r\n    É possível utilizar um caráter opcional <code>character</code> para especificar o caráter utilizado para preenchimento. O caráter de preenchimento predefinido é um espaço.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Preenche o início do valor de texto de modo a que tenha 10 carateres de comprimento.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Preencher o início de um valor de texto com \"|\" para que tenha 10 carateres de comprimento.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Devolve a primeira posição do valor (-1 se não for encontrado).",
        "Documentation.LongDescription": "Devolve a posição da ocorrência especificada do valor de texto <code>substring</code> encontrado em <code>text</code>.\r\n    É possível utilizar um parâmetro opcional <code>occurrence</code> para especificar a posição da ocorrência a devolver (primeira ocorrência por predefinição).\r\n    Devolve -1 se <code>substring</code> não tiver sido encontrado.\r\n\r\n      <div>\r\n         <code>comparer</code> é um <code>Comparer</code> que é utilizado no controlo da comparação. Os comparadores podem ser utilizados para fornecer comparações não sensíveis a maiúsculas/minúsculas ou baseadas na cultura ou na região.\r\n      </div>\r\n      <div>\r\n        Os comparadores incorporados seguintes estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Obter a posição da primeira ocorrência de \"Mundo\" no texto \"Olá, Mundo! Olá, Mundo!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Obter a posição da última ocorrência de \"Mundo\" em \"Olá, Mundo! Olá, Mundo!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Devolve a primeira posição de qualquer caráter listado no valor de texto (-1 se não for encontrado).",
        "Documentation.LongDescription": "Devolve a primeira posição de qualquer caráter na lista <code>characters</code> que se encontra em <code>text</code>.\n    Um parâmetro opcional <code>occurrence</code> pode ser utilizado para especificar a posição de ocorrência a devolver.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Encontrar a primeira posição de \"W\" ou \"H\" no texto \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Encontrar todas as posições de \"W\" ou \"H\" no texto \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Devolve a subcadeia encontrada no desvio.",
        "Documentation.LongDescription": "Devolve a subcadeia do texto <code>text</code> encontrada no desvio <code>offset</code>.\r\n    É possível incluir um parâmetro opcional, <code>count</code>, para especificar o número de carateres a devolver. Gera um erro se não existirem carateres suficientes.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Determinar a subcadeia do texto \"Olá Mundo\" que começa no índice 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Determinar a subcadeia do texto \"Olá Mundo Olá\" que começa no índice 6 e abrange 5 carateres.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Remove todas as ocorrências do caráter ou da lista de carateres especificada do valor de texto de entrada.",
        "Documentation.LongDescription": "Devolve uma cópia do valor de texto <code>text</code> com todos os carateres de <code>removeChars</code> removidos.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Remover os carateres , e ; do valor de texto.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Remove uma contagem de carateres a partir do desvio especificado",
        "Documentation.LongDescription": "Devolve uma cópia do valor de texto <code>text</code> com todos os carateres da posição <code>offset</code> removidos.\r\n    É possível utilizar um parâmetro opcional, <code>count</code>, para o número de carateres a remover. O valor predefinido de <code>count</code> é 1. Os valores de posição começam em 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Remover 1 caráter do valor de texto \"ABEFC\" na posição 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Remover dois carateres do valor de texto \"ABEFC\" começando na posição 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Devolve um valor de texto composto pelo texto de entrada repetido um número de vezes especificado.",
        "Documentation.LongDescription": "Devolve um valor de texto composto pelo texto de entrada <code>text</code> repetido <code>count</code> vezes.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Repetir o texto \"a\" cinco vezes.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Repetir o texto \"olámundo\" três vezes.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Seleciona todas as ocorrências do caráter ou da lista de carateres fornecida do valor de texto de entrada.",
        "Documentation.LongDescription": "Devolve uma cópia do valor de texto <code>text</code> com todos os carateres que não estejam em <code>selectChars</code> removidos.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Selecione todos os carateres no intervalo de \"a\" a \"z\" do valor de texto.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Divide texto numa lista de valores de texto com base num delimitador especificado.",
        "Documentation.LongDescription": "Devolve uma lista de valores de texto resultante da divisão de um valor de texto <code>text</code> com base no delimitador especificado, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir do valor de texto delimitado por \"|\" \"Nome|Endereço|NúmeroTelefone\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Devolve uma lista de valores de texto dividida em qualquer um dos carateres no delimitador.",
        "Documentation.LongDescription": "Devolve uma lista de valores de texto resultante da divisão de um valor de texto <code>text</code> com base em qualquer caráter existente no delimitador especificado, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir do valor de texto \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Devolve o início do texto.",
        "Documentation.LongDescription": "Devolve os primeiros <code>count</code> carateres de <code>text</code> como um valor de texto.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obter os primeiros 5 carateres do texto \"Olá, Mundo\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Indica se o texto começa com um valor especificado.",
        "Documentation.LongDescription": "Devolve true se o valor de texto <code>text</code> começar com o valor de texto <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> um valor <code>text</code> a procurar</li>\r\n        <li><code>substring</code>: <i></i> um valor <code>text</code> que representa a subcadeia a procurar em <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Opcional]</i> um <code>Comparer</code> utilizado para controlar a comparação. Por exemplo, <code>Comparer.OrdinalIgnoreCase</code> pode ser utilizado para efetuar pesquisas não sensíveis a maiúsculas/minúsculas</li>\r\n      </ul>\r\n      <div>\r\n         <code>comparer</code>é um <code>Comparer</code> utilizado para controlar a comparação. Os comparadores podem ser utilizados para fornecer comparações não sensíveis a maiúsculas/minúsculas ou baseadas na cultura e região.\r\n      </div>\r\n      <div>\r\n        Os comparadores incorporados que se seguem estão disponíveis na linguagem da fórmula:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: utilizado para executar uma comparação ordinal exata</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: utilizado para executar uma comparação ordinal exata não sensível a maiúsculas/minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: utilizado para executar uma comparação baseada na cultura</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verificar se o texto \"Olá, Mundo\" começa com o texto \"olá\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Verificar se o texto \"Olá, Mundo\" começa com o texto \"Olá\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Devolve um tipo que representa funções com restrições de parâmetro e tipo de retorno específicas.",
        "Documentation.LongDescription": "Cria um <code>function type</code> a partir de <code>signature</code>, um registo de <code>ReturnType</code> e <code>Parameters</code> e <code>min</code>, o número mínimo de argumentos necessários para invocar a função.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cria o tipo para uma função que toma um parâmetro numérico chamado X e devolve um número.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Devolve um tipo que representa registos com restrições de tipo específicas nos campos.",
        "Documentation.LongDescription": "Devolve um tipo que representa registos com restrições de tipo específicas nos campos.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Gerar dinamicamente um tipo de tabela.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Determina se um valor do tipo \"primeiro\" é sempre compatível com o tipo \"segundo\".",
        "Documentation.LongDescription": "Determina se um valor de <code>type1</code> é sempre compatível com <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determine se um valor do tipo \"número\" também pode ser sempre tratado como o tipo \"qualquer\".",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Determine se um valor do tipo \"qualquer\" também pode ser sempre tratado como tipo \"número\".",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Substitui as facetas de um tipo.",
        "Documentation.LongDescription": "Substitui as facetas de <code>type</code> pelas facetas contidas no registo <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Devolve um novo tipo de tabela com todas as chaves substituídas pela lista de chaves especificada.",
        "Documentation.LongDescription": "Devolve um novo tipo de tabela com todas as chaves substituídas pela lista de chaves especificada.<br>\r\n    <br>\r\n    Cada chave é definida através de um registo com o seguinte formato:\r\n    <ul>\r\n      <li>\r\n        <code>Colunas</code>: uma lista dos nomes das colunas que definem a chave\r\n      </li>\r\n      <li>\r\n        <code>Primária</code>: <code>verdadeiro</code> se a chave for a chave primária da tabela; caso contrário, <code>falso</code>\r\n      </li>\r\n    </ul>\r\n    A lista de chaves especificada é validada para garantir que não existe mais do que uma chave primária definida e que todos os nomes de colunas de chaves existem no tipo de tabela.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Substituir as informações de chave num tipo de tabela.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Limpe as informações de chave anteriormente definidas num tipo de tabela.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Devolve o tipo de uma coluna numa tabela.",
        "Documentation.LongDescription": "Devolve o tipo da coluna <code>column</code> no tipo de tabela <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Devolve um URI absoluto que é a combinação do URI base e do URI relativo de entrada.",
        "Documentation.LongDescription": "Devolve um URI absoluto que é a combinação do <code>baseUri</code> e <code>relativeUri</code> de entrada.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Devolve a soma de dois valores.",
        "Documentation.LongDescription": "Devolve a soma de <code>value1</code> e <code>value2</code>. É possível especificar um parâmetro opcional <code>precision</code>; por predefinição, é utilizado <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Devolve o valor se for compatível com o tipo especificado.",
        "Documentation.LongDescription": "Devolve o valor se for compatível com o tipo especificado. Isto é equivalente ao operador \"as\" em M, com a exceção de que pode aceitar referências de tipo de identificador, tais como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Converter um número para um número.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Tente converter um valor de texto para um número.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Devolve -1, 0 ou 1 dependendo se o primeiro texto é menor, igual ou maior do que o segundo.",
        "Documentation.LongDescription": "Devolve -1, 0 ou 1 dependendo se o primeiro texto é menor, igual ou maior do que o segundo.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Devolve o resultado da divisão do primeiro valor pelo segundo.",
        "Documentation.LongDescription": "Devolve o resultado da divisão de <code>value1</code> por <code>value2</code>. É possível especificar um parâmetro opcional <code>precision</code>; por predefinição, é utilizado <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Devolve se dois valores são iguais.",
        "Documentation.LongDescription": "Devolve true se o valor <code>value1</code> for igual ao valor <code>value2</code>; caso contrário, devolve false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Determina se um valor é compatível com o tipo especificado.",
        "Documentation.LongDescription": "Determina se um valor é compatível com o tipo especificado. Isto é equivalente ao operador \"is\" em M, com a exceção de que pode aceitar referências de tipo de identificador, tais como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Compare duas formas de determinar se um número é compatível com o tipo \"número\".",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Devolve o produto dos dois valores.",
        "Documentation.LongDescription": "Devolve o produto da multiplicação de <code>value1</code> por <code>value2</code>. É possível especificar um parâmetro opcional <code>precision</code>; por predefinição, é utilizado <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Avalia uma consulta num destino.",
        "Documentation.LongDescription": "<p>Avalia <code>query</code> em <code>target</code> com os parâmetros especificados em <code>parameters</code> e as opções especificadas em <code>options</code>.</p>\r\n<p>O resultado da consulta é definido por <code>target</code>.</p>\r\n<p><code>target</code> fornece o contexto para a operação descrita por <code>query</code>.</p>\r\n<p><code>query</code> descreve a consulta a executar em <code>target</code>. <code>query</code> é expresso de uma forma que remete especificamente para <code>target</code> (por exemplo, uma instrução T-SQL).</p>\r\n<p>O valor <code>parameters</code> opcional pode conter uma lista ou um registo, conforme apropriado, para fornecer os valores de parâmetro esperados por <code>query</code>.</p>\r\n<p>O registo <code>options</code> opcional pode conter opções que afetam o comportamento da avaliação de <code>query</code> em <code>target</code>. Estas opções são específicas de <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Devolve se dois valores são iguais.",
        "Documentation.LongDescription": "Devolve nulo se um dos argumentos '<code>value1</code>', '<code>value2</code>' for nulo; caso contrário, é equivalente a Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Substitui as informações de metadados da entrada.",
        "Documentation.LongDescription": "Substitui as informações de metadados da entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Substitui o tipo do valor.",
        "Documentation.LongDescription": "Substitui o tipo de <code>value</code> pelo <code>type</code> fornecido.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Substitua o tipo predefinido de um registo por um tipo mais específico.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Devolve a diferença dos dois valores.",
        "Documentation.LongDescription": "Devolve a diferença de <code>value1</code> e <code>value2</code>. É possível especificar um parâmetro opcional <code>precision</code>; por predefinição, é utilizado <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Cria uma ação que, quando executada, irá devolver os resultados da execução de um pedido HTTP como um valor binário.",
        "Documentation.LongDescription": "Cria uma ação que, quando executada, devolverá os resultados da realização de um pedido de <code>method</code> a <code>url</code> utilizando o HTTP como valor binário.\r\n    Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta ao URL, sem ter de se preocupar com escapes.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro pode ser utilizado para especificar o nome (n&#227;o o valor) do par&#226;metro chave que &#233; necess&#225;rio utilizar no URL. O valor chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : Especificar este valor como um registo vai fornecer cabe&#231;alhos adicionais a um pedido HTTP.</li>\r\n<li><code>Timeout</code> : Especificar este valor como uma dura&#231;&#227;o vai alterar o tempo limite para um pedido HTTP. O valor predefinido &#233; de 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Especificar este valor como uma lista vai excluir estas chaves de cabe&#231;alho HTTP para que n&#227;o fa&#231;am parte do c&#225;lculo para colocar os dados em cache.</li>\r\n<li><code>IsRetry</code> : Especificar este valor l&#243;gico como verdadeiro vai ignorar qualquer resposta existente na cache ao obter os dados.</li>\r\n<li><code>ManualStatusHandling</code> : Especificar este valor como uma lista vai impedir qualquer processamento incorporado para pedidos HTTP cuja resposta tenha um destes c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Especificar este valor como texto acrescenta-o ao URL base antes de fazer o pedido.</li>\r\n<li><code>Content</code> : Especificar este valor vai fazer com que os conte&#250;dos do mesmo se tornem o corpo do pedido HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Note que esta função está desativada na maioria dos contextos. Pondere utilizar antes Web.Contents ou Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Executar um pedido GET no Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Insira o URL do ponto final de API REST do Azure Enterprise associado à sua inscrição",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Devolve os resultados binários para chamar o url fornecido para a API do Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Utilizar a função AzureEnterprise.Contents para devolver os resultados de um relatório específico.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Devolve o conteúdo do blob especificado a partir de um cofre de armazenamento do Azure.",
        "Documentation.LongDescription": "Devolve o conteúdo do blob no URL, <code>url</code>, a partir de um cofre de armazenamento do Azure. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a ler antes de aguardar pelo consumidor de dados. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes a tentar ler num &#250;nico pedido HTTP para o servidor. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests suporta o descarregamento de dados mais r&#225;pido, especificando o n&#250;mero de pedidos a serem feitos em paralelo, ao custo da utiliza&#231;&#227;o da mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor predefinido &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Devolve o conteúdo do ficheiro especificado a partir de um sistema de ficheiros do Azure Data Lake Storage.",
        "Documentation.LongDescription": "Devolve o conteúdo do ficheiro no URL, <code>url</code>, a partir de um sistema de ficheiros do Azure Data Lake Storage. <code>options</code> pode ser especificado para controlar as seguintes opções:\r\n    <ul>\r\n<li><code>BlockSize</code> : O n&#250;mero de bytes a ler antes de aguardar pelo consumidor de dados. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>RequestSize</code> : O n&#250;mero de bytes a tentar ler num &#250;nico pedido HTTP para o servidor. O valor predefinido &#233; de 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : A op&#231;&#227;o ConcurrentRequests suporta o descarregamento de dados mais r&#225;pido, especificando o n&#250;mero de pedidos a serem feitos em paralelo, ao custo da utiliza&#231;&#227;o da mem&#243;ria. A mem&#243;ria necess&#225;ria &#233; (ConcurrentRequest * RequestSize). O valor predefinido &#233; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Devolve o comprimento aproximado do binário.",
        "Documentation.LongDescription": "Devolve o comprimento aproximado de <code>binary</code>, ou um erro se a origem de dados não suportar um comprimento aproximado.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obtenha o comprimento aproximado do valor binário.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Coloca o valor binário na memória intermédia.",
        "Documentation.LongDescription": "Coloca o valor binário na memória intermédia. O resultado desta chamada é um valor binário estável, o que significa que terá um comprimento determinista e uma ordem de bytes.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Criar uma versão estável do valor binário.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Combina uma lista de binários num único binário.",
        "Documentation.LongDescription": "Combina uma lista de binários num único binário.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Cria um binário a partir do valor especificado",
        "Documentation.LongDescription": "Devolve um valor <code>binary</code> do fornecido <code>value</code>. Se o fornecido <code>value</code> for <code>null</code>, <code>Binary.From</code> devolve <code>null</code>.  Se o fornecido <code>value</code> for <code>binary</code>, <code>value</code>é devolvido. Valores dos seguintes tipos podem ser convertidos para um valor <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: Um valor <code>binary</code> da representação de texto.Consulte o <code>Binary.FromText</code> para detalhes.</li>\r\n      </ul>\r\nSe <code>value</code> for de algum outro tipo, é devolvido um erro.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>binary</code> de <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Converte uma lista de números num valor binário.",
        "Documentation.LongDescription": "Converte uma lista de números num valor binário.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Descodifica dados de um formato de texto para um formato binário.",
        "Documentation.LongDescription": "Devolve o resultado da conversão do valor de texto <code>text</code> num valor binário (lista de valores <code>number</code>). <code>encoding</code> pode ser especificado para indicar a codificação utilizada no valor de texto.\r\n      Os valores <code>BinaryEncoding</code> que se seguem podem ser utilizados para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificação Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificação hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Descodificar \"1011\" para o formato binário.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Descodificar \"1011\" para o formato binário com codificação hexadecimal.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Lê o fluxo binário e tenta determinar o tipo de conteúdo e as informações de formato do fluxo.",
        "Documentation.LongDescription": "Devolve um registo com o campo Content.Type, que contém o tipo de MIME inferido.\r\n    Se o tipo de conteúdo inferido for texto/* e for detetada uma página de código de codificação, é devolvido, adicionalmente, o campo Content.Encoding, que contém a codificação do fluxo.\r\n    Se o tipo de conteúdo inferido for texto/csv e o formato for delimitado, é devolvido, adicionalmente, o campo Csv.PotentialDelimiter, que contém uma tabela para a análise dos potenciais delimitadores.\r\n    Se o tipo de conteúdo inferido for texto/csv e o formato for de largura fixa, é devolvido, adicionalmente, o campo Csv.PotentialPositions, que contém uma lista para a análise de potenciais posições de coluna de largura fixa.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Devolve o número de carateres.",
        "Documentation.LongDescription": "Devolve o número de carateres.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Converte um valor binário numa lista de números.",
        "Documentation.LongDescription": "Converte um valor binário numa lista de números.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codifica dados binários para um formato de texto.",
        "Documentation.LongDescription": "Devolve o resultado da conversão de uma lista de números binários <code>binary</code> num valor de texto. Opcionalmente, <code>encoding</code> pode ser especificado para indicar a codificação a utilizar no valor de texto produzido\r\n      Os valores <code>BinaryEncoding</code> que se seguem podem ser utilizados para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificação Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificação hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Cria um registo de erros modificado que não irá gera uma contingência quando acionado por um processador definido numa vista (através de Binary.View).",
        "Documentation.LongDescription": "Cria um registo de erros modificado a partir de <code>errorRecord</code> que não gera uma contingência quando acionado por um processador definido numa vista (através de Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Cria uma função que pode ser intercetada por um processador definido numa vista (através de Binary.View).",
        "Documentation.LongDescription": "<p>Cria uma função de visualização baseada em <code>function</code> que pode ser processada numa visualização criada por <code>Binary.View</code>.</p>\r\n<p>O processador de <code>OnInvoke</code> <code>Binary.View</code> pode ser utilizado para definir um processador para função de visualização.</p>\r\n<p>Tal como acontece com os processadores para operações incorporadas, se não houver nenhum processador <code>OnInvoke</code> especificado, se o mesmo não processar a função de visualização, ou se for gerado um erro pelo processador, <code>function</code> será aplicado sobre a visualização.</p>\r\n<p>Consulte a documentação publicada sobre o conector personalizado do Power Query para obter uma descrição mais completa de <code>Binary.View</code> e das funções de visualização personalizadas.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Um formato binário que lê um número inteiro com sinal de 64 bits codificado através de uma codificação de comprimento variável de 7 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro com sinal de 64 bits codificado através de uma codificação de comprimento variável de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Um formato binário que lê um número inteiro sem sinal de 64 bits codificado através de uma codificação de comprimento variável de 7 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro sem sinal de 64 bits codificado através de uma codificação de comprimento variável de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Um formato binário que lê um número inteiro sem sinal de 8 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro sem sinal de 8 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Um formato binário que lê um valor decimal de 16 bytes do .NET.",
        "Documentation.LongDescription": "Um formato binário que lê um valor decimal de 16 bytes do .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Um formato binário que lê um valor de vírgula flutuante de dupla precisão IEEE de 8 bytes.",
        "Documentation.LongDescription": "Um formato binário que lê um valor de vírgula flutuante de dupla precisão IEEE de 8 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Devolve um formato binário que lê uma sequência de itens e devolve uma lista.",
        "Documentation.LongDescription": "Devolve um formato binário que lê uma sequência de itens e devolve uma <code>lista</code>. O parâmetro <code>binaryFormat</code> especifica o formato binário de cada item. Existem três formas de determinar o número de itens lidos: <ul><li>Se <code>countOrCondition</code> não for especificado(a), o formato binário fará a leitura até não existirem mais itens.</li><li>Se <code>countOrCondition</code> for um número, o formato binário fará a leitura desse número de itens.</li><li>Se <code>countOrCondition</code> for uma função, essa função será invocada para cada item lido. A função devolve true para continuar e false para parar a leitura de itens. O item final é incluído na lista.</li><li>Se <code>countOrCondition</code> for um formato binário, espera-se que a contagem de itens preceda a lista e o formato especificado é utilizado para ler a contagem.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Ler bytes até ao fim dos dados.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ler dois bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ler bytes até o valor de bytes ser maior ou igual a dois.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Um formato binário que lê zero bytes e devolve nulo.",
        "Documentation.LongDescription": "Um formato binário que lê zero bytes e devolve nulo.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Devolve um formato binário que lê um registo.",
        "Documentation.LongDescription": "Devolve um formato binário que lê um registo.  O parâmetro <code>record</code> especifica o formato do registo.  Cada campo no registo pode ter um formato binário diferente.  Se um campo contiver um valor que não seja um valor de formato binário, não serão lidos quaisquer dados relativos a esse campo e o valor do campo refletir-se-á no resultado.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Ler um registo que contém um número inteiro de 16 bits e um número inteiro de 32 bits.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Um formato binário que lê um número inteiro com sinal de 16 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro com sinal de 16 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Um formato binário que lê um número inteiro com sinal de 32 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro com sinal de 32 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Um formato binário que lê um número inteiro com sinal de 64 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro com sinal de 64 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Um formato binário que lê um valor de vírgula flutuante de precisão simples IEEE de 4 bytes.",
        "Documentation.LongDescription": "Um formato binário que lê um valor de vírgula flutuante de precisão simples IEEE de 4 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Devolve um formato binário que lê um valor de texto.",
        "Documentation.LongDescription": "Devolve um formato binário que lê um valor de texto.  O <code>length</code> especifica o número de bytes a descodificar ou o formato binário do comprimento que precede o texto.  O valor <code>encoding</code> opcional especifica a codificação do texto.  Se <code>encoding</code> não for especificado, a codificação será determinada a partir das marcas de ordem de bytes Unicode.  Se não houver marcas de ordem de bytes presentes, será utilizado <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Descodificar dois bytes como texto ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Descodificar texto ASCII em que o comprimento do texto em bytes aparece antes do texto como um byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Um formato binário que lê um número inteiro sem sinal de 16 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro sem sinal de 16 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Um formato binário que lê um número inteiro sem sinal de 32 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro sem sinal de 32 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Um formato binário que lê um número inteiro sem sinal de 64 bits.",
        "Documentation.LongDescription": "Um formato binário que lê um número inteiro sem sinal de 64 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Cria um número inteiro de 8 bits a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um valor de número inteiro de 8 bits <code>number</code> a partir do fornecido <code>value</code>. Se o fornecido <code>value</code> for <code>null</code>, <code>Byte.From</code> devolve <code>null</code>. Se o fornecido <code>value</code> é um <code>number</code> dentro de um intervalo de um número inteiro de 8 bits sem uma parte fracional, <code>value</code> é devolvido. Se tem uma parte fracional, o número é arredondado com o modo de arredondamento especificado. O modo de arredondamento predefinido é <code>RoundingMode.ToEven</code>. Se <code>value</code> for de algum outro tipo, será primeiro convertido para um <code>number</code> utilizando <code>Number.FromText</code>. Consulte o <code>Number.Round</code> para os modos de arredondamento disponíveis. Um opcional <code>culture</code> também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> inteiro de 8 bits de <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>number</code> inteiro de 8 bits de <code>\"4.5\"</code> com <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Converte um número num caráter de texto.",
        "Documentation.LongDescription": "Devolve o equivalente em carateres do número.<br>\r\n    <br>\r\n    O <code>number</code> fornecido deve ser um ponto de código Unicode de 21 bits.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converter um número para o respetivo valor de caráter equivalente.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Converta um caráter num número e efetue a operação inversa.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Converta o ponto de código hexadecimal do ícone expressivo \"face sorridente\" no respetivo par de substitutos UTF-16 equivalente.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Converte um caráter num valor numérico.",
        "Documentation.LongDescription": "Devolve o número equivalente ao <code>character</code>.<br>\r\n    <br>\r\n    O resultado será o ponto de código Unicode de 21 bits representado pelo caráter fornecido ou pelo par substituto.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte um carater no respetivo valor numérico equivalente.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Converta o par substituto UTF-16 do ícone expressivo \"face sorridente\" no seu ponto de código hexadecimal equivalente.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Devolve uma função que combina uma lista de texto ao utilizar o delimitador especificado.",
        "Documentation.LongDescription": "Devolve uma função que combina uma lista de valores de texto num único valor de texto, ao utilizar o delimitador especificado.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine uma lista de valores de texto com delimitador de ponto e vírgula.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Combine o texto de duas colunas através de um delimitador de vírgulas e aspas estilo CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Devolve uma função que combina uma lista de texto ao utilizar uma sequência de delimitadores.",
        "Documentation.LongDescription": "Devolve uma função que combina uma lista de valores de texto num único valor de texto, ao utilizar uma sequência de delimitadores.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina uma lista de valores de texto ao utilizar uma sequência de delimitadores.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Devolve uma função que combina uma lista de texto ao utilizar os comprimentos especificados.",
        "Documentation.LongDescription": "Devolve uma função que combina uma lista de valores de texto num único valor de texto, ao utilizar os comprimentos especificados.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine uma lista de valores de texto ao extrair os números de carateres especificados de cada valor de entrada.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Combine uma lista de valores de texto ao extrair os números de carateres especificados, depois de pré-preencher previamente o resultado com o texto do modelo.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Devolve uma função que combina uma lista de texto ao utilizar as posições de saída especificadas.",
        "Documentation.LongDescription": "Devolve uma função que combina uma lista de valores de texto num único valor de texto, ao utilizar as posições de saída especificadas.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine uma lista de valores de texto ao colocá-los na saída nas posições especificadas.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Devolve uma função que combina uma lista de texto ao utilizar as posições e comprimentos especificados.",
        "Documentation.LongDescription": "Devolve uma função que combina uma lista de valores de texto num único valor de texto ao utilizar as posições e comprimentos de saída especificados. Um comprimento nulo indica que todo o valor de texto deverá ser incluído.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine uma lista de valores de texto ao utilizar as posições e comprimentos de saída especificados.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Devolve uma função de comparação com base na cultura e sensibilidade a maiúsculas e minúsculas especificada.",
        "Documentation.LongDescription": "Devolve uma função de comparação que utiliza o <code>culture</code> e a sensibilidade a maiúsculas e minúsculas especificada por <code>ignoreCase</code> para efetuar comparações.<br>\r\n      <br>\r\n      Uma função de comparação aceita dois argumentos e devolve -1, 0 ou 1 com base se o primeiro valor é menor que, igual ou superior ao segundo.<br>\r\n      <br>\r\n      O valor predefinido para <code>ignoreCase</code> é falso. O <code>culture</code> deve ser uma das regiões suportadas pelo .NET Framework (por exemplo, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Comparar \"a\" e \"A\" com a região \"pt-PT\" para determinar se os valores são iguais.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Comparar \"a\" e \"A\" com a região \"pt-PT\", ignorando maiúsculas/minúsculas para determinar se os valores são iguais.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Devolve o identificador de membro exclusivo a partir do valor de propriedade dos membros.",
        "Documentation.LongDescription": "Devolve o identificador de membro exclusivo a partir de um valor de propriedade de membro. <code>attribute</code>. Devolve nulo para quaisquer outros valores.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Devolve a chave de uma propriedade.",
        "Documentation.LongDescription": "Devolve a chave da propriedade <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Retorna um valor monetário a partir do valor indicado.",
        "Documentation.LongDescription": "Devolve um valor de <code>currency</code> a partir do <code>value</code> fornecido. Se o fornecido <code>value</code> for <code>null</code>, <code>Currency.From</code> devolve <code>null</code>. Se o fornecido <code>value</code> for <code>number</code> dentro do intervalo monetário, a parte fracional de <code>value</code> é arredondada para 4 dígitos decimais e devolvida. Se o fornecido <code>value</code> for de outro tipo, será primeiro convertido para um <code>number</code> utilizando <code>Number.FromText</code>. Intervalo monetário válido é <code>-922,337,203,685,477.5808</code> para <code>922,337,203,685,477.5807</code>. Consulte o <code>Number.Round</code> para os modos de arredondamento disponíveis. O predefinido é <code>RoundingMode.ToEven</code>. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtém o valor <code>currency</code> de <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Obtenha o valor <code>currency</code> de <code>\"1.23455\"</code> utilizando <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Devolve o componente de dia.",
        "Documentation.LongDescription": "Devolve o componente de dia de um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o componente de dia é extraído.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o componente de dia de um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> que representa a data e hora 14/5/2011 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Devolve um número (entre 0 e 6) indicando o dia da semana do valor fornecido.",
        "Documentation.LongDescription": "Devolve um número (entre 0 e 6) a indicar o dia da semana do <code>dateTime</code> fornecido.\r\n  <ul>\r\n        <li><code>dateTime</code>: um valor de <code>data</code>, <code>datetime</code> ou <code>datetimezone</code>. </li>\r\n        <li><code>firstDayOfWeek</code>: um valor de <code>Dia</code> a indicar o dia que deve ser considerado o primeiro dia da semana. Os valores permitidos são Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, ou Day.Saturday. Se não for especificado, é utilizada uma predefinição dependente de cultura.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o dia da semana representado por segunda-feira, 21 de fevereiro de 2011, tratando o domingo como o primeiro dia da semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Obter o dia da semana representado por segunda-feira, 21 de fevereiro de 2011, tratando segunda-feira como o primeiro dia da semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Devolve o nome do dia da semana.",
        "Documentation.LongDescription": "Devolve o nome do dia da semana para o <code>date</code> fornecido. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o nome do dia da semana.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Devolve um número entre 1 e 366 que representa o dia do ano.",
        "Documentation.LongDescription": "Devolve um número que representa o dia do ano no valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "O dia do ano para 1 de março de 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Devolve um número de 28 a 31 que indica o número de dias no mês.",
        "Documentation.LongDescription": "Devolve o número de dias no mês no valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> para o qual é devolvido o número de dias no mês.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Número de dias no mês de dezembro conforme representado por <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Devolve o fim do dia.",
        "Documentation.LongDescription": "Devolve o fim do dia representado por <code>dateTime</code>. As informações de fuso horário são preservadas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim do dia é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o fim do dia para 14/5/2011 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obter o fim do dia para 17/5/2011 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Devolve o fim do mês.",
        "Documentation.LongDescription": "Devolve o fim do mês que contém <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim do mês é calculado</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o fim do mês para 14/5/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Obter o fim do mês para 17/5/2011 17:00:00 -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Devolve o fim do trimestre.",
        "Documentation.LongDescription": "Devolve o fim do trimestre que contém <code>dateTime</code>. As informações de fuso horário são preservadas.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim do trimestre é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o fim do trimestre para 10 de outubro de 2011, às 08:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Devolve o fim da semana.",
        "Documentation.LongDescription": "Devolve o fim da semana que contém <code>dateTime</code>.\r\n    Esta função aceita um <code>Day</code> opcional, <code>firstDayOfWeek</code>, para definir como o primeiro dia da semana para este cálculo relativo. O valor predefinido é <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o último dia da semana é calculado</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Opcional]</i> um valor <code>Day.Type</code> que representa o primeiro dia da semana. Seguem-se os valores possíveis: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> e <code>Day.Saturday.</code>. O valor predefinido é <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o fim da semana para 14/5/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Obter o fim da semana para 17/5/2011 17:00:00 -7:00, sendo domingo o primeiro dia da semana.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Devolve o fim do ano.",
        "Documentation.LongDescription": "Devolve o fim do ano que contém <code>dateTime</code>, incluindo segundos fracionais. As informações de fuso horário são mantidas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim do ano é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o fim do ano para 14/5/2011 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obter o fim da hora para 17/5/2011 17:00:00 -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Cria uma data a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>date</code> a partir do <code>value</code> especificado. Pode também ser fornecido um <code>culture</code> opcional (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>Date.From</code> devolverá <code>null</code>. Se o <code>value</code> especificado for <code>date</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Um valor <code>date</code> da representação textual. Consulte <code>Date.FromText</code> para obter detalhes.</li>\r\n        <li><code>datetime</code>: o componente de data de <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: o componente de data do equivalente local de data/hora de <code>value</code>.</li>\r\n        <li><code>number</code>: o componente de data do equivalente de data/hora da Data de Automatização OLE expresso por <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>43910</code> num valor <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Converter <code>#datetime(1899, 12, 30, 06, 45, 12)</code> num valor <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Cria uma Data a partir de formatos de Data locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>date</code> a partir de uma representação textual, <code>text</code>. Um parâmetro <code>record</code> opcional, <code>options</code> pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor de <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data com o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não é nulo, a <code>Culture</code> controla alguns especificadores de formato.. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara apoiar fluxos de trabalho de legado, <code>options</code> poderá também ser um valor de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"2010-12-31\"</code> num valor <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Encontrar a data no calendário gregoriano que corresponde ao início de 1400 no calendário hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Indica se esta data ocorre durante o dia atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante o dia atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre no dia atual.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Indica se esta data ocorre durante o mês atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante o mês atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre no mês atual.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Indica se esta data ocorre durante o trimestre atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante o trimestre atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre no trimestre atual.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Indica se esta data ocorre durante a semana atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante a semana atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre na semana atual.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Indica se esta data ocorre durante o ano atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante o ano atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre no ano atual.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Indica se esta data ocorre durante o dia seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o dia seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o dia posterior à hora do sistema atual ocorre no dia seguinte.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Indica se esta data ocorre durante o mês seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o mês seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o mês posterior à hora do sistema atual ocorre no mês seguinte.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Indica se esta data ocorre durante o trimestre seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo trimestre, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trismestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o trimestre posterior à hora do sistema atual ocorre no trimestre seguinte.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Indica se esta data ocorre durante a semana seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante a semana seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a semana posterior à hora do sistema atual ocorre na semana seguinte.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Indica se esta data ocorre durante o ano seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o próximo ano, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o ano posterior à hora do sistema atual ocorre no ano seguinte.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Indica se esta data ocorre durante o dia anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o dia anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no dia atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o dia anterior à hora do sistema atual ocorre no dia anterior.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Indica se esta data ocorre durante o mês anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o mês anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no mês atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o mês anterior à hora do sistema atual ocorre no mês anterior.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Indica se esta data ocorre durante o trimestre anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o número de trimestres anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no trimestre atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o trimestre anterior à hora do sistema atual ocorre no trimestre anterior.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Indica se esta data ocorre durante a semana anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante a semana anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na semana atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a semana anterior à hora do sistema atual ocorre na semana anterior.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Indica se esta data ocorre durante o ano anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o ano anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no ano atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o ano anterior à hora do sistema atual ocorre no ano anterior.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Indica se esta data ocorre durante o ano atual e se recai no dia atual ou antes dele, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> ocorre durante o ano atual e se recai no dia atual ou antes dele, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora do sistema atual ocorre no ano até à data.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Indica se esta data recai num ano bissexto.",
        "Documentation.LongDescription": "Indica se o valor datetime especificado <code>dateTime</code> recai num ano bissexto.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> a avaliar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o ano 2012, conforme representado por <code>#date(2012, 01, 01)</code>, é um ano bissexto.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Devolve o componente de mês.",
        "Documentation.LongDescription": "Devolve o componente de mês do valor <code>datetime</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o mês em #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Devolve o nome do componente de mês.",
        "Documentation.LongDescription": "Devolve o nome do componente do mês para o <code>date</code> fornecido. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o nome do mês.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Devolve um número que indica o trimestre do ano em que a data recai.",
        "Documentation.LongDescription": "Devolve um número de 1 a 4 que indica o trimestre do ano em que a data <code>dateTime</code> recai. <code>dateTime</code> pode ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o trimestre do ano em que a data #date(2011, 12, 31) recai.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Devolve o início do dia.",
        "Documentation.LongDescription": "Devolve o início do dia representado por <code>dateTime</code>.\r\n    <code>dateTime</code> tem de ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do dia para 10 de outubro de 2011, às 08:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Devolve o início do mês.",
        "Documentation.LongDescription": "Devolve o início do mês que contém <code>dateTime</code>.\r\n    <code>dateTime</code> tem de ser um valor <code>date</code> ou <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do mês para 10 de outubro de 2011, às 08:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Devolve o início do trimestre.",
        "Documentation.LongDescription": "Devolve o início do trimestre que contém <code>dateTime</code>.\r\n      <code>dateTime</code> tem de ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do trimestre para 10 de outubro de 2011, às 08:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Devolve o início da semana.",
        "Documentation.LongDescription": "Devolve o início da semana que contém <code>dateTime</code>.\r\n    <code>dateTime</code> tem de ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início da semana para terça-feira, 11 de outubro de 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Encontre o início da semana para terça-feira, 11 de outubro de 2011, utilizando a segunda-feira como o início da semana.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Devolve o início do ano.",
        "Documentation.LongDescription": "Devolve o início do ano que contém <code>dateTime</code>.\r\n    <code>dateTime</code> tem de ser um valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início do ano para 10 de outubro de 2011, às 08:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Devolve um registo que contém as partes do valor date.",
        "Documentation.LongDescription": "Devolve um registo que contém as partes do valor date especificado, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: um valor <code>date</code> a partir do qual o registo das partes correspondentes deverá ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converter o valor <code>#date(2011, 12, 31)</code> num registo que contém partes do valor date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Devolve uma representação textual do valor de data.",
        "Documentation.LongDescription": "Devolve uma representação de texto de <code>date</code>. Um parâmetro opcional <code>record</code> <code>options</code>, poderá ser fornecido para especificar propriedades adicionais. <code>culture</code> é apenas utilizado para fluxos de trabalho de legado. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> irá resultar na formatação da data utilizando a predifinição fornecida por <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla algumas especificações de formatos. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato predefindo a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho de legado, <code>options</code> e <code>culture</code> também poderão ser valores de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#date(2010, 12, 31)</code> num valor de <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Encontrar o ano no calendário hijri que corresponde a 1 de janeiro de 2000 no calendário gregoriano.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Devolve um número de 1 a 6 que indica a semana do mês em que esta data recai.",
        "Documentation.LongDescription": "Devolve um número de 1 a 6 que indica a semana do mês em que a data <code>dateTime</code> recai.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>datetime</code> para o qual a semana do mês é determinada.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine em que semana de março foi o dia 15 em 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Devolve um número de 1 a 54 que indica a semana do ano em que esta data recai.",
        "Documentation.LongDescription": "Devolve um número entre 1 a 54 que indica a semana do ano em que a data, <code>dateTime</code>, se insere.\r\n <ul>\r\n       <li><code>dateTime</code>: A <code>data/hora</code> do valor para o qual a semana-do-ano é determinada.</li>\r\n  <li><code>firstDayOfWeek</code>: Um valor de<code>Dia.Tipo</code> opcional que indica qual dos dias é considerado como o início de uma nova semana (por exemplo, <code>Dia.Domingo</code>). Se este não for especificado, será utilizada uma predefinição de cultura dependente.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine que semana do ano contém o dia 27 de março de 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Determine que semana do ano contém o dia 27 de março de 2011, ao utilizar a segunda-feira como o início da semana.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Devolve o componente de ano.",
        "Documentation.LongDescription": "Devolve o componente de ano do valor <code>datetime</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o ano em #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Devolve o componente de data do valor de date, datetime ou datetimezone especificado.",
        "Documentation.LongDescription": "Devolve o componente de data de <code>dateTime</code>, o valor <code>date</code>, <code>datetime</code> ou <code>datetimezone</code> especificado.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o valor de data de #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Cria um datetime a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>datetime</code> a partir do <code>value</code> especificado. Pode também ser fornecida um <code>culture</code> opcional (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>DateTime.From</code> devolverá <code>null</code>. Se o <code>value</code> especificado for <code>datetime</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>datetime</code> da representação textual. Consulte <code>DateTime.FromText</code> para obter detalhes.</li>\r\n        <li><code>date</code>: um <code>datetime</code> com <code>value</code> como componente de data e <code>12:00:00 AM</code> como componente de hora.</li>\r\n        <li><code>datetimezone</code>: o equivalente de <code>datetime</code> local de <code>value</code>.</li>\r\n        <li><code>time</code>: um <code>datetime</code> com o equivalente de data da Data de Automatização OLE <code>0</code> como componente de data e <code>value</code> como componente de hora.</li>\r\n        <li><code>number</code>: um equivalente de <code>datetime</code> da Data de Automatização OLE expresso por <code>value</code>. </li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#time(06, 45, 12)</code> num valor <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Converter <code>#date(1975, 4, 4)</code> num valor <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Cria um datetime a partir de um número longo de 64 bits.",
        "Documentation.LongDescription": "Cria um valor <code>datetime</code> a partir do valor <code>fileTime</code> e converte-o para o fuso horário local. O filetime é um valor de hora do ficheiro do Windows que representa o número de intervalos de 100 nanossegundos decorridos desde as 00:00 de 1 de janeiro de 1601 A.D. (E.C.) Hora Universal Coordenada (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>129876402529842245</code> num valor datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Cria um datetimezone a partir dos formatos datetime local e universal.",
        "Documentation.LongDescription": "Cria um valor <code>datetime</code> a partir de uma representação textual, <code>text</code>. Um parâmetro <code>record</code> opcional, <code>options</code> pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor de <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data com o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não é nulo, a <code>Culture</code> controla alguns especificadores de formato.. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara apoiar fluxos de trabalho de legado, <code>options</code> poderá também ser um valor de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"2010-12-31T01:30:00\"</code> num valor datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Converter <code>\"2010-12-31T01:30:00.121212\"</code> num valor datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Converter <code>\"2010-12-31T01:30:00\"</code> num valor datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Converter <code>\"20101231T013000\"</code> num valor datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante a hora atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code>, ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determina se a hora atual do sistema está na hora atual.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Indica se esta data ocorre durante o minuto atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante o minuto atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code>, ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora atual do sistema ocorre no minuto atual.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Indica se esta data ocorre durante o segundo atual, conforme determinado pela data e hora atuais no sistema.",
        "Documentation.LongDescription": "Indica se o valor datetime fornecido <code>dateTime</code> ocorre durante o segundo atual, conforme determinado pela data e hora atuais no sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code>, ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora atual do sistema ocorre no segundo atual.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante a hora seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora seguinte à hora do sistema atual ocorre na hora seguinte.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Indica se este datetime ocorre durante o minuto seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o minuto seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto seguinte à hora do sistema atual ocorre no minuto seguinte.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Indica se este datetime ocorre durante o segundo seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o segundo seguinte, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo seguinte à hora do sistema atual ocorre no segundo seguinte.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Indica se este datetime ocorre durante a hora anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante a hora anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre na hora atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a hora antes da hora do sistema atual ocorre na hora anterior.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Indica se este datetime ocorre durante o minuto anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o minuto anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no minuto atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o minuto antes da hora do sistema atual ocorre no minuto anterior.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Indica se este datetime ocorre durante o segundo anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.",
        "Documentation.LongDescription": "Indica se o valor do datetime indicado <code>dateTime</code> ocorre durante o segundo anterior, conforme determinado pela data e hora atuais no sistema. Tenha em conta que esta função irá devolver \"falso\" quando é transmitido um valor que ocorre no segundo atual.\r\n      <ul>\r\n      <li><code>dateTime</code>: um valor <code>datetime</code> ou <code>datetimezone</code> a ser avaliado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o segundo antes da hora do sistema atual ocorre no segundo anterior.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Devolve a parte que corresponde à hora do valor datetime especificado.",
        "Documentation.LongDescription": "Devolve a parte que corresponde à hora do valor datetime especificado, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o valor de hora de #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Devolve um registo que contém as partes do valor datetime.",
        "Documentation.LongDescription": "Devolve um registo que contém as partes do valor datetime especificado, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: um valor <code>datetime</code> a partir do qual o registo das partes correspondentes deverá ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converter o valor <code>#datetime(2011, 12, 31, 11, 56, 2)</code> num registo que contém os valores Data e Hora.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Devolve uma representação textual do valor datetime.",
        "Documentation.LongDescription": "Devolve uma representação de texto de <code>dateTime</code>. Um parâmetro opcional <code>record</code> <code>options</code>, poderá ser fornecido para especificar propriedades adicionais. <code>culture</code> é apenas utilizado para fluxos de trabalho de legado. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> irá resultar na formatação da data utilizando a predifinição fornecida por <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla algumas especificações de formatos. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato predefindo a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho de legado, <code>options</code> e <code>culture</code> também poderão ser valores de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#datetime(2010, 12, 31, 01, 30, 25)</code> num valor de <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Converter com o padrão ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Cria um datetimezone a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>datetimezone</code> a partir do <code>value</code> especificado. Pode também ser fornecida um <code>culture</code> opcional (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>DateTimeZone.From</code> devolverá <code>null</code>. Se o <code>value</code> especificado for <code>datetimezone</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>datetimezone</code> a partir da representação textual. Consulte <code>DateTimeZone.FromText</code> para obter detalhes.</li>\r\n        <li><code>date</code>: um <code>datetimezone</code> com <code>value</code> como componente de data, <code>12:00:00 AM</code> como componente de hora e o desfasamento correspondente ao fuso horário local.</li>\r\n        <li><code>datetime</code>: um <code>datetimezone</code> com <code>value</code> como datetime e o desfasamento correspondente ao fuso horário local.</li>\r\n        <li><code>time</code>: um <code>datetimezone</code> com o equivalente de data da Data de Automatização OLE <code>0</code> como componente de data, <code>value</code> como componente de hora e o desfasamento correspondente ao fuso horário local.</li>\r\n        <li><code>number</code>: um <code>datetimezone</code> com o equivalente de datetime da Data de Automatização de OLE expresso por <code>value</code> e o desfasamento correspondente ao fuso horário local.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"2020-10-30T01:30:00-08:00\"</code> num valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Cria um datetimezone a partir de um número longo de 64 bits.",
        "Documentation.LongDescription": "Cria um valor <code>datetimezone</code> a partir do valor <code>fileTime</code> e converte-o no fuso horário local. O filetime é um valor de hora do ficheiro do Windows que representa o número de intervalos de 100 nanossegundos decorridos desde as 00:00 de 1 de janeiro de 1601 A.D. (E.C.) Hora Universal Coordenada (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>129876402529842245</code> num valor datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Cria um datetimezone a partir de formatos de datetimezone locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>datetimezone</code> a partir de uma representação textual, <code>text</code>. Um parâmetro <code>record</code> opcional, <code>options</code> pode ser fornecido para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor de <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da data com o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não é nulo, a <code>Culture</code> controla alguns especificadores de formato.. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara apoiar fluxos de trabalho de legado, <code>options</code> poderá também ser um valor de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"2010-12-31T01:30:00-08:00\"</code> num valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Converter com ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Remove informações de fuso horário do valor datetimezone especificado.",
        "Documentation.LongDescription": "Devolve um valor #datetime de <code>dateTimeZone</code> com as informações de fuso horário removidas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Remover informações de fuso horário do valor #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Converte o componente de fuso horário para o fuso horário local.",
        "Documentation.LongDescription": "Altera as informações de fuso horário do valor datetimezone <code>dateTimeZone</code> para as informações de fuso horário local.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, serão adicionadas as informações de fuso horário local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Alterar informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para o fuso horário local (assumindo PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Devolve um registo que contém as partes do valor datetimezone.",
        "Documentation.LongDescription": "Devolve um registo que contém as partes do valor datetimezone especificado, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: um valor <code>datetimezone</code> a partir do qual o registo das partes correspondentes deverá ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converter o valor <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> num registo que contém os valores Data, Hora e Zona.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Devolve uma representação textual do valor datetimezone.",
        "Documentation.LongDescription": "Devolve uma representação de texto de <code>dateTimeZone</code>. Um parâmetro opcional <code>record</code> <code>options</code>, poderá ser fornecido para especificar propriedades adicionais. <code>culture</code> é apenas utilizado para fluxos de trabalho de legado. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor <code>text</code> que indica o formato a utilizar. Para mais detalhes, aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> irá resultar na formatação da data utilizando a predifinição fornecida por <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Quando <code>Format</code> não é nulo, <code>Culture</code> controla algumas especificações de formatos. Por exemplo, em <code>\"en-US\"</code> <code>\"MMM\"</code> é <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, enquanto que em <code>\"ru-RU\"</code> <code>\"MMM\"</code> é <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato predefindo a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido, <code>Culture.Current</code> é utilizado.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho de legado, <code>options</code> e <code>culture</code> também poderão ser valores de texto. Isto tem o mesmo comportamento que se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> num valor de <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Converter com o padrão ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Converte o componente de fuso horário para o fuso horário UTC.",
        "Documentation.LongDescription": "Altera as informações de fuso horário do valor datetime <code>dateTimeZone</code> para as informações de fuso horário UTC ou Hora Universal Coordenada.\r\n    Se <code>dateTimeZone</code> não tiver um componente de fuso horário, serão adicionadas as informações de fuso horário UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Alterar informações de fuso horário de #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) para fuso horário UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera o fuso horário do valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Altera o fuso horário do valor.",
        "Documentation.LongDescription": "Altera o fuso horário do valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Cria um número Decimal a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um valor <code>number</code> Decimal a partir do <code>value</code> fornecido. Se o <code>value</code> fornecido for <code>null</code>, <code>Decimal.From</code> devolve <code>null</code>.  Se o <code>value</code> fornecido for <code>number</code> dentro do intervalo de números Decimais, é devolvido <code>value</code>; caso contrário, é devolvido um erro. Se o <code>value</code> fornecido for de algum outro tipo, será primeiro convertido para um <code>number</code> utilizando <code>Number.FromText</code>. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> Decimal de <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Devolve o conteúdo da tabela do Delta Lake.",
        "Documentation.LongDescription": "Devolve o conteúdo da tabela do Delta Lake.",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Cria um número Duplo a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um valor <code>number</code> Duplo a partir do <code>value</code> fornecido. Se o <code>value</code> fornecido for <code>null</code>, <code>Double.From</code> devolve <code>null</code>. Se o <code>value</code> fornecido for <code>number</code> dentro do intervalo de números Duplos, é devolvido <code>value</code>; caso contrário, é devolvido um erro. Se o <code>value</code> fornecido for de algum outro tipo, será primeiro convertido para um <code>number</code> utilizando <code>Number.FromText</code>. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> Duplo de <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Devolve a parte dos dias de uma duração.",
        "Documentation.LongDescription": "Devolve a parte dos dias de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrair o número de dias entre duas datas.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Cria uma duração a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>duration</code> a partir do <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Duration.From</code> devolve <code>null</code>.  Se o <code>value</code> especificado for <code>duration</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Um valor <code>duration</code> a partir de formatos texto de tempo decorrido (d.h:m:s). Consulte <code>Duration.FromText</code> para obter detalhes.</li>\r\n        <li><code>number</code>: Um valor <code>duration</code> equivalente ao número de dias inteiros e fracionais expresso por <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>2.525</code> num valor <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Devolve um valor de duração a partir de formatos de tempo decorrido textuais (d.h:m:s).",
        "Documentation.LongDescription": "Devolve um valor de duração a partir do texto especificado, <code>text</code>. É possível analisar os formatos que se seguem com esta função:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd.hh:mm(:ss(.ff)) </li>\r\n </ul>\r\n        <br>\r\n        (Todos os intervalos são inclusivos)<br>\r\n        ddd: número de dias.<br>\r\n        hh: número de horas, entre 0 e 23.<br>\r\n        mm: número de minutos, entre 0 e 59.<br>\r\n        ss: número de segundos, entre 0 e 59.<br>\r\n        ff: fração de segundos, entre 0 e 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"2.05:55:20\"</code> num valor <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Devolve a parte das horas de uma duração.",
        "Documentation.LongDescription": "Devolve a parte das horas de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrair as horas de um valor de duração.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Devolve a parte dos minutos de uma duração.",
        "Documentation.LongDescription": "Devolve a parte dos minutos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrair os minutos de um valor de duração.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Devolve a parte dos segundos de uma duração.",
        "Documentation.LongDescription": "Devolve a parte dos segundos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrair os segundos de um valor de duração.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Devolve um registo que contém as partes da duração.",
        "Documentation.LongDescription": "Devolve um registo que contém as partes do valor de duração, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: um valor <code>duration</code> a partir do qual o registo é criado.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#duration(2, 5, 55, 20)</code> num registo dos respetivos componentes, incluindo dias, horas, minutos e segundos, se aplicável.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Devolve o texto com o formato \"d.h:m:s\".",
        "Documentation.LongDescription": "Devolve uma representação textual no formato \"dia.hora:mins:seg\" do valor de duração especificado, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: Uma <code>duração</code> da qual é calculada a representação textual.</li>\r\n  <li><code>format</code>: <i>[Opcional]</i> Preterido, será gerado um erro se não for nulo</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#duration(2, 5, 55, 20)</code> num valor de texto.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Devolve o total de dias abrangido por esta duração.",
        "Documentation.LongDescription": "Devolve o total de dias abrangidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Encontre o total de dias abrangidos por um valor de duração.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Devolve o total de horas abrangido por esta duração.",
        "Documentation.LongDescription": "Devolve o total de horas abrangidas por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Encontre o total de horas abrangidas por um valor de duração.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Devolve o total de minutos abrangido por esta duração.",
        "Documentation.LongDescription": "Devolve o total de minutos abrangidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Encontre o total de minutos abrangidos por um valor de duração.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Devolve o total de segundos abrangido por esta duração.",
        "Documentation.LongDescription": "Devolve o total de segundos abrangidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Encontre o total de segundos abrangidos por um valor de duração.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Devolve um registo de erro dos valores de texto fornecidos por razão, mensagem e detalhe.",
        "Documentation.LongDescription": "Devolve um registo de erro dos valores de texto fornecidos por razão, mensagem e detalhe.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Devolve a representação do código fonte M de um valor constante.",
        "Documentation.LongDescription": "Devolve a representação do código fonte M de um valor constante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obter a representação do código fonte M de um valor numérico.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Obter a representação do código fonte M de um valor de data.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Obter a representação do código fonte M de um valor de texto.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Devolve o resultado da avaliação de uma expressão M.",
        "Documentation.LongDescription": "Devolve o resultado da avaliação de uma expressão M <code>document</code>, com os identificadores disponíveis que podem ser referênciados definidos por <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Avaliar uma soma simples.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Avaliar uma soma mais complexa.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Avaliar a concatenação de um valor de texto com um identificador.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Devolve a representação do código fonte M de um identificador.",
        "Documentation.LongDescription": "Devolve a representação do código fonte M de um identificador <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obter a representação do código fonte M de um identificador.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Obter a representação do código fonte M de um identificador que contém um espaço.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Devolve o conteúdo do ficheiro especificado como binário.",
        "Documentation.LongDescription": "Devolve o conteúdo do ficheiro, <code>path</code>, como binário. O parâmetro <code>options</code> destina-se atualmente apenas a utilização interna.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Devolve o resultado que indica se uma função particular é ou não considerada uma origem de dados.",
        "Documentation.LongDescription": "Devolve o resultado que indica se <code>function</code> é ou não considerada uma origem de dados.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Traduz texto que representa um valor geográfico no formato de Well-Known Text (WKT) num registo estruturado.",
        "Documentation.LongDescription": "Traduz texto que representa um valor geográfico no formato de Well-Known Text (WKT) num registo estruturado. WKT é um formato padrão definido pelo Open Geospatial Consortium (OGC) e é o formato típico de serialização utilizado pelas bases de dados, incluindo o SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Traduz um valor de ponto geográfico estruturado na sua representação de Well-Known Text (WKT).",
        "Documentation.LongDescription": "Traduz um valor de ponto geográfico estruturado na sua representação de Well-Known Text (WKT), tal como definido pelo Open Geospatial Consortium (OGC), também o formato de serialização utilizado por muitas bases de dados, incluindo o SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Traduz texto que representa um valor geométrico no formato de Well-Known Text (WKT) num registo estruturado.",
        "Documentation.LongDescription": "Traduz texto que representa um valor geométrico no formato de Well-Known Text (WKT) num registo estruturado. WKT é um formato padrão definido pelo Open Geospatial Consortium (OGC) e é o formato típico de serialização utilizado pelas bases de dados, incluindo o SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Traduz um valor de ponto geométrico estruturado na sua representação de Well-Known Text (WKT).",
        "Documentation.LongDescription": "Traduz um valor de ponto geométrico estruturado na sua representação de Well-Known Text (WKT), tal como definido pelo Open Geospatial Consortium (OGC), também o formato de serialização utilizado por muitas bases de dados, incluindo o SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Devolve um valor de guid a partir do valor determinado.",
        "Documentation.LongDescription": "Devolve um valor de <code>Guid.Type</code> a partir do <code>value</code> especificado. Se o <code>value</code> especificado é <code>null</code>, <code>Guid.From</code> devolve <code>null</code>.  Será efetuada uma verificação para determinar se o fornecido <code>value</code> está num formato aceitável. Formatos aceitáveis fornecidos nos exemplos.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "O Guid pode ser fornecido como 32 dígitos hexadecimais contíguos.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "O Guid pode ser fornecido como 32 dígitos hexadecimais separados por hífens em blocos de 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "O Guid pode ser fornecido como 32 dígitos hexadecimais separados por hífens e incluídos entre chavetas.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "O Guid pode ser fornecido como 32 dígitos hexadecimais separados por hífenes e entre parênteses.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Cria um número inteiro de 16 bits a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um valor de número inteiro de 16 bits <code>number</code> do fornecido <code>value</code>. Se o <code>value</code> fornecido for <code>null</code>, <code>Int16.From</code> devolve <code>null</code>.  Se o <code>value</code> fornecido for <code>number</code> no intervalo de números inteiros de 16 bits sem uma parte fracional, <code>value</code> é devolvido. Se tiver uma parte fracional, o número é arredondado com o modo de arredondamento especificado. O modo de arredondamento predefinido é <code>RoundingMode.ToEven</code>. Se <code>value</code> for de qualquer outro tipo, primeiro será convertido num <code>number</code> utilizando <code>Number.FromText</code>. Consulte <code>Number.Round</code> para ver os modos de arredondamento disponíveis. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> inteiro de 16 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>number</code> inteiro de 16 bits de <code>\"4.5\"</code> com <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Cria um número inteiro de 32 bits a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um número inteiro de 32 bits <code>number</code> do valor <code>value</code>. Se o <code>value</code> for <code>null</code>, <code>Int32.From</code> devolve <code>null</code>.  Se o <code>value</code> fornecido for <code>number</code> no intervalo de números inteiros de 32 bits sem uma parte fracional, <code>value</code> é devolvido. Se tiver uma parte fracional, o número é arredondado com o modo de arredondamento especificado. O modo de arredondamento predefinido é <code>RoundingMode.ToEven</code>. Se <code>value</code> for de qualquer outro tipo, primeiro será convertido num <code>number</code> utilizando <code>Number.FromText</code>. Consulte <code>Number.Round</code> para ver os modos de arredondamento disponíveis. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> inteiro de 32 bits de <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>number</code> inteiro de 32 bits de <code>\"4.5\"</code> com <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Cria um número inteiro de 64 bits a partir do valor indicado.",
        "Documentation.LongDescription": "Devolve um valor de número inteiro de 64 bits <code>number</code> do fornecido <code>value</code>. Se o <code>value</code> fornecido for <code>null</code>, <code>Int64.From</code> devolve <code>null</code>. Se o <code>value</code> fornecido for <code>number</code> no intervalo de números inteiros de 64 bits sem uma parte fracional, <code>value</code> é devolvido. Se tiver uma parte fracional, o número é arredondado com o modo de arredondamento especificado. O modo de arredondamento predefinido é <code>RoundingMode.ToEven</code>. Se <code>value</code> for de qualquer outro tipo, primeiro será convertido num <code>number</code> utilizando <code>Number.FromText</code>. Consulte <code>Number.Round</code> para ver os modos de arredondamento disponíveis. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>número</code> inteiro de 64 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenha o valor <code>number</code> inteiro de 64 bits de <code>\"4.5\"</code> utilizando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Cria um número inteiro de 8 bits com sinal a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um valor de número inteiro de 8 bits <code>number</code> do fornecido <code>value</code>. Se o <code>value</code> fornecido for <code>null</code>, <code>Int8.From</code> devolve <code>null</code>.  Se o <code>value</code> fornecido for <code>number</code> no intervalo de números inteiros de 8 bits sem uma parte fracional, <code>value</code> é devolvido. Se tiver uma parte fracional, o número é arredondado com o modo de arredondamento especificado. O modo de arredondamento predefinido é <code>RoundingMode.ToEven</code>. Se <code>value</code> for de qualquer outro tipo, primeiro será convertido num <code>number</code> utilizando <code>Number.FromText</code>. Consulte <code>Number.Round</code> para ver os modos de arredondamento disponíveis. Um opcional <code>culture</code> também poderá ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> inteiro de 8 bits com sinal de <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>number</code> inteiro de 8 bits com sinal de <code>\"4.5\"</code> com <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Devolve a árvore de sintaxe abstrata (AST) para o corpo de uma função.",
        "Documentation.LongDescription": "<p>Devolve a árvore de sintaxe abstrata (AST) para o corpo de <code>function</code>, normalizada numa <i>expressão de item</i>:\r\n<ul>\r\n  <li>A função tem de ser um lambda de um argumento.</li>\r\n  <li>Todas as referências ao parâmetro da função são substituídas por <code>ItemExpression.Item</code>.</li>\r\n  <li>A AST será simplificada para conter apenas nós dos tipos:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Será desencadeado um erro se não for possível que uma AST de expressão de item seja devolvida para o corpo de <code>function</code></p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolve o AST para o corpo da função <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Devolve o conteúdo do documento JSON.",
        "Documentation.LongDescription": "Devolve o conteúdo do documento JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Produz uma representação JSON de um determinado valor.",
        "Documentation.LongDescription": "<p>Produz uma representação JSON de um determinado valor <code>value</code> com uma codificação de texto especificada por <code>encoding</code>. Se <code>encoding</code> estiver omisso, é utilizado UTF8. Os valores são representados da seguinte forma:</p>\r\n <ul>\r\n        <li>Os valores nulos, de texto e lógicos são representados como os tipos JSON correspondentes</li>\r\n        <li>Os números são representados como números em JSON, com a exceção de que <code>#infinity</code>, <code>-#infinity</code> e <code>#nan</code> são convertidos em nulo</li>\r\n        <li>As listas são representadas como matrizes JSON</li>\r\n        <li>Os registos são representados como objetos JSON</li>\r\n        <li>As tabelas são representadas como matriz de objetos</li>\r\n        <li>As datas, horas, datahora, datafusohorário e durações são representadas como texto ISO-8601</li>\r\n        <li>Os valores binários são representados como texto com codificação Base 64</li>\r\n        <li>Os tipos e as funções produzem erros</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converta um valor complexo para JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Converte um valor binário numa lista de valores de texto divididos por quebras de linha. Se for especificado um estilo de cotação, as quebras de linha poderão aparecer entre aspas. Se includeLineSeparators tiver o valor true, os carateres de quebra de linha serão incluídos no texto.",
        "Documentation.LongDescription": "Converte um valor binário numa lista de valores de texto divididos por quebras de linha. Se for especificado um estilo de cotação, as quebras de linha poderão aparecer entre aspas. Se includeLineSeparators tiver o valor true, os carateres de quebra de linha serão incluídos no texto.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Converte um valor de texto numa lista de valores de texto divididos por quebras de linha. Se includeLineSeparators for verdadeiro, os carateres de quebra de linha são incluídos no texto.",
        "Documentation.LongDescription": "Converte um valor de texto numa lista de valores de texto divididos por quebras de linhas. Se includeLineSeparators for verdadeiro, os carateres de quebra de linha são incluídos no texto.\r\n        <div>\r\n          <ul>\r\n            <li> <code>QuoteStyle.None:</code> (predefinição) Não é necessário nenhum comportamento de cotação.</li>\r\n            <li><code>QuoteStyle.Csv:</code>A cotação é efetuada por CSV. É utilizado um caráter de aspas duplas para demarcar essas regiões e um par de carateres de aspas duplas para indicar um único caráter de aspas duplas dentro de uma região. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Converte uma lista de texto num valor binário utilizando a codificação e o lineSeparator especificados. O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, serão utilizados os carateres de símbolo de retorno e avanço de linha.",
        "Documentation.LongDescription": "Converte uma lista de texto num valor binário utilizando a codificação e o lineSeparator especificados. O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, serão utilizados os carateres de símbolo de retorno e avanço de linha.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Converte uma lista de texto num texto único.  O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, serão utilizados os carateres de símbolo de retorno e avanço de linha.",
        "Documentation.LongDescription": "Converte uma lista de texto num texto único.  O lineSeparator especificado é acrescentado a cada linha.  Se não for especificado, serão utilizados os carateres de símbolo de retorno e avanço de linha.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Devolve true se todas as expressões forem verdadeiras.",
        "Documentation.LongDescription": "Devolve true se todas as expressões existentes na lista <code>list</code> forem verdadeiras.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar se todas as expressões existentes na lista {true, true, 2 > 0} são verdadeiras.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Determinar se todas as expressões existentes na lista {true, true, 2 < 0} são verdadeiras.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Devolve true se qualquer expressão for verdadeira.",
        "Documentation.LongDescription": "Devolve true se qualquer expressão existente na lista <code>list</code> for verdadeira.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determinar se qualquer uma das expressões existentes na lista {true, false, 2 > 0} é verdadeira.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Determinar se qualquer uma das expressões existentes na lista {2 = 0, false, 2 < 0} é verdadeira.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Devolve a média dos valores. Funciona com valores numéricos, de data, datetime, datetimezone e duração.",
        "Documentation.LongDescription": "Devolve o valor médio dos itens existentes na lista. <code>list</code>. O resultado é especificado no mesmo tipo de dados dos valores existentes na lista. Só funciona com valores numéricos, de data, hora, datetime, datetimezone e duração.\r\n    Se a lista estiver vazia será devolvido um nulo.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Determinar a média da lista de números, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Determinar a média dos valores de data 1 de janeiro de 2011, 2 de janeiro de 2011 e 3 de janeiro de 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Coloca uma lista na memória intermédia.",
        "Documentation.LongDescription": "Coloca a lista <code>list</code> na memória intermédia. O resultado desta chamada é uma lista estável.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Criar uma cópia estável da lista {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Devolve uma única lista através da combinação de várias listas.",
        "Documentation.LongDescription": "Utiliza uma lista de listas, <code>lists</code>, e intercala-a numa única lista nova.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Combinar as duas listas simples {1, 2} e {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Combinar as duas listas, {1, 2} e {3, {4, 5}}, uma das quais contém uma lista aninhada.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Devolve o número de itens existentes na lista.",
        "Documentation.LongDescription": "Devolve o número de itens existentes na lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de valores existentes na lista {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Devolve uma lista de valores com os duplicados removidos.",
        "Documentation.LongDescription": "Devolve uma lista que contém todos os valores existentes na lista <code>list</code> com os duplicados removidos. Se a lista estiver vazia, o resultado será uma lista vazia.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Remover os duplicados da lista {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Devolve o primeiro valor da lista ou a predefinição especificada se a lista estiver vazia.",
        "Documentation.LongDescription": "Devolve o primeiro item existente na lista <code>list</code> ou o valor predefinido opcional, <code>defaultValue</code>, se a lista estiver vazia.\r\n    Se a lista estiver vazia e não for especificado um valor predefinido, a função devolve <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o primeiro valor na lista {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Determinar o primeiro valor na lista {}. Se a lista estiver vazia, devolver -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Devolve a interseção dos valores da lista encontrados na entrada.",
        "Documentation.LongDescription": "Devolve a interseção dos valores da lista encontrados na lista de entrada <code>lists</code>. É possível especificar um parâmetro opcional, <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar a interseção das listas {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Indica se existem duplicados na lista.",
        "Documentation.LongDescription": "Devolve um valor lógico se existirem duplicados na lista <code>list</code>; <code>true</code> se a lista for distinta, <code>false</code> se existirem valores duplicados. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a lista {1, 2, 3} é distinta (ou seja, se não contém duplicados).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Determinar se a lista {1, 2, 3, 3} é distinta (ou seja, se não contém duplicados).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Devolve true se a lista estiver vazia.",
        "Documentation.LongDescription": "Devolve <code>true</code> se a lista, <code>list</code>, não contiver valores (comprimento 0). Se a lista contiver valores (comprimento > 0), devolve <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a lista {} está vazia.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Determinar se a lista {1, 2} está vazia.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Devolve o último valor da lista ou a predefinição especificada se a lista estiver vazia.",
        "Documentation.LongDescription": "Devolve o último item existente na lista <code>list</code> ou o valor predefinido opcional, <code>defaultValue</code>, se a lista estiver vazia.\r\n    Se a lista estiver vazia e não for especificado um valor predefinido, a função devolve <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o último valor na lista {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Determinar o último valor na lista {} ou -1 se a lista estiver vazia.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Devolve o último valor da lista.  Opcionalmente, é possível especificar quantos valores devem ser devolvidos ou uma condição de qualificação.",
        "Documentation.LongDescription": "Devolve o último item da lista <code>list</code>. Se a lista estiver vazia, é emitida uma exceção.\r\n Esta função utiliza um parâmetro opcional, <code>countOrCondition</code>, para suportar o agrupamento de vários itens ou itens de filtragem. <code>countOrCondition</code> pode ser especificado de três formas:\r\n <ul>\r\n  <li>Se for especificado um número, são devolvidos tantos itens quanto esse número. </li>\r\n  <li>Se for especificada uma condição, são devolvidos todos os itens que satisfizerem a condição inicialmente, a começar pelo fim da lista. Quando um item não satisfizer a condição, não serão considerados mais itens. </li>\r\n  <li>Se este parâmetro for nulo, será devolvido o último item existente na lista.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o último valor na lista {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Determinar os últimos valores existentes na lista {3, 4, 5, -1, 7, 8, 2} que são maiores que 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Devolve o valor máximo ou o valor predefinido para uma lista vazia.",
        "Documentation.LongDescription": "Devolve o item máximo existente na lista <code>list</code> ou o valor predefinido opcional <code>default</code> se a lista estiver vazia.\r\n    É possível especificar um valor de comparisonCriteria opcional, <code>comparisonCriteria</code>, para determinar o modo como os itens existentes na lista devem ser comparados. Se este parâmetro for nulo, será utilizado o comparador predefinido.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Determinar o máximo na lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Determinar o máximo na lista {} ou devolver -1 se a lista estiver vazia. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Devolve o valor mediano da lista.",
        "Documentation.LongDescription": "Devolve o item mediano da lista <code>list</code>. Esta função devolve <code>null</code> se a lista não contiver valores não <code>null</code>. \r\n    Se existir um número par de itens, a função escolhe o menor dos dois itens medianos, a menos que a lista seja\r\n    constituída inteiramente por datetimes, durações, números ou horas, e neste caso devolve a média dos dois itens.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Determinar o mediano da lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Devolve o valor mínimo ou o valor predefinido para uma lista vazia.",
        "Documentation.LongDescription": "Devolve o item mínimo existente na lista <code>list</code> ou o valor predefinido opcional <code>default</code> se a lista estiver vazia.\r\n    É possível especificar um valor comparisonCriteria opcional, <code>comparisonCriteria</code>, para determinar o modo como os itens existentes na lista devem ser comparados. Se este parâmetro for nulo, será utilizado o comparador predefinido.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Determinar o mínimo na lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Determinar o mínimo na lista {} ou devolver -1 se a lista estiver vazia. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Devolve o valor mais frequente da lista.",
        "Documentation.LongDescription": "Devolve o item que aparece mais frequentemente na lista, <code>list</code>. Se a lista estiver vazia, é emitida uma exceção. Se existirem vários itens com a mesma frequência máxima, é escolhido o último.\r\n    É possível especificar um valor de <code>comparisonCriteria</code> opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Determinar o item que aparece mais frequentemente na lista <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Determinar o item que aparece mais frequentemente na lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Devolve uma lista com os valores mais frequentes existentes na lista.",
        "Documentation.LongDescription": "Devolve o item que aparece mais frequentemente na lista, <code>list</code>. Se a lista estiver vazia, é emitida uma exceção. Se existirem vários itens com a mesma frequência máxima, é escolhido o último.\r\n    É possível especificar um valor de <code>comparisonCriteria</code> opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Determinar os itens que aparecem mais frequentemente na lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Devolve o número de itens não nulos existentes na lista.",
        "Documentation.LongDescription": "Devolve o número de itens não nulos existentes na lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Devolve uma lista de desvios para a entrada.",
        "Documentation.LongDescription": "Devolve uma lista de desvios para a lista de entrada <code>list</code>.\r\n    Quando utilizar List.Transform para alterar uma lista, é possível utilizar a lista de posições para fornecer o acesso de transformação à posição.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os desvios dos valores existentes na lista {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Devolve o produto dos números existentes na lista.",
        "Documentation.LongDescription": "Devolve o produto dos números não nulos existentes na lista, <code>numbersList</code>. Devolve nulo se não existirem valores não nulos na lista.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Determinar o produto dos números existentes na lista <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Devolve uma lista de números aleatórios.",
        "Documentation.LongDescription": "Devolve uma lista de números aleatórios entre 0 e 1 a partir do número de valores a gerar e um valor de seed opcional.\r\n<ul>\r\n   <li><code>count</code>: O número de valores aleatórios a gerar.</li>\r\n   <li><code>seed</code>:  <i>[Opcional]</i> Um valor numérico utilizado para o seed do gerador de números aleatórios. Se for omitido, é gerada uma lista exclusiva de números aleatórios sempre que chamar a função. Se especificar o valor de seed com um número, cada chamada à função gera a mesma lista de números aleatórios.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de 3 números aleatórios.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Criar uma lista de 3 números aleatórios, especificando um valor de seed.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Devolve uma lista que ignora o número especificado de elementos existente no início da lista.",
        "Documentation.LongDescription": "Devolve uma lista que remove o primeiro elemento da lista <code>list</code>. Se <code>list</code> for uma lista vazia, é devolvida uma lista vazia.\r\nEsta função assume um parâmetro opcional, <code>countOrCondition</code>, para suportar a remoção de múltiplos valores, conforme listado abaixo.\r\n <ul>\r\n <li>Se for especificado um número, até esse número de itens são removidos. </li>\r\n <li>Se for especificada uma condição, todos os itens correspondentes consecutivos no início de <code>list</code> são removidos.</li>\r\n <li>Se este parâmetro for nulo, o comportamento predefinição é observado. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1, 2, 3, 4, 5} sem os primeiros 3 números.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Criar uma lista a partir de {5, 4, 2, 6, 1} que começa com um número menor que 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Devolve uma lista que remove o número especificado de elementos do final da lista.",
        "Documentation.LongDescription": "Devolve uma lista que remove os últimos <code>countOrCondition</code> elementos do final da lista <code>list</code>. Se <code>list</code> tiver menos do que elementos <code>countOrCondition</code> , é devolvida uma lista vazia.\r\n <ul>\r\n <li>Se for especificado um número, até esse número de itens são removidos. </li>\r\n <li>Se for especificada uma condição, todos os itens correspondentes consecutivos no final de <code>list</code> são removidos.</li>\r\n <li>Se este parâmetro for nulo, apenas um item é removido. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1, 2, 3, 4, 5} sem os últimos 3 números.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Criar uma lista a partir de {5, 4, 2, 6, 4} que termina com um número menor que 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Remove todos os valores \"null\" da lista especificada.",
        "Documentation.LongDescription": "Remove todas as ocorrências de valores \"null\" em <code>list</code>. Se não existirem valores \"null\" na lista, é devolvida a lista original.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Remove todos os valores \"null\" da lista {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Inverte a ordem dos valores na lista.",
        "Documentation.LongDescription": "Devolve uma lista com os valores existentes na lista <code>list</code> por ordem inversa.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista na ordem inversa a partir de {1..10}.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Devolve o único item existente numa lista de comprimento um; caso contrário, emite uma exceção.",
        "Documentation.LongDescription": "Se só existir um item na lista <code>list</code>, devolve esse item.\r\n    Se existir mais de um item ou se a lista estiver vazia, a função emite uma exceção.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o valor único na lista {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Determinar o valor único na lista {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Devolve o único item existente numa lista de comprimento um e o valor predefinido para uma lista vazia.",
        "Documentation.LongDescription": "Se só existir um item na lista <code>list</code>, devolve esse item.\r\n    Se a lista estiver vazia, a função devolve \"null\" a menos que seja especificado um <code>default</code> opcional. Se existir mais de um item na lista, a função devolve um erro.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar o valor único na lista {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Determinar o valor único na lista {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Determinar o valor único na lista {}. Se estiver vazia, devolver -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Devolve uma lista que ignora o número especificado de elementos existente no início da lista.",
        "Documentation.LongDescription": "Devolve uma lista que ignora o primeiro elemento da lista <code>list</code>. Se <code>list</code> for uma lista vazia, é devolvida uma lista vazia.\r\nEsta função aceita um parâmetro opcional, <code>countOrCondition</code>, para suportar a ignorar vários valores, conforme listado abaixo.\r\n <ul>\r\n <li>Se for especificado um número, até esse número de itens são ignorados. </li>\r\n <li>Se for especificada uma condição, todos os itens correspondentes consecutivos no início de <code>list</code> são ignorados.</li>\r\n <li>Se este parâmetro for nulo, o comportamento predefinição é observado. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista a partir de {1, 2, 3, 4, 5} sem os primeiros 3 números.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Criar uma lista a partir de {5, 4, 2, 6, 1} que começa com um número menor que 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Ordena uma lista de dados de acordo com os critérios especificados.",
        "Documentation.LongDescription": "Ordena uma lista de dados, <code>list</code>, de acordo com os critérios opcionais especificados.\r\n    É possível especificar um parâmetro opcional, <code>comparisonCriteria</code>, como critério de comparação. Este parâmetro pode assumir os valores seguintes:\r\n    <ul>\r\n    <li> Para controlar a ordenação, o critério de comparação pode ser um valor de enumeração de Ordenação. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Para calcular uma chave a utilizar para a ordenação, é possível utilizar uma função de 1 argumento. </li>\r\n    <li> Para selecionar uma chave e controlar a ordenação, o critério de comparação pode ser uma lista que contém a chave e a ordem (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Para controlar totalmente a comparação, é possível utilizar uma função de 2 argumentos. Esta função irá receber dois itens da lista (quaisquer dois itens em qualquer ordem). A função deverá devolver um dos seguintes valores:\r\n        <ul>\r\n            <li> <code>-1</code>: O primeiro item é inferior ao segundo item.</li>\r\n            <li> <code>0</code>: Os itens são idênticos.</li>\r\n            <li> <code>1</code>: O primeiro item é superior ao segundo item.</li>\r\n        </ul>\r\n        Value.Compare é um método que pode ser utilizado para delegar esta lógica. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordenar a lista {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ordenar a lista {2, 3, 1} por ordem descendente.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Ordenar a lista {2, 3, 1} por ordem descendente utilizando o método Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Devolve uma estimativa baseada na amostra do desvio-padrão.",
        "Documentation.LongDescription": "Devolve uma estimativa baseada na amostra do desvio padrão dos valores existentes na lista, <code>numbersList</code>. \r\n    Se <code>numbersList</code> for uma lista de números, é devolvido um número.\r\n    É emitida uma exceção numa lista vazia que ou uma lista de itens que não seja do tipo <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Determinar o desvio-padrão dos números 1 a 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Devolve a soma dos itens existentes na lista.",
        "Documentation.LongDescription": "Devolve a soma dos valores não nulos existentes na lista, <code>list</code>.  Devolve nulo se não existirem valores não nulos na lista.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Determinar a soma dos números existentes na lista <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Devolve a união dos valores da lista encontrados na entrada.",
        "Documentation.LongDescription": "Utiliza uma lista de listas <code>lists</code>, efetua a união dos itens existentes nas listas individuais e devolve-os na lista de saída. Como resultado, a lista devolvida contém todos os itens existentes em quaisquer listas de entrada.\r\n    Esta operação mantém uma semântica \"bag\" tradicional, pelo que os valores duplicados são correspondidos como parte da União.\r\n    É possível especificar um valor de critério de equação opcional, <code>equationCriteria</code>, para controlar o teste de igualdade. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Criar uma união da lista {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Devolve uma lista de listas combinando itens na mesma posição em várias listas.",
        "Documentation.LongDescription": "Ontém uma lista de listas, <code>lists</code>, e devolve uma lista de listas combinando itens na mesma posição.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zipa as duas listas simples {1, 2} e {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Zipa as duas listas simples de diferentes comprimentos {1, 2} e {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Cria um valor lógico a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>logical</code> a partir do <code>value</code> especificado. Se o <code>value</code> especificado for <code>null</code>, <code>Logical.From</code> devolve <code>null</code>.  Se o <code>value</code> especificado for <code>logical</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: um valor <code>logical</code> do valor de texto <code>\"true\"</code> ou <code>\"false\"</code>. Consulte <code>Logical.FromText</code> para obter detalhes.</li>\r\n        <li><code>number</code>: <code>false</code> se <code>value</code> for igual a <code>0</code>, <code>true</code> caso contrário.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>2</code> num valor <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Cria um valor lógico a partir dos valores de texto \"true\" e \"false\".",
        "Documentation.LongDescription": "Cria um valor lógico a partir do valor de texto <code>text</code>, \"true\" ou \"false\". Se <code>text</code> contiver uma cadeia diferente, é emitida uma exceção. O valor de texto <code>text</code> não é sensível às maiúsculas e minúsculas.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Criar um valor lógico a partir da cadeia de texto \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Criar um valor lógico a partir da cadeia de texto \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Devolve o texto \"true\" ou \"false\" com base num valor lógico especificado.",
        "Documentation.LongDescription": "Cria um valor de texto a partir do valor lógico <code>logicalValue</code>, <code>true</code> ou <code>false</code>. Se <code>logicalValue</code> não for um valor lógico, é emitida uma exceção.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Criar um valor de texto a partir do valor lógico <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Devolve o valor absoluto do número.",
        "Documentation.LongDescription": "Devolve o valor absoluto de <code>number</code>. Se <code>number</code> for nulo, <code>Number.Abs</code> devolverá um valor nulo.\r\n    <ul>\r\n        <li><code>number</code>: um <code>number</code> para o qual o valor absoluto deve ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Valor absoluto de -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Devolve o arco de cosseno do número.",
        "Documentation.LongDescription": "Devolve o arco de cosseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Devolve o arco de seno do número.",
        "Documentation.LongDescription": "Devolve o arco de seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Devolve o arco de tangente do número.",
        "Documentation.LongDescription": "Devolve o arco de tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Devolve um byte em que cada bit é o oposto da entrada.",
        "Documentation.LongDescription": "Devolve o resultado da execução de uma operação \"Not\" bit a bit em <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Devolve o cosseno do número.",
        "Documentation.LongDescription": "Devolve o cosseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Determinar o cosseno do ângulo 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Devolve o cosseno hiperbólico do número.",
        "Documentation.LongDescription": "Devolve o cosseno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Eleva e à potência especificada.",
        "Documentation.LongDescription": "Devolve o valor de elevar e à potência de <code>number</code> (função exponencial).\r\n      <ul>\r\n        <li><code>number</code>: um <code>number</code> para o qual a função exponencial deve ser calculada. Se <code>number</code> for nulo, <code>Number.Exp</code> devolverá um valor nulo. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Elevar e à potência de 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Devolve o factorial do número.",
        "Documentation.LongDescription": "Devolve o factorial do número <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o factorial de 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Cria um número a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>number</code> a partir do <code>value</code> especificado. Pode também ser fornecido um <code>culture</code> opcional (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>Number.From</code> devolve <code>null</code>.  Se o <code>value</code> especificado for <code>number</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: Um valor <code>number</code> da representação textual. Os formatos de texto comuns são processados (\"15\", \"3.423,10\", \"5,0E-10\"). Consulte <code>Number.FromText</code> para obter detalhes.</li>\r\n        <li><code>logical</code>: 1 para <code>true</code>, 0 para <code>false</code>.</li>\r\n        <li><code>datetime</code>: Um número de vírgula flutuante de dupla precisão que contém um equivalente de data de Automatização OLE.</li>\r\n        <li><code>datetimezone</code>: Um número de vírgula flutuante de dupla precisão que contém uma data de Automatização OLE equivalente da data e hora local de <code>value</code>.</li>\r\n        <li><code>date</code>: Um número de vírgula flutuante de dupla precisão que contém um equivalente de data de Automatização OLE.</li>\r\n        <li><code>time</code>: Expresso em dias fracionais.</li>\r\n        <li><code>duration</code>: Expresso em dias inteiros e fracionais.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> de <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor <code>number</code> de <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Obter o <code>valor</code> do número de <code>\"12,3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Cria números a partir de formatos de texto comuns (\"15\", \"3.423,10\", \"5,0E-10\").",
        "Documentation.LongDescription": "Devolve um valor de <code>número</code> a partir do valor de texto especificado, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: a representação textual de um valor de número. A representação tem de estar num formato de número comum, como por exemplo, \"15\", \"3,423.10\", \"5.0E-10\".</li>\r\n  <li><code>culture</code>: uma cultura opcional que controla a forma como <code>text</code> é interpretado (por exemplo, \"en-US\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor numérico de <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obter o valor numérico de <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Indica se o valor é par.",
        "Documentation.LongDescription": "Indica se o valor, <code>number</code>, é par devolvendo <code>true</code> se for par; caso contrário, <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificar se 625 é um número par.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Verificar se 82 é um número par.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Indica se o valor é NaN (Não é um número).",
        "Documentation.LongDescription": "Indica se o valor é NaN (Não é um número). Devolve <code>true</code> se <code>number</code> for equivalente a <code>Number.IsNaN</code>; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificar se 0 dividido por 0 é NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Verificar se 1 dividido por 0 é NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Indica se o valor é ímpar.",
        "Documentation.LongDescription": "Indica se o valor é ímpar. Devolve <code>true</code> se <code>number</code> for um número ímpar; caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificar se 625 é um número ímpar.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Verificar se 82 é um número ímpar.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Devolve o logaritmo natural do número.",
        "Documentation.LongDescription": "Devolve o logaritmo natural de um número, <code>number</code>. Se <code>number</code> for nulo, <code>Number.Ln</code> devolverá um valor nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obter o logaritmo natural de 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Devolve o logaritmo do número para a base especificada (e predefinido).",
        "Documentation.LongDescription": "Devolve o logaritmo de um número, <code>number</code>, para a base <code>base</code> especificada. Se <code>base</code> não for especificado, o valor predefinido é Number.E.\r\n    Se <code>number</code> for nulo, <code>Number.Log</code> devolverá um valor nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obter o logaritmo base 10 de 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Obter o logaritmo base e de 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Devolve o logaritmo base 10 do número.",
        "Documentation.LongDescription": "Devolve o logaritmo base 10 de um número, <code>number</code>. Se <code>number</code> for nulo, <code>Number.Log10</code> devolverá um nulo.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obter o logaritmo base 10 de 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Devolve o número arredondado. É possível especificar o número de dígitos e o modo de arredondamento.",
        "Documentation.LongDescription": "Devolve o resultado do arredondamento <code>number</code> para o número mais próximo. Se <code>number</code> for nulo, <code>Number.Round</code> devolve null.<br>\r\n      <br>\r\n      Por predefinição, <code>number</code> é arredondado para o número inteiro mais próximo e o critério de decisão efetua o arredondamento para o número par mais próximo (utilizando <code>RoundingMode.ToEven</code>, também conhecido como \"arredondamento bancário\").<br>\r\n      <br>\r\n      No entanto, estas predefinições podem ser substituídas através dos seguintes parâmetros opcionais.\r\n      <ul>\r\n        <li><code>digits</code>: Faz com que <code>number</code> seja arredondado para o número de dígitos decimais especificado.</li>\r\n        <li><code>roundingMode</code>: Substitui o comportamento do critério de decisão predefinido quando <code>number</code> estiver no ponto intermédio entre dois valores potencialmente arredondados\r\n      (consulte <code>RoundingMode.Type</code> para saber possíveis valores).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredondar 1,234 para o número inteiro mais próximo.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arredondar 1,56 para o número inteiro mais próximo.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Arredondar 1,2345 para duas casas decimais.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Arredondar 1,2345 para três casas decimais (por excesso).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Arredondar 1,2345 para três casas decimais (por defeito).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Devolve o resultado do arredondamento de números positivos por excesso e de números negativos por defeito.",
        "Documentation.LongDescription": "Devolve o resultado do arredondamento de <code>number</code> com base no sinal do número. Esta função arredonda números positivos por excesso e números negativos por defeito.\r\n    Se <code>digits</code> for especificado, <code>number</code> é arrendondado para o número de dígitos decimais <code>digits</code>.\r\n    ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredondar o número -1,2 na direção oposta ao zero.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Arredondar o número 1,2 na direção oposta ao zero.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Arredondar o número -1,234 para duas casas decimais a partir do zero.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Devolve o número anterior mais alto. Pode ser especificado o número de dígitos.",
        "Documentation.LongDescription": "Devolve o resultado do arredondamento de <code>number</code> por defeito para o número inteiro mais alto anterior. Se <code>number</code> for nulo, esta função devolve nulo.\r\n\r\n    Se <code>digits</code> for fornecido, <code>number</code> é arredondado para o número especificado de dígitos decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredondar 1,234 por defeito para um número inteiro.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arredondar 1,999 por defeito para um número inteiro.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Arredondar por defeito 1,999 para duas casas decimais.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Devolve o resultado do arredondamento de números positivos por defeito e de números negativos por excesso. Pode ser especificado o número de dígitos.",
        "Documentation.LongDescription": "Devolve o resultado do arredondamento de <code>number</code> com base no sinal do número. Esta função arredonda números positivos por defeito e números negativos por excesso.\r\n Se <code>digits</code> for especificado, <code>number</code> é arrendondado para o número de dígitos decimais <code>digits</code>.\r\n    ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredondar o número -1,2 na direção de zero.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Arredondar o número 1,2 na direção de zero.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Arredondar o número -1,234 para duas casas decimais até ao zero.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Devolve o maior número inteiro seguinte. Pode ser especificado o número de dígitos.",
        "Documentation.LongDescription": "Devolve o resultado do arredondamento de <code>number</code>por excesso para o número inteiro mais alto seguinte. Se <code>number</code> for nulo, esta função devolve nulo.\r\n    Se <code>digits</code> for fornecido, <code>number</code> é arredondado para o número especificado de dígitos decimais.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arredondar 1,234 por excesso para um número inteiro.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Arredondar 1,999 por excesso para um número inteiro.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Arredondar por excesso 1,234 para duas casas decimais.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Devolve 1 se o número for positivo, -1 se for negativo e 0 se for zero.",
        "Documentation.LongDescription": "Devolve 1 se <code>number</code> for um número positivo, -1 se for um número negativo e 0 se for zero.\r\n    Se <code>number</code> for nulo, <code>Number.Sign</code> devolverá null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar o sinal de 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Determinar o sinal de -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Determinar o sinal de 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Devolve o seno do número.",
        "Documentation.LongDescription": "Devolve o seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Determinar o seno do ângulo 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Devolve o seno hiperbólico do número.",
        "Documentation.LongDescription": "Devolve o seno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Devolve a raiz quadrada do número.",
        "Documentation.LongDescription": "Devolve a raiz quadrada de <code>number</code>.\r\n    Se <code>number</code> for nulo, <code>Number.Sqrt</code> devolverá um valor nulo. Se for um valor negativo, é devolvido <code>Number.NaN</code> (Não é um número).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar a raiz quadrada de 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Determinar a raiz quadrada de 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Devolve a tangente do número.",
        "Documentation.LongDescription": "Devolve a tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Determinar a tangente do ângulo 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Devolve a tangente hiperbólica do número.",
        "Documentation.LongDescription": "Devolve a tangente hiperbólica de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Converte o número especificado em texto.",
        "Documentation.LongDescription": "Converte o valor numérico <code>number</code> num valor de texto de acordo com o formato especificado por <code>format</code>.<br>\r\n    <br>\r\n    O formato é um valor de texto que indica a forma como o número deve ser convertido. Para mais detalhes sobre os valores de formato suportados, aceda a https://go.microsoft.com/fwlink/?linkid=2241210 e https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Também pode ser fornecida um <code>culture</code> opcional (por exemplo, \"en-US\") para controlar o comportamento dependente da cultura de <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Converta um número em texto sem especificar um formato.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Converta um número em formato exponencial.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Converta um número em formato de percentagem com apenas uma casa decimal.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Devolve uma tabela dos feeds de OData oferecidos por um serviço OData.",
        "Documentation.LongDescription": "Devolve uma tabela de feeds OData oferecida por um serviço OData a partir de um URI <code>serviceUri</code>, cabeçalhos <code>headers</code>. Pode ser especificado um valor booleano que indica se devem ser utilizadas ligações simultâneas ou pode ser especificado um parâmetro de registo opcional, <code>options</code>, para controlar as seguintes opções:\r\n    <ul>\r\n   <li><code>Consulta</code>: adicione parâmetros de consulta ao URL através de programação sem ter de se preocupar com operações de escape. </li>\r\n    <li> <code>Cabeçalhos</code>: a especificação deste valor como um registo vai fornecer cabeçalhos adicionais a um pedido HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: a especificação deste valor como uma lista vai excluir estas chaves de cabeçalho HTTP do cálculo da colocação de dados em cache.</li>\r\n    <li> <code>ApiKeyName</code>: se o site de destino tiver uma noção de uma chave de API, este parâmetro pode ser utilizado para especificar o nome (não o valor) do parâmetro de chave que tem de ser utilizado no URL. O valor da chave real é indicado na credencial.</li>\r\n    <li> <code>Tempo limite</code>: a especificação deste valor como uma duração irá alterar o tempo limite de um pedido HTTP. O valor predefinido é de 600 segundos.</li>\r\n    <li> <code>EnableBatch</code>: um valor lógico (verdadeiro/falso) que define se é permitida a geração de um pedido $batch OData se o MaxUriLength for excedido (o valor predefinido é falso).</li>\r\n    <li> <code>MaxUriLength</code>: um número que indica o comprimento máximo de um URI permitido enviado para um serviço OData. Se for excedido e se o EnableBatch for verdadeiro, o pedido irá ser feito a um ponto final $batch OData. Caso contrário, irá falhar (o valor predefinido é 2048).</li>\r\n    <li> <code>Em simultâneo</code>: Quando um valor lógico (verdadeiro/falso) for definido como verdadeiro, os pedidos ao serviço serão efetuados em simultâneo. Quando definido como falso, os pedidos serão efetuados sequencialmente. Quando não estiver especificado, o valor será determinado pela anotação AsynchronousRequestsSupported do serviço. Se o serviço não especificar se AsynchronousRequestsSupported é suportada, os pedidos serão efetuados sequencialmente.</li>\r\n    <li> <code>ODataVersion</code>: um número (3 ou 4) que especifica a versão do protocolo OData a utilizar neste serviço OData. Quando não for especificado, todas as versões suportadas serão pedidas. A versão do serviço será determinada pelo cabeçalho OData-Version devolvido pelo serviço.\r\n</li>    <li> <code>FunctionOverloads</code>: quando um valor lógico (verdadeiro/falso) for definido como verdadeiro, as sobrecargas de importação de funções serão listadas no navegador como entradas separadas. Quando definido como falso, as sobrecargas de importação de funções serão listadas como uma função union no navegador. Valor predefinido do V3: falso. Valor predefinido do V4: verdadeiro.</li>\r\n    <li> <code>MoreColumns</code> : um valor lógico (verdadeiro/falso) definido como verdadeiro adiciona uma coluna \"Mais Colunas\" a cada feed de entidade que contenha tipos abertos e tipos polimórficos. Aqui estarão contidos os campos não declarados no tipo base. Quando definido como falso, este campo não estará presente. O valor predefinido é falso.</li>\r\n    <li> <code>IncludeAnnotations</code> : uma lista de nomes ou padrões de termos qualificados de espaços de nomes separados por vírgulas, com \"*\" como um caráter universal. Por predefinição, nenhuma das anotações está incluída.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : uma lista de nomes ou padrões de termos qualificados de espaços de nomes separados por vírgulas a incluir em pedidos de documentos com metadados, com \"*\" como carácter universal. Por predefinição, inclui as mesmas anotações que IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: permite que o serviço OData evite escrever determinados valores em respostas. Se reconhecidos, iremos inferir esses valores dos campos omitidos. As opções incluem:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : permite que o serviço OData omita valores nulos.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementação</code> : especifica a implementação do conetor OData a utilizar. Os valores válidos são \"2.0\" ou nulo.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ligue ao serviço TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Devolve o resultado de tentar inferir funções SQL para um controlador ODBC.",
        "Documentation.LongDescription": "Devolve o resultado de tentar inferir funções SQL com a cadeia de ligação <code>connectionString</code> através do ODBC. <code>connectionString</code> pode ser texto ou um registo de pares de valores de propriedade. Os valores de propriedade podem ser texto ou número.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Devolve as capacidades SQL inferidas de uma cadeia de ligação.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Devolve o conteúdo do documento Parquet como uma tabela.",
        "Documentation.LongDescription": "Devolve os conteúdos do documento Parquet como uma tabela. As opções incluem:\n    <ul>\n    <li> <code>TypeMapping</code>: um valor de texto que controla o mapeamento de tipo predefinido ao ler e escrever ficheiros. O valor predefinido é nulo e tenta preservar o máximo de fidelidade possível para o tipo original. Um valor de \"Sql\" produz resultados mais compatíveis com o Sql Server.</li>\n    </ul>",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Devolve um valor de percentagem do valor determinado.",
        "Documentation.LongDescription": "Devolve um <code>percentage</code> do fornecido <code>value</code>. Se o <code>value</code> fornecido for <code>null</code>, <code>Percentage.From</code> devolve <code>null</code>.  Se o valor <code>value</code> for <code>text</code> com um símbolo de percentagem, o número decimal convertido será devolvido. Caso contrário, o valor será convertido num <code>number</code> utilizando <code>Number.From</code>. Um opcional <code>culture</code> também pode ser fornecido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o <code>valor</code> da percentagem de <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Devolve um registo de pacotes de dados do ficheiro RData.",
        "Documentation.LongDescription": "Devolve um registo de pacotes de dados do ficheiro RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Combina os registos na lista especificada.",
        "Documentation.LongDescription": "Combina os registos no <code>records</code> especificado. Se <code>records</code> contiver valores que não sejam registos, é devolvido um erro.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Criar um registo combinado a partir dos registos.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Devolve o número de campos no registo.",
        "Documentation.LongDescription": "Devolve o número de campos no registo <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de campos existentes no registo.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Devolve os nomes dos campos.",
        "Documentation.LongDescription": "Devolve os nomes dos campos existentes no registo <code>record</code> como texto.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os nomes dos campos existentes no registo.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Devolve uma lista dos valores dos campos.",
        "Documentation.LongDescription": "Devolve uma lista dos valores dos campos existentes no registo <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar os valores dos campos no registo.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Cria um registo a parti de uma tabela com o formato {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Devolve um registo a partir de uma tabela de registos <code>table</code> que contém nomes de campos e nomes de valores <code>{[Name = name, Value = value]}</code>. É emitida uma exceção se os nomes dos campos não forem exclusivos.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Criar um registo a partir de uma tabela com o formato Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Devolve uma lista de valores que contêm os valores do registo de entrada.",
        "Documentation.LongDescription": "Devolve uma lista de valores que contêm os valores dos campos existentes na entrada <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extrair os valores dos campos de um registo.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Devolve uma árvore de sintaxe abstrata (AST) que representa o acesso à coluna numa expressão de linha.",
        "Documentation.LongDescription": "Devolve uma árvore de sintaxe abstrata (AST) que representa o acesso à coluna <code>columnName</code> da linha numa expressão de linha.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Cria um AST que representa acesso da coluna \"NomedoCliente\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Devolve a árvore de sintaxe abstrata (AST) para o corpo de uma função.",
        "Documentation.LongDescription": "<p>Devolve a árvore de sintaxe abstrata (AST) para o corpo de <code>function</code>, normalizada numa <i>expressão de linha</i>:\r\n<ul>\r\n  <li>A função tem de ser um lambda de um argumento.</li>\r\n  <li>Todas as referências ao parâmetro de função são substituídas por <code>RowExpression.Row</code>.</li>\r\n  <li>Todas as referências às colunas são substituídas por <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>A AST será simplificada para conter apenas nós dos tipos:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>NotImplemented</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Será desencadeado um erro se não for possível que uma AST de expressão de linha seja devolvida para o corpo de <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolve o AST para o corpo da função <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Cria um número Único a partir do valor fornecido.",
        "Documentation.LongDescription": "Devolve um Singular <code>number</code> do fornecido <code>value</code>. Se o <code>value</code> fornecido for <code>null</code>, <code>Single.From</code> devolve <code>null</code>.  Se o fornecido <code>value</code> for <code>number</code> dentro do intervalo Singular <code>value</code> é devolvido, caso contrário é devolvido um erro. Se <code>value</code> for de qualquer outro tipo, primeiro será convertido num <code>number</code> utilizando <code>Number.FromText</code>. Um opcional <code>culture</code> também poderá ser devolvido (por exemplo, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obter o valor <code>number</code> Único de <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Devolve uma tabela de dados de um ponto final do índice do Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Efetua uma chamada à API REST do Smartsheet 2.0 no ponto final especificado e transforma o elemento de dados devolvido à tabela.",
        "Documentation.Examples": [
          {
            "Description": "Solicita uma tabela de informações de utilizadores da API do Smartsheet",
            "Code": "Smartsheet.Content(\"utilizadores\")",
            "Result": "Uma tabela com informações de utilizadores conforme devolvido pela API do Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto em qualquer um dos delimitadores especificados.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto em qualquer um dos delimitadores especificados.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula ou ponto e vírgula, ignorando aspas e delimitadores entre aspas e a partir do início da entrada.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Divida a entrada por vírgula ou ponto e vírgula, ignorando aspas e delimitadores entre aspas e a partir do fim da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto de acordo com o delimitador especificado.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto de acordo com o delimitador especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula, ignorando vírgulas entre aspas.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto em cada delimitador especificado em sequência.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto em cada delimitador especificado em sequência.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada por vírgula e, em seguida, ponto e vírgula, a partir do início da entrada.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Divida a entrada por vírgula e, em seguida, ponto e vírgula, trate as aspas como qualquer outro caráter e a partir do fim da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto por cada comprimento especificado.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto por cada comprimento especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada nos dois primeiros caracteres seguidos dos três seguintes, a partir do início da entrada.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Divida a entrada nos três primeiros caracteres seguidos dos dois seguintes, a partir do fim da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto em cada posição especificada.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto em cada posição especificada.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada nas posições especificadas, a partir do início da entrada.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Divida a entrada nas posições especificadas, a partir do final da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto de acordo com os desvios e os comprimentos especificados.",
        "Documentation.LongDescription": "Devolve uma função que divide o texto numa lista de texto de acordo com os desvios e comprimentos especificados. Um comprimento nulo indica que todas as entradas restantes deverão ser incluídas.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida a entrada pelos pares de posição e comprimento especificados, a partir do início da entrada. Note que os intervalos neste exemplo sobrepõem-se.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Divida a entrada pelos pares de posição e comprimento especificados, a partir do fim da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Divida a entrada num código postal de comprimento fixo seguido de um nome de cidade de comprimento variável.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Devolve uma função que divide texto numa lista de texto após o comprimento especificado repetidamente.",
        "Documentation.LongDescription": "Devolve uma função que divide texto numa lista de texto após o comprimento especificado repetidamente.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida repetidamente a entrada em segmentos de três caráteres, a partir do princípio da entrada.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Divida repetidamente a entrada em segmentos de três caráteres, a partir do fim da entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Devolve o número aproximado de linhas na tabela.",
        "Documentation.LongDescription": "Devolve o número aproximado de linhas no <code>table</code> ou um erro se a origem de dados não suportar aproximação.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Estime o número de combinações distintas de cidade e estado numa tabela grande, que pode ser utilizada como uma estimativa de cardinalidade para as colunas. As estimativas de cardinalidade são suficientemente importantes para que várias origens de dados (como o SQL Server) suportem esta aproximação específica, muitas vezes através de um algoritmo denominado HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Devolve o número de colunas na tabela.",
        "Documentation.LongDescription": "Devolve o número de colunas na tabela <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de colunas na tabela.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Devolve os nomes das colunas como uma lista.",
        "Documentation.LongDescription": "Devolve os nomes das colunas existentes na tabela <code>table</code> como uma lista de texto.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar os nomes das colunas da tabela.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Devolve a primeira linha ou um valor predefinido especificado.",
        "Documentation.LongDescription": "Devolve a primeira linha de <code>table</code> ou um valor predefinido opcional, <code>default</code>, se a tabela estiver vazia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar a primeira linha da tabela.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Determinar a primeira linha da tabela <code>({})</code> ou devolver [a = 0, b = 0] se estiver vazia.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Devolve a primeira coluna da primeira linha da tabela ou um valor predefinido especificado.",
        "Documentation.LongDescription": "Devolve a primeira coluna da primeira linha da tabela <code>table</code> ou um valor predefinido especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Indica se a tabela contém apenas linhas distintas (sem duplicados).",
        "Documentation.LongDescription": "Indica se <code>table</code> contém apenas linhas distintas (sem duplicados). Devolve <code>true</code> se as linhas forem distintas; caso contrário, devolve <code>false</code>.\r\n    Um parâmetro opcional, <code>comparisonCriteria</code>, especifica as colunas da tabela nas quais a duplicação é testada. Se <code>comparisonCriteria</code> não for especificado, todas as colunas são testadas.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela é distinta.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar se a tabela é distinta na coluna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Indica se a tabela contém quaisquer linhas.",
        "Documentation.LongDescription": "Indica se <code>table</code> contém quaisquer linhas. Devolve <code>true</code> se não existirem linhas (ou seja, se a tabela estiver vazia); caso contrário, devolve <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar se a tabela está vazia.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar se a tabela <code>({})</code> está vazia.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Devolve as chaves da tabela especificada.",
        "Documentation.LongDescription": "Devolve as chaves da tabela especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Obtenha a lista de chaves de uma tabela.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Devolve a última linha ou um valor predefinido especificado.",
        "Documentation.LongDescription": "Devolve a última linha de <code>table</code> ou um valor predefinido opcional, <code>default</code>, se a tabela estiver vazia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Localizar a última linha da tabela.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Determinar a última linha da tabela <code>({})</code> ou devolver [a = 0, b = 0] se estiver vazia.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Devolve o número de linhas na tabela.",
        "Documentation.LongDescription": "Devolve o número de linhas em <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar o número de linhas na tabela.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Devolve a única linha na tabela.",
        "Documentation.LongDescription": "Devolve a única linha na linha <code>table</code>. Se <code>table</code> tiver mais de uma linha, é emitida uma exceção.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver a linha única na tabela.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Cria uma lista de listas aninhadas de valores de coluna de uma tabela.",
        "Documentation.LongDescription": "Cria uma lista de listas aninhadas de valores de coluna da tabela, <code>table</code>.  Cada item de lista é uma lista interior que contém os valores das colunas.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista dos valores das colunas da tabela.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Converte uma tabela numa lista tabela aplicando a função de combinação especificada a cada linha de valores existente na tabela.",
        "Documentation.LongDescription": "Converte uma tabela numa lista tabela aplicando a função de combinação especificada a cada linha de valores existente na tabela.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Combinar o texto de cada linha com uma vírgula.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Converte uma tabela numa lista de registos.",
        "Documentation.LongDescription": "Converte uma tabela, <code>table</code>, numa lista de registos.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Converter a tabela numa lista de registos.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Cria uma lista de listas aninhadas de valores de linha de uma tabela.",
        "Documentation.LongDescription": "Cria uma lista de listas aninhadas de valores de coluna da tabela, <code>table</code>.  Cada item de lista é uma lista interior que contém os valores das linhas.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista dos valores das linhas da tabela.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Cria um registo de erros modificado que não gera uma contingência quando acionado por um processador definido numa vista (através de Table.View).",
        "Documentation.LongDescription": "Cria um registo de erros modificado a partir de <code>errorRecord</code>que não gera uma contingência quando acionado por um processador definido numa vista (através de Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Cria uma função que pode ser intercionada por um processador definido numa visualização (através de Table.View).",
        "Documentation.LongDescription": "<p>Cria uma função de visualização baseada em <code>function</code> que pode ser processada numa visualização criada por <code>Table.View</code>.</p>\r\n<p>O processador de <code>OnInvoke</code> <code>Table.View</code> pode ser utilizado para definir um processador para função de visualização.</p>\r\n<p>Tal como acontece com os processadores para operações incorporadas, se não houver nenhum processador <code>OnInvoke</code> especificado, se o mesmo não processar a função de visualização, ou se for gerado um erro pelo processador, <code>function</code> será aplicado sobre a visualização.</p>\r\n<p>Consulte a documentação publicada sobre o conector personalizado do Power Query para obter uma descrição mais completa de <code>Table.View</code> e das funções de visualização personalizadas.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Devolve o valor de texto com todos os carateres de controlo removidos.",
        "Documentation.LongDescription": "Devolve um valor de texto com todos os carateres de controlo de <code>text</code> removidos.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover avanços de linha e outros carateres de controlo de um valor de texto.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Concatena uma lista de valores de texto num valor de texto.",
        "Documentation.LongDescription": "Devolve o resultado da combinação da lista de valores de texto, <code>texts</code>, num único valor de texto. Quaisquer valores <code>nulos</code> presentes no <code>texts</code> são ignorados.\r\n    É possível especificar uma <code>separator</code> opcional utilizada no texto combinado final.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Combinar os valores de texto \"Seattle\" e \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Combinar os valores de texto \"Seattle\" e \"WA\" separados por uma vírgula e um espaço.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Combine os valores \"Seattle\", <code>nulos</code> e \"WA\", separados por uma vírgula e um espaço. (Tenha em atenção que o <code>nulo</code> é ignorado.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Cria um valor de texto a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve a representação em texto de <code>value</code>. <code>value</code> pode ser um valor <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> ou <code>binary</code>.\r\n    Se o valor especificado for null, <code>Text.From</code> devolve null. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Criar um valor de texto a partir do número 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Descodifica dados de um formato binário para um formato de texto.",
        "Documentation.LongDescription": "Descodifica dados, <code>binary</code>, de um formato binário para um formato de texto utilizando o tipo <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Infere o tipo de número granular (Int64.Type, Double.Type, etc.) de um número codificado em texto.",
        "Documentation.LongDescription": "Infere o tipo de número granular (Int64.Type, Double.Type, etc.) de <code>text</code>. Um erro ocorre se <code>text</code> não for um número. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Devolve o número de carateres.",
        "Documentation.LongDescription": "Devolve o número de carateres existente no texto <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar quantos carateres existem no texto \"Olá Mundo\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Converte todos os carateres em minúsculas.",
        "Documentation.LongDescription": "Devolve o resultado da conversão de todos os carateres em <code>text</code> para minúsculas. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obter a versão em minúsculas de \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Coloca em maiúsculas a primeira letra de cada palavra.",
        "Documentation.LongDescription": "Devolve o resultado da colocação em maiúsculas apenas da primeira letra de cada palavra no valor de texto <code>text</code>. Todas as outras letras são devolvidas em minúsculas. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utilizar <code>Text.Proper</code> numa frase simples.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Inverte o <code>text</code> fornecido.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Inverter o texto \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codificar texto num formato binário.",
        "Documentation.LongDescription": "Codifica o valor de texto especificado, <code>text</code>, num valor binário utilizando o <code>encoding</code> especificado.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Devolve uma lista de valores de caráter a partir do valor de texto especificado.",
        "Documentation.LongDescription": "Devolve uma lista de valores de caráter a partir do valor de texto especificado <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Criar uma lista de valores de caráter a partir do texto \"Olá Mundo\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Remove todos os espaços em branco à direita e à esquerda.",
        "Documentation.LongDescription": "Devolve o resultado da remoção de todos os espaços em branco à direita e à esquerda do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover os espaços em branco à direita e à esquerda de \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Remove todos os espaços em branco à direita.",
        "Documentation.LongDescription": "Devolve o resultado da remoção de todos os espaços em branco à direita do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover os espaços em branco à direita de \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Remove todos os espaços em branco à esquerda.",
        "Documentation.LongDescription": "Devolve o resultado da remoção de todos os espaços em branco à esquerda do valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Remover os espaços em branco à esquerda de \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Converte todos os carateres em maiúsculas.",
        "Documentation.LongDescription": "Devolve o resultado da conversão de todos os carateres em <code>text</code> para maiúsculas. Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obter a versão em maiúsculas de \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Devolve o fim da hora.",
        "Documentation.LongDescription": "Devolve o fim da hora representado por <code>dateTime</code>, incluindo segundos fracionais. As informações de fuso horário são preservadas.\r\n      <ul>\r\n        <li><code>dateTime</code>: um valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> a partir do qual o fim da hora é calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obter o fim da hora para 14/5/2011 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Obter o fim da hora para 17/5/2011 17:00:00 -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Cria uma hora a partir do valor especificado.",
        "Documentation.LongDescription": "Devolve um valor <code>time</code> a partir do <code>value</code> especificado. Pode também ser fornecido um <code>culture</code> opcional (por exemplo, \"en-US\").\r\nSe o <code>value</code> especificado for <code>null</code>, <code>Time.From</code> devolve <code>null</code>. Se o <code>value</code> especificado for <code>time</code>, será devolvido <code>value</code>. É possível converter os seguintes tipos de valor num valor <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Um valor <code>time</code> da representação textual. Consulte <code>Time.FromText</code> para obter detalhes.</li>\r\n        <li><code>datetime</code>: o componente de hora de <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: o componente de hora equivalente à Data/Hora local de <code>value</code>.</li>\r\n        <li><code>number</code>: um valor <code>time</code> equivalente ao número de dias inteiros e fracionais expresso por <code>value</code>. Se <code>value</code> for negativo ou maior ou igual a 1, é devolvido um erro.</li>\r\n      </ul>\r\nSe <code>value</code> for de qualquer outro tipo, será devolvido um erro.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>0.7575</code> num valor <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Converter <code>#datetime(1899, 12, 30, 06, 45, 12)</code> num valor <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Cria uma Hora a partir dos formatos de Hora locais, universais e personalizados.",
        "Documentation.LongDescription": "Cria um valor <code>time</code> a partir de uma representação textual, <code>text</code>. Pode ser fornecido um parâmetro <code>record</code> opcional, <code>options</code>, para especificar propriedades adicionais. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor de <code>text</code> que indica o formato a utilizar. Aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na análise da hora com o melhor esforço.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não é nulo, a <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code>, <code>\"tt\"</code> é <code>\"AM\" ou \"PM\"</code>, ao passo que em <code>\"ar-EG\"</code>, <code>\"tt\"</code> é <code>\"ص\" ou \"م\"</code>. Quando <code>Format</code> é <code>null</code>, <code>Culture</code> controla o formato a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitido, é utilizado <code>Culture.Current</code>.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho legados, <code>options</code> poderá também ser um valor de texto. O comportamento é idêntico ao caso em que <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>\"10:12:31am\"</code> num valor de Hora.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Converter <code>\"1012\"</code> num valor de hora (Time).",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Converter <code>\"10\"</code> num valor de hora (Time).",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Devolve o componente de hora.",
        "Documentation.LongDescription": "Devolve o componente de hora do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Encontrar a hora em #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Devolve o componente de minutos.",
        "Documentation.LongDescription": "Devolve o componente de minutos do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Encontrar os minutos em #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Devolve o componente de segundos.",
        "Documentation.LongDescription": "Devolve o componente de segundos do valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code> fornecido, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o valor dos segundos a partir de um valor datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Devolve o início da hora.",
        "Documentation.LongDescription": "Devolve o início da hora representado por <code>dateTime</code>.\r\n    <code>dateTime</code> tem de ser um valor <code>time</code>, <code>datetime</code> ou <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Encontre o início da hora para 10 de outubro de 2011, às 08:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Devolve um registo que contém as partes do valor de Hora.",
        "Documentation.LongDescription": "Devolve um registo que contém as partes do valor de Hora especificado, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: um valor <code>time</code> a partir do qual o registo das partes correspondentes deverá ser calculado.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converter o valor <code>#time(11, 56, 2)</code> num registo que contém os valores de Hora.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Devolve uma representação textual do valor de hora.",
        "Documentation.LongDescription": "Devolve uma representação textual de <code>time</code>. Um parâmetro <code>record</code> opcional, <code>options</code>, pode ser fornecido para especificar propriedades adicionais. <code>culture</code> é utilizado apenas para fluxos de trabalho legados. O <code>record</code> pode conter os seguintes campos:\r\n<ul>\r\n   <li><code>Format</code>: Um valor de <code>text</code> que indica o formato a utilizar. Aceda a https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Omitir este campo ou fornecer <code>null</code> resultará na formatação da data utilizando a predefinição definida pela <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Quando o <code>Format</code> não é null, a <code>Culture</code> controla alguns especificadores de formato. Por exemplo, em <code>\"en-US\"</code>, <code>\"tt\"</code> é <code>\"AM\" ou \"PM\"</code>, ao passo que em <code>\"ar-EG\"</code>, <code>\"tt\"</code> é <code>\"ص\" ou \"م\"</code>. Quando o <code>Format</code> é <code>null</code>, a <code>Culture</code> controla o formato predefinido a utilizar. Quando <code>Culture</code> é <code>null</code> ou omitida, é utilizado <code>Culture.Current</code>.</li>\r\n</ul>\r\nPara suportar fluxos de trabalho legados, <code>options</code> e <code>culture</code> também podem ser valores de texto. O comportamento é idêntico ao caso em que <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converter <code>#time(01, 30, 25)</code> num valor de <code>text</code>. <i>O resultado pode variar dependendo da cultura atual.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Converter com um formato personalizado e a cultura alemã.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Converter com o formato de hora padrão.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Devolve uma versão fechada do tipo de registo fornecido (ou o mesmo tipo, se já estiver fechado).",
        "Documentation.LongDescription": "Devolve uma versão fechada do <code>record</code>  fornecido <code>type</code> (ou o mesmo tipo, se já estiver fechado).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Criar uma versão fechada de <code>tipo [ A = number…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Devolve as facetas de um tipo.",
        "Documentation.LongDescription": "Devolve um registo com as facetas de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Devolve um registo com valores de campo definidos para o nome dos parâmetros de um tipo de função e os respetivos valores definidos para os tipos correspondentes.",
        "Documentation.LongDescription": "Devolve um registo com valores de campo definidos para o nome dos parâmetros de <code>type</code> e os respetivos valores definidos para os tipos correspondentes.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontrar os tipos de parâmetros para a função <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Devolve um número a indicar o número mínimo de parâmetros necessários para invocar o tipo de função.",
        "Documentation.LongDescription": "Devolve um número a indicar o número mínimo de parâmetros necessários para invocar a introdução <code>type</code> da função.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o número de parâmetros necessários para a função <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Devolve um tipo devolvido por um tipo de função.",
        "Documentation.LongDescription": "Devolve um tipo devolvido por uma função <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o tipo de retorno de <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Devolve verdadeiro se um tipo é um tipo nulo; caso contrário, falso.",
        "Documentation.LongDescription": "Devolve <code>true</code> se um tipo for do tipo <code>nulllable</code>; caso contrário, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinar se <code>number</code> é nulo.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Determinar se <code>type nullable number</code> é nulo.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Devolve se um tipo de registo estiver aberto.",
        "Documentation.LongDescription": "Devolve um valor <code>logical</code> a indicar se um registo <code>type</code> está aberto.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinar se o registo <code>type [ A = number, ...]</code> está aberto.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Devolve um tipo de item de um tipo de lista.",
        "Documentation.LongDescription": "Devolve um tipo de item de uma lista <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Localizar tipo de item a partir da lista <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Devolve o tipo não nulo de um tipo.",
        "Documentation.LongDescription": "Devolve o tipo não <code>nullable</code> de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devolve o tipo não nulo de <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Devolve uma versão aberta do tipo de registo fornecido (ou do mesmo tipo, se já estiver aberto).",
        "Documentation.LongDescription": "Devolve uma versão aberta do <code>record</code> <code>type</code> fornecido (ou do mesmo tipo, se já estiver aberto).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Criar uma versão aberta de <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Devolve um registo que descreve os campos de um tipo de registo, sendo que cada campo do tipo de registo devolvido tem um nome e um valor correspondentes.",
        "Documentation.LongDescription": "Devolve um registo que descreve os campos de um registo <code>type</code>. Cada campo do tipo de registo devolvido tem um nome e um valor correspondentes, sob a forma de um registo <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Encontrar o nome e o valor do registo <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Devolve a lista de chaves possivelmente vazia para o tipo de tabela especificado.",
        "Documentation.LongDescription": "Devolve a lista de chaves possivelmente vazia para o tipo de tabela especificado.<br>\r\n    <br>\r\n    Cada chave é definida através de um registo com o seguinte formato:\r\n    <ul>\r\n      <li>\r\n        <code>Colunas</code>: uma lista dos nomes das colunas que definem a chave\r\n      </li>\r\n      <li>\r\n        <code>Primária</code>: <code>verdadeiro</code> se a chave for a chave primária da tabela; caso contrário, <code>falso</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devolva as informações de chave para um tipo de tabela.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Devolve o tipo de linha do tipo de tabela.",
        "Documentation.LongDescription": "Devolve o tipo de linha do tipo de tabela especificado. O resultado será sempre um tipo de gravação.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devolve as informações de tipo de linha para uma tabela simples.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Devolve a união de uma lista de tipos.",
        "Documentation.LongDescription": "Devolve a união dos tipos em <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Monte um registo numa cadeia de consulta URI.",
        "Documentation.LongDescription": "Monte o registo <code>query</code> numa cadeia de consulta URI, efetuando escape dos carateres conforme necessário.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique uma cadeia de consulta com alguns carateres especiais.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Codifica carateres especiais em conformidade com o RFC 3986.",
        "Documentation.LongDescription": "Codifica carateres especiais na entrada <code>data</code> em conformidade com as regras do RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique os carateres especiais em \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Devolve os componentes do URI absoluto de entrada como um registo.",
        "Documentation.LongDescription": "Devolve os componentes do <code>absoluteUri</code> de entrada como um registo, contendo valores como Scheme, Host, Port, Path, Query, Fragment, UserName e Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Identificar os componentes do URI absoluto \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Descodificar uma cadeia codificada de percentagem.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do seu Serviço de Análise do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Devolve o conteúdo transferido a partir do URL do Serviço de Análise do Azure DevOps como um valor binário. Esta função utiliza credenciais diferentes para organizações diferentes."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Introduza o URL do seu Serviço de Análise do Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Devolve o conteúdo transferido a partir do URL do Serviço de Análise do Azure DevOps como um valor binário. Esta função utiliza credenciais globais para todas as organizações disponíveis."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Expressa planos de consulta alternativos.",
        "Documentation.LongDescription": "Expressa planos de consulta alternativos dentro de uma expressão de plano de consulta obtida através da Valor.Expression (Value.Otimize(...)). Não se destina a outras utilizações.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Devolve uma árvore de sintaxe abstrata (AST) que representa a expressão do valor.",
        "Documentation.LongDescription": "Devolve uma árvore de sintaxe abstrata (AST) que representa a expressão do valor",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Cria um valor de tipo definido a partir de uma representação textual.",
        "Documentation.LongDescription": "Descodifica um valor de uma representação textual, <code>text</code>, e interpreta-o como um valor com um tipo apropriado.\r\n    <code>Value.FromText</code> utiliza um valor de texto e devolve um número, um valor lógico, um valor nulo, um valor de datetime, um valor de duração ou um valor de texto. Um valor de texto vazio é interpretado como um valor nulo.\r\n    Pode também ser fornecida uma <code>culture</code> opcional (por exemplo, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Devolve um registo que contém os metadados da entrada.",
        "Documentation.LongDescription": "Devolve um registo que contém os metadados da entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Alerta a Value.Expression para devolver a expressão otimizada de um valor.",
        "Documentation.LongDescription": "Quando utilizada dentro da Value.Expression, se <code>value</code> representar uma consulta que pode ser otimizada, esta função indica que a expressão otimizada deve ser devolvida. Caso contrário, <code>value</code> será transmitida sem efeito.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Separa a entrada dos metadados.",
        "Documentation.LongDescription": "Separa a entrada dos metadados.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Devolve o tipo do valor especificado.",
        "Documentation.LongDescription": "Devolve o tipo do valor especificado.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Esta função destina-se apenas a utilização interna.",
        "Documentation.LongDescription": "Esta função destina-se apenas a utilização interna.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Devolve o HTML para o URL especificado, conforme visualizado por um browser.",
        "Documentation.LongDescription": "Devolve o HTML para o <code>url</code> especificado, conforme visualizado por um browser. Pode ser fornecido um parâmetro de <code>options</code> opcional para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: se o site de destino tiver uma noção de uma chave de API, este parâmetro pode ser utilizado para especificar o nome (e não o valor) do parâmetro da chave que tem de ser utilizado no URL. O valor da chave em questão é fornecido na credencial.</li>\r\n        <li><code>WaitFor</code>: especifica uma condição para aguardar antes de transferir o HTML, além de aguardar que a página seja carregada (o que é sempre efetuado). Pode ser um registo que contém os campos Tempo Limite e/ou Seletor. Se for especificado apenas um Tempo Limite, a função aguardará o período de tempo especificado antes de transferir o HTML. Se for especificado um Seletor e um Tempo Limite e o Tempo Limite ocorrer antes de o Seletor existir na página, será apresentada uma mensagem de erro. Se for especificado um Seletor sem Tempo Limite, será aplicado um Tempo Limite predefinido de 30 segundos.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "A aceder aos dados",
        "Documentation.Examples": [
          {
            "Description": "Devolve o HTML para https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Devolve o HTML para https://microsoft.com após aguardar que um seletor CSS exista.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Devolve o HTML para https://microsoft.com após aguardar dez segundos.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Devolve o HTML para https://microsoft.com após aguardar até dez segundos para que o seletor CSS exista.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Devolve os conteúdos transferidos a partir do URL como binário.",
        "Documentation.LongDescription": "Devolve o conteúdo transferido de <code>url</code> como binário. Pode ser fornecido um parâmetro de registo opcional, <code>options</code>, para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta ao URL, sem ter de se preocupar com escapes.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro pode ser utilizado para especificar o nome (n&#227;o o valor) do par&#226;metro chave que &#233; necess&#225;rio utilizar no URL. O valor chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : Especificar este valor como um registo vai fornecer cabe&#231;alhos adicionais a um pedido HTTP.</li>\r\n<li><code>Timeout</code> : Especificar este valor como uma dura&#231;&#227;o vai alterar o tempo limite para um pedido HTTP. O valor predefinido &#233; de 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Especificar este valor como uma lista vai excluir estas chaves de cabe&#231;alho HTTP para que n&#227;o fa&#231;am parte do c&#225;lculo para colocar os dados em cache.</li>\r\n<li><code>IsRetry</code> : Especificar este valor l&#243;gico como verdadeiro vai ignorar qualquer resposta existente na cache ao obter os dados.</li>\r\n<li><code>ManualStatusHandling</code> : Especificar este valor como uma lista vai impedir qualquer processamento incorporado para pedidos HTTP cuja resposta tenha um destes c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Especificar este valor como texto acrescenta-o ao URL base antes de fazer o pedido.</li>\r\n<li><code>Content</code> : Especificar este valor altera o pedido Web de um GET para um POST, utilizando o valor da op&#231;&#227;o como conte&#250;do do POST.</li>\r\n</ul>\r\n\r\n    O pedido HTTP é efetuado como GET (quando não for especificado nenhum Conteúdo) ou um POST (quando existir Conteúdo). Os pedidos POST apenas podem ser efetuados anonimamente.\r\n    <br>\r\n    Os cabeçalhos da resposta HTTP estão disponíveis como metadados no resultado binário. Fora de um contexto de conector com dados personalizados, apenas está disponível um subconjunto de cabeçalhos de resposta (por motivos de segurança).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Obtenha os conteúdos de <code>\"https://bing.com/search?q=Power+Query\"</code> utilizando as opções RelativePath e Query. Estas opções podem ser utilizadas para consultar dinamicamente um URL base estático.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Execute um POST num URL, ao passar um payload JSON binário e ao analisar a resposta como JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Ligue-se a um URL seguro que aceite uma chave de autenticação como parte da respetiva cadeia de consulta. Em vez de programar de forma rígida a chave secreta em M (que levantaria um risco de segurança), \r\n    a chave pode ser fornecida em segurança ao especificar o nome da mesma (não o valor) em M, escolher a autenticação API Web e introduzir o valor da chave como parte da credencial da API Web.\r\n    Quando utilizado desta forma, o exemplo seguinte gerará um pedido para <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Devolve os cabeçalhos HTTP transferidos do URL como um valor de registo.",
        "Documentation.LongDescription": "Devolver os cabeçalhos transferidos de <code>url</code> como um registo. Um parâmetro de registo opcional, <code>options</code>, poderá ser fornecido para especificar propriedades adicionais. O registo pode conter os seguintes campos:\r\n    <ul>\r\n<li><code>Query</code> : Adicione programaticamente par&#226;metros de consulta ao URL, sem ter de se preocupar com escapes.</li>\r\n<li><code>ApiKeyName</code> : Se o site de destino tiver uma no&#231;&#227;o de uma chave de API, este par&#226;metro pode ser utilizado para especificar o nome (n&#227;o o valor) do par&#226;metro chave que &#233; necess&#225;rio utilizar no URL. O valor chave real &#233; fornecido na credencial.</li>\r\n<li><code>Headers</code> : Especificar este valor como um registo vai fornecer cabe&#231;alhos adicionais a um pedido HTTP.</li>\r\n<li><code>Timeout</code> : Especificar este valor como uma dura&#231;&#227;o vai alterar o tempo limite para um pedido HTTP. O valor predefinido &#233; de 100 segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Especificar este valor como uma lista vai excluir estas chaves de cabe&#231;alho HTTP para que n&#227;o fa&#231;am parte do c&#225;lculo para colocar os dados em cache.</li>\r\n<li><code>IsRetry</code> : Especificar este valor l&#243;gico como verdadeiro vai ignorar qualquer resposta existente na cache ao obter os dados.</li>\r\n<li><code>ManualStatusHandling</code> : Especificar este valor como uma lista vai impedir qualquer processamento incorporado para pedidos HTTP cuja resposta tenha um destes c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Especificar este valor como texto acrescenta-o ao URL base antes de fazer o pedido.</li>\r\n</ul>\r\n\r\n    O pedido HTTP é composto com o método HEAD. Fora de um contexto de conector com dados personalizados, apenas está disponível um subconjunto de cabeçalhos de resposta (por motivos de segurança).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Obtenha os cabeçalhos HTTP para <code>\"https://bing.com/search?q=Power+Query\"</code> através das opções RelativePath e Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "O contexto de autorização com o qual é avaliada uma condição de entrada de controlo de acesso (ACE).",
        "Documentation.LongDescription": "O contexto de autorização com o qual é avaliada uma condição de entrada de controlo de acesso (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Uma tabela de entradas de controlo de acesso (ACEs).",
        "Documentation.LongDescription": "Uma tabela ordenada de entradas de controlo de acesso (ACEs) que representa regras de autorização. Cada linha é avaliada no contexto de autorização atual (por ordem) e a primeira linha para a qual a expressão <code>Condição</code> devolve verdadeira determina a regra que se aplica. A coluna <code>Ação</code> representa o tipo de ação ao qual a regra se aplica. A coluna <code>AccessControlKind</code> determina se o acesso da ação deve ser permitido ou negado.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Especifica o tipo de controlo de acesso.",
        "Documentation.LongDescription": "Especifica o tipo de controlo de acesso.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "O tipo que representa todos os valores.",
        "Documentation.LongDescription": "O tipo que representa todos os valores.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "O tipo que representa todos os valores binários.",
        "Documentation.LongDescription": "O tipo que representa todos os valores binários.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Especifica o tipo de codificação binária.",
        "Documentation.LongDescription": "Especifica o tipo de codificação binária.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Especifica quantas vezes o item deve aparecer no grupo.",
        "Documentation.LongDescription": "Especifica quantas vezes o item deve aparecer no grupo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Descreve o tipo de colocação em memória intermédia a ser efetuado.",
        "Documentation.LongDescription": "Descreve o tipo de colocação em memória intermédia a ser efetuado.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "O tipo que representa todos os bytes.",
        "Documentation.LongDescription": "O tipo que representa todos os bytes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Especifica a ordem de bytes.",
        "Documentation.LongDescription": "Especifica a ordem de bytes.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "O tipo que representa todos os carateres.",
        "Documentation.LongDescription": "O tipo que representa todos os carateres.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Especifica o tipo de compressão.",
        "Documentation.LongDescription": "Especifica o tipo de compressão.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Especifica a significância das aspas em documentos Csv.",
        "Documentation.LongDescription": "Especifica a significância das aspas em documentos Csv.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "O tipo que representa o valor de moeda.",
        "Documentation.LongDescription": "O tipo que representa o valor de moeda.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "O tipo que representa todos os valores de data.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de data.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "O tipo que representa todos os valores de data e hora sem um fuso horário associado.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de data e hora sem um fuso horário associado.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "O tipo que representa todos os valores de data e hora relativos a um fuso horário.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de data e hora relativos a um fuso horário.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Especifica um dia da semana.",
        "Documentation.LongDescription": "Especifica um dia da semana.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "O tipo que representa o número decimal de vírgula fixa.",
        "Documentation.LongDescription": "O tipo que representa o número decimal de vírgula fixa.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "O tipo que representa o número de vírgula flutuante de precisão dupla.",
        "Documentation.LongDescription": "O tipo que representa o número de vírgula flutuante de precisão dupla.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "O tipo que representa todos os valores de duração",
        "Documentation.LongDescription": "O tipo que representa todos os valores de duração",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Especifica a ação esperada para valores adicionais numa linha que contém mais colunas do que o esperado.",
        "Documentation.LongDescription": "Especifica a ação esperada para valores adicionais numa linha que contém mais colunas do que o esperado.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "O tipo que representa todas as funções.",
        "Documentation.LongDescription": "O tipo que representa todas as funções.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Especifica o tipo de agrupamento.",
        "Documentation.LongDescription": "Podem ser produzidos vários grupos locais com o mesmo valor de chave, mas apenas é produzido um único grupo global para um determinado valor de chave.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "O tipo que representa um valor Guid.",
        "Documentation.LongDescription": "O tipo que representa um valor Guid.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Uma identidade representa um utilizador, um grupo, um dispositivo ou outra coisa identificável.",
        "Documentation.LongDescription": "Uma identidade representa um utilizador, um grupo, um dispositivo ou outra coisa identificável.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Define um âmbito no qual identidades são criadas e comparadas.",
        "Documentation.LongDescription": "Define um âmbito no qual identidades são criadas e comparadas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "O tipo que representa o número inteiro de 16 bits com sinal.",
        "Documentation.LongDescription": "O tipo que representa o número inteiro de 16 bits com sinal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "O tipo que representa o número inteiro de 32 bits com sinal.",
        "Documentation.LongDescription": "O tipo que representa o número inteiro de 32 bits com sinal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "O tipo que representa o número inteiro de 64 bits com sinal.",
        "Documentation.LongDescription": "O tipo que representa o número inteiro de 64 bits com sinal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "O tipo que representa o número inteiro de 8 bits com sinal.",
        "Documentation.LongDescription": "O tipo que representa o número inteiro de 8 bits com sinal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Especifica o algoritmo de associação a utilizar na operação associação.",
        "Documentation.LongDescription": "Especifica o algoritmo de associação a utilizar na operação associação.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Especifica o tipo de operação de associação.",
        "Documentation.LongDescription": "Especifica o tipo de operação de associação.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Especifica a tabela à esquerda e a direita de uma associação.",
        "Documentation.LongDescription": "Especifica a tabela à esquerda e a direita de uma associação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Descreve o tipo de cláusula de limite suportado pelo dialeto SQL utilizado por esta origem de dados.",
        "Documentation.LongDescription": "Descreve o tipo de cláusula de limite suportado pelo dialeto SQL utilizado por esta origem de dados.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "O tipo que representa todas as listas.",
        "Documentation.LongDescription": "O tipo que representa todas as listas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "O tipo que representa todos os valores lógicos.",
        "Documentation.LongDescription": "O tipo que representa todos os valores lógicos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Especifica a ação esperada para valores em falta numa linha que contém menos colunas do que o esperado.",
        "Documentation.LongDescription": "Especifica a ação esperada para valores em falta numa linha que contém menos colunas do que o esperado.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "O tipo que representa um nulo.",
        "Documentation.LongDescription": "O tipo que representa um nulo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "O tipo que representa todos os números.",
        "Documentation.LongDescription": "O tipo que representa todos os números.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Especifica os tipos de valores que um serviço OData pode omitir.",
        "Documentation.LongDescription": "Especifica os tipos de valores que um serviço OData pode omitir.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Especifica a ocorrência de um elemento numa sequência.",
        "Documentation.LongDescription": "Especifica a ocorrência de um elemento numa sequência.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Especifica a direção da ordenação.",
        "Documentation.LongDescription": "Especifica a direção da ordenação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "O tipo que representa uma palavra-passe de texto.",
        "Documentation.LongDescription": "O tipo que representa uma palavra-passe de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "O tipo que representa o valor da percentagem.",
        "Documentation.LongDescription": "O tipo que representa o valor da percentagem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Especifica o tipo de modo do percentil.",
        "Documentation.LongDescription": "Especifica o tipo de modo do percentil.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Especifica a precisão da comparação.",
        "Documentation.LongDescription": "Especifica a precisão da comparação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Especifica o estilo da cotação.",
        "Documentation.LongDescription": "Especifica o estilo da cotação.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Especifica o tipo de classificação.",
        "Documentation.LongDescription": "Especifica o tipo de classificação.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "O tipo que representa todos os registos.",
        "Documentation.LongDescription": "O tipo que representa todos os registos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Indica se a indexação deve ser feita a partir do início ou do fim da entrada.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Especifica a direção do arredondamento quando existe um empate entre os números possíveis de arredondar.",
        "Documentation.LongDescription": "Especifica a direção do arredondamento quando existe um empate entre os números possíveis de arredondar.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opções válidas para a opção do modo de execução do SAP Business Warehouse.",
        "Documentation.LongDescription": "Opções válidas para a opção do modo de execução do SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opções válidas para a opção de distribuição SAP HANA.",
        "Documentation.LongDescription": "Opções válidas para a opção de distribuição SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Um operador de intervalo para parâmetros de entradas de intervalos de SAP HANA.",
        "Documentation.LongDescription": "Um operador de intervalo para parâmetros de entradas de intervalos de SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "O tipo que representa o número de vírgula flutuante de precisão única.",
        "Documentation.LongDescription": "O tipo que representa o número de vírgula flutuante de precisão única.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "O protocolo a utilizar na ligação a uma instância de Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "O tipo que representa todas as tabelas.",
        "Documentation.LongDescription": "O tipo que representa todas as tabelas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "O tipo que representa todos os valores de texto.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Especifica o tipo de codificação do texto.",
        "Documentation.LongDescription": "Especifica o tipo de codificação do texto.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "O tipo que representa todos os valores de hora.",
        "Documentation.LongDescription": "O tipo que representa todos os valores de hora.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Especifica o nível de rastreio.",
        "Documentation.LongDescription": "Especifica o nível de rastreio.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "O tipo que representa todos os tipos.",
        "Documentation.LongDescription": "O tipo que representa todos os tipos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "O tipo que representa um URI de texto.",
        "Documentation.LongDescription": "O tipo que representa um URI de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Especifica um método HTTP.",
        "Documentation.LongDescription": "Especifica um método HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
