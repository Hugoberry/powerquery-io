{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Возвращает структурное представление базы данных Access.",
        "Documentation.LongDescription": "Возвращает структурное представление базы данных Access, <code>database</code>. Можно указать необязательный параметр записи <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (true или false), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— false.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n</ul>\r\n\r\n    Пример указания параметра записи: [параметр1 = значение1, параметр2 = значение2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Возвращает базы данных Analysis Services на определенном узле.",
        "Documentation.LongDescription": "Возвращает базы данных в определенном экземпляре Analysis Services — <code>server</code>. Чтобы указать дополнительные свойства, можно предоставить необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Логическое значение, указывающее, будут ли в качестве типов добавленных столбцов мер использоваться типы, указанные во многомерной или табличной модели. Если задано значение false, для всех столбцов мер будет использоваться тип &quot;number&quot;. Значение по умолчанию — false.</li>\r\n<li><code>Culture</code> : Имя языка и региональных параметров для данных. Это соответствует свойству строки подключения &quot;Код языка&quot;.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>SubQueries</code> : Число (0, 1 или 2), задающее значение свойства &quot;SubQueries&quot; в строке подключения. Оно управляет поведением вычисляемых членов в подзапросах выборки или вложенных кубах. (Значение по умолчанию&#160;— 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Кубы AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Импорт или извлечение в режиме DirectQuery данных куба из AtScale.",
        "Documentation.LongDescription": "\r\nВозвращает данные куба из AtScale на сервере <code>server</code>. Можно указать необязательный параметр записи <code>options</code> для управления следующими параметрами:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: логическое значение, указывающее, будут ли в качестве типов добавленных столбцов мер использоваться типы, указанные в многомерной или табличной модели. Если задано значение false, для всех столбцов мер будет использоваться тип \"number\". Значение по умолчанию — false.</li>\r\n        <li><code>CommandTimeout</code>: длительность выполнения запроса на стороне сервера до его отмены (в секундах). Значение по умолчанию зависит от драйвера. </li>\r\n        <li><code>ConnectionTimeout</code>: длительность, контролирующая время ожидания до отмены попытки подключения к серверу (в секундах). Значение по умолчанию зависит от драйвера. </li>\r\n\r\n</ul>\r\nПараметр записи задается в формате [параметр1 = значение1, параметр2 = значение2…].",
        "Documentation.Examples": {
          "Description": "Вывод списка данных куба в кубе AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Импортирует данные из Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Импортирует данные из вашего экземпляра Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу сведений о событиях Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Таблица событий Storm из базы данных \"Samples\" в кластере \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес своей службы аналитики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Возвращает в виде двоичного значения содержимое, скачанное по URL-адресу службы аналитики Azure DevOps. Эта функция использует разные учетные данные для разных организаций."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Веб-канал Azure DevOps Services",
        "Documentation.DisplayName": "Веб-канал Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Возвращает таблицу веб-каналов OData, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Введите URL-адрес конечной точки REST API Azure Enterprise, связанной с вашим соглашением о регистрации",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Возвращает список отчетов и месяцев, доступный в Azure Enterprise API",
        "Documentation.Name": "Импорт данных из Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Использование функции AzureEnterprise.Tables и переход к конкретному значению для получения результатов.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Таблица"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Примеры начальных запросов: https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli.",
        "Documentation.Examples": [
          {
            "Description": "Возврат таблицы с результатами запроса пользователя \"resources\"",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Список таблиц в экземпляре Azure Spark.",
        "Documentation.LongDescription": "Список таблиц в экземпляре Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Список таблиц в экземпляре Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Возвращает навигационную таблицу, содержащую контейнеры, найденные в указанной учетной записи в хранилище Azure.",
        "Documentation.LongDescription": "Возвращает навигационную таблицу, содержащую строки для каждого контейнера, обнаруженного по URL-адресу учетной записи <code>account</code> в хранилище Azure. Каждая строка содержит ссылку на BLOB-объекты контейнера. Вы можете указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Число байт, считываемых перед ожиданием потребителя данных. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>RequestSize</code> : Число байт, которое пытается считать один HTTP-запрос к серверу. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests поддерживает ускоренное скачивание данных, позволяя указать число параллельно выполняемых запросов за счет использования памяти. Требуемый объем памяти: ConcurrentRequest (Число параллельных запросов)&#160;* RequestSize (Размер запроса). Значение по умолчанию&#160;— 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Возвращает таблицу навигации, содержащую документы, обнаруженные в указанном контейнере в Azure Data Lake Storage и его подпапках.",
        "Documentation.LongDescription": "Возвращает таблицу навигации, содержащую документы, обнаруженные в указанном контейнере и его подпапках по URL-адресу учетной записи <code>endpoint</code> из файловой системы Azure Data Lake Storage. Вы можете указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Число байт, считываемых перед ожиданием потребителя данных. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>RequestSize</code> : Число байт, которое пытается считать один HTTP-запрос к серверу. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests поддерживает ускоренное скачивание данных, позволяя указать число параллельно выполняемых запросов за счет использования памяти. Требуемый объем памяти: ConcurrentRequest (Число параллельных запросов)&#160;* RequestSize (Размер запроса). Значение по умолчанию&#160;— 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (true или false), определяющее вид возвращаемых файлов: древовидное представление каталогов или плоский список. Значение по умолчанию&#160;— false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Возвращает навигационную таблицу, содержащую таблицы, найденные в указанной учетной записи в хранилище Azure.",
        "Documentation.LongDescription": "Возвращает таблицу навигации, содержащую строку для каждой таблицы, найденной по URL-адресу учетной записи <code>account</code>, из хранилища Azure. Каждая строка содержит ссылку на таблицу Azure. Для указания дополнительных свойств можно использовать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>Timeout</code> : Время ожидания до отмены запроса к серверу. Значение по умолчанию зависит от источника.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Аналитика временных рядов Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight в AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Данные и аналитика Bloomberg  v1.1.3",
        "Documentation.Description": "Используется для получения данных Bloomberg"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Эта функция недоступна, так как для нее требуется .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (прежние версии)",
        "Documentation.Caption": "Common Data Service (прежние версии)",
        "Documentation.LongDescription": "Подключение к экземпляру Common Data Service (Dynamics 365 и PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Возвращает содержимое документа CSV в виде таблицы.",
        "Documentation.LongDescription": "Возвращает содержимое CSV-документа в виде таблицы.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> может содержать значение NULL, число столбцов, список имен столбцов, тип таблицы или запись параметров.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> может быть одним символом, списком символов или значением <code>\"\"</code>, указывающим количество строк, которые следует разделить с использованием последовательных символов пробела. По умолчанию: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Поддерживаемые значения <code>extraValues</code> см. в описании <code>ExtraValues.Type</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> определяет тип кодировки текста.\r\n      </li>\r\n    </ul>\r\n\r\n    Если для <code>columns</code> указана запись (а <code>delimiter</code>, <code>extraValues</code> и <code>encoding</code> имеют значение NULL), в записи можно указать следующие поля:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>. Разделитель столбцов. По умолчанию: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>. Может содержать значение NULL, число столбцов, список имен столбцов или тип таблицы. Если число столбцов меньше их числа во входных данных, дополнительные столбцы будут игнорироваться. Если число столбцов превышает их число во входных данных, дополнительные столбцы будут иметь значение NULL. Если значение не указано, число столбцов будет определяться входными данными.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>. Кодировка текста файла. По умолчанию: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>. Определяет обработку кавычек.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (по умолчанию). Кавычки в поле учитываются только сразу после разделителя.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>. Кавычки в поле всегда учитываются независимо от того, где они находятся.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>. Определяет обработку разрыва строк в кавычках.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (по умолчанию). Разрывы строк в кавычках рассматриваются как часть данных, а не как конец текущей строки.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>. Все разрывы строк рассматриваются как конец текущей строки, даже если они находятся внутри значения в кавычках.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Обработка текста в формате CSV с заголовками столбцов",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Возвращает таблицу, содержащую набор доступных измерений.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую набор доступных измерений в пределах <code>cube</code>. Каждое измерение - это таблица с набором атрибутов измерения. Каждый атрибут измерения представлен как столбец в этой таблице измерения. Измерения в кубе можно развернуть с помощью метода Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Возвращает составное дерево таблиц, представляющих отображаемую иерархию папок объектов (например, измерений и мер).",
        "Documentation.LongDescription": "Возвращает составное дерево таблиц, представляющих отображаемую иерархию папок объектов (например, измерений и мер), доступных для использования в <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Возвращает таблицу с набором доступных свойств мер, которые расширяются в кубе.",
        "Documentation.LongDescription": "Возвращает таблицу с набором доступных свойств мер, которые расширяются в кубе.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Возвращает таблицу, содержащую набор доступных мер.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую набор доступных мер в пределах <code>cube</code>.\r\n    Каждая мера представлена функцией. Меры могут применяться к кубу с помощью метода Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Возвращает таблицу, содержащую набор параметров, которые можно применить к кубу.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую набор параметров, которые можно применить к \"<code>cube</code>\". Каждый параметр представляет из себя функцию, которую можно вызвать для того, чтобы получить \"<code>cube</code>\" с примененными параметром и агрументами.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Возвращает таблицу с набором доступных свойств измерений, которые расширяются в кубе.",
        "Documentation.LongDescription": "Возвращает таблицу с набором доступных свойств измерений, которые расширяются в кубе.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage 1-го поколения",
        "Documentation.Description": "Введите URL-адрес учетной записи Azure Data Lake Storage 1-го поколения.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую строку для каждой папки и каждого файла, находящихся по <code>URL-адресу</code> в Azure Data Lake Storage 1-го поколения. Каждая строка содержит свойства папки или файла, а также ссылку на их содержимое."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage 1-го поколения",
        "Documentation.Description": "Введите URL-адрес учетной записи Azure Data Lake Storage.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую строку для каждого файла, находящегося по <code>URL-адресу</code> в Azure Data Lake Storage 1-го поколения. Каждая строка содержит свойства файла, а также ссылку на его содержимое."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB версии 1",
        "Documentation.Caption": "Azure Cosmos DB (API SQL)",
        "Documentation.Description": "Введите URL-адрес учетной записи Azure Cosmos DB.",
        "Documentation.LongDescription": "Возвращает таблицу баз данных Azure Cosmos DB по адресу <code>url</code>. Если указана база данных <code>database</code>, вместо этого будет возвращаться таблица коллекций. Кроме того, если поле <code>Query</code> указано в записи <code>options</code>, будут возвращаться результаты запросов, которые выполняются для указанной базы данных или коллекции."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес конечной точки службы OData Dynamics 365 Business Central (локальный).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (локальный)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (локальный)",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Укажите URL-адрес конечной точки службы Dynamics NAV OData.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Возвращает таблицу с подходящими данными Dynamics NAV OData. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Возвращает кубы в экземпляре Essbase, сгруппированные сервером Essbase.",
        "Documentation.LongDescription": "Возвращает таблицу кубов, сгруппированных сервером Essbase, из экземпляра Essbase на сервере APS <code>url</code>. Вы можете указать необязательный параметр записи <code>options</code> для управления следующими функциями:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Возвращает содержимое книги Excel.",
        "Documentation.LongDescription": "Возвращает содержимое книги Excel. \r\n    <ul>\r\n     <li> <code>useHeaders</code> может иметь значение NULL, логическое значение (true/false), указывающее, должна ли первая строка каждой возвращаемой таблицы обрабатываться как заголовок, либо содержать запись параметров. Значение по умолчанию: false.</li>\r\n     <li> <code>delayTypes</code> может иметь значение NULL или логическое значение (true/false), указывающее, оставлять ли столбцы каждой возвращаемой таблицы нетипизированными. Значение по умолчанию: false.</li>\r\n    </ul>\r\n\r\n    Если для <code>useHeaders</code> указана запись (и <code>delayTypes</code> имеет значение NULL), в ней можно указать следующие поля:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>. Может иметь значение NULL или логическое значение (true/false), которое указывает, обрабатывать ли первую строку каждой возвращаемой таблицы как заголовок. Значение по умолчанию: false.</li>\r\n     <li> <code>DelayTypes</code>. Может иметь значение NULL или логическое значение (true/false), которое указывает, оставлять ли столбцы каждой возвращаемой таблицы нетипизированными. Значение по умолчанию: false.</li>\r\n     <li> <code>InferSheetDimensions</code>. Может иметь значение NULL или логическое значение (true/false), которое указывает, нужно ли определять область листа, содержащую данные, путем чтения самого листа, а не метаданных размеров из файла. Это может быть полезно в случаях, когда метаданные размеров неверные. Обратите внимание, что этот параметр поддерживается только для Excel-файлов формата Open XML, а не прежних версий. Значение по умолчанию: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Возврат содержимого Листа1 из книги Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Возвращает таблицу, содержащую свойства и содержимое файлов и папок, обнаруженных в указанной папке.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую одну строку для каждой папки и файла, найденных в папке <code>path</code>. Каждая строка представляет свойства файла или папки и ссылку на содержимое. Параметр <code>options</code> в настоящее время предназначен только для внутреннего использования.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Возвращает таблицу, содержащую свойства и содержимое файлов и папок, найденных в указанной папке и вложенных папках.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую одну строку для каждого файла, найденного в папке и ее вложенных папках <code>path</code>. Каждая строка представляет свойства файла и ссылку на содержимое. Параметр <code>options</code> в настоящее время предназначен только для внутреннего использования.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Импорт данных из базы данных Google BigQuery с помощью Azure AD",
        "Documentation.LongDescription": "\r\n      Возвращает таблицу со списком доступных проектов в Google BigQuery с использованием Azure AD для <code>ID платежного проекта</code> . Необязательный параметр записи, <code>options</code>, может быть указан для управления следующими параметрами:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: продолжительность, определяющая время ожидания перед отказом от попытки установить соединение с сервером. Значение по умолчанию – значение времени ожидания соединения ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Длительность, определяющая, как долго может выполняться запрос на стороне сервера, прежде чем он будет отменен.</li>\r\n        <li><code>UseStorageApi</code>: Указывает, следует ли использовать BigQuery Storage API для больших наборов результатов. Значение по умолчанию — ИСТИНА, чтобы использовать Storage API. Установите значение ЛОЖЬ, чтобы не использовать Storage API.</li>\r\n        <li><code>AudienceUri</code>: Это URI аудитории, который драйвер ODBC может использовать для своих запросов на обмен маркерами. Это поле должно быть полным URI. (i.e. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) где pool_id — глобально уникальное имя для идентификации пула рабочей силы.</li>\r\n      </ul>\r\n    Параметр записи указывается как [значение1 = значение1, значение2 = значение2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Перечисление доступных проектов в Google BigQuery с помощью Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Таблицы",
        "Documentation.Caption": "Google Таблицы",
        "Documentation.Description": "Импорт данных из Google Таблиц",
        "Documentation.LongDescription": "Импорт данных из Google Таблиц"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Возвращает навигационную таблицу, содержащую контейнеры, найденные в указанной учетной записи в хранилище Azure.",
        "Documentation.LongDescription": "Возвращает навигационную таблицу, содержащую одну строку для каждого контейнера, найденного по URL-адресу учетной записи <code>account</code> в хранилище Azure. Каждая строка содержит ссылку на BLOB-объекты в контейнере.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Возвращает навигационную таблицу, содержащую контейнеры, найденные в указанной учетной записи в хранилище Azure.",
        "Documentation.LongDescription": "Возвращает навигационную таблицу, содержащую одну строку для каждого контейнера, найденного по URL-адресу учетной записи <code>account</code> в хранилище Azure. Каждая строка содержит ссылку на BLOB-объекты в контейнере.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Возвращает таблицу, содержащую свойства и содержимое файлов и папок, найденных в заданной папке из файловой системы Hadoop.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую одну строку для каждой папки и каждого файла, найденного по URL-адресу папки <code>url</code> из файловой системы Hadoop. Каждая строка представляет свойства файла или папки и ссылку на содержимое.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Возвращает таблицу, содержащую свойства и содержимое файлов, найденных в заданной папке и вложенных папках из файловой системы Hadoop.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую одну строку для каждого файла, найденного по URL-адресу папки <code>url</code> и во вложенных папках из файловой системы Hadoop. Каждая строка содержит свойства файла и ссылки на его содержимое.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Импорт данных из кластера Impala",
        "Documentation.LongDescription": "Импорт данных из кластера Impala <code>№ {0}</code>. Если порт не указан, используется стандартный порт, 21050.",
        "Documentation.Examples": [
          {
            "Description": "Перечисление таблиц в кластере Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Импортирует данные из Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Импортирует данные из вашего экземпляра Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу сведений о событиях Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Таблица событий Storm из базы данных \"Samples\" в кластере \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу с данными от конечной точки MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Делает вызов API MailChimp и возвращает результирующий набор данных в виде таблицы. Осуществляет автоматическое листание по всем результатам. Можно использовать необязательный параметр entityName для конечных точек API, у которых не совпадают корневая конечная точка и основное значение entityName в ответе JSON.",
        "Documentation.Examples": [
          {
            "Description": "Получает таблицу данных от конечной точки списков API MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Таблица с данными списка."
          },
          {
            "Description": "Получает таблицу данных от конечной точки папок кампаний API MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Таблица с данными папок кампаний."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Возвращает необработанные результаты ответа от конечной точки API MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Делает вызов API MailChimp и возвращает необработанный ответ.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает необработанные данные от конечной точки API MailChimp отчетов или сведений о щелчках для заданной кампании.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Необработанные данные сведений о щелчках от заданной кампании."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Укажите расширенные функции запросов.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Укажите расширенные функции запросов.",
        "Documentation.Examples": [
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок между датами 01.05.2017 и 15.06.2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные сводок с 01.05.2017 по 15.06.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок за апрель 2017 г.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.04.2017 по 30.04.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок с апреля 2017 г. по настоящее время.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.04.2017 по 15.06.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок с декабря прошлого года до февраля этого года ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.12.2016 по 28.02.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить расходы в Marketplace за последние 18 месяцев",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.12.2015 по 15.06.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить подробные расходы за июнь и май 2017 г.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.05.2017 по 15.06.2017"
          },
          {
            "Description": "Предполагая, что сегодня 03.07.2017, получить подробные расходы за июль 2016 г.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.07.2016 по 31.07.2016"
          },
          {
            "Description": "Предположив, что сегодня 13.07.2017, получить сводки по сальдо за последние 10 месяцев и 13 дней текущего месяца",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Функция вернет данные с 01.09.2016 по 13.07.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL из источника данных ODBC. ",
        "Documentation.LongDescription": "Возвращает таблицу таблиц и представлений SQL из источника данных ODBC, заданного в строке подключения <code>connectionString</code>. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть текстом или числом. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию&#160;— 15&#160;секунд.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Возврат таблиц SQL и представлений из указанной строки подключения.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Возвращает таблицу с таблицами и представлениями SQL из источника данных OLE DB.",
        "Documentation.LongDescription": "Возвращает таблицу с таблицами и представлениями SQL из источника данных OLE DB, указанными в строке подключения <code>connectionString</code>. <code>connectionString</code> может быть текстом или записью из пар \"значение-свойство\". Значения свойств могут быть текстом или числом. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (true или false), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— true.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n</ul>\r\n\r\n    Пример указания параметра записи: [параметр1 = значение1, параметр2 = значение2...] или [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL из базы данных Oracle.",
        "Documentation.LongDescription": "Возвращает список таблиц и представлений SQL из базы данных Oracle на сервере <code>server</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Возвращает все таблицы, найденные в PDF-файле.",
        "Documentation.LongDescription": "Возвращает таблицы, найденные в <code>pdf</code>. Для указания дополнительных свойств может предоставляться необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>Implementation</code> : Версия алгоритма, используемого для идентификации таблиц. Старые версии доступны только для обеспечения обратной совместимости, чтобы предотвратить нарушение работы старых запросов при обновлении алгоритмов. Самая последняя версия всегда обеспечивает наилучшие результаты. Допустимые значения: &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; или &quot;null&quot;.</li>\r\n<li><code>StartPage</code> : Задает первую страницу диапазона страниц для проверки. Значение по умолчанию: 1.</li>\r\n<li><code>EndPage</code> : Задает последнюю страницу диапазона страниц для проверки. Значение по умолчанию: номер последней страницы документа.</li>\r\n<li><code>MultiPageTables</code> : Определяет, будут ли похожие таблицы на идущих одна за другой страницах автоматически объединяться в одну таблицу. Значение по умолчанию: true.</li>\r\n<li><code>EnforceBorderLines</code> : Определяет, будут ли для определения границ ячеек использоваться только линии границ (при значении true) или они будут использоваться просто как одно из множества указаний (при значении false). Значение по умолчанию: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицы, содержащиеся в файле sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес своей учетной записи Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Возвращает таблицу с актуальными данными Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρуτнőň ŝсґϊφт",
        "Documentation.Description": "∑×êсũτзś Þўŧħοή śčѓîρţ äņđ ѓęťűřηѕ ďãтå ƒřăмèѕ",
        "Documentation.Examples": {
          "Description": "∑×êсũτзś Þўŧħοή śčѓîρţ äņđ ѓęťűřηѕ ďãтå ƒřăмèѕ",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Г §сяïþŧ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Возвращает таблицу, где каждая строка представляет имя поля и значение входной записи.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую столбцы <code>Name</code> и <code>Value</code> со строкой для каждого поля в <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Возврат таблицы из записи.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Возвращает пакеты в базе данных HANA SAP.",
        "Documentation.LongDescription": "Возвращает таблицу многомерных пакетов из базы данных SAP HANA <code>server</code>. Может быть указан необязательный параметр записи <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution, который задает значение свойства Distribution в строке подключения. Маршрутизация инструкций&#160;— это способ определения правильного узла сервера распределенной системы перед выполнением инструкции. Значение по умолчанию&#160;— SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Задает используемую реализацию соединителя SAP&#160;HANA.</li>\r\n<li><code>EnableColumnBinding</code> : Привязывает переменные к столбцам результирующего набора SAP HANA при получении данных. Может повысить производительность за счет более высокой загрузки памяти. Значение по умолчанию — false.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию&#160;— 15&#160;секунд.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Возвращает таблицу, содержащую содержимое сайта SharePoint.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую по одной строке для каждой папки и документа, найденных на указанном сайте SharePoint (<code>url</code>). Каждая строка представляет свойства файла или папки и ссылку на содержимое. Можно указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Число (14 или 15) или значение &quot;Auto&quot; (Автоматически), указывающее версию API SharePoint для использования на этом сайте. Если значение не задано, используется версия API&#160;14. Если задано значение Auto, версия сервера будет по возможности определяться автоматически. В случае невозможности будет использоваться значение по умолчанию&#160;— 14. Для неанглоязычных сайтов SharePoint требуется по меньшей мере версия&#160;15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Возвращает таблицу, содержащую документы с сайта SharePoint.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую по одной строке для каждого документа, найденного на указанном сайте SharePoint (<code>url</code>) и во вложенных папках. Каждая строка представляет свойства файла или папки и ссылку на содержимое. Можно указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Число (14 или 15) или значение &quot;Auto&quot; (Автоматически), указывающее версию API SharePoint для использования на этом сайте. Если значение не задано, используется версия API&#160;14. Если задано значение Auto, версия сервера будет по возможности определяться автоматически. В случае невозможности будет использоваться значение по умолчанию&#160;— 14. Для неанглоязычных сайтов SharePoint требуется по меньшей мере версия&#160;15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Возвращает таблицу, включающую содержимое списка SharePoint.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую по одной строке для каждого элемента списка, найденного в указанном списке SharePoint (<code>url</code>). Каждая строка содержит свойства списка. Можно указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Число (14 или 15) или значение &quot;Auto&quot; (Автоматически), указывающее версию API SharePoint для использования на этом сайте. Если значение не задано, используется версия API&#160;14. Если задано значение Auto, версия сервера будет по возможности определяться автоматически. В случае невозможности будет использоваться значение по умолчанию&#160;— 14. Для неанглоязычных сайтов SharePoint требуется по меньшей мере версия&#160;15.</li>\r\n<li><code>Implementation</code> : Дополнительно. Указывает используемую версию соединителя SharePoint. Допустимые значения: &quot;2.0&quot; или NULL. Если значение&#160;— &quot;2.0&quot;, используется реализация соединителя SharePoint 2.0. Если значение равно NULL, используется исходная реализация соединителя SharePoint.</li>\r\n<li><code>ViewMode</code> : Дополнительно. Этот параметр допустим только для реализации 2.0. Допустимые значения: &quot;All&quot; и &quot;Default&quot;. Если значение не указано, задано значение &quot;All&quot;. Если указано значение &quot;All&quot;, представление включает все столбцы, созданные пользователем и определяемые системой. Если задано значение &quot;Default&quot;, представление будет совпадать с представлением, которое отображается пользователю при просмотре списка в Интернете в любом представлении, которое пользователь задал как представление по умолчанию в параметрах. Если пользователь изменяет представление по умолчанию, добавляя или удаляя созданные пользователем или определяемые системой столбцы или создавая новое представление и устанавливая его по умолчанию, эти изменения будут распространяться через соединитель.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Запрещает соединителю использовать отдельную конечную точку для столбцов заметок.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Возвращает таблицу с содержимым по указанному URL-адресу, отформатированным в соответствии с SODA 2.0 API.",
        "Documentation.LongDescription": "Возвращает таблицу с содержимым по указанному URL-адресу <code>url</code>, отформатированному согласно SODA 2.0 API. URL-адрес должен указывать на действительный SODA-совместимый источник, который заканчивается на расширение CSV.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Эту функцию можно использовать для вызова любой из конечных точек \"Lists\" SparkPost API v1. При вызовах API SparkPost с помощью этой функции не забывайте, что API SparkPost имеет строгое ограничение скорости. Если сервер SparkPost возвращает код состояния 429, значит, вы превысили ограничение скорости и нужно подождать немного, прежде чем выполнять другие вызовы.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу с одним столбцом, заполненным данными одной из конечных точек \"Lists\" SparkPost API v1 (сведения см. в документации SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Извлекайте встроенные таблицы, предоставленные соединителем SparkPost, с данными, агрегированными за указанное пользователем число дней. При обновлении этих таблиц или выполнении вызовов API SparkPost с помощью этого соединителя не забывайте, что API SparkPost имеет строгое ограничение скорости. Если сервер SparkPost возвращает код состояния 429, значит, вы превысили ограничение скорости и нужно подождать немного, прежде чем выполнять другие вызовы. При выборе значения для параметра \"Число дней\" обратите внимание, что API хранит данные только за последние шесть месяцев."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Возвращает таблицу баз данных на SQL Server.",
        "Documentation.LongDescription": "Возвращает таблицу баз данных на указанном сервере SQL Server, <code>server</code>. Можно указать необязательный параметр записи, <code>options</code>, для управления следующими параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Число, которое задает значение предложения запроса &quot;maxdop&quot; в созданном запросе SQL.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n<li><code>MultiSubnetFailover</code> : Логическое значение (True или False), которое задает значение свойства &quot;MultiSubnetFailover&quot; в строке подключения. Значение по умолчанию&#160;— False.</li>\r\n<li><code>UnsafeTypeConversions</code> : Логическое значение (true/false). Если оно равно true, то предпринимается попытка свернуть преобразования типа, способные завершиться сбоем и привести к сбою всего запроса. Не рекомендуется для общего применения.</li>\r\n<li><code>ContextInfo</code> : Двоичное значение, используемое для задания CONTEXT_INFO перед выполнением каждой команды.</li>\r\n<li><code>OmitSRID</code> : Логическое значение (true/false). Если оно равно true, то при создании данных стандарта Well-Known&#160;Text из типов geometry (&quot;геометрия&quot;) и geography (&quot;география&quot;) идентификатор SRID будет пропускаться.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логическое значение (ИСТИНА или ЛОЖЬ), которое при значении ИСТИНА разрешает свертывание запросов между базами данных на одном сервере. Значение по умолчанию неверно.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Выбор запуска запроса SQL на сервере не поддерживается. Для запуска запроса SQL следует использовать <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Вызывает Stripe API с возможностью ограничить число выполняемых вызовов API.",
        "Documentation.LongDescription": "Вызывает Stripe API по адресу https://api.stripe.com/v1/<code>method</code> с необязательной записью <code>query</code>, передаваемой в качестве дополнительных параметров, и необязательной записью <code>pageLimit</code> в качестве ограничения на количество запросов API. Сначала возвращаются самые новые данные. Если значение <code>pageLimit</code> не указано, возвращаются все данные. Используется версия Stripe 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает все данные о расходах.",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Таблица со всеми данными о расходах для текущей учетной записи Stripe"
          },
          {
            "Description": "Возвращает одну страницу данных о расходах.",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Таблица с последними данными о расходах для текущей учетной записи Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Помещает таблицу в буфер памяти, изолируя ее из внешних изменений во время оценки.",
        "Documentation.LongDescription": "Помещает таблицу в буфер памяти, изолируя ее от внешних изменений во время оценки.\r\n    Буферизация неполная. Она обеспечивает оценку всех скалярных значений ячеек, но оставляет нескалярные значения (записи, списки, таблицы и т. д.) как есть.\r\n    <br>\r\n    <br>\r\n    Обратите внимание, что использование этой функции может привести к ускорению выполнения запросов. В некоторых случаях выполнение запросов может замедлиться из-за добавленных \r\n затрат на чтение всех данных и их сохранение в памяти, а также из-за того, что буферизация предотвращает последующее свертывание. Если данные не нужно помещать в\r\n    буфер и вы хотите просто предотвратить последующее свертывание, воспользуйтесь <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Загрузка всех строк таблицы SQL в память, чтобы любые последующие операции больше не могли выполнять запросы к SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Возвращает таблицу, полученную в результате объединения списка таблиц.",
        "Documentation.LongDescription": "Возвращает таблицу, полученную в результате объединения списка таблиц, <code>tables</code>. Результирующая таблица будет иметь тип структуры строк, определяемой <code>columns</code> или объединением типов входных данных, если <code>columns</code> не указан.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Объединение трех таблиц.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Объединение трех таблиц с разными структурами.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Объединение двух таблиц и проекция на заданный тип.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Переносит заголовки столбцов в первую строку значений.",
        "Documentation.LongDescription": "Переносит заголовки столбцов (т. е. имена столбцов) в первую строку значений. Имена столбцов по умолчанию - \"Column1\", \"Column2\" и т. д.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Понижение уровня первой строки значений в таблице.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Удаляет повторяющиеся строки из таблицы.",
        "Documentation.LongDescription": "Удаляет повторяющиеся строки из таблицы.\r\n    Необязательный параметр <code>equationCriteria</code> указывает, какие столбцы таблицы тестируются на дублирование. Если <code>equationCriteria</code> не указан, тестируются все столбцы.<br>\r\n    <br>\r\n    Так как Power Query иногда выгружает некоторые операции в серверные источники данных (другое название — \"свертывание\"), а также иногда оптимизирует запросы путем \r\n    пропуска операций, которые не являются строго необходимыми, в общем случае не гарантируется, какой именно дубликат будет сохранен.\r\n    Например, нельзя предполагать, что первая строка с уникальным набором значений столбцов останется, а последующие строки в таблице будут удалены.\r\n    Чтобы обеспечить предсказуемое поведение удаления повторяющихся результатов, сначала буферизуйте таблицу с помощью команды <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Удаление повторяющихся строк из таблицы.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Удалить повторяющиеся строки из столбца [b] в таблице <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Создает таблицу из списка столбцов и указанных значений.",
        "Documentation.LongDescription": "Создает таблицу типа <code>columns</code> из списка <code>lists</code>, содержащего вложенные списки с именами столбцов и значениями.\r\n    Если некоторые столбцы имеют больше значений, чем другие, отсутствующие значения заполняются значением по умолчанию NULL, если столбец допускает значения NULL.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Получение таблицы из списка имен клиентов в списке. Каждое значение элемента списка клиентов становится значением строки, а каждый список становится столбцом.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Создать таблицу из заданного списка столбцов и списка имен столбцов.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Создание таблицы с другим числом столбцов на строку. Значением отсутствующей строки является Null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Преобразует список в таблицу путем применения заданной функции разбиения к каждому элементу в списке.",
        "Documentation.LongDescription": "Преобразует список <code>list</code> в таблицу путем применения необязательной функции разбиения <code>splitter</code> к каждому элементу в списке. По умолчанию считается, что список является списком текстовых значений, разделенных запятыми. Необязательный параметр <code>columns</code> может быть числом столбцов, списком столбцов или TableType. Также можно указать необязательные параметры <code>default</code> и <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Создание таблицы из списка с помощью стандартного разделителя.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Создание таблицы из списка с помощью настраиваемого разделителя.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Создание таблицы из списка с помощью разделителя Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Преобразует список записей в таблицу.",
        "Documentation.LongDescription": "Преобразует список записей <code>records</code> в таблицу.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Создать таблицу из записей с помощью имен полей записей в качестве имен столбцов.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Создать таблицу из записей с введенными столбцами и выбрать числовые столбцы.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Создает таблицу из списка значений строк. Дополнительно можно указать список столбцов.",
        "Documentation.LongDescription": "Создает таблицу из списка \"<code>rows</code>\", где каждый элемент списка — внутренний список, содержащий значения столбцов для одной строки. Дополнительно для \"<code>columns</code>\" можно указать необязательный список имен столбцов, тип таблицы или число столбцов.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Получение таблицы со столбцом [CustomerID] со значениями {1, 2}, столбцом [Name] со значениями {\"Bob\", \"Jim\"} и столбцом [Phone] со значениями {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Получение таблицы со столбцом [CustomerID] со значениями {1, 2}, столбцом [Name] со значениями {\"Bob\", \"Jim\"} и столбцом [Phone] со значениями {\"123-4567\", \"987-6543\"}, где [CustomerID] имеет числовой тип, а [Name] и [Phone] имеют текстовый тип.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Создает таблицу со столбцом из указанных значений.",
        "Documentation.LongDescription": "Создает таблицу со столбцом, содержащим предоставленное значение или список значений <code>value</code>. Можно указать необязательный параметр записи <code>options</code>, чтобы контролировать следующее:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : имя столбца, используемое при создании таблицы из списка или скалярного значения.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Создать таблицу из значения 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Создание таблицы из списка.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Создать из значения 1 таблицу с настраиваемым именем столбца.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Возвращает сведения о том, как секционирована таблица.",
        "Documentation.LongDescription": "Возвращает сведения о том, как секционирована таблица.  Возвращается таблица, в которой каждый столбец является столбцом секций исходной таблицы, а каждая строка соответствует секции исходной таблицы.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Возвращает профиль столбцов таблицы.",
        "Documentation.LongDescription": "<p>Возвращает профиль столбцов в <code>table</code>.</p>\r\n<p>Для каждого столбца возвращаются следующие сведения (когда это возможно):\r\n<ul>\r\n  <li>минимум</li>\r\n  <li>максимум</li>\r\n  <li>среднее</li>\r\n  <li>стандартное отклонение</li>\r\n  <li>счетчик</li>\r\n  <li>количество значений NULL</li>\r\n  <li>число различных объектов</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Назначает первую строку значений в качестве новых заголовков столбцов (например, имена столбцов).",
        "Documentation.LongDescription": "Назначает первую строку значений в качестве новых заголовков столбцов (т. е. имен столбцов). По умолчанию заголовками назначаются только текстовые или числовые значения. Допустимые параметры:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: если задано значение <code>true</code>, все скалярные значения в первой строке назначаются заголовками с использованием языка и региональных параметров (<code>Culture</code>), если они указаны (или текущего языкового стандарта документа).\r\n    Для значений, которые невозможно преобразовать в текст, будет использоваться имя столбца по умолчанию.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: имя языка и региональных параметров для данных.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Повышение уровня первой строки значений в таблице.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Назначение всех скалярных значений в первой строке таблицы заголовками.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Возвращает таблицу с пропущенным определенным количеством строк в начале.",
        "Documentation.LongDescription": "Возвращает таблицу, не содержащую указанное число первых строк (<code>countOrCondition</code>) в таблице <code>table</code>.\r\n    Количество удаленных строк зависит от необязательного параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Если <code>countOrCondition</code> не указано, удаляется только первая строка. </li>\r\n    <li> Если <code>countOrCondition</code> — число, удаляется соответствующее количество строк (с начала). </li>\r\n    <li> Если <code>countOrCondition</code> — условие, будут удалены строки, соответствующие условию, до первой строки, не соответствующей условию.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Удаление первой строки таблицы.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Удаление первых двух строк таблицы.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Удаление из таблицы первых строк, в которых [CustomerID] <= 2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Возвращает таблицу, из которой удалены N последних строк.",
        "Documentation.LongDescription": "Возвращает таблицу, не содержащую последние строки (<code>countOrCondition</code>) в таблице <code>table</code>.\r\n        Количество удаленных строк зависит от необязательного параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Если <code>countOrCondition</code> не указано, удаляется только последняя строка. </li>\r\n    <li> Если <code>countOrCondition</code> — число, удаляется соответствующее количество строк (с конца). </li>\r\n    <li> Если <code>countOrCondition</code> — условие, будут удалены строки, соответствующие условию, до первой строки, не соответствующей условию.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Удаление последней строки таблицы.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Удаление из таблицы последних строк, в которых [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Возвращает таблицу со строками, удаленными из входной таблицы и содержащими ошибку по крайней мере в одной из ячеек. Если указан список столбцов, на наличие ошибок проверяются только ячейки в указанных столбцах.",
        "Documentation.LongDescription": "Возвращает таблицу со строками, удаленными из входной таблицы и содержащими ошибку по крайней мере в одной из ячеек. Если указан список столбцов, на наличие ошибок проверяются только ячейки в указанных столбцах.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Удалить ошибочное значение из первой строки.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Возвращает таблицу со строками в обратном порядке.",
        "Documentation.LongDescription": "Возвращает таблицу со строками из входных данных <code>table</code> в обратном порядке.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Изменение порядка строк в таблице на противоположный.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Возвращает таблицу, содержащую описание столбцов (например, схему) указанной таблицы.",
        "Documentation.LongDescription": "<p>Возвращает таблицу с описанием столбцов <code>table</code>.</p>\r\n<p>Каждая строка в таблице описывает свойства столбца <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Имя столбца</b></td>\r\n    <td><b>Описание</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Имя столбца.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Отсчитываемое от 10 положение столбца в <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Имя типа столбца.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Вид типа столбца.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Определяет, может ли столбец содержать значения <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Основание системы счисления (например, основание 2, основание 10) полей <code>NumericPrecision</code> and <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Точность числового столбца по основанию, указанному в <code>NumericPrecisionBase</code>. Это максимальное число цифр, которое может быть представлено значением данного типа (включая цифры дробной части).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Масштаб числового столбца по основанию, указанному в <code>NumericPrecisionBase</code>. Это число цифр в дробной части значения данного типа. Значение <code>0</code> указывает на фиксированный масштаб без цифр дробной части. Значение <code>null</code> указывает, что масштаб неизвестен (из-за того, что он является плавающим или не задан).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Максимальное число цифр дробной части, поддерживаемое в той части значения даты и времени, которая отвечает за секунды.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Максимальное число знаков, разрешенное в столбце <code>text</code>, или максимальное число байтов, разрешенное в столбце <code>binary</code> column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Указывает, может ли столбец иметь переменную длину (вплоть до значения <code>MaxLength</code>) или его размер фиксирован.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Имя типа столбца в собственной системе типов источника (например, <code>nvarchar</code> для SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Выражение по умолчанию для значения этого столбца в собственном языке выражений источника (например, <code>42</code> или <code>newid()</code> для SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Описание столбца.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Возвращает таблицу, содержащую только те строки входной таблицы, которые содержат ошибку по крайней мере в одной из ячеек. Если указан список столбцов, на наличие ошибок проверяются только ячейки в указанных столбцах.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую только те строки входной таблицы, которые содержат ошибку по крайней мере в одной из ячеек. Если указан список столбцов, на наличие ошибок проверяются только ячейки в указанных столбцах.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Выбрать имена клиентов, в строках которых есть ошибки.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Возвращает таблицу с пропущенным определенным количеством строк в начале.",
        "Documentation.LongDescription": "Возвращает таблицу, не содержащую указанное число первых строк (<code>countOrCondition</code>) в таблице <code>table</code>.\r\n    Количество пропущенных строк зависит от необязательного параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Если <code>countOrCondition</code> не указано, пропускается только первая строка. </li>\r\n    <li> Если <code>countOrCondition</code> — число, пропускается соответствующее количество строк (с начала). </li>\r\n    <li> Если <code>countOrCondition</code> — условие, будут пропускаться строки, соответствующие условию, до первой строки, не соответствующей условию.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Пропуск первой строки таблицы.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Пропуск первых двух строк таблицы.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Пропуск первых строк таблицы, в которых [Price] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Запрещает выполнение последующих операций с исходным источником данных.",
        "Documentation.LongDescription": "Запрещает выполнение последующих операций с исходным источником данных в <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Извлекает данные из таблицы SQL, чтобы предотвратить выполнение последующих операций в качестве запроса на сервере SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Превращает столбцы в строки, а строки в столбцы.",
        "Documentation.LongDescription": "Превращает столбцы в строки, а строки в столбцы.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Превратить строки таблицы пар \"имя-значение\" в столбцы.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Получает связи между набором таблиц.",
        "Documentation.LongDescription": "Получает связи между набором таблиц. Предполагается, что набор \"<code>tables</code>\" должен иметь структуру, аналогичную таблице переходов. Столбец, указанный с помощью \"<code>dataColumn</code>\", содержит фактические таблицы данных.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL из базы данных Teradata.",
        "Documentation.LongDescription": "Возвращает список таблиц и представлений SQL из базы данных Teradata на сервере <code>server</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Аналитика временных рядов Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Введите число месяцев, за которые извлекаются исторические данные Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Возвращает таблицу с актуальными данными Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Возвращает таблицу, содержащую описание столбцов (схему) указанного типа таблиц.",
        "Documentation.LongDescription": "<p>Возвращает таблицу, описывающую столбцы <code>tableType</code>.</p>\r\n<p>Описание результирующей таблицы см. в документации по <code>Table.Schema</code>.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Веб-канал Azure DevOps Services",
        "Documentation.DisplayName": "Веб-канал Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Возвращает таблицу веб-каналов OData, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Подключиться к данным Viva Аналитики",
        "Documentation.LongDescription": "Импортируйте еженедельные метрики и данные атрибутов из Рабочей аналитики.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу с видимыми атрибутами и метриками за неделю для каждого оцениваемого сотрудника в секции.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Возвращает содержимое документа HTML, разбитого на составные структуры, а также представление полного документа и его текста после удаления тегов.",
        "Documentation.LongDescription": "Возвращает содержимое документа HTML, разбитого на составные структуры, а также представление полного документа и его текста после удаления тегов.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу с ключевыми метриками Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Вызывает конечную точку Webtrends KeyMetrics и возвращает все данные в виде таблицы.",
        "Documentation.Examples": [
          {
            "Description": "Запрашивает таблицу с ключевыми метриками для клиента 98765 за последние 30 дней",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Таблица с ключевыми метриками"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Введите идентификатор профиля, связанный с вашей учетной записью Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Возвращает таблицу с актуальными данными Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Подключиться к данным Viva Аналитики",
        "Documentation.LongDescription": "Импортируйте еженедельные метрики и данные атрибутов из Рабочей аналитики.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу с видимыми атрибутами и метриками за неделю для каждого оцениваемого сотрудника в секции.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Возвращает содержимое XML-документа в виде иерархической таблицы.",
        "Documentation.LongDescription": "Возвращает содержимое XML-документа в виде иерархической таблицы.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Возвращает содержимое XML-документа как вложенную коллекцию преобразованных в плоскую структуру таблиц.",
        "Documentation.LongDescription": "Возвращает содержимое XML-документа как вложенную коллекцию преобразованных в плоскую структуру таблиц.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Получение содержимого локального XML-файла.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес учетной записи Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Возвращает коллекцию схем для источника данных ADO.NET.",
        "Documentation.LongDescription": "Возвращает коллекцию схем для источника данных ADO.NET с именем поставщика <code>providerName</code> и строкой подключения <code>connectionString</code>. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть выражены текстом или числом. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (бета-версия)",
        "Documentation.Description": "Импорт данных из базы данных Amazon Redshift.",
        "Documentation.LongDescription": "Возвращает таблицу с перечислением таблиц на сервере <code>server</code> кластера Amazon Redshift в базе данных <code>database</code>. Необязательный параметр записи <code>options</code> можно указать для управления следующими параметрами:\r\n<ul>\r\n<li><code>Provider Name</code>: текстовое значение, используемое в качестве имени поставщика для подключения. Используется при использовании проверки подлинности Майкрософт.</li>\r\n<li><code>Batch Size</code>: количество строк, извлекаемых в одном вызове сервера.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Возвращает таблицу многомерных кубов или табличных моделей из базы данных служб Analysis Services.",
        "Documentation.LongDescription": "Возвращает таблицу многомерных кубов или табличных моделей из базы данных служб Analysis Services <code>database</code> на сервере <code>server</code>. Можно указать необязательный параметр записи <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>Query</code> : Собственный запрос многомерных выражений для извлечения данных.</li>\r\n<li><code>TypedMeasureColumns</code> : Логическое значение, указывающее, будут ли в качестве типов добавленных столбцов мер использоваться типы, указанные во многомерной или табличной модели. Если задано значение false, для всех столбцов мер будет использоваться тип &quot;number&quot;. Значение по умолчанию — false.</li>\r\n<li><code>Culture</code> : Имя языка и региональных параметров для данных. Это соответствует свойству строки подключения &quot;Код языка&quot;.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>SubQueries</code> : Число (0, 1 или 2), задающее значение свойства &quot;SubQueries&quot; в строке подключения. Оно управляет поведением вычисляемых членов в подзапросах выборки или вложенных кубах. (Значение по умолчанию&#160;— 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Возвращает таблицу со списком таблиц в указанном кластере Spark.",
        "Documentation.LongDescription": "Возвращает таблицу со списком таблиц в <code>узле</code> кластера Spark с помощью <code>протокола</code>. Допустимые протоколы:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу со списком таблиц в указанном кластере Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Введите название организации и проекта.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (только Boards)",
        "Documentation.LongDescription": "Возвращает таблицу представлений службы аналитики, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Импорт данных из HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nВозвращает список таблиц из HDInsight Interactive Query, указанный в <code>database</code> на сервере HDInsight Interactive Query <code>server</code>. Вы можете указать у сервера номер порта через двоеточие. Вы также можете указать необязательный параметр <code>options</code> для управления следующими параметрами.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: время ожидания до прекращения попытки подключиться к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n        <li><code>CommandTimeout</code>: максимальное время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию зависит от драйвера.</li>\r\n</ul>\r\nПараметр <code>options</code> задается в формате [параметр1 = значение1, параметр2 = значение2…]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Возвращает таблицу со столбцами, сопоставленными с атрибутами сущности в Common Data Model, включая типы данных.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Возвращает таблицу со столбцами, сопоставленными с атрибутами сущности в Common Data Model, включая типы данных. Будут добавлены несопоставленные столбцы из определения сущности, а прочие несопоставленные столбцы будут удалены.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Возвращает куб после применения к нему параметра.",
        "Documentation.LongDescription": "Возвращает куб после применения \"<code>parameter</code>\" с \"<code>arguments</code>\" к \"<code>cube</code>\".",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Изменяет степень гранулярности измерения контекста фильтра куба, сворачивая атрибуты, сопоставленные с указанными столбцами.",
        "Documentation.LongDescription": "Изменяет степень гранулярности измерения контекста фильтра <code>cube</code>, сворачивая атрибуты, сопоставленные с указанными столбцами <code>columnNames</code>. Столбцы также удаляются из табличного представления куба.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Заменяет набор измерений, возвращаемых Cube.Dimensions.",
        "Documentation.LongDescription": "Заменяет набор измерений, возвращаемых <code>Cube.Dimensions</code>.\r\n    Например, эту функцию можно использовать для добавления столбца идентификатора в атрибут измерения, чтобы источник данных можно было группировать по идентификатору, а не отображаемому значению.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Применяет список функций куба.",
        "Documentation.LongDescription": "Применяет список функций куба <code>transforms</code> к <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL, доступных в базе данных DB2.",
        "Documentation.LongDescription": "Возвращает таблицу таблиц и представлений SQL, доступных в базе данных DB2 на сервере <code>server</code> в экземпляре базы данных <code>database</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n<li><code>Implementation</code> : Указывает используемую реализацию поставщика внутренней базы данных. Допустимые значения: &quot;IBM&quot; и &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Номер CCSID (идентификатор набора кодированных знаков) для расшифровки двоичных данных DB2 FOR BIT в строки символов. Применяется к Implementation = &quot;Microsoft&quot;. Задайте значение 0, чтобы отключить преобразование (по умолчанию). Задайте значение 1, чтобы преобразовать на основе кодировки базы данных. Задайте другой номер CCSID, чтобы преобразовать в кодировку приложения.</li>\r\n<li><code>PackageCollection</code> : Указывает значение строки для коллекции пакетов (значение по умолчанию&#160;— &quot;NULLID&quot;), чтобы разрешить использование общих пакетов, необходимых для обработки инструкций SQL. Применяется к Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Указывает, выполняется ли подключение через шлюз DB2 Connect. Применяется для реализации &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2…] или [Query = \"select …\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Извлекает набор данных из Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Возвращает таблицу, содержащую свойства и контент больших двоичных объектов, обнаруженных в указанном контейнере из хранилища Azure.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую строку для каждого BLOB-файла, обнаруженного по URL-адресу контейнера, <code>account</code>, из хранилища Azure. Каждая строка содержит свойства файла и ссылку на его содержимое.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Возвращает таблицу, содержащую результаты запуска указанных селекторов каскадных таблиц стилей в указанном HTML-коде.",
        "Documentation.LongDescription": "Возвращает таблицу, содержащую результаты запуска указанных селекторов CSS с предоставленными <code>html</code>. Вы можете указать дополнительные свойства, используя необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу из образца текстового значения HTML.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Извлекает все ссылки href из примера HTML-текста.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Тест</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Возвращает список таблиц и представлений SQL, доступных в базе данных Informix.",
        "Documentation.LongDescription": "Возвращает список таблиц и представлений SQL, доступных в базе данных Informix на сервере <code>server</code> в экземпляре базы данных <code>database</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Возвращает таблицу с ведущими сведениями.",
        "Documentation.LongDescription": "Вызывает конечную точку Marketo REST API по адресу <code>url</code>/rest/v1/leads.json. Возвращаются все ведущие элементы в списке <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Извлекает сведения для трех ведущих элементов.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Таблица со сведениями для предоставленных ведущих элементов"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес конечной точки REST API Marketo, связанной с вашей учетной записью.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Возвращает таблицу с актуальными данными Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Возвращает таблицу таблиц, представлений и скалярных функций SQL, доступных в базе данных MySQL.",
        "Documentation.LongDescription": "Возвращает список таблиц, представлений и хранимых скалярных функций SQL, доступных в базе данных MySQL на сервере <code>server</code> в экземпляре базы данных <code>database</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами:\r\n    <ul>\r\n<li><code>Encoding</code> : Значение TextEncoding, задающее кодировку для всех запросов, отправляемых на сервер (значение по умолчанию&#160;— NULL).</li>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Логическое значение (True или False), которое указывает, задавать ли для столбцов tinyint на сервере логические значения. Значение по умолчанию&#160;— True.</li>\r\n<li><code>OldGuids</code> : Логическое значение (True или False), которое указывает, будут ли столбцы char(36) (если False) или столбцы binary(16) (если True), учитываться как GUID. Значение по умолчанию&#160;— False.</li>\r\n<li><code>ReturnSingleDatabase</code> : Логическое значение (True или False), которое указывает, следует ли возвращать все таблицы в базах данных (False) или возвращать таблицы и представления указанной базы данных (True). Значение по умолчанию&#160;— False.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Импорт данных из базы данных IBM Netezza.",
        "Documentation.LongDescription": "\r\nВозвращает таблицу со списком таблиц, представлений и хранимых функций из базы данных Netezza Server <code>database</code> на сервере <code>server</code>. Для сервера можно указать номер порта через двоеточие. Для управления следующими параметрами можно указать параметр записи <code>options</code>:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: логическое значение (true или false), указывающее, следует ли создавать свойства навигации для возвращаемых значений (по умолчанию — true).</li>\r\n        <li><code>HierarchicalNavigation</code>: логическое значение (true или false), указывающее, следует ли группировать таблицы по именам схем (по умолчанию — false).</li>\r\n        <li><code>ConnectionTimeout</code>: длительность ожидания при попытке подключения к серверу, при превышении которой попытка подключения будет прервана. Значение по умолчанию зависит от драйвера.</li>\r\n        <li><code>CommandTimeout</code>: длительность выполнения запроса на стороне сервера до его отмены. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>NormalizeDatabaseName</code>: логическое значение (true или false), указывающее, следует ли нормализовать имя базы данных к верхнему регистру или использовать его как есть (по умолчанию — true).</li>\r\n</ul>\r\nПараметр записи задается в формате [параметр1 = значение1, параметр2 = значение2...].",
        "Documentation.Examples": [
          {
            "Description": "Перечисление таблиц в проекте IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Возвращает результат запуска собственного запроса в источнике данных ODBC.",
        "Documentation.LongDescription": "Возвращает результат запуска <code>query</code> со строкой подключения <code>connectionString</code> с помощью ODBC. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть текстом или числом. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию&#160;— 15&#160;секунд.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Возврат результата выполнения простого запроса к указанной строке подключения.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Возвращает результат запуска собственного запроса в источнике данных OLE DB.",
        "Documentation.LongDescription": "Возвращает результат запуска <code>query</code> со строкой подключения <code>connectionString</code> с помощью OLE DB. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть текстом или числом. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL, доступных в базе данных PostgreSQL.",
        "Documentation.LongDescription": "Возвращает список таблиц и представлений SQL, доступных в базе данных PostgreSQL на сервере <code>server</code> в экземпляре базы данных <code>database</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Импорт данных из хранилища вычислений Snowflake.",
        "Documentation.LongDescription": "Возвращает таблицу со списком таблиц в <code>хранилище</code> вычислительных ресурсов Snowflake, расположенном на <code>сервере</code>. Необязательный параметр записи <code>options</code> можно указать для управления следующими параметрами:\r\n<ul>\r\n<li><code>Role</code> — текстовое значения для использования в качестве имени роли для подключения.</li>\r\n<li><code>CreateNavigationProperties</code> — логическое значение (true/false), указывающее, следует ли создавать свойства навигации по возвращенным значениям (значение по умолчанию — true)</li>\r\n<li><code>ConnectionTimeout</code> — число секунд ожидания ответа по сети от Snowflake.</li>\r\n<li><code>CommandTimeout</code> — число секунд ожидания выполнения запроса.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Перечисление таблиц в хранилище Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Возвращает таблицу со списком таблиц в указанном кластере Spark.",
        "Documentation.LongDescription": "Возвращает таблицу со списком таблиц в <code>узле</code> кластера Spark с помощью <code>протокола</code>. Допустимые протоколы:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Список таблиц в экземпляре Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Возвращает таблицу таблиц, представлений и хранимых функций SQL из базы данных SQL Server.",
        "Documentation.LongDescription": "Возвращает список таблиц, представлений и хранимых функций SQL из базы данных SQL Server <code>database</code> на сервере <code>server</code>. Дополнительно к имени сервера через двоеточие или запятую может быть указан порт. Можно указать необязательный параметр записи <code>options</code> для управления следующими параметрами.\r\n    <ul>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Число, которое задает значение предложения запроса &quot;maxdop&quot; в созданном запросе SQL.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n<li><code>MultiSubnetFailover</code> : Логическое значение (True или False), которое задает значение свойства &quot;MultiSubnetFailover&quot; в строке подключения. Значение по умолчанию&#160;— False.</li>\r\n<li><code>UnsafeTypeConversions</code> : Логическое значение (true/false). Если оно равно true, то предпринимается попытка свернуть преобразования типа, способные завершиться сбоем и привести к сбою всего запроса. Не рекомендуется для общего применения.</li>\r\n<li><code>ContextInfo</code> : Двоичное значение, используемое для задания CONTEXT_INFO перед выполнением каждой команды.</li>\r\n<li><code>OmitSRID</code> : Логическое значение (true/false). Если оно равно true, то при создании данных стандарта Well-Known&#160;Text из типов geometry (&quot;геометрия&quot;) и geography (&quot;география&quot;) идентификатор SRID будет пропускаться.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логическое значение (ИСТИНА или ЛОЖЬ), которое при значении ИСТИНА разрешает свертывание запросов между базами данных на одном сервере. Значение по умолчанию неверно.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Возвращает таблицу таблиц и представлений SQL, доступных в базе данных Sybase.",
        "Documentation.LongDescription": "Возвращает список таблиц, доступных в базе данных Sybase на сервере <code>server</code> в экземпляре базы данных <code>database</code>. Дополнительно к имени сервера через двоеточие может быть указан порт. Необязательный параметр записи <code>options</code> может быть указан для управления следующими параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (True или False), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— True.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функция, которая используется для создания имен свойств навигации.</li>\r\n<li><code>Query</code> : Собственный запрос SQL для извлечения данных. Если он создает несколько результирующих наборов, возвращается только первый из них.</li>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>ConnectionTimeout</code> : Время ожидания до отмены попытки подключения к серверу. Значение по умолчанию зависит от драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n</ul>\r\n\r\n    Пример параметра записи: [option1 = value1, option2 = value2...] или [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Добавляет столбец с явно указанными значениями позиции.",
        "Documentation.LongDescription": "Добавляет столбец с именем <code>newColumnName</code> в <code>table</code> с явно указанными значениями позиции.\r\n    Необязательное значение <code>initialValue</code>, начальное значение индекса. Необязательное значение <code>increment</code> определяет, на какую величину увеличивается каждое значение индекса.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Добавление столбца индекса с именем Index в таблицу.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Добавление столбца индекса с именем index с начальным значением 10 и шагом 5 в таблицу.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Получив исходный столбец списков в таблице, создать копию строки для каждого значения в списке.",
        "Documentation.LongDescription": "Получив <code>table</code>, где <code>column</code> - список значений, разделить список построчно для каждого значения. Значения в других столбцах повторяются в каждой вновь созданной строке.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Разделение столбца списка [Name] в таблице.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Распространяет значение предыдущей ячейки в ячейки со значениями NULL ниже в столбце.",
        "Documentation.LongDescription": "Возвращает таблицу из указанного <code>table</code>, где значение предыдущей ячейки распространяется на ячейки со значением NULL ниже в указанном <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Получение таблицы со значениями NULL в столбце [Place], заполненном значениями, расположенными над ними в таблице.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Распространяет значение ячейки в ячейки со значениями NULL выше в столбце.",
        "Documentation.LongDescription": "Возвращает таблицу из указанного <code>table</code>, где значение следующей ячейки распространяется на ячейки со значением NULL выше в указанном <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Получение таблицы со значениями NULL в столбце [Column2], заполненном значениями, расположенными под ними в таблице.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Возвращает все строки в таблице, содержащие заданный текст.",
        "Documentation.LongDescription": "Возвращает строки из таблицы <code>table</code> с текстом <code>text</code>. Если текст не найден, то возвращается пустая таблица.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение в таблице строк, содержащих Bob.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Возвращает указанное количество строк от начала.",
        "Documentation.LongDescription": "Возвращает первые строки таблицы <code>table</code> в зависимости от значения <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Если <code>countOrCondition</code> является числом, то указывает, сколько строк возвращается (начиная с верхней). </li>\r\n    <li> Если <code>countOrCondition</code> является условием, то строки возвращаются до тех пор, пока не будет достигнута строка, не удовлетворяющая условию.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение первых двух строк таблицы.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Нахождение первых строк, в которых [a] > 0, в таблице.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Возвращает таблицу, которая является результатом объединения набора секционированных таблиц.",
        "Documentation.LongDescription": "Возвращает таблицу, являющуюся результатом комбинирования набора разделенных таблиц <code>partitions</code>. <code>partitionColumn</code> представляет собой имя добавляемого столбца. По умолчанию используется тип столбца <code>any</code>, однако он может быть указан в <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Найти тип элемента в списке <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Возвращает указанное количество строк с конца.",
        "Documentation.LongDescription": "Возвращает последние строки таблицы <code>table</code> в зависимости от значения <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Если <code>countOrCondition</code> является числом, то будет возвращено соответствующее количество строк, начиная с позиции (последняя - <code>countOrCondition</code>). </li>\r\n    <li> Если <code>countOrCondition</code> является условием, то строки возвращаются в порядке возрастания до тех пор, пока не будет встречена строка, не соответствующая условию.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение последних двух строк таблицы.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Нахождение последних строк, в которых [a] > 0, в таблице.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Возвращает таблицу, где для всех столбцов задан определенный текст в качестве префикса.",
        "Documentation.LongDescription": "Возвращает таблицу, где все имена столбцов из предоставленной \"<code>table</code>\" имеют в качестве префикса заданный текст (<code>prefix</code>), а также точку в формате <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Задание префикса MyTable для столбцов в таблице.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Возвращает строки, начиная с заданного смещения.",
        "Documentation.LongDescription": "Возвращает строки из <code>table</code>, начиная с указанного <code>offset</code>. Необязательный параметр <code>count</code> указывает, сколько строк необходимо получить. По умолчанию возвращаются все строки после смещения.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Получение всех строк в таблице, начиная со смещения 1.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Получение одной строки в таблице, начиная со смещения 1.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Удаляет указанные столбцы.",
        "Documentation.LongDescription": "Удаляет указанный <code>columns</code> из предоставленной <code>table</code>.\r\n    Когда указанный столбец не существует, возникает ошибка, если необязательным параметром <code>missingField</code> не задано альтернативное поведение (например, <code>MissingField.UseNull</code> или <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Удаление столбца [Phone] из таблицы.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Попробуйте удалить несуществующий столбец из таблицы.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Удаляет все вхождения указанных строк из таблицы.",
        "Documentation.LongDescription": "Удаляет все вхождения указанных <code>rows</code> из <code>table</code>.\r\n    Для управления сравнением строк таблицы может быть указан необязательный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Удалить все строки, где [a = 1], из таблицы <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Удаляет указанное количество строк.",
        "Documentation.LongDescription": "Удаляет <code>count</code> строк от начала <code>table</code>, начиная с указанной <code>offset</code>. Если параметр <code>count</code> не предоставлен, используется значение по умолчанию 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Удаление первой строки из таблицы.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Удаление из таблицы строки в позиции 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Удаление двух строк из таблицы, начиная с позиции 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Применяет переименование в форме {old, new}.",
        "Documentation.LongDescription": "Выполняет заданное переименовывание столбцов в таблице <code>table</code>. В операции замены <code>renames</code> применяется список пар значений - старое имя столбца и новое имя столбца.\r\n    Если столбец не существует, возникает исключение, если необязательным параметром <code>missingField</code> не задана альтернатива (например, <code>MissingField.UseNull</code> или <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Замена имени столбца CustomerNum на CustomerID в таблице.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Замена имени столбца CustomerNum на CustomerID, а имя PhoneNum на Phone в таблице.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Замена имени столбца NewCol на NewColumn в таблице и пропуск замены, если столбца не существует.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Возвращает таблицу со столбцами в указанном порядке.",
        "Documentation.LongDescription": "Возвращает таблицу из входных данных <code>table</code> со столбцами в порядке, указанном в <code>columnOrder</code>. Порядок столбцов, не включенных в список, не будет изменен.\r\n     Для несуществующего столбца возникает исключение, если необязательный параметр <code>missingField</code> не указывает дополнительное действие (например, <code>MissingField.UseNull</code> или <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Смена местами столбцов [Phone] и [Name] в таблице.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Смена местами столбцов [Phone] и [Address] или использование MissingField.Ignore в таблице. Таблица не будет изменена, поскольку столбца [Address] не существует.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Повторяет строки таблиц указанное число раз.",
        "Documentation.LongDescription": "Возвращает таблицу со строками из входа <code>table</code>, повторенными указанное число раз, <code>count</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Повтор строк в таблице дважды.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Заменяет значения ошибок в указанных столбцах соответствующими указанными значениями.",
        "Documentation.LongDescription": "Заменяет значения ошибок в указанных столбцах <code>table</code> новыми значениями в списке <code>errorReplacement</code>. Формат списка имеет вид {{столбец1, значение1}, …}. Для каждого столбца может быть только одно замещающее значение; если указать столбец несколько раз, возникнет ошибка.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замена в таблице значения ошибки текстом world.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Замена в таблице значения ошибки в столбце A текстом hello, а в столбце B — текстом world.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Заменяет ключи указанной таблицы.",
        "Documentation.LongDescription": "Заменяет ключи указанной таблицы.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замена существующих ключей таблицы.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Заменяет все указанные строки предоставленными строками.",
        "Documentation.LongDescription": "Заменяет все указанные строки в <code>table</code> предоставленными строками. Строки, которые необходимо заменить, и сами замены определяются в <code>replacements</code> с использованием формата {old, new}.\r\n    Для управления сравнением строк таблицы может быть указан необязательный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Замена в таблице строк [a = 1, b = 2] и [a = 2, b = 3] на [a = -1, b = -2], [a = -2, b = -3].",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Возвращает таблицу, содержащую только определенные столбцы.",
        "Documentation.LongDescription": "Возвращает <code>table</code> только с указанными <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: предоставленная таблица.</li>\r\n       <li><code>columns</code>: список столбцов из таблицы <code>table</code>, которые должны быть возвращены. Столбцы в возвращаемой таблице содержатся в порядке, указанном параметром <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(необязательно)</i> что делать, если столбец не существует.  Пример: <code>MissingField.UseNull</code> или <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Включить только столбец [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Включить только столбцы [CustomerID] и [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Если включенный столбец не существует, результат по умолчанию будет ошибкой.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Если включенный столбец не существует, параметр <code>MissingField.UseNull</code> создаст столбец с значениями NULL.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Выбирает строки, удовлетворяющие функции условия.",
        "Documentation.LongDescription": "Возвращает таблицу строк из <code>table</code>, согласующуюся с выбором <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Выбрать строки в таблице со значениями в столбце [CustomerID] больше 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Выбрать строки таблицы, в которых имена не содержат \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Сортирует таблицу по одному или нескольким именам столбцов и условиям сравнения.",
        "Documentation.LongDescription": "Сортирует <code>table</code>, используя список из одного или нескольких имен столбцов и необязательного параметра <code>comparisonCriteria</code> в форме { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Сортировка таблицы по столбцу OrderID.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Сортировка таблицы по столбцу OrderID в порядке убывания.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Сортировка таблицы по столбцу CustomerID, затем по столбцу OrderID, при этом по CustomerID — в порядке возрастания.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Преобразует имена столбцов с помощью предоставленной функции.",
        "Documentation.LongDescription": "Преобразует имена столбцов с помощью предоставленной функции <code>nameGenerator</code>. Допустимые параметры:\r\n    <div>\r\n      <code>MaxLength</code> — максимальная длина имен новых столбцов. Если функция создает более длинное имя, оно будет усечено.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> — используется для управления сравнением при создании имен столбцов. Функции сравнения можно использовать для сравнений, не учитывающих регистр или учитывающих языковой стандарт и региональные параметры.\r\n    </div>\r\n    <div>\r\n      В языке формул доступны следующие встроенные функции сравнения:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code> — используется для точного сравнения по порядковому номеру</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code> — используется для точного сравнения по порядковому номеру без учета регистра</li>\r\n      <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Удаление символа <code>#(tab)</code> из имен столбцов",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Преобразование имен столбцов для создания имен длиной 6 символов без учета регистра.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Применяет преобразование типа формы { column, type }, используя конкретный язык и региональные параметры.",
        "Documentation.LongDescription": "Возвращает таблицу из входных данных <code>table</code>, применяя операцию преобразования к столбцам, указанным в параметре <code>typeTransformations</code> (с форматом { column name, type name}), используя язык и региональные параметры, указанные в необязательном параметре <code>culture</code> (например, \"ru-RU\").\r\n    Если столбец не существует, возникает исключение.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать числовые значения в столбце [a] в текстовые значения из таблицы <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Преобразует значения в одном или нескольких столбцах.",
        "Documentation.LongDescription": "Преобразует <code>table</code> путем применения каждой операции столбца, указанной в <code>transformOperations</code> (в формате { имя столбца, преобразование } или { имя столбца, преобразование, новый тип столбца }).\r\n    Если указан <code>defaultTransformation</code>, он будет применен ко всем столбцам, не указанным в <code>transformOperations</code>.\r\n    Если столбец, указанный в <code>transformOperations</code>, не существует, генерируетсяч исключение, кроме случаев, когда необязательный параметр <code>missingField</code> не указывает иное (например, <code>MissingField.UseNull</code> или <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Преобразуйте текстовые значения из столбца [A] в числовое значение, а числовые значения из столбца [B] в текстовые.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Преобразуйте числовые значения в отсутствующем столбце [X] в текстовые значения, пропуская несуществующие столбцы.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Преобразуйте числовые значения в отсутствующем столбце [X] в текстовые значения, по умолчанию используя значение NULL для несуществующих столбцов.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Увеличьте числовые значения в столбце [B] и преобразуйте их в текстовые значения, а все остальные столбцы преобразуйте в числа.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Создает или расширяет таблицу, используя определенные пользователем обработчики операций запросов и действий.",
        "Documentation.LongDescription": "<p>Возвращает представление <code>table</code>, применяемые к которому операции действуют не по умолчанию, а используя функции-обработчики, указанные в <code>handlers</code>.</p>\r\n<p>В случае указания <code>table</code> задавать какие-либо функции-обработчики не обязательно. Если же не указывать <code>table</code>, обязательно необходимы функции-обработчики <code>GetType</code> и <code>GetRows</code>. Если не указать для операции функцию-обработчик, вместо нее операция (если это не <code>GetExpression</code>) применяет к <code>table</code> свои действия по умолчанию.</p>\r\n<p>Функции-обработчики должны возвращать значение, семантически эквивалентное результату применения операции к <code>table</code> (или к результирующему представлению для <code>GetExpression</code>).</p>\r\n<p>Если функция-обработчик выдает ошибку, к представлению применяются действия операции по умолчанию.</p>\r\n<p><code>Table.View</code> позволяет реализовать для источника данных свертывание — перевод запросов M в запросы конкретного источника (например, создание инструкций T-SQL из запросов M).</p>\r\n<p>Более полное описание <code>Table.View</code> см. в опубликованной документации по настраиваемым соединителям Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Создайте базовое представление, которое не требует доступа к строкам для определения типа или количества строк.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Введите название организации и проекта.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (только Boards)",
        "Documentation.LongDescription": "Возвращает таблицу представлений службы аналитики, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Импорт данных из Vertica",
        "Documentation.LongDescription": "Возвращает таблицу схем, доступных на сервере, имя которого указано в параметре <code>server</code>, из базы данных с именем в параметре <code>database</code>.\r\nЧтобы указать дополнительные свойства, можно использовать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: время ожидания, прежде чем попытки подключиться к серверу будут прекращены. Значение по умолчанию зависит от драйвера.</li>\r\n    <li><code>CommandTimeout </code>: время, как долго может выполняться запрос на стороне сервера, пока он не будет отменен. Значение по умолчанию зависит от драйвера.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Перечисление таблиц в Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу с содержимым отчетов из Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Вызывает указанную конечную точку отчетов Webtrends и возвращает все данные в виде таблицы.",
        "Documentation.Examples": [
          {
            "Description": "Вызывает конечную точку отчетов посетителей Webtrends для получения данных за последние 30 дней",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Таблица данных посетителей"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Возвращает список доменов Active Directory в том же лесу, что и указанный домен, или из домена текущего компьютера, если значение не указано.",
        "Documentation.LongDescription": "Возвращает список доменов Active Directory в том же лесу, что и указанный домен, или из домена текущего компьютера, если значение не указано.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Возвращает результат запуска встроенного запроса к источнику данных ADO.NET.",
        "Documentation.LongDescription": "Возвращает результат запуска <code>query</code> со строкой подключения <code>connectionString</code> с помощью поставщика ADO.NET <code>providerName</code>. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть текстовыми или числовыми. Для указания дополнительных свойств можно предоставить необязательный параметр записи, <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Допустимое время выполнения запроса на стороне сервера до его отмены. Значение по умолчанию&#160;— 10&#160;минут.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Логическое значение (True или False), которое определяет, следует ли создавать параметры строки подключения, совместимые с SQL Server, для проверки подлинности Windows. Значение по умолчанию&#160;— True.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Возвращает наборы отчетов в Adobe Analytics.",
        "Documentation.LongDescription": "Возвращает таблицу многомерных пакетов из Adobe Analytics. Может быть указан необязательный параметр записи <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Логическое значение (True или False), которое указывает, следует ли просматривать таблицы, сгруппированные по именам схем. Значение по умолчанию&#160;— False.</li>\r\n<li><code>MaxRetryCount</code> : Число повторных попыток при опросе результатов запроса. Значение по умолчанию&#160;— 120.</li>\r\n<li><code>RetryInterval</code> : Период времени между повторными попытками. Значение по умолчанию&#160;— 1&#160;секунда.</li>\r\n<li><code>Implementation</code> : Указывает версию API Adobe Analytics. Допустимые значения: &quot;2.0&quot;. По умолчанию используется API версии 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Импорт данных из Hive LLAP",
        "Documentation.LongDescription": "\r\nВозвращает список таблиц Hive LLAP из базы данных <code>database</code> на сервере Hive LLAP <code>server</code> с использованием выбранного протокола <code>protocol</code>. После имени сервера можно указать номер порта, отделив его двоеточием. Транспортный протокол Thrift представляет собой перечисляемый тип со значениями \"Standard\" и \"HTTP\". Вы можете указать дополнительный параметр <code>options</code> для управления следующими параметрами.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: время ожидания при попытке подключения к серверу, по прошествии которого попытка отменяется. Значение по умолчанию зависит от драйвера.</li>\r\n        <li><code>CommandTimeout</code>: допустимая длительность выполнения запроса на стороне сервера до его отмены. Значение по умолчанию зависит от драйвера.</li>\r\n</ul>\r\nПараметр <code>options</code> задается в формате [параметр1 = значение1, параметр2 = значение2 и т. д.]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок между датами 01.05.2017 и 15.06.2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция вернет данные сводок с 01.05.2017 по 15.06.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок за апрель 2017 г.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция вернет данные с 01.04.2017 по 30.04.2017"
          },
          {
            "Description": "Предположив, что сегодня 15.06.2017, получить данные сводок с апреля 2017 г. по настоящее время.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция вернет данные с 01.04.2017 по 15.06.2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Управление затратами Azure",
        "Documentation.Description": "Управление затратами Azure",
        "Documentation.DisplayName": "Управление затратами Azure",
        "Documentation.LongDescription": "Управление затратами Azure",
        "Documentation.Name": "Управление затратами Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Введите название организации и проекта.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Возвращает таблицу веб-каналов OData, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Подключение к экземпляру Dataverse (Dynamics 365 и PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Совмещает указанную таблицу измерения в контексте фильтра куба и изменяет степень гранулярности измерения контекста фильтра, расширяя указанный набор атрибутов измерения.",
        "Documentation.LongDescription": "Совмещает указанную таблицу измерения <code>dimensionSelector</code> в контексте фильтра куба <code>cube</code> и изменяет степень гранулярности измерения контекста фильтра, расширяя указанный набор атрибутов измерения <code>attributeNames</code>. Атрибуты измерения добавляются в табличное представление со столбцами <code>newColumnNames</code> или <code>attributeNames</code>, если это значение не задано.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Добавляет столбец к кубу, который содержит результаты меры, примененной в контексте каждой строки.",
        "Documentation.LongDescription": "Добавляет столбец с именем <code>column</code> к <code>cube</code>, который содержит результаты меры <code>measureSelector</code>, примененной в контексте каждой строки. На применение меры оказывают влияние изменения в степени гранулярности измерения и параметры срезов. Значения меры будут поправлены после выполнения некоторых операций куба.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Вход в вашу среду Dynamics 365 Business Central и в вашу организацию.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Вход в вашу среду Dynamics 365 Business Central и в вашу организацию.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Вход в вашу среду Dynamics 365 Business Central и в вашу организацию.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Вход в вашу среду Dynamics 365 Business Central и в вашу организацию.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Возвращает таблицу с нужными данными Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Возвращает содержимое текущей книги Excel.",
        "Documentation.LongDescription": "Возвращает содержимое текущей книги Excel. Возвращает таблицы, именованные диапазоны и динамические массивы. Не возвращает листы, в отличие от <code>Excel.Workbook</code>.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Возвращает содержание из учетной записи Microsoft Exchange.",
        "Documentation.LongDescription": "Возвращает содержание из учетной записи \"<code>mailboxAddress</code>\" Microsoft Exchange. Если \"<code>mailboxAddress</code>\" не указана, будет использоваться учетная запись по умолчанию для учетных данных.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Хранилище",
        "Documentation.Caption": "Хранилище",
        "Documentation.Description": "Импортирует данные из хранилища",
        "Documentation.LongDescription": "Импортирует данные из хранилища"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Возвращает учетные данные Google Analytics.",
        "Documentation.LongDescription": "Возвращает учетные данные Google Analytics, доступные с текущими учетными данными.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Импорт данных из базы данных Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Возвращает таблицу доступных проектов в Google BigQuery. Возможно указание необязательного параметра записи <code>options</code> для управления следующими свойствами:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>. Длительность ожидания, прежде чем попытка подключения к серверу будет отменена. По умолчанию используется значение времени ожидания подключения ODBC.</li>\r\n        <li><code>CommandTimeout</code>. Указывает, как долго может выполняться запрос на стороне сервера, прежде чем он будет отменен.</li>\r\n        <li><code>BillingProject</code>. Идентификатор проекта выставления счетов. Значение по умолчанию — первый из доступных проектов.</li>\r\n        <li><code>UseStorageApi</code>. Указывает, использовать ли BigQuery Storage API для больших результирующих наборов. Значение по умолчанию — true (т.е. использовать). Чтобы не использовать Storage API, задайте значение false.</li>\r\n      </ul>\r\n    Параметр записи указывается в формате [свойство1 = значение1, свойство2 = значение2…].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Перечисление доступных проектов в Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Импорт данных из Lakehouse",
        "Documentation.Description": "Импорт данных из Lakehouse",
        "Documentation.LongDescription": "Подключитесь ко всем Lakehouses, к которым у вас есть доступ, и выберите объекты для использования"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу с ключевыми данными MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Возвращает таблицу с ключевыми данными MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу с ключевыми данными MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Таблица с ключевыми данными MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Возвращает таблицу с ведущими действиями.",
        "Documentation.LongDescription": "Вызывает конечную точку Marketo REST API по ссылке <code>url</code>/rest/v1/activities.json. Возвращаются все действия в списке <code>activityIds</code>, которые происходили с <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Извлекает таблицу действий \"Посетить веб-страницу\" с 1 ноября 2015 г.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Таблица со сведениями о всех действиях \"Посетить веб-страницу\" с 1 ноября"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Потоки данных Power BI (устаревшая версия)",
        "Documentation.Caption": "Импорт данных из потока данных Power BI",
        "Documentation.LongDescription": "Подключайтесь ко всем доступным вам потокам данных Power BI и выбирайте сущности, которые хотите использовать."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Киоски данных",
        "Documentation.Caption": "Киоски данных",
        "Documentation.Description": "Импорт данных из киосков данных",
        "Documentation.LongDescription": "Импорт данных из киосков данных"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Потоки данных",
        "Documentation.Caption": "Импорт данных из потока данных",
        "Documentation.Description": "Импорт данных из потока данных",
        "Documentation.LongDescription": "Подключайтесь ко всем доступным потокам данных и выбирайте нужные сущности."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Импорт данных из QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Возвращает перечень доступных таблиц в QuickBooks Online. Вы можете ввести необязательный параметр записи <code>options</code> для указания следующих параметров.\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: время ожидания перед прекращением попытки подключения к серверу.</li>\r\n            <li><code>CommandTimeout</code>: допустимое время выполнения запроса на сервере, прежде чем он будет отменен.</li>\r\n          </ul>\r\n        Параметр записи указывается в виде [параметр1 = значение1, параметр2 = значение2…].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Возвращает объекты из учетной записи Salesforce.",
        "Documentation.LongDescription": "Возвращает объекты из указанной в учетных данных учетной записи Salesforce. Учетная запись будет подключена с помощью заданного окружения <code>loginUrl</code>. Если оно не указано, учетная запись подключится к рабочей среде (https://login.salesforce.com). Чтобы задать дополнительные свойства, можно указать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логическое значение (true или false), которое указывает, следует ли создавать свойства навигации в возвращаемых значениях. Значение по умолчанию&#160;— false.</li>\r\n<li><code>ApiVersion</code> : Версия API Salesforce для этого запроса. По умолчанию используется версия API&#160;29.0.</li>\r\n<li><code>Timeout</code> : Время ожидания до отмены запроса к серверу. Значение по умолчанию зависит от источника.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Возвращает отчеты из учетной записи Salesforce.",
        "Documentation.LongDescription": "Возвращает отчеты из указанной в учетных данных учетной записи Salesforce. Учетная запись будет подключена с помощью заданного окружения <code>loginUrl</code>. Если оно не указано, учетная запись подключится к рабочей среде (https://login.salesforce.com). Чтобы задать дополнительные свойства, можно указать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Версия API Salesforce для этого запроса. По умолчанию используется версия API&#160;29.0.</li>\r\n<li><code>Timeout</code> : Время ожидания до отмены запроса к серверу. Значение по умолчанию зависит от источника.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Возвращает инфокубы и запросы в системе SAP Business Warehouse, сгруппированные по инфообласти.",
        "Documentation.LongDescription": "Возвращает таблицу инфокубов и запросов, сгруппированных по инфообласти, из экземпляра SAP Business Warehouse на сервере <code>server</code> с номером системы <code>systemNumberOrSystemId</code> и идентификатором клиента <code>clientId</code>. Необязательный параметр записи <code>optionsOrLogonGroup</code> может быть указан для управления следующими параметрами:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу листов, отчетов, папок и рабочих областей из API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Возвращает вложенную таблицу доступных листов, отчетов, папок и рабочих областей из API Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает листы, папки, отчеты и рабочие области, доступные на верхнем уровне иерархии Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Таблица папок, отчетов и рабочих областей с верхнего уровня иерархии Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу доступных метрик из API SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Эту функцию можно использовать для извлечения данных из конкретной конечной точки \"Metrics\" SparkPost API v1. При обновлении этих таблиц или выполнении вызовов API SparkPost с помощью этого соединителя не забывайте, что API SparkPost имеет строгое ограничение скорости. Если сервер SparkPost возвращает код состояния 429, значит, вы превысили ограничение скорости и нужно подождать немного, прежде чем выполнять другие вызовы. При выборе значения для параметра \"Число дней\" обратите внимание, что API хранит данные только за последние шесть месяцев.",
        "Documentation.Examples": [
          {
            "Description": "Извлекает метрики поддержки доставки count_sent и count_rejected для всех идентификаторов campaign_id, агрегированных за последние три дня. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "таблица"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Вызывает Stripe API.",
        "Documentation.LongDescription": "Вызывает Stripe API по адресу https://api.stripe.com/v1/<code>method</code> с записью <code>additionalParameters</code>, передаваемой в качестве дополнительных параметров, и перечисляет <code>ColumnNames</code> ожидаемых имен столбцов. Используется версия Stripe Version 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Возвращает таблицу с событиями, созданными после 1 ноября 2015 г.",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Таблица с указанными событиями для текущей учетной записи Stripe"
          },
          {
            "Description": "Возвращает таблицу со всеми номерами SKU.",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Таблица со всеми номерами SKU для текущей учетной записи Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Возвращает перечень доступных таблиц и функций Stripe.",
        "Documentation.LongDescription": "Возвращает перечень доступных таблиц и функций Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Рабочая область Azure Synapse Analytics",
        "Documentation.Caption": "Рабочая область Azure Synapse Analytics",
        "Documentation.LongDescription": "Соединитель PQ для рабочей области Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Добавляет столбец с указанным именем. Значение вычисляется с помощью заданной функции выбора для каждой строки, взятой в качестве входных данных.",
        "Documentation.LongDescription": "Добавляет столбец с именем <code>newColumnName</code> в таблицу <code>table</code>. Значения для этого столбца вычисляются с помощью заданной функции выбора <code>columnGenerator</code>, при этом каждая строка берется в качестве входных данных.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Добавление числового столбца с именем TotalPrice в таблицу, где каждое значение является суммой столбцов [Price] и [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Добавляет новый столбец с репрезентативными значениями, полученными нечетким группированием значений указанного столбца в таблице.",
        "Documentation.LongDescription": "Добавляет в таблицу <code>table</code> новый столбец <code>newColumnName</code> с репрезентативными значениями столбца <code>columnName</code>. Эти значения получаются по нечеткому соответствию значений в столбце <code>columnName</code> для каждой строки.\r\n    <p>Возможно указание необязательного набора параметров <code>options</code>, задающих принцип сравнения ключевых столбцов. Допустимы следующие параметры:\r\n    <ul>\r\n<li><code>Culture</code> : Позволяет группировать записи на основе правил конкретного языка и региональных параметров. Например, параметр Culture со значением &quot;ja-JP&quot; группирует записи согласно правилам японского языка. Значение по умолчанию&#160;— &quot;&quot;, при котором используется инвариантный английский язык и региональные параметры.</li>\r\n<li><code>IgnoreCase</code> : Логическое значение (true/false), которое разрешает группирование ключей без учета регистра. Например, когда задано true, &quot;Виноград&quot; будет группироваться с &quot;виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>IgnoreSpace</code> : Логическое значение (true/false), которое разрешает объединять части текста для поиска групп. Например, когда задано true, &quot;Вино град&quot; будет группироваться с &quot;Виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>SimilarityColumnName</code> : Имя столбца, в котором показано сходство входного значения и репрезентативного значения для этих входных данных. Значение по умолчанию&#160;— NULL. В этом случае новый столбец для сходства не будет добавлен.</li>\r\n<li><code>Threshold</code> : Число от 0,00 до 1,00, указывающее показатель подобия, при котором два значения объединяются в одну группу.\r\n    Например, &quot;Виноград&quot; и &quot;Виногрд&quot; (без буквы &quot;а&quot;) группируются вместе, только если задано значение этого параметра ниже 0,90.\r\n    Порог в 1,00 позволяет исключительно точные совпадения.\r\n     (Обратите внимание, что нечеткое &quot;точное совпадение&quot; может игнорировать такие различия, как регистр, порядок слов и пунктуация.)\r\n    Значение по умолчанию — 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблица, позволяющая группировать записи по настраиваемым сопоставлениям значений. Она должна содержать столбцы From (от чего) и To (к чему). Например, если таблица преобразования содержит в столбце From значение &quot;Виноград&quot;, а в столбце To значение &quot;Изюм&quot;, то эти два значения будут группироваться вместе. Преобразование будет применяться ко всем вхождениям текста, указанного в таблице. Согласно таблице выше, &quot;Виноград сладкий&quot; будет также группироваться с &quot;Изюм сладкий&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Найдите репрезентативные значения для расположения сотрудников.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Выполняет соединения таблиц по указанным столбцам и выводит результат соединения в новом столбце.",
        "Documentation.LongDescription": "Соединяет строки таблицы <code>table1</code> со строками таблицы <code>table2</code> с учетом тождественности значений ключевых столбцов, выбранных в <code>key1</code> (для <code>table1</code>) и в <code>key2</code> (для <code>table2</code>). Результаты записываются в столбец с именем <code>newColumnName</code>.\r\nЭта функция работает подобно Table.Join с JoinKind из LeftOuter, за тем исключением, что результаты соединения представлены во вложенном виде, а не преобразованными в плоскую структуру.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Добавить столбец соединения для ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) с именем \"цена-наличие\" из таблицы ({[saleID = 1, price = 20], [saleID = 2, price = 10]}), соединенный по [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Добавляет ключ в таблицу.",
        "Documentation.LongDescription": "Добавляет ключ в <code>table</code>, где <code>columns</code> — список имен столбцов, определяющих ключ, а <code>isPrimary</code> указывает, является ли ключ первичным.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Добавление первичного ключа из одного столбца в таблицу.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Добавляет столбец с ранжированием одного или нескольких других столбцов.",
        "Documentation.LongDescription": "Добавляет столбец с именем <code>newColumnName</code> к <code>table</code> с ранжированием одного или нескольких других столбцов, описанных посредством <code>comparisonCriteria</code>.\r\nПараметр RankKind в <code>options</code> может использоваться продвинутыми пользователями для выбора более конкретного метода ранжирования.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Добавьте столбец с именем RevenueRank в таблицу, которая ранжирует столбец \"Доход\" от максимального к минимальному значению.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Агрегирует столбец таблиц в несколько столбцов в содержащей их таблице.",
        "Documentation.LongDescription": "Агрегирует таблицы в <code>table</code>[<code>column</code>] в несколько столбцов, содержащих статистические значения для таблиц. <code>aggregations</code> используется для указания столбцов, содержащих таблицы для статистической обработки, статистические функции, которые применяются к таблицам для создания их значений, и имена столбцов групповых операций, которые требуется создать.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Агрегировать столбцы таблицы в <code>[t]</code> в таблице <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> в сумму <code>[t.a]</code>, минимум и максимум <code>[t.b]</code> и количество значений в <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Сохраняет исходное смещение, затем попеременно принимает и пропускает следующие строки.",
        "Documentation.LongDescription": "Сохраняет исходное смещение, затем попеременно принимает и пропускает следующие строки.\r\n    <ul>\r\n       <li><code>table</code>: входная таблица.</li>\r\n       <li><code>offset</code>: число строк, которые должны быть сохранены перед началом итераций.</li>\r\n       <li><code>skip</code>: число строк, удаляемых в каждой итерации.</li>\r\n       <li><code>take</code>: число строк, сохраняемых в каждой итерации.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Получение таблицы из таблицы, в которой, начиная с первой строки, пропускается одно значение, а затем сохраняется одно значение.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Объединяет указанные столбцы в новый столбец с помощью заданной функции объединения.",
        "Documentation.LongDescription": "Объединяет указанные столбцы в новый столбец с помощью заданной функции объединения.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Объединение фамилий и имен в новом столбце с разделением запятыми.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Объединяет указанные столбцы в новый столбец записей со значениями, в котором каждая запись содержит имена и значения полей, соответствующие именам и значениям объединяемых столбцов.",
        "Documentation.LongDescription": "Объединяет указанные столбцы <code>table</code> в новый столбец \"запись-значение\" с именем <code>newColumnName</code>, в котором каждая запись содержит имена и значения полей, соответствующие именам и значениям объединяемых столбцов. Если для <code>options</code> указана запись, могут быть заданы следующие параметры:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: если значение задано в виде текста, указывает, что данное имя столбца должно рассматриваться как отображаемое имя записи. Этот элемент не должен быть одним из столбцов в самой записи.</li>\r\n     <li> <code>TypeName</code>: если значение задано в виде текста, указывает имя логического типа для результирующей записи, которое можно использовать во время загрузки данных для управления поведением средой загрузки.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Повторяет столбец с указанным именем. Значения и тип копируются из исходного столбца.",
        "Documentation.LongDescription": "Повторять столбец с именем <code>columnName</code> в таблице <code>table</code>. Значения и тип данных для столбца <code>newColumnName</code> копируются из столбца <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Повторять столбец \"a\" в столбец с именем \"copied column\" в таблице <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Развертывает столбец записей в столбцы с каждым из значений.",
        "Documentation.LongDescription": "Получив <code>column</code> записей на входе <code>table</code>, создать таблицу со столбцом для каждого поля в записи. Можно также задать необязательный параметр <code>newColumnNames</code>, чтобы обеспечить уникальность имен столбцов в новой таблице.\r\n    <ul>\r\n        <li><code>table</code>: исходная таблица со столбцом записи, который требуется развернуть. </li>\r\n        <li><code>column</code>: столбец, который необходимо развернуть.</li>\r\n        <li><code>fieldNames</code>: список полей, которые требуется развернуть в столбцы таблицы.</li>\r\n        <li><code>newColumnNames</code>: список имен для новых столбцов. Новые имена столбцов не могут повторять какие-либо столбцы в новой таблице.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Развернуть столбец [a] в таблице <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> в 3 столбца - \"aa\", \"bb\" и \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Развертывает столбец записей или столбец таблиц в несколько столбцов в содержащей их таблице.",
        "Documentation.LongDescription": "Развертывает таблицы в <code>table</code>[<code>column</code>] в несколько строк и столбцов. <code>columnNames</code> используется для выбора столбцов для развертывания из внутренней таблицы. Укажите <code>newColumnNames</code>, чтобы избежать конфликтов между существующими и новыми столбцами.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Развернуть столбцы таблицы в <code>[a]</code> в таблице <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> в 3 столбца - <code>[t.a]</code>, <code>[t.b]</code> и <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Группирует строки таблицы на основе нечеткого соответствия ключей.",
        "Documentation.LongDescription": "Группирует строки <code>table</code> по нечеткому соответствию значений в заданном столбце <code>key</code> для каждой строки.\r\n    Для каждой группы создается запись, содержащая ключевые столбцы (и их значения), а также агрегированные столбцы, указываемые в <code>aggregatedColumns</code>.\r\n    Эта функция не может гарантировать возврат строк в фиксированном порядке.\r\n    <p>Возможно указание необязательного набора параметров <code>options</code>, задающих принцип сравнения ключевых столбцов. Допустимы следующие параметры:\r\n    <ul>\r\n<li><code>Culture</code> : Позволяет группировать записи на основе правил конкретного языка и региональных параметров. Например, параметр Culture со значением &quot;ja-JP&quot; группирует записи согласно правилам японского языка. Значение по умолчанию&#160;— &quot;&quot;, при котором используется инвариантный английский язык и региональные параметры.</li>\r\n<li><code>IgnoreCase</code> : Логическое значение (true/false), которое разрешает группирование ключей без учета регистра. Например, когда задано true, &quot;Виноград&quot; будет группироваться с &quot;виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>IgnoreSpace</code> : Логическое значение (true/false), которое разрешает объединять части текста для поиска групп. Например, когда задано true, &quot;Вино град&quot; будет группироваться с &quot;Виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>SimilarityColumnName</code> : Имя столбца, в котором показано сходство входного значения и репрезентативного значения для этих входных данных. Значение по умолчанию&#160;— NULL. В этом случае новый столбец для сходства не будет добавлен.</li>\r\n<li><code>Threshold</code> : Число от 0,00 до 1,00, указывающее показатель подобия, при котором два значения объединяются в одну группу.\r\n    Например, &quot;Виноград&quot; и &quot;Виногрд&quot; (без буквы &quot;а&quot;) группируются вместе, только если задано значение этого параметра ниже 0,90.\r\n    Порог в 1,00 позволяет исключительно точные совпадения.\r\n     (Обратите внимание, что нечеткое &quot;точное совпадение&quot; может игнорировать такие различия, как регистр, порядок слов и пунктуация.)\r\n    Значение по умолчанию — 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблица, позволяющая группировать записи по настраиваемым сопоставлениям значений. Она должна содержать столбцы From (от чего) и To (к чему). Например, если таблица преобразования содержит в столбце From значение &quot;Виноград&quot;, а в столбце To значение &quot;Изюм&quot;, то эти два значения будут группироваться вместе. Преобразование будет применяться ко всем вхождениям текста, указанного в таблице. Согласно таблице выше, &quot;Виноград сладкий&quot; будет также группироваться с &quot;Изюм сладкий&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Группирование таблицы с добавлением агрегатного столбца [Count], который содержит число сотрудников в каждом расположении (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Соединяет строки из двух таблиц, обладающие нечетким соответствием по заданным ключам.",
        "Documentation.LongDescription": "<p>Соединяет строки таблицы <code>table1</code> со строками таблицы <code>table2</code> на основе нечеткого соответствия значений ключевых столбцов, выбираемых по ключам <code>key1</code> (для таблицы <code>table1</code>) и <code>key2</code> (для <code>table2</code>).</p>\r\n<p>Нечеткое соответствие — это сравнение текста на основе подобия, а не полного совпадения.</p>\r\n<p>По умолчанию выполняется внутреннее соединение, но можно указать тип соединения с помощью необязательного параметра <code>joinKind</code>, который поддерживает следующие значения:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Можно также указать необязательный набор параметров <code>joinOptions</code> для способа сравнения ключевых столбцов:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Число от 1 до&#160;8, указывающее количество параллельных потоков, используемых для нечеткого соответствия. Значение по умолчанию&#160;— 1.</li>\r\n<li><code>Culture</code> : Позволяет сопоставлять записи на основе правил конкретного языка и региональных параметров. Например, параметр Culture со значением &quot;ja-JP&quot; сопоставляет записи согласно правилам японского языка. Значение по умолчанию&#160;— &quot;&quot;, при котором используется инвариантный английский язык и региональные параметры.</li>\r\n<li><code>IgnoreCase</code> : Логическое значение (true/false), которое разрешает сопоставление ключей без учета регистра. Например, когда задано true, &quot;Виноград&quot; будет совпадать с &quot;виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>IgnoreSpace</code> : Логическое значение (true/false), которое разрешает объединять части текста для поиска соответствий. Например, когда задано true, &quot;Вино град&quot; будет совпадать с &quot;Виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>NumberOfMatches</code> : Целое число, задающее максимальное количество соответствующих строк, которые могут быть возвращены для каждой строки ввода. Например, значение&#160;1 возвратит для каждой строки ввода не более одного совпадения. Если этот параметр не указан, возвращаются все соответствующие строки.</li>\r\n<li><code>SimilarityColumnName</code> : Имя столбца, в котором показано сходство входного значения и репрезентативного значения для этих входных данных. Значение по умолчанию&#160;— NULL. В этом случае новый столбец для сходства не будет добавлен.</li>\r\n<li><code>Threshold</code> : Число от 0,00 до 1,00, указывающее показатель подобия, при котором два значения считаются совпадающими.\r\n    Например, &quot;Виноград&quot; и &quot;Виногрд&quot; (без буквы &quot;а&quot;) будут соответствовать друг другу, только если задано значение этого параметра ниже 0,90.\r\n    Порог в 1,00 позволяет исключительно точные совпадения.\r\n    (Обратите внимание, что нечеткое &quot;точное совпадение&quot; может игнорировать такие различия, как регистр, порядок слов и пунктуация.)\r\n    Значение по умолчанию — 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблица, позволяющая сопоставлять записи по настраиваемым сопоставлениям значений. Она должна содержать столбцы From (от чего) и To (к чему). Например, если таблица преобразования содержит в столбце From значение &quot;Виноград&quot;, а в столбце To значение &quot;Изюм&quot;, то эти два значения будут считаться соответствующими друг другу. Преобразование будет применяться ко всем вхождениям текста, указанного в таблице. Согласно таблице выше, &quot;Виноград сладкий&quot; будет также соответствовать тексту &quot;Изюм сладкий&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Левое внутреннее нечеткое соединение двух таблиц на основе [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Выполняет нечеткое соединение таблиц по указанным столбцам и выводит результат соединения в новом столбце.",
        "Documentation.LongDescription": "<p>Соединяет строки таблицы <code>table1</code> со строками таблицы <code>table2</code> на основе нечеткого соответствия значений ключевых столбцов, выбранных в <code>key1</code> (для <code>table1</code>) и в <code>key2</code> (для <code>table2</code>). Результаты записываются в столбец с именем <code>newColumnName</code>.</p>\r\n<p>Нечеткое соответствие — это сравнение текста на основе похожести, а не полного совпадения.</p>\r\n<p>Необязательное значение <code>joinKind</code> указывает тип выполняемого соединения. По умолчанию выполняется левое внешнее соединение, если <code>joinKind</code> не указано. Возможны следующие значения:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Необязательный набор <code>joinOptions</code> может быть включен для указания способа сравнения ключевых столбцов. Возможны следующие значения:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Число от 1 до&#160;8, указывающее количество параллельных потоков, используемых для нечеткого соответствия. Значение по умолчанию&#160;— 1.</li>\r\n<li><code>Culture</code> : Позволяет сопоставлять записи на основе правил конкретного языка и региональных параметров. Например, параметр Culture со значением &quot;ja-JP&quot; сопоставляет записи согласно правилам японского языка. Значение по умолчанию&#160;— &quot;&quot;, при котором используется инвариантный английский язык и региональные параметры.</li>\r\n<li><code>IgnoreCase</code> : Логическое значение (true/false), которое разрешает сопоставление ключей без учета регистра. Например, когда задано true, &quot;Виноград&quot; будет совпадать с &quot;виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>IgnoreSpace</code> : Логическое значение (true/false), которое разрешает объединять части текста для поиска соответствий. Например, когда задано true, &quot;Вино град&quot; будет совпадать с &quot;Виноград&quot;. Значение по умолчанию&#160;— true.</li>\r\n<li><code>NumberOfMatches</code> : Целое число, задающее максимальное количество соответствующих строк, которые могут быть возвращены для каждой строки ввода. Например, значение&#160;1 возвратит для каждой строки ввода не более одного совпадения. Если этот параметр не указан, возвращаются все соответствующие строки.</li>\r\n<li><code>SimilarityColumnName</code> : Имя столбца, в котором показано сходство входного значения и репрезентативного значения для этих входных данных. Значение по умолчанию&#160;— NULL. В этом случае новый столбец для сходства не будет добавлен.</li>\r\n<li><code>Threshold</code> : Число от 0,00 до 1,00, указывающее показатель подобия, при котором два значения считаются совпадающими.\r\n    Например, &quot;Виноград&quot; и &quot;Виногрд&quot; (без буквы &quot;а&quot;) будут соответствовать друг другу, только если задано значение этого параметра ниже 0,90.\r\n    Порог в 1,00 позволяет исключительно точные совпадения.\r\n    (Обратите внимание, что нечеткое &quot;точное совпадение&quot; может игнорировать такие различия, как регистр, порядок слов и пунктуация.)\r\n    Значение по умолчанию — 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблица, позволяющая сопоставлять записи по настраиваемым сопоставлениям значений. Она должна содержать столбцы From (от чего) и To (к чему). Например, если таблица преобразования содержит в столбце From значение &quot;Виноград&quot;, а в столбце To значение &quot;Изюм&quot;, то эти два значения будут считаться соответствующими друг другу. Преобразование будет применяться ко всем вхождениям текста, указанного в таблице. Согласно таблице выше, &quot;Виноград сладкий&quot; будет также соответствовать тексту &quot;Изюм сладкий&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Левое внутреннее нечеткое соединение двух таблиц на основе [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Группирует в таблице строки, содержащие одинаковый ключ.",
        "Documentation.LongDescription": "Группирует строки в <code>table</code> по ключевым столбцам, определенным с помощью <code>key</code>. <code>key</code> может быть именем одного столбца или списком имен столбцов.\r\n    Для каждой группы создается запись, содержащая ключевые столбцы (и их значения) вместе со всеми агрегированными столбцами, заданными с помощью <code>aggregatedColumns</code>.\r\n    Можно также указать <code>groupKind</code> и <code>comparer</code>.<br>\r\n    <br>\r\n    Если данные уже отсортированы по ключевым столбцам, можно указать <code>groupKind</code> для GroupKind.Local. Это может повысить производительность группирования в определенных случаях,\r\n    так как все строки с заданным набором ключевых значений считаются непрерывными.<br>\r\n    <br>\r\n    При передаче <code>comparer</code> обратите внимание, что если разные ключи считаются равными, строка может быть помещена в группу, ключи которой отличаются от ее собственных ключей.<br>\r\n    <br>\r\n    Эта функция не гарантирует порядок возвращаемых строк.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Группирование таблицы, путем добавления столбца групповой операции [total] с суммой цен (each List.Sum([price])).",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Вставляет список строк в таблицу в указанной позиции.",
        "Documentation.LongDescription": "Возвращает таблицу со списком строк <code>rows</code>, вставленных в <code>table</code> в заданной позиции <code>offset</code>. Каждый столбец строки для вставки должен соответствовать типам столбцов таблицы.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Вставка строки в таблицу в позиции 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Вставка двух строк в таблицу в позиции 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Соединяет строки из двух таблиц, которые согласуются по заданным ключам.",
        "Documentation.LongDescription": "<p>Соединяет строки таблицы <code>table1</code> со строками таблицы <code>table2</code> с учетом тождественности значений ключевых столбцов, выбранных в <code>key1</code> (для <code>table1</code>) и в <code>key2</code> (для <code>table2</code>).</p>\r\n<p>По умолчанию выполняется внутреннее соединение, но можно включить необязательный параметр <code>joinKind</code> для указания типа соединения. Возможны следующие значения.\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Необязательный набор <code>keyEqualityComparers</code> может быть включен для указания способа сравнения ключевых столбцов. Сейчас этот параметр предназначен только для внутреннего использования.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Объедините две таблицы с помощью одного ключевого столбца.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Объединение двух таблиц с конфликтующими именами столбцов с использованием нескольких ключевых столбцов.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Возвращает наибольшую строку или строки с учетом заданных критериев.",
        "Documentation.LongDescription": "Возвращает наибольшую строку или строки в <code>table</code>, исходя из критериев <code>comparisonCriteria</code>.\r\n    Для дальнейшей фильтрации строк после сортировки следует указать параметр <code>countOrCondition</code>. Обратите внимание, что алгоритм сортировки не гарантирует фиксированного порядка сортировки в результате. Параметр <code>countOrCondition</code> может принимать несколько форм:\r\n    <ul>\r\n        <li> Если указано число, возвращается список до <code>countOrCondition</code> элементов по возрастанию. </li>\r\n        <li> Если указано условие, возвращается список элементов, которые изначально соответствуют условию. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Нахождение строки с наибольшим значением в столбце [a] с условием [a] > 0 в таблице. Помните, что строки сортируются до применения фильтра.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Нахождение строки с наибольшим значением в столбце [a] с условием [b] > 0 в таблице. Помните, что строки сортируются до применения фильтра.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Возвращает наименьшие строки с учетом заданных критериев.",
        "Documentation.LongDescription": "Возвращает наименьшие строки в <code>table</code>, исходя из критериев <code>comparisonCriteria</code>. Для дальнейшей фильтрации строк после сортировки следует указать параметр <code>countOrCondition</code>. Обратите внимание, что алгоритм сортировки не гарантирует фиксированного порядка сортировки в результате. Параметр <code>countOrCondition</code> может принимать несколько форм:\r\n    <ul>\r\n        <li> Если указано число, возвращается список до <code>countOrCondition</code> элементов по возрастанию. </li>\r\n        <li> Если указано условие, возвращается список элементов, которые изначально соответствуют условию. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Нахождение строки с наименьшим значением в столбце [a] с условием [a] < 3 в таблице. Помните, что строки сортируются до применения фильтра.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Нахождение строки с наименьшим значением в столбце [a] с условием [b] < 0 в таблице. Помните, что строки сортируются до применения фильтра.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Выполняет соединения таблиц по указанным столбцам и выводит результат соединения в новом столбце.",
        "Documentation.LongDescription": "<p>Соединяет строки таблицы <code>table1</code> со строками таблицы <code>table2</code> с учетом тождественности значений ключевых столбцов, выбранных в <code>key1</code> (для <code>table1</code>) и в <code>key2</code> (для <code>table2</code>). Результаты записываются в столбец с именем <code>newColumnName</code>.</p>\r\n<p>Необязательное значение <code>joinKind</code> указывает вид выполняемого соединения. По умолчанию выполняется левое внешнее соединение, если <code>joinKind</code> не указано.</p>\r\n<p>Необязательный набор <code>keyEqualityComparers</code> может быть включен для указания способа сравнения ключевых столбцов. Сейчас эта функция предназначена только для внутреннего использования.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Объедините две таблицы с помощью одного ключевого столбца.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Принимая пару столбцов, представляющих пары \"атрибут-значение\", переставляет данные из столбца атрибутов в заголовки столбцов.",
        "Documentation.LongDescription": "Принимая пару столбцов, представляющих пары \"атрибут-значение\", переставляет данные из столбца атрибутов в заголовки столбцов.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Получить значения \"a\", \"b\" и \"c\" в столбце атрибутов таблицы <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> и свести их в их собственный столбец.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Получить значения \"a\", \"b\" и \"c\" в столбце атрибутов таблицы <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> и свести их в их собственный столбец.  Атрибут \"c\" для ключа \"x\" имеет несколько связанных с ним значений, поэтому используйте функцию List.Max для разрешения конфликта.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Заменяет указанный диапазон строк предоставленными строками.",
        "Documentation.LongDescription": "Заменяет указанное количество строк <code>count</code> во входных данных <code>table</code> заданными в <code>rows</code>, начиная с <code>offset</code>. Параметр <code>rows</code> представляет собой список записей.\r\n    <ul>\r\n       <li><code>table</code>: таблица, в которой выполняется замена.</li>\r\n       <li><code>offset</code>: количество строк, которые следует пропустить, прежде чем выполнять замену.</li>\r\n       <li><code>count</code>: количество строк для замены.</li>\r\n       <li><code>rows</code>: список записей строк, вставляемых в <code>table</code> в расположении, заданном <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Замена 3 строк, начиная с позиции 1.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Заменяет одно значение другим в указанных столбцах.",
        "Documentation.LongDescription": "Заменяет <code>oldValue</code> на <code>newValue</code> в указанных столбцах таблицы <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замените текст \"goodbye\" на \"world\" в столбце B только при совпадении целого значения.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Замените текст \"ur\" на \"or\" в столбце B при совпадении любой части значения.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Анонимизируйте имена сотрудников из США.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Анонимизируйте все столбцы сотрудников из США.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Разбивает указанные столбцы в набор дополнительных столбцов с помощью заданной функции разделения.",
        "Documentation.LongDescription": "Разбивает указанные столбцы в набор дополнительных столбцов с помощью заданной функции разделения.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Разделить столбец [Name] на два столбца на позиции буквы \"i\"",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Преобразует набор столбцов в таблице в пары \"атрибут-значение\".",
        "Documentation.LongDescription": "Преобразует набор столбцов в таблице в пары \"атрибут-значение\" в сочетании с другими значениями в каждой строке.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Взять столбцы \"a\", \"b\" и \"c\" в таблице <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> и преобразовать их в пары \"атрибут-значение\".",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Преобразует все столбцы, кроме заданного набора, в пары \"атрибут-значение\".",
        "Documentation.LongDescription": "Преобразует все столбцы, отличные от заданного набора, в пары \"атрибут-значение\", скомбинированные с остальными значениями в каждой строке.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Преобразует все столбцы, отличные от заданного набора, в пары \"атрибут-значение\", скомбинированные с остальными значениями в каждой строке.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Личная аналитика Microsoft Teams",
        "Documentation.LongDescription": "<p>Соединитель аналитики для Teams позволяет получать сведения об использовании вами этого решения. Просматривайте данные о том, что вы делаете в Teams самостоятельно или в составе команды.</p>\r\n<p>Информация доступна за прошлые 90 дней. </p>\r\n<p> Сведения о доступных типах данных см. в следующей справочной документации.</p>\r\n<ul>\r\n<li><b>Использование Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Действия пользователя в Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Введите название организации и проекта.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Возвращает таблицу веб-каналов OData, предлагаемых Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Возвращает двоичный формат, который считывает двоичное значение.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который считывает двоичное значение. Если задан параметр <code>length</code>, двоичное значение будет содержать указанное число байт. Если параметр <code>length</code> не указан, двоичное значение будет содержать оставшиеся байты. <code>length</code> можно указать в виде числа или как двоичный формат длины, предшествующей двоичным данным.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Возвращает логическое значение, основанное на проверке равенства для двух заданных значений.",
        "Documentation.LongDescription": "Возвращает значение <code>logical</code> на основании проверки равенства двух заданных значений (<code>x</code> и <code>y</code>) с использованием предоставленного <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> — это модуль <code>Comparer</code>, который используется для управления сравнением.\r\n        Функция сравнения принимает два аргумента и возвращает –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.\r\n        Функции сравнения можно использовать для сравнений без учета регистра или с учетом языкового стандарта и региональных параметров.\r\n      </div>\r\n      <div>\r\n        В языке формул доступны следующие встроенные функции сравнения:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> — используется для точного сравнения по порядковому номеру</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> — используется для точного сравнения по порядковому номеру без учета регистра</li>\r\n        <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Сравнение \"1\" и \"A\" с использованием языка \"en-US\" для определения того, равны ли значения.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Возвращает текущую дату и время в местном часовом поясе. Это значение зафиксировано и не меняется при последующих вызовах.",
        "Documentation.LongDescription": "Возвращает значение <code>datetime</code>, равное текущей дате и времени в системе. Это значение зафиксировано и не меняется при последующих вызовах в отличие от DateTime.LocalNow, которое может возвращать разные значения по мере выполнения выражения.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Возвращает текущую дату и время в местном часовом поясе.",
        "Documentation.LongDescription": "Возвращает значение <code>datetime</code>, равное текущей дате и времени в системе.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Возвращает текущую дату и время в местном часовом поясе. Это значение зафиксировано и не меняется при последующих вызовах.",
        "Documentation.LongDescription": "Возвращает значение <code>datetime</code>, равное текущей дате и времени в системе. Возвращенное значение содержит сведения о часовом поясе, представляющем местный часовой пояс. Это значение зафиксировано и не меняется при последующих вызовах в отличие от DateTimeZone.LocalNow, которое может возвращать разные значения по мере выполнения выражения.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Возвращает текущую дату и время в формате UTC (часовой пояс GMT). Это значение зафиксировано и не меняется при последующих вызовах.",
        "Documentation.LongDescription": "Возвращает текущую дату и время в формате UTC (часовой пояс GMT). Это значение зафиксировано и не меняется при последующих вызовах.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Возвращает текущую дату и время в местном часовом поясе.",
        "Documentation.LongDescription": "Возвращает значение <code>datetimezone</code>, равное текущей дате и времени в системе.\r\n    Возвращенное значение содержит сведения о часовом поясе, представляющем местный часовой пояс.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Возвращает текущую дату и время в формате UTC (часовой пояс GMT).",
        "Documentation.LongDescription": "Возвращает текущую дату и время в формате UTC (часовой пояс GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Возвращает текущую дату и время в формате UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Возвращает непрозрачный идентификатор для текущего вычисления.",
        "Documentation.LongDescription": "Возвращает непрозрачный идентификатор для текущего вычисления.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Возвращает непрозрачный идентификатор для сопоставления входящих запросов с исходящими.",
        "Documentation.LongDescription": "Возвращает непрозрачный идентификатор для сопоставления входящих запросов с исходящими.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Создает запись трассировки, если трассировка включена, и возвращает значение.",
        "Documentation.LongDescription": "Записывает трассировку <code>message</code>, если трассировка включена, и возвращает <code>value</code>. Необязательный параметр <code>delayed</code> указывает, следует ли откладывать оценку <code>value</code> до трассировки сообщения. <code>traceLevel</code> может иметь одно из следующих значений:\r\n    <code>TraceLevel.Critical</code>,\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Трассировка сообщения перед вызовом функции Text.From и возврат результата.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Поставщик удостоверений по умолчанию для текущего узла.",
        "Documentation.LongDescription": "Поставщик удостоверений по умолчанию для текущего узла.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Накапливает сводное значения из элементов в списке.",
        "Documentation.LongDescription": "Накапливает сводное значение из элементов в списке <code>list</code> с использованием <code>accumulator</code>.\r\n    Может быть установлен необязательный параметр начального значения <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Накапливает сводное значения из элементов в списке {1, 2, 3, 4, 5}, используя выражение ((состояние, текущее значение) => состояние + текущее значение).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Формирует список значений datetimezone на основе первоначального значения, количества и значения приращения даты.",
        "Documentation.LongDescription": "Возвращает список значений <code>datetimezone</code> размера <code>count</code>, начиная с <code>start</code>. Данное значение приращения <code>step</code> является значением <code>duration</code>, которое добавляется к каждому значению.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из 10 значений начиная за 5 минут до наступления Нового года (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) с увеличением на 1 минуту (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Формирует список значений дат на основе первоначального значения, количества и значения приращения даты.",
        "Documentation.LongDescription": "Возвращает список значений <code>datetime</code> размера <code>count</code>, начиная с <code>start</code>. Данное значение приращения <code>step</code> является значением <code>duration</code>, которое добавляется к каждому значению.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из 10 значений, начиная за 5 минут до наступления Нового года (#datetime(2011, 12, 31, 23, 55, 0)) с увеличением на 1 минуту (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Формирует список значений date по первоначальному значению, количеству и значению приращения продолжительности.",
        "Documentation.LongDescription": "Возвращает список значений <code>date</code> размера <code>count</code>, начиная с <code>start</code>. Данное значение приращения <code>step</code> является значением <code>duration</code>, которое добавляется к каждому значению.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из пяти значений, начиная с новогодней ночи (#date(2011, 12, 31)), с увеличением значения на один день (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Создает список значений длительности для заданного исходного значения, количества и значения возрастания длительности.",
        "Documentation.LongDescription": "Возвращает список значений <code>count</code> <code>duration</code>, начиная с <code>start</code>, с добавлением заданного значения <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из пяти значений, начиная с первого часа, с добавлением одного часа.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Создает список значений.",
        "Documentation.LongDescription": "Создает список значений с использованием предоставленных функций. Функция <code>initial</code> создает начальное значение кандидата, которое затем проверяется в <code>condition</code>.\r\n    Если значение кандидата утверждено, оно возвращается как часть итогового списка, а следующее значение кандидата создается путем передачи вновь утвержденного значения в <code>next</code>.\r\n    Когда значение кандидата не совпадает с <code>condition</code>, процесс создания списка останавливается.\r\n    Можно также указать необязательный параметр <code>selector</code> для преобразования элементов в итоговом списке.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список, начав с десяти и выполняя повторяющееся уменьшение на единицу. При этом каждый элемент должен быть больше нуля.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Создать список записей, содержащих x и y, где x - это значение, а y - список. Значение x должно быть меньше 10 и представлять число элементов в списке y. После того как список сформирован, возвращает только значения x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Вставляет значения в список по указанному индексу.",
        "Documentation.LongDescription": "Возвращает новый список, созданный путем вставки значений из <code>values</code> в <code>list</code> с <code>index</code>. Первая позиция в списке находится по индексу 0.\r\n      <ul>\r\n        <li><code>list</code>: целевой список, в который будут вставлены значения.</li>\r\n        <li><code>index</code>: индекс целевого списка (<code>list</code>), в который будут вставлены значения. Первая позиция в списке находится по индексу 0.</li>\r\n        <li><code>values</code>: список значений, которые будут вставлены в <code>list</code>.</li>.\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Вставка списка ({3, 4}) в целевой список ({1, 2, 5}) по индексу 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Вставка списка с вложенным списком ({1, {1.1, 1.2}}) в целевой список ({2, 3, 4}) по индексу 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Заменяет указанное количество значений значениями для замены, начиная с определенной позиции.",
        "Documentation.LongDescription": "Заменяет <code>count</code> значений в списке <code>list</code> списком <code>replaceWith</code>, начиная с указанной позиции <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Заменить {7, 8, 9} в списке {1, 2, 7, 8, 9, 5} списком {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Ищет в списке указанное значение и заменяет его.",
        "Documentation.LongDescription": "Ищет в списке значений <code>list</code> значение <code>oldValue</code> и заменяет каждое его вхождение значением <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Заменить все значения \"a\" в списке {\"a\", \"B\", \"a\", \"a\"} значением \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Формирует список значений time на основе первоначального значения, количества и значения приращения.",
        "Documentation.LongDescription": "Возвращает список значений <code>time</code> с размером <code>count</code>, начиная с <code>start</code>. Данное значение приращения <code>step</code> является значением <code>duration</code>, которое добавляется к каждому значению.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из 4 значений, начиная с полудня (#time(12, 0, 0)), последовательно увеличивая время на один час (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Возвращает список, элементы которого преобразованы из входного списка с помощью указанных функций.",
        "Documentation.LongDescription": "Возвращает список элементов, проецирование которых выполняется из списка ввода.<br>\r\n    <br>\r\n    Функция <code>collectionTransform</code> преобразует каждый элемент в промежуточный список, а функция <code>resultTransform</code> получает исходный элемент и элемент из промежуточного списка, чтобы создать окончательный результат.<br>\r\n    <br>\r\n    Функция <code>collectionTransform</code> имеет сигнатуру <code>(x значит любой) в виде списка => ...</code>, где <code>x</code> является элементом в <code>list</code>.\r\n    Функция <code>resultTransform</code> проецирует вид результата и имеет сигнатуру <code>(x значит любой, y значит любой) как любое => ...</code>, где <code>x</code> является элементом в <code>list</code>, а <code>y</code> является элементом из списка, созданного путем передачи <code>x</code> в <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Выполните сведение списка людей и их домашних животных.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Возвращает случайное число.",
        "Documentation.LongDescription": "Возвращает случайное число от 0 до 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Возвращает случайное число.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Добавляет поле к записи.",
        "Documentation.LongDescription": "Добавляет поле к записи <code>record</code> для заданного имени поля <code>fieldName</code> и значения <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Добавление поля Address к записи.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Заменяет текст в предоставленных входных данных.",
        "Documentation.LongDescription": "Заменяет текст <code>old</code> в исходном <code>text</code> текстом <code>new</code>. Эту функцию замены можно использовать в <code>List.ReplaceValue</code> и <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Заменить текст \"hE\" на \"He\"в строке \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Заменяет значения в предоставленных входных данных.",
        "Documentation.LongDescription": "Заменяет значение <code>old</code> в исходном <code>value</code> значением <code>new</code>. Эту функцию замены можно использовать в <code>List.ReplaceValue</code> и <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Заменить значение 11 значением 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Возвращает результат JSON из API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Выполняет вызов REST API Smartsheet 2.0 в указанной конечной точке и возвращает результаты в виде записи JSON.",
        "Documentation.Examples": [
          {
            "Description": "Извлекает данные из листов конечной точки API Smartsheet с указанными дополнительными аргументами",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Таблица со сведениями о листах, возвращенная API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Возвращает функцию, которая не разбивает текст, возвращая свой аргумент как единый список элементов.",
        "Documentation.LongDescription": "Возвращает функцию, которая не разбивает текст, возвращая свой аргумент как единый список элементов.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по пробелам.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список по пробелам.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных пробелами с обработкой кавычек как любых других символов.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Секционирует таблицу в список таблиц с учетом заданного количества групп и столбца.",
        "Documentation.LongDescription": "Секционирует <code>table</code> в список из <code>groups</code> таблиц на основании значения <code>column</code> и функции <code>hash</code>.\r\n    Функция <code>hash</code> применяется к значению строки <code>column</code> для получения хэш-значения строки. Остаток от целочисленного деления хэш-значения <code>groups</code> определяет, в какую из возвращенных таблиц будет помещена строка.\r\n    <ul>\r\n       <li><code>table</code>: таблица для секционирования.</li>\r\n       <li><code>column</code>: столбец для хэширования, позволяющий определить, в какой из возвращенных таблиц находится строка.</li>\r\n       <li><code>groups</code>: количество таблиц, на которое будет разделена исходная таблица.</li>\r\n       <li><code>hash</code>: функция, применяемая для получения хэш-значения.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Секционировать таблицу <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> в две таблицы по столбцу [a], используя значения столбцов в качестве хэш-функции.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Возвращает часть <code>text</code> между указанными <code>startDelimiter</code> и <code>endDelimiter</code>.\r\n    Необязательный числовой <code>startIndex</code> указывает, какое вхождение <code>startDelimiter</code> следует рассматривать.\r\n    Необязательный список <code>startIndex</code> указывает, какое вхождение <code>startDelimiter</code> следует рассматривать, а также откуда вести индексацию — с начала или с конца входных данных.\r\n    Для <code>endIndex</code> все аналогично с тем исключением, что индексация ведется относительно <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Получить часть строки \"111 (222) 333 (444)\" между (первой) открывающей скобкой и (первой) закрывающей скобкой после нее.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Получить часть строки \"111 (222) 333 (444)\" между второй открывающей скобкой и первой закрывающей скобкой после нее.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Получить часть строки \"111 (222) 333 (444)\" между второй открывающей скобкой с конца и второй закрывающей скобкой после нее.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Вставляет одно текстовое значение в другое в заданной позиции.",
        "Documentation.LongDescription": "Возвращает результат вставки текстового значения <code>newText</code> в текстовое значение <code>text</code> в позиции <code>offset</code>. Позиции начинаются с номера 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Вставить \"C\" между \"B\" и \"D\" в \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Возвращает новый случайный глобальный уникальный идентификатор (GUID).",
        "Documentation.LongDescription": "Возвращает новый случайный глобальный уникальный идентификатор (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Заменяет все вхождения заданной подстроки в тексте.",
        "Documentation.LongDescription": "Возвращает результат замены всех вхождений текстового значения <code>old</code> в текстовом значении <code>text</code> текстовым значением <code>new</code>. В этой функции учитывается регистр.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Заменить все вхождения \"the\" в предложении на \"а\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Удаляет диапазон символов и вводит новое значение в указанную позицию.",
        "Documentation.LongDescription": "Возвращает результат удаления заданного количества символов <code>count</code> из текстового значения <code>text</code>, начиная с позиции <code>offset</code>, затем вставляет текстовое значение <code>newText</code> в ту же позицию в <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Заменить один символ в позиции 2 в текстовом значении \"ABGF\" новым текстовым значением \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Добавляет ключ к данному типу таблицы.",
        "Documentation.LongDescription": "Добавляет ключ к данному типу таблицы.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Возвращает список удостоверений, которые будут приняты условием.",
        "Documentation.LongDescription": "<p>Используя указанное значение <code>identityProvider</code>, преобразует <code>condition</code> в список удостоверений, для которых <code>condition</code> может вернуть значение <code>true</code> (истина) во всех контекстах авторизации с <code>identityProvider</code> в качестве поставщика удостоверений. Если преобразовать <code>condition</code> в список удостоверений невозможно (например, если для вынесения решения <code>condition</code> рассматривает атрибуты, отличные от удостоверений пользователей или групп), возникает ошибка.</p>\r\n    <p>Обратите внимание, что удостоверения в списке представлены в том же виде, что и в <code>condition</code>, и к ним не применяется нормализация (например, расширение групп).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Сжимает двоичное значение с помощью заданного типа сжатия.",
        "Documentation.LongDescription": "Сжимает двоичное значение с помощью заданного типа сжатия. Результат такого вызова — сжатая копия входных данных. Типы сжатия: \r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Сжатие двоичного значения.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Распаковать двоичное значение с применением указанного типа сжатия.",
        "Documentation.LongDescription": "Распаковывает двоичное значение с помощью заданного типа сжатия. Результат такого вызова — распакованная копия входных данных. Типы сжатия:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Распаковать двоичное значение.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Возвращает подмножество двоичного значения, начиная со смещения.",
        "Documentation.LongDescription": "Возвращает подмножество двоичного значения, начиная со смещения <code>binary</code>. Необязательный параметр <code>offset</code> устанавливает максимальную длину подмножества.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Возвращает подмножество двоичного значения, начиная со смещения 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Возвращает подмножество длиной 2 из смещения 6 двоичного значения.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Разделяет указанный двоичный файл на список двоичных файлов с заданным размером страницы.",
        "Documentation.LongDescription": "Разделяет <code>binary</code> на список двоичных файлов, где первый элемент выходного списка — двоичный файл с первыми байтами (<code>pageSize</code>) из\r\n    исходного двоичного файла, следующий элемент выходного списка — двоичный файл со следующими байтами (<code>pageSize</code>) из исходного двоичного файла и т. д.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Создает или расширяет двоичный файл, используя определенные пользователем обработчики операций запросов и действий.",
        "Documentation.LongDescription": "<p>Возвращает представление <code>binary</code>, в котором во время применения операции вместо поведения по умолчанию используются функции-обработчики, указанные в <code>handlers</code>.</p>\r\n<p>В случае указания <code>binary</code> задавать функции-обработчики не обязательно. Если не указывать <code>binary</code>, требуется функция-обработчик <code>GetStream</code>. Если не указать для операции функцию-обработчик, вместо нее операция (если это не <code>GetExpression</code>) применяет к <code>binary</code> поведение по умолчанию.</p>\r\n<p>Функции-обработчики должны возвращать значение, семантически эквивалентное результату применения операции к <code>binary</code> (или к результирующему представлению для <code>GetExpression</code>).</p>\r\n<p>Если функция-обработчик выдает ошибку, к представлению применяется поведение операции по умолчанию.</p>\r\n<p><code>Binary.View</code> позволяет реализовать для источника данных свертывание — перевод запросов M в операции конкретного источника (например, скачивание раздела файла).</p>\r\n<p>Более полное описание <code>Binary.View</code> см. в опубликованной документации по настраиваемым соединителям Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Создайте базовое представление, которое не требует доступа к данным для определения длины.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Возвращает двоичный формат с порядком следования байтов, указанным функцией.",
        "Documentation.LongDescription": "Возвращает двоичный формат с порядком следования байтов, указанным <code>binaryFormat</code>.  Порядок байтов по умолчанию: <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Возвращает двоичный формат, который выбирает следующий двоичный формат в зависимости от значения, которое уже было считано.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который выбирает следующий двоичный формат в зависимости от значения, которое уже было считано.  Значение двоичного формата, сформированного этой функцией, обрабатывается в два этапа:<ul>\r\n<li>Двоичный формат, указанный параметром <code>binaryFormat</code>, используется для считывания значения.</li>\r\n<li>Значение передается функции выбора, заданной параметром <code>chooseFunction</code>.</li>\r\n<li>Функция выбора проверяет значение и возвращает второй двоичный формат.</li>\r\n<li>Второй двоичный формат используется для чтения второго значения.</li>\r\n<li>Если указана функция объединения, то первое и второе значения передаются в эту функцию, а возвращается значение результата.</li>\r\n<li>Если функция объединения не указана, возвращается второе значение.</li>\r\n<li>Возвращается второе значение.</li>\r\n</ul>Необязательный параметр <code>type</code> указывает тип двоичного формата, который возвращается функцией выбора.  Допустимые значения: <code>type any</code>, <code>type list</code> или <code>type binary</code>.  Если параметр <code>type</code> не указан, то используется <code>type any</code>.   Если используется параметр <code>type list</code> или <code>type binary</code>, система может вернуть значение <code>binary</code> или <code>list</code> из потока вместо значения из буфера, что может сократить объем памяти, необходимый для чтения формата.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Считывает список байтов, где число элементов определяется первым байтом.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Считывает список байтов, где число элементов определяется первым байтом, а первый считанный байт сохраняется.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Считывает список байтов, где число элементов определяется первым байтом с использованием списка потоков.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Возвращает двоичный формат, который считывает группу элементов.",
        "Documentation.LongDescription": "Используются следующие параметры.\r\n<ul>\r\n<li>Параметр <code>binaryFormat</code> указывает двоичный формат значения ключа.</li>\r\n<li>Параметр <code>group</code> предоставляет сведения о группе известных элементов.</li>\r\n<li>Необязательный параметр <code>extra</code> можно использовать для определения функции, возвращающей значение двоичного формата для значения, идущего после любого непредвиденного ключа.  Если параметр <code>extra</code> не указан, при наличии непредвиденных значений ключей возникнет ошибка.</li>\r\n</ul>\r\nПараметр <code>group</code> указывает список определений элементов.  Каждое определение элемента - это список, содержащий 3-5 значений:\r\n<ul>\r\n<li>Значение ключа. Значение ключа, который соответствует элементу.  Это должно быть уникальное значение в наборе элементов.</li>\r\n<li>Формат элемента. Двоичный формат, соответствующий значению элемента. Это позволяет каждому элементу использовать свой формат. </li>\r\n<li>Вхождение элемента. Значение <code>BinaryOccurrence.Type</code>, которое определяет, сколько раз элемент будет указан в группе. Если обязательные элементы отсутствуют, возникает ошибка. Обязательные или необязательные повторяющиеся элементы обрабатываются как непредвиденные значения ключа.</li>\r\n<li>Значение элемента по умолчанию (необязательно). Если значение элемента по умолчанию отображается в списке определений элемента и не равно NULL, оно будет использоваться вместо значения по умолчанию. Значение по умолчанию для повторяющихся и необязательных элементов равно NULL, а значение по умолчанию для повторяющихся значений — пустой список { }.</li>\r\n<li>Преобразование значения элемента (необязательно). Если функция преобразования значения элемента присутствует в списке определений элемента и не равна NULL, она будет вызвана для преобразования значения элемента перед его возвращением. Функция преобразования вызывается, только если элемент присутствует в входных данных (она не вызывается со значением по умолчанию). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Далее предполагается, что значение ключа - это один байт, в группе 4 элемента, во всех из которых после ключа идет байт данных.  Элементы отображаются во входных данных следующим образом:\r\n<ul>\r\n<li>Ключ 1 является обязательным и не отображается со значением 11.</li>\r\n<li>Ключ 2 повторяется и отображается дважды со значением 22 и приводит к формированию значения { 22, 22 }.</li>\r\n<li>Ключ 3 не является обязательным, не отображается и приводит к формированию значения NULL.</li>\r\n<li>Ключ 4 повторяется, но не отображается и приводит к формированию значения { }.</li>\r\n<li>Ключ 5 не является частью группы, но появляется один раз со значением 55.  Дополнительная функция вызывается со значением ключа 5 и возвращает формат, соответствующий этому значению (BinaryFormat.Byte).  Значение 55 считывается и удаляется.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "В следующем примере показано преобразование значения элемента и значения элемента по умолчанию.   Повторяющийся элемент с ключом 1 суммирует список значений, считанных с помощью List.Sum.  Необязательный элемент с ключом 2 имеет значение по умолчанию 123, а не NULL.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Возвращает двоичный формат, который ограничивает объем данных, который может быть считан.",
        "Documentation.LongDescription": "Возвращает двоичный формат, ограничивающий объем данных, который можно считать. И <code>BinaryFormat.List</code>, и <code>BinaryFormat.Binary</code> можно использовать для считывания до конца данных. <code>BinaryFormat.Length</code> можно использовать для ограничения числа считываемых байтов. Параметр <code>binaryFormat</code> указывает двоичный формат, который нужно ограничить. Параметр <code>length</code> указывает число байт для считывания. Параметр <code>length</code> может быть числовым значением или значением двоичного формата, указывающим формат значения длины, предшествующей считываемому значению.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Ограничьте число считанных байтов до 2 при чтении списка байтов.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ограничьте число считанных байтов при чтении списка байтов до байтового значения, предшествующего списку.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Возвращает двоичный формат, который преобразует значения, считанные другим двоичным форматом.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который преобразует значения, считанные другим двоичным форматом.  Параметр <code>binaryFormat</code> указывает двоичный формат, который будет использоваться для считывания значений.  <code>function</code> вызывается со считанным значением и возвращает преобразованное значение.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Считывает байт и добавляет к нему единицу.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Возвращает функцию сравнения, использующую порядковые правила для сравнения значений.",
        "Documentation.LongDescription": "Возвращает функцию сравнения, использующую порядковые правила для сравнения указанных значений <code>x</code> и <code>y</code>.<br>\r\n        <br>\r\n        Функция сравнения принимает два аргумента и возвращает –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Используя порядковые правила, выяснить, эквивалентны ли значения \"encyclopædia\" и \"encyclopaedia\". Обратите внимание, что они эквивалентны при использовании <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Возвращает функцию сравнения без учета регистра, использующую при сравнении значений правила Ordinal.",
        "Documentation.LongDescription": "Возвращает функцию сравнения без учета регистра, использующую порядковые правила для сравнения указанных значений <code>x</code> и <code>y</code>.<br>\r\n        <br>\r\n        Функция сравнения принимает два аргумента и возвращает –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Используя правила Ordinal без учета регистра, сравним \"Abc\" с \"abc\". Обратите внимание, что \"Abc\" считается меньше \"abc\", если использовать <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Возвращает свойство атрибута измерения.",
        "Documentation.LongDescription": "Возвращает свойство <code>propertyName</code> атрибута измерения <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Возвращает свойство меры (свойство ячейки).",
        "Documentation.LongDescription": "Возвращает свойство <code>propertyName</code> меры <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Источник запросов Databricks SQL",
        "Documentation.LongDescription": "Определите Databricks данных для выполнения SQL-запросов"
      },
      "ReturnType": "Запрос Databricks SQL",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Источник запросов Databricks SQL",
        "Documentation.LongDescription": "Определите Databricks данных для выполнения SQL-запросов"
      },
      "ReturnType": "Запрос Databricks SQL",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Добавляет указанные дни к дате.",
        "Documentation.LongDescription": "Возвращает результат <code>date</code>, <code>datetime</code> или <code>datetimezone</code> после добавления <code>numberOfDays</code> дней к значению <code>datetime</code>, <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, к которому добавляются дни.</li>\r\n      <li><code>numberOfDays</code>: количество дней, которые нужно добавить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Добавляет 5 дней к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату 14.05.2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Добавляет указанные месяцы к дате.",
        "Documentation.LongDescription": "Возвращает результат <code>date</code>, <code>datetime</code> или <code>datetimezone</code> после добавления <code>numberOfMonths</code> мес. к значению <code>datetime</code>, <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, к которому добавляются месяцы.</li>\r\n        <li><code>numberOfMonths</code>: число месяцев, которое нужно добавить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Добавляет 5 месяцев к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату 14.05.2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Добавляет 18 месяцев к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющее дату и время 14.05.2011 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Добавляет указанные кварталы к дате.",
        "Documentation.LongDescription": "Возвращает результат <code>date</code>, <code>datetime</code> или <code>datetimezone</code> после добавления <code>numberOfQuarters</code> кварталов к значению <code>datetime</code>, <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, к которому добавляются кварталы.</li>\r\n      <li><code>numberOfQuarters</code>: число кварталов, которое нужно добавить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Добавляет 1 квартал к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату 14.05.2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Добавляет указанные недели к дате.",
        "Documentation.LongDescription": "Возвращает результат <code>date</code>, <code>datetime</code> или <code>datetimezone</code> после добавления <code>numberOfWeeks</code> недель к значению <code>datetime</code>, <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, к которому добавляются недели.</li>\r\n      <li><code>numberOfWeeks</code>: число недель, которое нужно добавить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Добавляет 2 недели к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату 14.05.2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Добавляет указанное число лет к дате.",
        "Documentation.LongDescription": "Возвращает результат <code>date</code>, <code>datetime</code> или <code>datetimezone</code> после добавления <code>numberOfYears</code> к значению <code>datetime</code>, <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, к которому добавляются годы.</li>\r\n        <li><code>numberOfYears</code>: число лет, которое нужно добавить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Добавляет 4 года к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату 14.05.2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Добавляет 10 лет к значению <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющему дату и время 14.05.2011 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число следующих дней, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих дней, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>days</code>: количество дней.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли день после текущего системного времени в течение следующих двух дней.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число следующих месяцев, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих месяцев, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>months</code>: количество месяцев.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли месяц после текущего системного времени в течение следующих двух месяцев.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число следующих кварталов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих кварталов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>quarters</code>: количество кварталов.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли квартал после текущего системного времени в течение следующих двух кварталов.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число следующих недель, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих недель, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>weeks</code>: количество недель.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли неделя после текущего системного времени в течение следующих двух недель.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число следующих лет, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих лет, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>years</code>: количество лет.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли год после текущего системного времени в течение следующих двух лет.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число предыдущих дней, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих дней, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>days</code>: количество дней.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли день до текущего системного времени в течение следующих двух дней.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число предыдущих месяцев, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих месяцев, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>months</code>: количество месяцев.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли месяц до текущего системного времени в течение следующих двух месяцев.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число предыдущих кварталов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих кварталов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>quarters</code>: количество кварталов.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли квартал до текущего системного времени в течение следующих двух кварталов.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число предыдущих недель, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих недель, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>weeks</code>: количество недель.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли неделя до текущего системного времени в течение следующих двух недель.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Указывает, приходится ли заданная дата на определенное число предыдущих лет, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих лет, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>years</code>: количество лет.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, находится ли год до текущего системного времени в течение следующих двух лет.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Добавляет сведения о часовом поясе в значение даты и времени.",
        "Documentation.LongDescription": "Добавляет сведения о часовом поясе в значение <code>dateTime</code>. Сведения о часовом поясе включают <code>timezoneHours</code> и <code>timezoneMinutes</code> (необязательно), которые указывают желаемое смещение от времени в формате UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Настроить часовой пояс в формате UTC+7:30 (7 часов 30 минут после UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число следующих часов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих часов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>hours</code>: количество часов.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли час, следующий за текущим системным временем, в следующих двух часах.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число следующих минут, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих минут, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>minutes</code>: количество минут.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли минута, следующая за текущим системным временем, в следующих двух минутах.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число следующих секунд, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число следующих секунд, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>seconds</code>: количество секунд.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли секунда, следующая за текущим системным временем, в следующих двух секундах.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число предыдущих часов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих часов, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>hours</code>: количество часов.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли час, предшествующий текущему системному времени, в предыдущих двух часах.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число предыдущих минут, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих минут, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>minutes</code>: количество минут.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли минута, предшествующая текущему системному времени, в предыдущих двух минутах.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на определенное число предыдущих секунд, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на определенное число предыдущих секунд, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      <li><code>seconds</code>: количество секунд.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли секунда, предшествующая текущему системному времени, в предыдущих двух секундах.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Изменяет часовой пояс значения.",
        "Documentation.LongDescription": "Изменяет данные часового пояса в значении datetimezone <code>dateTimeZone</code> на новые данные о часовом поясе из <code>timezoneHours</code> и при необходимости <code>timezoneMinutes</code>.\r\n    Если <code>dateTimeZone</code> не содержит компонент часового пояса, возникает исключение.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Изменяет данные о часовом поясе для #datetimezone (2010, 12, 31, 11, 56, 02, 7, 30) на 8 часов.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Изменяет данные о часовом поясе для #datetimezone (2010, 12, 31, 11, 56, 02, 7, 30) на -30 минут.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Доступ к значению по имени во внедренном гибридном веб-приложении.",
        "Documentation.LongDescription": "Доступ к значению по имени во внедренном гибридном веб-приложении.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Создает функцию с определенной сигнатурой параметров на базе функции, принимающей один аргумент списка.",
        "Documentation.LongDescription": "Принимает унарную функцию <code>function</code> и создает новую функцию с типом <code>functionType</code>, которая составляет из ее аргументов список и передает его <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Преобразует List.Sum в функцию с двумя аргументами, которые складываются друг с другом.",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Преобразует функцию, принимающую список, в функцию с двумя аргументами.",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Вызывает заданную функцию",
        "Documentation.LongDescription": "Вызывает данную функцию, используя указанный список аргументов, и возвращает результат.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Вызывает Record.FieldNames с одним аргументом [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Вызывает заданную функцию спустя указанный период времени.",
        "Documentation.LongDescription": "Возвращает результат вызова <code>function</code> спустя период времени <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Создает скалярную функцию на основе векторной, пакетно обрабатывая множество вызовов.",
        "Documentation.LongDescription": "<p>Возвращает скалярную функцию типа <code>scalarFunctionType</code>, которая вызывает <code>vectorFunction</code> с одной строкой аргументов и возвращает один набор выходных данных. Кроме того, если скалярная функция многократно применяется к каждой строке таблицы входных данных, как в Table.AddColumn, то вместо нее ко всем входным данным будет однократно применена функция <code>vectorFunction</code>.</p>\r\n<p>В <code>vectorFunction</code> будет передана таблица, чьи столбцы соответствуют по имени и позиции параметрам <code>scalarFunctionType</code>. Каждая строка этой таблицы содержит аргументы для одного вызова скалярной функции, а столбцы соответствуют параметрам <code>scalarFunctionType</code>.</p>\r\n<p>Функция <code>vectorFunction</code> должна вернуть список той же длины, что и входная таблица, и его элементы в каждой позиции должны соответствовать результату вычисления скалярной функции для входной строки в той же позиции.</p>\r\n<p>Ожидается, что таблица будет передана с помощью потоковой передачи и что <code>vectorFunction</code> будет по очереди выполнять потоковую передачу всех блоков выходных данных по мере получения входных. В частности, функция <code>vectorFunction</code> не должна перечислять входную таблицу больше одного раза.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Создает запись, представляющую географическую точку по ее компонентам.",
        "Documentation.LongDescription": "Создает запись, представляющую географическую точку по ее составным компонентам, таким как долгота и широта, а также высота над уровнем моря (Z) и расстояние (M), если они доступны. При необходимости можно указать идентификатор пространственной ссылки (SRID), если он отличается от значения по умолчанию (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Создает запись, представляющую геометрическую точку по ее компонентам.",
        "Documentation.LongDescription": "Создает запись, представляющую геометрическую точку по ее компонентам, таким как координаты X и Y, а также координата Z и расстояние (M), если они доступны. При необходимости можно указать идентификатор пространственной ссылки (SRID), если он отличается от значения по умолчанию (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Создает удостоверение.",
        "Documentation.LongDescription": "Создает удостоверение.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Определяет, входит ли удостоверение в коллекцию удостоверений.",
        "Documentation.LongDescription": "Определяет, входит ли удостоверение в коллекцию удостоверений.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Возвращает список, состоящий из всех нечетных элементов смещения в списке.",
        "Documentation.LongDescription": "Возвращает список, состоящий из всех нечетных элементов смещения в списке. Попеременно принимает и пропускает значения из списка <code>list</code> в зависимости от параметров.\r\n    <ul>\r\n    <li><code>count</code>: указывает число значений, которые пропускаются каждый раз.</li>\r\n    <li><code>repeatInterval</code>: необязательный интервал повтора, указывающий, сколько значений добавляются между пропущенными значениями.</li>\r\n    <li><code>offset</code>: параметр смещения, с которого начинается пропуск значений.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1..10}, в котором первое число пропускается.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Создать список из {1..10}, в котором пропускается каждое второе значение.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Создать список из {1..10}, который начинается с 1 и пропускает каждое второе значение.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Создать список из {1..10}, который начинается с 1, пропускает одно значение, сохраняет два значения и т. д.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Указывает, содержит ли список значение.",
        "Documentation.LongDescription": "Указывает, содержит ли список <code>list</code> значение <code>value</code>.\r\n    Возвращает значение True, если значение найдено в списке, и значение False в противном случае. Можно указать необязательное значение критерия уравнения <code>equationCriteria</code> для управления проверкой на равенство. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Определить, содержит ли список {1, 2, 3, 4, 5} значение 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Определить, содержит ли список {1, 2, 3, 4, 5} значение 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Указывает, содержит ли список все значения из другого списка.",
        "Documentation.LongDescription": "Указывает, содержит ли список <code>list</code> все значения из другого списка <code>values</code>.\r\n    Возвращает значение true, если значение найдено в списке, и значение false в противном случае. Необязательное значение критерия уравнения <code>equationCriteria</code> можно указать для управления проверкой на равенство. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Определить, содержит ли список {1, 2, 3, 4, 5} значения 3 и 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Определить, содержит ли список {1, 2, 3, 4, 5} значения 5 и 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Указывает, содержит ли список какие-либо значения из другого списка.",
        "Documentation.LongDescription": "Указывает, содержит ли список <code>list</code> какие-либо значения из другого списка <code>values</code>.\r\n        Возвращает значение true, если значение найдено в списке, и значение false в противном случае. Необязательное значение критерия уравнения <code>equationCriteria</code> можно указать для управления проверкой на равенство. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Определить, содержит список {1, 2, 3, 4, 5} значение 3 или 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Определить, содержит список {1, 2, 3, 4, 5} значение 6 или 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Возвращает ковариацию между двумя списками чисел.",
        "Documentation.LongDescription": "Возвращает ковариацию между двумя списками, <code>numberList1</code> и <code>numberList2</code>. <code>numberList1</code> и <code>numberList2</code> должны содержать одинаковое количество значений <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Вычислить ковариацию между двумя списками.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Возвращает разницу между двумя данными списками.",
        "Documentation.LongDescription": "Возвращает элементы в списке <code>list1</code>, которых нет в списке <code>list2</code>. Повторяющиеся значения поддерживаются.\r\n    Можно указать необязательное значение критерия уравнения <code>equationCriteria</code> для управления проверкой на равенство. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Поиск элементов в списке {1, 2, 3, 4, 5}, которых нет в списке {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Найти элементы в списке {1, 2}, которых нет в списке {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Возвращает список значений (включая поля записей), содержащих указанный текст.",
        "Documentation.LongDescription": "Возвращает список значений из списка <code>list</code>, содержащих значение <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Поиск текстовых значений в списке {\"a\", \"b\", \"ab\"}, совпадающих с \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Возвращает первый набор элементов в списке, указывая количество возвращаемых элементов или соответствующее условие.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Если указано число, возвращается количество элементов до указанного. </li>\r\n  <li>Если указано условие, возвращаются все элементы, которые изначально соответствуют условию. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти первые значения в списке {3, 4, 5, -1, 7, 8, 2}, превышающие 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Возвращает значение true, если функции условия удовлетворяют все значения в списке.",
        "Documentation.LongDescription": "Возвращает <code>true</code>, если функции условия <code>condition</code> удовлетворяют все значения в списке <code>list</code>, в противном случае возвращает значение <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Определить, все ли значения в списке {11, 12, 13} больше 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Определить, все ли значения в списке {1, 2, 3} больше 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Возвращает значение true, если функции условия соответствует любое значение.",
        "Documentation.LongDescription": "Возвращает <code>true</code>, если функции условия <code>condition</code> соответствует любое значение в списке <code>list</code>, в противном случае возвращает значение <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Определить, есть ли в списке {9, 10, 11} хотя бы одно значение больше 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Определить, есть ли в списке {1, 2, 3} хотя бы одно значение больше 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Возвращает максимальные значения в списке. Необходимо указать количество возвращаемых значений или условие фильтрования.",
        "Documentation.LongDescription": "Возвращает максимальные значения в списке <code>list</code>.\r\n    После сортировки строк результаты могут быть отфильтрованы с помощью необязательных параметров. Необязательный параметр <code>countOrCondition</code> указывает количество возвращаемых значений или условие фильтрации. Необязательный параметр <code>comparisonCriteria</code> указывает, как сравнивать значения в списке.\r\n <ul>\r\n        <li> <code>list</code>: список значений.</li>\r\n        <li> <code>countOrCondition</code>: если указано число, возвращается список элементов до <code>countOrCondition</code> по возрастанию. Если указано условие, возвращается список элементов, которые изначально соответствуют условию. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Необязательно]</i> Необязательное значение <code>comparisonCriteria</code> определяет, как сравнивать элементы в списке. Если этот параметр имеет значение NULL, используется функция сравнения по умолчанию.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Возвращает минимальные значения в списке. Можно указать количество возвращаемых значений или условие фильтрования.",
        "Documentation.LongDescription": "Возвращает минимальные значения в списке <code>list</code>.\r\n    Параметр <code>countOrCondition</code> задает количество возвращаемых значений или условие фильтрации. Необязательный параметр <code>comparisonCriteria</code> указывает, как сравнивать значения в списке.\r\n <ul>\r\n        <li> <code>list</code>: список значений.</li>\r\n        <li> <code>countOrCondition</code>: если указано число, возвращается список элементов до <code>countOrCondition</code> по возрастанию. Если указано условие, возвращается список элементов, которые изначально соответствуют условию. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются. Если этот параметр имеет значение NULL, возвращается одно наименьшее значение в списке.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Необязательно]</i> Необязательное значение <code>comparisonCriteria</code> определяет, как сравнивать элементы в списке. Если этот параметр имеет значение NULL, используется функция сравнения по умолчанию.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Найти 5 наименьших значений в списке <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Возвращает список чисел для заданного исходного значения, количества и необязательного значения приращения.",
        "Documentation.LongDescription": "Возвращает список чисел для заданного исходного значения, количества и необязательного значения приращения. Значение приращения по умолчанию - 1.\r\n<ul>\r\n   <li><code>start</code>: исходное значение в списке.</li>\r\n   <li><code>count</code>: количество значений, которое требуется создать.</li>\r\n   <li><code>increment</code>: <i>[Необязательно]</i> Значение, на которое выполняется увеличение. Если не указано иное, значение увеличивается с шагом 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из 10 последовательных чисел, начиная с 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Создать список чисел из 10 чисел, начиная с 1, с шагом 2 для каждого последующего числа.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Возвращает выборку из одного или более процентилей, соответствующих заданным вероятностям.",
        "Documentation.LongDescription": "Возвращает выборку из одного или более процентилей из списка <code>list</code>. Если значение <code>percentiles</code> является числом от 0,0 до 1,0, то оно будет рассматриваться как процентиль и результат будет представлять собой\r\n    единственное значение, соответствующее данной вероятности. Если значение <code>percentiles</code> является списком чисел со значениями в диапазоне от 0,0 до 1,0, то результат будет представлять собой список процентилей,\r\n    соответствующих входной вероятности. Опытные пользователи могут выбрать более конкретный метод интерполяции с помощью параметра PercentileMode из записи \"<code>options</code>\", но в большинстве случаев это не рекомендуется.\r\n    Предварительно заданные символы <code>PercentileMode.ExcelInc</code> и <code>PercentileMode.ExcelExc</code> соответствуют методам интерполяции, используемым в функциях Excel\r\n    <code>PERCENTILE.INC</code> и <code>PERCENTILE.EXC</code>. Действие по умолчанию соответствует <code>PercentileMode.ExcelInc</code>. Символы\r\n    <code>PercentileMode.SqlCont</code> и <code>PercentileMode.SqlDisc</code> аналогичны действиям SQL Server для <code>PERCENTILE_CONT</code>\r\n    и <code>PERCENTILE_DISC</code> соответственно.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Поиск первого квартиля списка <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Поиск квартилей списка <code>{5, 3, 1, 7, 9}</code> с использованием метода интерполяции, соответствующего <code>PERCENTILE.EXC</code> в Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Возвращает смещение значения в списке.",
        "Documentation.LongDescription": "Возвращает смещение, на котором значение <code>value</code> появляется в списке <code>list</code>. Возвращает –1, если значение не найдено.\r\n    Можно указать необязательный параметр вхождения <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: максимальное количество вхождений, которые могут быть возвращены.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Найти позицию в списке {1, 2, 3}, в которой появляется значение 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Возвращает первое смещение значения в списке.",
        "Documentation.LongDescription": "Возвращает смещение в списке <code>list</code> первого вхождения значения в списке <code>values</code>. Возвращает значение –1, если вхождение не найдено.\r\n    Можно указать необязательный параметр вхождения <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: максимальное количество вхождений, которые могут быть возвращены.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Найти первую позицию в списке {1, 2, 3}, в которой появляется значение 2 или 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Возвращает подмножество списка, начиная со смещения.",
        "Documentation.LongDescription": "Возвращает подмножество списка, начиная со смещения <code>list</code>. Необязательный параметр <code>offset</code> устанавливает максимальное число элементов в подмножестве.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти подмножество, начиная со смещения 6, в списке чисел от 1 до 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Найти подмножество с количеством элементов 2, начиная со смещения 6, в списке чисел от 1 до 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Удаляет элементы из list1, присутствующие в списке.",
        "Documentation.LongDescription": "Удаляет все вхождения указанных значений из <code>list2</code> в <code>list1</code>. Если значения в <code>list2</code> не существуют в <code>list1</code>, то возвращается исходный список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Удалить элементы списка {2, 4, 6} из списка {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Удаляет все вхождения входных значений.",
        "Documentation.LongDescription": "Удаляет все вхождения значений, заданных в списке <code>list2</code>, из списка <code>list1</code>. Если значения в <code>list2</code> не существуют в <code>list1</code>, то возвращается исходный список.\r\n    Необязательное значение критерия уравнения <code>equationCriteria</code> можно указать для управления проверкой на равенство. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1, 2, 3, 4, 5, 5} без {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Удаляет заданное количество значений, начиная с указанной позиции.",
        "Documentation.LongDescription": "Удаляет <code>count</code> значений из списка <code>list</code>, начиная с указанной позиции <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Удалить 3 значения из списка {1, 2, 3, 4, -6, -2, -1, 5}, начиная с индекса 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Возвращает список, повторяющий исходный список указанное число раз.",
        "Documentation.LongDescription": "Возвращает список, <code>count</code> раз повторяющий исходный список <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список, в котором {1, 2} повторяется 3 раза.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Применяет все замены вида { old, new }.",
        "Documentation.LongDescription": "Выполняет заданные замены в списке <code>list</code>. В операции замены <code>replacements</code> применяется список из пар значений, старого и нового.\r\n    Необязательное значение критерия уравнения <code>equationCriteria</code> можно указать для управления проверкой на равенство.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1, 2, 3, 4, 5}, заменив значение 5 на -5, а значение 1 на -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Возвращает список значений, которые соответствуют условию.",
        "Documentation.LongDescription": "Возвращает список значений из списка <code>list</code>, которые удовлетворяют условию выбора <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти в списке {1, -3, 4, 9, -2} значения больше 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Разделяет указанный список на список списков с заданным размером страницы.",
        "Documentation.LongDescription": "Разделяет <code>list</code> на список списков, где первый элемент выходного списка — список с первыми элементами (<code>pageSize</code>) из\r\n    исходного списка, следующий элемент выходного списка — список со следующими элементами (<code>pageSize</code>) из исходного списка и т. д.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Возвращает новый список значений, вычисленных для этого списка.",
        "Documentation.LongDescription": "Возвращает новый список значений, применяя функцию преобразования <code>transform</code> к списку <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Добавить 1 к каждому значению в списке {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Возвращает арктангенс частного от деления двух чисел.",
        "Documentation.LongDescription": "Возвращает арктангенс частного от деления двух чисел, <code>y</code> и <code>x</code>. Деление будет построено как <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Возвращает результат выполнения побитовой операции AND с двумя входными значениями.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитовой операции AND со значениями <code>number1</code> и <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Возвращает результат выполнения побитовой операции OR с двумя входными значениями.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитовой операции OR со значениями <code>number1</code> и <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Сдвигает набор битов влево.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитового сдвига влево над <code>number1</code> на указанное число битов <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Сдвигает заданные биты вправо.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитового сдвига вправо над <code>number1</code> на указанное число битов <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Возвращает результат выполнения побитовой операции XOR (исключающее ИЛИ) с двумя входными значениями.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитовой операции XOR (исключающее ИЛИ) со значениями <code>number1</code> и <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Возвращает определенное количество уникальных сочетаний.",
        "Documentation.LongDescription": "Возвращает определенное количество уникальных сочетаний из элементов списка <code>setSize</code> с указанным размером сочетания <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Количество элементов в списке.</li>\r\n    <li><code>combinationSize</code>: Количество элементов в каждом сочетании.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти количество сочетаний из 5 элементов по 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Делит два числа и возвращает целочисленную часть результата.",
        "Documentation.LongDescription": "Возвращает целочисленную часть результата от деления числа <code>number1</code> на число <code>number2</code>.\r\n    Если <code>number1</code> или <code>number2</code> равно NULL, <code>Number.IntegerDivide</code> возвращает NULL.\r\n      <ul>\r\n        <li><code>number1</code>: делимое.</li>\r\n        <li><code>number2</code>: делитель.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Разделить 6 на 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Разделить 8,3 на 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Выполняет целочисленное деление одного числа на другое и возвращает остаток от деления.",
        "Documentation.LongDescription": "Возвращает остаток от целочисленного деления <code>number</code> на <code>divisor</code>.\r\n    Если <code>number</code> или <code>divisor</code> равно NULL, <code>Number.Mod</code> возвращает NULL.\r\n      <ul>\r\n        <li><code>number</code>: делимое.</li>\r\n        <li><code>divisor</code>: делитель.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти остаток от деления 5 на 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Возвращает число перестановок.",
        "Documentation.LongDescription": "Возвращает число перестановок, которое можно создать из нескольких элементов <code>setSize</code>, с указанным размером перестановки <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти число перестановок для 5 элементов по 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Возводит число в заданную степень.",
        "Documentation.LongDescription": "Возвращает результат возведения <code>number</code> в степень <code>power</code>.\r\n    Если <code>number</code> или <code>power</code> равно NULL, <code>Number.Power</code> возвращает NULL.\r\n      <ul>\r\n        <li><code>number</code>: основание.</li>\r\n        <li><code>power</code>: показатель степени.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти значение 5 в степени 3 (5 в кубе).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Возвращает случайное число между 2 чисел.",
        "Documentation.LongDescription": "Возвращает случайное число, расположенное между <code>bottom</code> и <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Получить случайное число между 1 и 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Возвращает значение указанного поля в записи.",
        "Documentation.LongDescription": "Возвращает значение указанного <code>field</code> в <code>record</code>. Если поле не найдено, возникает исключение.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Нахождение значения поля CustomerID в записи.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Возвращает значение указанного поля в записи или значение по умолчанию, если поле не найдено.",
        "Documentation.LongDescription": "Возвращает значение указанного поля <code>field</code> в записи <code>record</code>. Если поле не найдено, то возвращается необязательное значение <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Нахождение значения поля Phone в записи или возврат значения Null, если оно не существует.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Нахождение значения поля Phone в записи или возврат значения по умолчанию, если оно не существует.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Возвращает запись для данного списка значений полей и набора полей.",
        "Documentation.LongDescription": "Возвращает запись для данного списка <code>list</code> значений полей и набора полей.  <code>fields</code> можно задать либо списком текстовых значений, либо типом \"запись\".  Если поля неуникальны, выдается ошибка.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Создать запись из списка значений полей и списка имен полей.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Создать запись из списка значений полей и записи.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Указывает, содержит ли запись указанные поля.",
        "Documentation.LongDescription": "Указывает, содержит ли запись <code>record</code> поля, заданные в <code>fields</code>, возвращая логическое значение (true или false).\r\n    Значения нескольких полей можно указать с помощью списка.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Проверка, содержится ли в записи поле CustomerID.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Проверка, содержатся ли в записи поля CustomerID и Address.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Удаляет указанные поля из входной записи.",
        "Documentation.LongDescription": "Возвращает запись, которая удаляет все поля, указанные в списке <code>fields</code>, из входных данных <code>record</code>. Если указанное поле не существует, возникает исключение.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Удаление поля Price из записи.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Удаление поля Price и Item из записи.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Применяет переименования из списка в форме { old, new }.",
        "Documentation.LongDescription": "Возвращает запись после присвоения полям во входных данных <code>record</code> новых имен, указанных в списке <code>renames</code>. Для нескольких переименований можно использовать вложенный список ({ {старое1, новое1}, {старое2, новое2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Переименование поля UnitPrice в Price в записи.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Переименование поля UnitPrice в Price, а поле OrderNum в OrderID в записи.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Меняет порядок указанных полей на новый.",
        "Documentation.LongDescription": "Возвращает запись после изменения порядка полей в <code>record</code> согласно порядку, указанному в списке <code>fieldOrder</code>. Значения полей сохраняются, а поля, не указанные в <code>fieldOrder</code>, остаются в исходном положении.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Изменение порядка некоторых полей в записи.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Возвращает запись, которая содержит только заданные поля.",
        "Documentation.LongDescription": "Возвращает запись, которая включает только поля, указанные в списке <code>fields</code>, из входных данных <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Выбор полей Item и Price в записи.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Возвращает запись после применения указанных преобразований.",
        "Documentation.LongDescription": "Возвращает запись после применения преобразований, указанных в списке <code>transformOperations</code>, в <code>record</code>.\r\n    Одновременно может быть преобразовано одно поле или несколько.\r\n      <div>В случае одного преобразуемого поля предполагается, что <code>transformOperations</code> — список с двумя элементами. Первый элемент в <code>transformOperations</code> указывает имя поля, а второй элемент в <code>transformOperations</code> указывает функцию, используемую для преобразования. Например, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>В случае преобразования нескольких полей предполагается, что <code>transformOperations</code> — список списков, где каждый внутренний список представляет собой пару из имени поля и операции преобразования. Например, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать поле \"Price\" в число.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Преобразовать поля \"OrderID\" и \"Price\" в числа.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Возвращает функцию, которая разделяет текст по спискам в соответствии с переходом одного типа символа в другой. Параметры {0} и {1} могут быть списком символов или функцией, которая принимает символ и возвращает значение True или False.",
        "Documentation.LongDescription": "Возвращает функцию, которая разделяет текст по спискам в соответствии с переходом одного типа символа в другой. Параметры <code>before</code> и <code>after</code> могут быть списком символов или функцией, которая принимает символ и возвращает значение True или False.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных, когда за прописной или строчной буквой следует цифра.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Преобразует указанный запрос SQL в код M. Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Преобразует указанный запрос <code>sql</code> в код M с доступными идентификаторами, определенными в <code>environment</code>. Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Возвращает указанный столбец данных из таблицы в виде списка.",
        "Documentation.LongDescription": "Возвращает столбец данных, указанный с помощью <code>column</code>, из таблицы <code>table</code> в виде списка.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Возврат значений из столбца [Name] таблицы.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Возвращает список с именами столбцов, соответствующих указанным типам.",
        "Documentation.LongDescription": "Возвращает список с именами столбцов таблицы <code>table</code>, соответствующих указанным в <code>listOfTypes</code> типам.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Возврат имен столбцов типа Number.Type из таблицы.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Указывает, появляется ли указанная запись в виде строки в таблице.",
        "Documentation.LongDescription": "Указывает, появляется ли указанная запись <code>row</code> в виде строки в <code>table</code>.\r\n    Для управления сравнением строк таблицы может быть указан необязательный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Определение, содержит ли таблица строку.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определение, содержит ли таблица строку.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Определение, содержит ли таблица строку, путем сравнения только столбца [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Указывает, появляются ли все указанные записи в виде строк в таблице.",
        "Documentation.LongDescription": "Указывает, появляются ли все записи, указанные в списке записей <code>rows</code>, в виде строк в <code>table</code>.\r\n    Для управления сравнением строк таблицы может быть указан необязательный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Определение, содержит ли таблица все строки, путем сравнения только столбца [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определение, содержит ли таблица все строки.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Указывает, появляется ли любая из указанных записей в виде строки в таблице.",
        "Documentation.LongDescription": "Указывает, появляется ли любая запись, указанная в списке записей <code>rows</code>, в виде строки в <code>table</code>.\r\n    Для управления сравнением строк таблицы может быть указан необязательный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Определить, содержит ли таблица <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> строку <code>[a = 1, b = 2]</code> или <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определить, содержит ли таблица <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> строку <code>[a = 1, b = 3]</code> или <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Определить, содержит ли таблица <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> строку <code>[a = 1, b = 3]</code> или <code>[a = 3, b = 5]</code>, сравнивая только столбец [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Указывает, содержит ли таблица указанные столбцы.",
        "Documentation.LongDescription": "Указывает, содержит ли <code>table</code> указанные столбцы <code>columns</code>. Возвращает значение <code>true</code>, если таблица содержит эти столбцы. В противном случае возвращается значение <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Определение, содержит ли таблица столбец [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определение, содержит ли таблица столбцы [Name] и [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Указывает, все строки ли в таблице соответствуют заданному условию.",
        "Documentation.LongDescription": "Указывает, все ли строки в <code>table</code> соответствуют заданному <code>condition</code>. Возвращает <code>true</code>, если все строки соответствуют условию, <code>false</code> - в противном случае.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Определение, все ли значения строк в столбце [a] в таблице являются четными.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определить, все ли значения строк равны [a = 1, b = 2], в таблице <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Указывает, соответствует ли какая-либо строка в таблице заданному условию.",
        "Documentation.LongDescription": "Указывает, есть ли в <code>table</code> строка, соответствующая заданному <code>condition</code>. Возвращает <code>true</code>, если хотя бы одна строка соответствует условию, <code>false</code> - в противном случае.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Определить, является ли хотя бы одно из значений строк в столбце [a] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> четным.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Определить, имеется ли хотя бы одно значение строк [a = 1, b = 2] в таблице <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Возвращает самую большую строку или значение по умолчанию, используя заданные критерии.",
        "Documentation.LongDescription": "Возвращает наибольшую строку в <code>table</code>, исходя из критериев <code>comparisonCriteria</code>. Если таблица пуста, то возвращается значение необязательного параметра <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Найти строку с наибольшим значением в столбце [a] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Найти строку с наибольшим значением в столбце [a] в таблице <code>({})</code>. Получить -1, если таблица пуста.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Возвращает наименьшую строку или значение по умолчанию, исходя из заданных критериев.",
        "Documentation.LongDescription": "Возвращает наименьшую строку в <code>table</code>, исходя из критериев <code>comparisonCriteria</code>. Если таблица пуста, то возвращается значение необязательного параметра <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Нахождение строки с наименьшим значением в столбце [a] в таблице.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Нахождение строки с наименьшим значением в столбце [a] в таблице. Возврат -1, если таблица пуста.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Возвращает позиции строки в таблице.",
        "Documentation.LongDescription": "Возвращает позицию строки первого вхождения <code>table</code> в указанной <code>row</code>. Возвращает значение –1, если вхождение не найдено.\r\n    <ul>\r\n       <li><code>table</code>: входная таблица.</li>\r\n       <li><code>row</code>: строка в таблице, позиция которой должна быть найдена.</li>\r\n       <li><code>occurrence</code>: <i>[необязательно]</i> указывает, какие вхождения строки возвращать.</li>\r\n       <li><code>equationCriteria</code>: <i>[необязательно]</i> управляет сравнением строк таблицы.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Найти позицию первого вхождения [a = 2, b = 4] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Найти позицию второго вхождения [a = 2, b = 4] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Найти позиции всех вхождений [a = 2, b = 4] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Возвращает позиции любой из указанных строк в таблице.",
        "Documentation.LongDescription": "Возвращает позиции строк из <code>table</code> от первого вхождения в списке <code>rows</code>. Возвращает значение –1, если вхождение не найдено.\r\n    <ul>\r\n    <li><code>table</code>: входная таблица.</li>\r\n       <li><code>rows</code>:  список строк в таблице для поиска позиций.</li>\r\n       <li><code>occurrence</code>: <i>[необязательно]</i> указывает, какие вхождения строки возвращать.</li>\r\n       <li><code>equationCriteria</code>: <i>[необязательно]</i> управляет сравнением строк таблицы.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Найти позицию первого вхождения [a = 2, b = 4] или [a = 6, b = 8] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Найти позиции всех вхождений [a = 2, b = 4] или [a = 6, b = 8] в таблице <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Разделяет указанную таблицу на список таблиц с заданным размером страницы.",
        "Documentation.LongDescription": "Разделяет <code>table</code> на список таблиц, где первый элемент списка — таблица с первыми строками (<code>pageSize</code>) из\r\n    исходной таблицы, следующий элемент списка — таблица со следующими строками (<code>pageSize</code>) из исходной таблицы и т. д.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Разделите таблицу с пятью записями на таблицы с двумя записями в каждой.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Возвращает список, содержащий указанное количество первых строк и оставшиеся строки.",
        "Documentation.LongDescription": "Возвращает список, содержащий две таблицы: таблицу с первыми N строками <code>table</code> (в соответствии с <code>count</code>) и таблицу с оставшимися строками <code>table</code>.\r\n\r\nЕсли таблицы получившегося списка пронумерованы только один раз и по порядку, то функция пронумерует <code>table</code> только один раз.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Возвращает две первые строки таблицы и остальные строки таблицы.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Преобразует строки таблицы с помощью заданной функции преобразования.",
        "Documentation.LongDescription": "Создает <code>список</code>, применяя операцию <code>transform</code> к каждой строке в <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Преобразуйте строки таблицы в список чисел.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Преобразуйте строки числовой таблицы в текстовые записи.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Возвращает часть <code>text</code> после указанного <code>delimiter</code>.\r\n    Необязательный числовой <code>index</code> указывает, какое вхождение <code>delimiter</code> следует рассматривать.\r\n    Необязательный список <code>index</code> указывает, какое вхождение <code>delimiter</code> следует рассматривать, а также откуда вести индексацию — с начала или с конца входных данных.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Получить часть строки \"111-222-333\" после (первого) дефиса.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Получить часть строки \"111-222-333\" после второго дефиса.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Получить часть строки \"111-222-333\" после второго дефиса с конца.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Возвращает символ в указанной позиции.",
        "Documentation.LongDescription": "Возвращает символ в текстовом значении <code>text</code> в позиции <code>index</code>. Первый символ в тексте находится в позиции 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Найти символ в позиции 4 в строке \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Возвращает часть <code>text</code> перед указанным <code>delimiter</code>.\r\n    Необязательный числовой <code>index</code> указывает, какое вхождение <code>delimiter</code> следует рассматривать.\r\n    Необязательный список <code>index</code> указывает, какое вхождение <code>delimiter</code> следует рассматривать, а также откуда вести индексацию — с начала или с конца входных данных.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Получить часть строки \"111-222-333\" перед (первым) дефисом.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Получить часть строки \"111-222-333\" перед вторым дефисом.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Получить часть строки \"111-222-333\" перед вторым дефисом с конца.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Определяет, содержит ли текст подстроку.",
        "Documentation.LongDescription": "Определяет, содержит ли <code>text</code> значение <code>substring</code>. Возвращает значение true, если значение найдено. Эта функция не поддерживает подстановочные знаки и регулярные выражения.\r\n      <br>\r\n      <br>\r\n      Необязательный аргумент <code>comparer</code> можно использовать для сравнений, не учитывающих регистр или учитывающих языковой стандарт и региональные параметры.\r\n      В языке формул доступны следующие встроенные функции сравнения:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> — используется для сравнения по порядковому номеру с учетом регистра</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> — используется для сравнения по порядковому номеру без учета регистра</li>\r\n        <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Найти, содержит ли текст \"Hello World\" подстроку \"Hello\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Найти, содержит ли текст \"Hello World\" подстроку \"hello\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Узнайте, содержится ли слово \"hello\" в тексте \"Hello World\" с помощью функции сравнения, не учитывающей регистр.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Возвращает последние символы текста.",
        "Documentation.LongDescription": "Возвращает значение <code>text</code>, представляющее собой последние <code>count</code> символов значения <code>text</code> типа <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Получить последние 5 символов строки \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Указывает, завершается ли текст указанным значением.",
        "Documentation.LongDescription": "Указывает, завершается ли этот текст <code>text</code> указанным значением <code>substring</code>. Проверка выполняется с учетом регистра.\r\n\r\n      <div>\r\n        <code>comparer</code> — это модуль <code>Comparer</code>, который используется для управления сравнением. Функции сравнения можно использовать для сравнений, не учитывающих регистр или учитывающих языковой стандарт и региональные параметры.\r\n      </div>\r\n      <div>\r\n        В языке формул доступны следующие встроенные функции сравнения:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>> — используется для точного сравнения по порядковому номеру</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> — используется для точного сравнения по порядковому номеру без учета регистра</li>\r\n        <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Проверить, оканчивается ли \"Hello, World\" на \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Проверить, оканчивается ли \"Hello, World\" на \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Возвращает отформатированный текст из строки форматирования и аргументов.",
        "Documentation.LongDescription": "Возвращает отформатированный текст, который создается путем применения <code>arguments</code> из списка или записи к строке форматирования <code>formatString</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Форматирование списка чисел.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Форматирование разных типов данных из записи в соответствии с языком и региональными параметрами.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Возвращает подстроку до заданной длины.",
        "Documentation.LongDescription": "Возвращает символы (<code>count</code> шт.) или идет до конца \"<code>text</code>\"; при смещении <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Возвращает подстроку из текста Hello World, начиная с индекса 6. Длина области, в которой производится поиск, начинается с указанного индекса и распространяется на 5 символов.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Отыскивает подстроку в тексте Hello World, начиная с индекса 6 до конца.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Возвращает текст указанной длины путем заполнения символами конца заданного текста.",
        "Documentation.LongDescription": "Возвращает значение <code>text</code>, дополненное символами до длины <code>count</code> посредством вставки пробелов в конце текстового значения <code>text</code>.\r\n    Для задания символа, который следует использовать для заполнения, можно указать необязательный символ <code>character</code>. Символом для заполнения по умолчанию является пробел.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Заполнить конец текстового значения так, чтобы в значении было 10 символов.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Заполнить конец текстового значения знаком \"|\" так, чтобы в значении было 10 символов.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Возвращает текст указанной длины путем заполнения символами начала заданного текста.",
        "Documentation.LongDescription": "Возвращает значение <code>text</code>, дополненное символами до длины <code>count</code> посредством вставки пробелов в начале текстового значения <code>text</code>.\r\n    Для задания символа, который следует использовать для заполнения, можно указать необязательный символ <code>character</code>. Символом для заполнения по умолчанию является пробел.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Заполнить начало текстового значения так, чтобы в значении было 10 символов.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Заполнить начало текстового значения знаком \"|\" так, чтобы в значении было 10 символов.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Возвращает первую позицию значения (-1, если не найдено).",
        "Documentation.LongDescription": "Возвращает позицию указанного вхождения текстового значения <code>substring</code>, найденного в <code>text</code>.\r\n    Для указания позиции возвращаемого вхождения может использоваться необязательный параметр <code>occurrence</code> (по умолчанию — первое вхождение).\r\n    Возвращает –1, если не удается найти <code>substring</code>.\r\n\r\n      <div>\r\n        <code>comparer</code> — это <code>Comparer</code>, который используется для управления сравнением. Функции сравнения можно использовать для сравнений, не учитывающих регистр или учитывающих языковой стандарт и региональные параметры.\r\n      </div>\r\n      <div>\r\n        В языке формул доступны следующие встроенные функции сравнения:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> — используется для точного сравнения по порядковому номеру</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> — используется для точного сравнения по порядковому номеру без учета регистра</li>\r\n        <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Возвращает позицию первого вхождения \"World\" в тексте \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Получить позицию последнего вхождения \"World\" в \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Возвращает первую позицию любого из перечисленных символов в текстовом значении (-1, если не найдено).",
        "Documentation.LongDescription": "Возвращает первую позицию любого символа из списка <code>characters</code>, обнаруженного в <code>text</code>.\n    Для указания возвращаемой позиции вхождения может использоваться необязательный параметр <code>occurrence</code>.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Найти первую позицию \"W\" или \"H\" в тексте \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Найти все позиции \"W\" или \"H\" в тексте \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Возвращает подстроку, найденную по смещению.",
        "Documentation.LongDescription": "Возвращает подстроку из текста <code>text</code>, найденную по смещению <code>offset</code>.\r\n    Можно включить необязательный параметр <code>count</code>, чтобы указать число символов, которое необходимо получить. Возвращает ошибку при недостаточном количестве символов.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Найдите подстроку из текста \"Hello World\", начиная с индекса 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Найти подстроку из текста \"Hello World Hello\" длиной 5 символов, начиная с индекса 6.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Удаляет все вхождения заданного символа или списка символов из входного текстового значения.",
        "Documentation.LongDescription": "Возвращает копию текстового значения <code>text</code>, в которой удалены все символы с <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Удалить символы \",\" и \";\" из текстового значения.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Удаляет заданное количество символов, начиная с заданного смещения",
        "Documentation.LongDescription": "Возвращает копию текстового значения <code>text</code>, в которой удалены все символы с позиции <code>offset</code>.\r\n    Можно использовать необязательный параметр <code>count</code>, чтобы указать число символов, которое необходимо удалить. Значение <code>count</code> по умолчанию — 1. Значения позиций начинаются с 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Удалить 1 символ из текстового значения \"ABEFC\" в позиции 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Удалить 2 символа из текстового значения \"ABEFC\", начиная с позиции 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Возвращает текстовое значение, состоящее из входного текста, повторенного указанное число раз.",
        "Documentation.LongDescription": "Возвращает текстовое значение, состоящее из входного текста <code>text</code>, повторенного <code>count</code> раз.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Повторить текст \"a\" 5 раз.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Повторить текст \"helloworld\" три раза.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Выделяет все вхождения заданного символа или списка символов из входного текстового значения.",
        "Documentation.LongDescription": "Возвращает копию текстового значения <code>text</code>, из которой удалены все символы, которых нет в <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Выберите в текстовом значении все символы в диапазоне от \"а\" до \"я\".",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Разбивает текст на список текстовых значений на основе указанного разделителя.",
        "Documentation.LongDescription": "Возвращает список текстовых значений, полученных в результате разбиения текстового значения <code>text</code> на основе указанного разделителя <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Создать список из текстового значения \"Name|Address|PhoneNumber\", разбитого с помощью разделителя \"|\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Возвращает список текстовых значений, разбитых по любому из символов в разделителе.",
        "Documentation.LongDescription": "Возвращает список текстовых значений, полученных в результате разбиения текстового значения <code>text</code> на основе любого символа в указанном разделителе <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Создать список из текстового значения \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Возвращает начало текста.",
        "Documentation.LongDescription": "Возвращает первые <code>count</code> символов из <code>text</code> как текстовое значение.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Получить первые 5 символов \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Указывает, начинается ли текст с указанного значения.",
        "Documentation.LongDescription": "Возвращает значение True, если текстовое значение <code>text</code> начинается с текстового значения <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Значение <code>text</code>, которое следует найти</li>\r\n        <li><code>substring</code>: <i></i> Значение <code>text</code>, представляющее подстроку для поиска в <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[необязательно]</i> <code>Comparer</code>, используемый для управления сравнением. Например, <code>Comparer.OrdinalIgnoreCase</code> может использоваться для поиска без учета регистра</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> — это модуль <code>Comparer</code>, который используется для управления сравнением. Функции сравнения можно использовать для сравнений, не учитывающих регистр или учитывающих языковой стандарт и региональные параметры.\r\n      </div>\r\n      <div>\r\n        В языке формул доступны следующие встроенные функции сравнения:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> — используется для точного сравнения по порядковому номеру</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> — используется для точного сравнения по порядковому номеру без учета регистра</li>\r\n        <li> <code>Comparer.FromCulture</code> — используется для сравнения с учетом языка и региональных параметров</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Проверить, начинается ли текст \"Hello, World\" с \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Проверить, начинается ли текст \"Hello, World\" с \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Возвращает тип, представляющий функции с определенными ограничениями на параметры и тип возвращаемого значения.",
        "Documentation.LongDescription": "Создает тип функции <code>function type</code> из <code>signature</code>, запись <code>ReturnType</code> и <code>Parameters</code>, и <code>min</code> - минимальное число аргументов, необходимых для вызова функции.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Создает тип функции, которая принимает числовой параметр X и возвращает число.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Возвращает тип, представляющий записи с определенными ограничениями на тип для полей.",
        "Documentation.LongDescription": "Возвращает тип, представляющий записи с определенными ограничениями на тип для полей.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Динамическое создание типа таблицы.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Определяет, является ли значение первого типа всегда совместимым со вторым типом.",
        "Documentation.LongDescription": "Определяет, является ли значение <code>type1</code> всегда совместимым с <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Определите, всегда ли можно рассматривать значение типа number как тип any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Определите, всегда ли значение типа any можно обрабатываться как число типа.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Заменяет аспекты типа.",
        "Documentation.LongDescription": "Заменяет аспекты <code>type</code> на аспекты из записи <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Возвращает новый тип таблицы, где все ключи заменены указанным списком ключей.",
        "Documentation.LongDescription": "Возвращает новый тип таблицы, где все ключи заменены указанным списком ключей.<br>\r\n    <br>\r\n    Каждый ключ определяется с помощью записи в следующей форме:\r\n    <ul>\r\n      <li>\r\n        <code>Столбцы</code>: список имен столбцов, которые определяют ключ\r\n      </li>\r\n      <li>\r\n        <code>Первичный</code>: <code>true</code> если ключ является первичным ключом таблицы; в противном случае <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Указанный список ключей проверяется, чтобы убедиться, что не определено более одного первичного ключа и что в типе таблицы существуют все имена ключевых столбцов.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Заменить сведения о ключах для типа таблицы.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Очистить сведения о ключах, ранее определенных для типа таблицы.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Возвращает тип столбца в таблице.",
        "Documentation.LongDescription": "Возвращает тип столбца <code>column</code> в типе таблицы <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Возвращает абсолютный URI, представляющий собой сочетание базового URI и относительного URI входных данных.",
        "Documentation.LongDescription": "Возвращает абсолютный URI, представляющие собой сочетание входных данных <code>baseUri</code> и <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Возвращает сумму двух значений.",
        "Documentation.LongDescription": "Возвращает сумму значений <code>value1</code> и <code>value2</code>. Можно указать необязательный параметр <code>precision</code>, по умолчанию используется <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Возвращает значение, если оно совместимо с указанным типом.",
        "Documentation.LongDescription": "Возвращает значение, если оно совместимо с указанным типом. Это эквивалентно оператору \"as\" в M, за исключением того, что оно может принимать ссылки на тип идентификатора, такие как Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Преобразование числа в число.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Попытка преобразовать текстовое значение в число.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Возвращает значение –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.",
        "Documentation.LongDescription": "Возвращает значение –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Возвращает результат деления первого значения на второе.",
        "Documentation.LongDescription": "Возвращает результат деления <code>value1</code> на <code>value2</code>. Можно указать необязательный параметр <code>precision</code>, по умолчанию используется <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Проверяет, равны ли два значения.",
        "Documentation.LongDescription": "Возвращает значение true, если значение <code>value1</code> равно значению <code>value2</code>, в противном случае - false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Определяет, совместимо ли значение с указанным типом.",
        "Documentation.LongDescription": "Определяет, совместимо ли значение с указанным типом. Это эквивалентно оператору \"is\" в M, за исключением того, что оно может принимать ссылки на тип идентификатора, такие как Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Сравните два способа определения совместимости числа с числом типа.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Возвращает произведение двух значений.",
        "Documentation.LongDescription": "Возвращает результат умножения <code>value1</code> на <code>value2</code>. Можно указать необязательный параметр <code>precision</code>, по умолчанию используется <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Вычисляет запрос для целевого объекта.",
        "Documentation.LongDescription": "<p>Вычисляет <code>query</code> в <code>target</code> с помощью параметров, указанных в <code>parameters</code> и в <code>options</code>.</p>\r\n<p>Выходные данные запроса определяются <code>target</code>.</p>\r\n<p>В <code>target</code> предоставляется контекст для операции, описанной <code>query</code>.</p>\r\n<p>В <code>query</code> описывается запрос, который будет выполнен в <code>target</code>. <code>query</code> обычно выражается так же, как в <code>target</code> (например, в инструкции T-SQL).</p>\r\n<p>Необязательное значение <code>parameters</code> может содержать соответствующий список или запись для предоставления значений параметров, ожидаемых <code>query</code>.</p>\r\n<p>Необязательная запись <code>options</code> может содержать параметры, которые влияют на поведение выполнения <code>query</code> в <code>target</code>. Эти параметры относятся к <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Проверяет, равны ли два значения.",
        "Documentation.LongDescription": "Возвращает NULL, если любой из аргументов \"<code>value1</code>\" и \"<code>value2</code>\" равен NULL, в противном случае - эквивалент Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Заменяет метаданные входных данных.",
        "Documentation.LongDescription": "Заменяет метаданные входных данных.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Заменяет тип значения.",
        "Documentation.LongDescription": "Заменяет тип <code>value</code> на указанный <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Замените стандартный тип записи на более конкретный.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Возвращает разность двух значений.",
        "Documentation.LongDescription": "Возвращает разность <code>value1</code> и <code>value2</code>. Можно указать необязательный параметр <code>precision</code>, по умолчанию используется <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Создает действие, которое при выполнении вернет результаты выполнения HTTP-запроса в виде двоичного значения.",
        "Documentation.LongDescription": "Создает действие, которое после завершения вернет результаты выполнения запроса <code>method</code> к <code>url</code> с использованием HTTP в качестве двоичного значения.\r\n    Для указания дополнительных свойств можно задать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>Query</code> : Добавляйте параметры запросов в URL-адрес программным способом, не беспокоясь об экранировании.</li>\r\n<li><code>ApiKeyName</code> : Если целевой сайт поддерживает ключ API, этот параметр можно использовать для указания имени (не значения) параметра ключа, который следует использовать в URL-адресе. Фактическое значение ключа указывается в учетных данных.</li>\r\n<li><code>Headers</code> : При указании этого значения в виде записи в HTTP-запрос будут добавлены дополнительные заголовки.</li>\r\n<li><code>Timeout</code> : При указании этого значения в виде длительности будет изменено время ожидания HTTP-запроса. Значение по умолчанию&#160;— 100&#160;секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : При указании этого значения в виде списка эти ключи заголовков HTTP будут исключены из вычислений для кэширования данных.</li>\r\n<li><code>IsRetry</code> : При указании этого логического значения как True все существующие ответы в кэше будут игнорироваться при извлечении данных.</li>\r\n<li><code>ManualStatusHandling</code> : При указании этого значения в виде списка встроенная обработка HTTP-запросов, ответ которых имеет один из этих кодов состояния, будет невозможна.</li>\r\n<li><code>RelativePath</code> : Это значение, указанное в виде текста, будет добавлено к базовому URL-адресу перед выполнением запроса.</li>\r\n<li><code>Content</code> : Указание этого значения приведет к тому, что его содержимое станет телом HTTP-запроса.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Обратите внимание, что эта функция отключена в большинстве контекстов. Рассмотрите возможность использования Web.Contents или Web.Headers вместо нее.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Выполнение запроса GET в Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес конечной точки REST API Azure Enterprise, связанной с вашим соглашением о регистрации",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Возвращает результаты двоичных значений для вызова URL-адреса, указанного для Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Использование функции AzureEnterprise.Contents для извлечения результатов конкретного отчета.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Таблица"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Возвращает содержимое указанного BLOB-объекта из хранилища Azure.",
        "Documentation.LongDescription": "Возвращает содержимое BLOB-объекта по URL-адресу <code>url</code> из хранилища Azure. Вы можете указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Число байт, считываемых перед ожиданием потребителя данных. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>RequestSize</code> : Число байт, которое пытается считать один HTTP-запрос к серверу. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests поддерживает ускоренное скачивание данных, позволяя указать число параллельно выполняемых запросов за счет использования памяти. Требуемый объем памяти: ConcurrentRequest (Число параллельных запросов)&#160;* RequestSize (Размер запроса). Значение по умолчанию&#160;— 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Возвращает содержимое указанного файла из файловой системы Azure Data Lake Storage.",
        "Documentation.LongDescription": "Возвращает содержимое файла по URL-адресу <code>url</code> из файловой системы Azure Data Lake Storage. Вы можете указать <code>options</code> для управления следующими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Число байт, считываемых перед ожиданием потребителя данных. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>RequestSize</code> : Число байт, которое пытается считать один HTTP-запрос к серверу. Значение по умолчанию&#160;— 4&#160;МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests поддерживает ускоренное скачивание данных, позволяя указать число параллельно выполняемых запросов за счет использования памяти. Требуемый объем памяти: ConcurrentRequest (Число параллельных запросов)&#160;* RequestSize (Размер запроса). Значение по умолчанию&#160;— 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Возвращает примерную длину двоичного значения.",
        "Documentation.LongDescription": "Возвращает примерную длину <code>binary</code> или ошибку, если источник данных не поддерживает примерную длину.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Получение примерной длины двоичного значения.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Помещает двоичное значение в буфер в памяти.",
        "Documentation.LongDescription": "Помещает двоичное значение в буфер в памяти.  Результат вызова - стабильное двоичное значение (то есть с детерминированной длиной и порядком байтов).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Создать стабильную версию двоичного значения.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Объединяет список двоичных значений в одно двоичное значение.",
        "Documentation.LongDescription": "Объединяет список двоичных значений в одно двоичное значение.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Создает двоичное значение из заданного значения",
        "Documentation.LongDescription": "Возвращает значение <code>binary</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Binary.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой значение <code>binary</code>, то <code>value</code> и возвращается. Преобразовать в <code>binary</code> можно значения следующих типов:\r\n      <ul>\r\n        <li><code>text</code>. Значение <code>binary</code> берется из текстового представления. Подробнее см. <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nЕсли <code>value</code> имеет какой-либо другой тип, возвращается ошибка.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Получить значение <code>binary</code> для <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Преобразует список чисел в двоичное значение.",
        "Documentation.LongDescription": "Преобразует список чисел в двоичное значение.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Декодирует данные из текстового формата форме в двоичный формат.",
        "Documentation.LongDescription": "Возвращает результат преобразования текстового значения <code>text</code> в двоичное (список <code>number</code>). Можно задать параметр <code>encoding</code>, чтобы указать кодировку, используемую в текстовом значении.\r\n      Следующие значения <code>BinaryEncoding</code> могут быть использованы для <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: кодировка Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: шестнадцатеричная кодировка</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Декодирование \"1011\" в двоичное значение.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Декодирование \"1011\" в двоичное значение с шестнадцатеричной кодировкой.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Считывает двоичный поток, пытается определить тип содержимого и сведения о формате потока.",
        "Documentation.LongDescription": "Возвращает запись с полем Content.Type, содержащим предполагаемый тип MIME.\r\n    Если предполагаемый тип содержимого — text/* и обнаружена страница кодировки, дополнительно возвращает поле Content.Encoding, содержащее кодировку потока.\r\n    Если предполагаемый тип содержимого — text/csv с разделителями, дополнительно возвращает поле Csv.PotentialDelimiter, содержащее таблицу для анализа потенциальных разделителей.\r\n    Если предполагаемый тип содержимого — text/csv с фиксированной шириной, дополнительно возвращает поле Csv.PotentialPositions, содержащее список для анализа потенциальных позиций столбцов с фиксированной шириной.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Возвращает число символов.",
        "Documentation.LongDescription": "Возвращает число символов.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Преобразует двоичное значение в список чисел.",
        "Documentation.LongDescription": "Преобразует двоичное значение в список чисел.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Кодирует двоичные данные в текстовом формате.",
        "Documentation.LongDescription": "Возвращает результат преобразования списка двоичных чисел <code>binary</code> в текстовое значение. При необходимости можно задать параметр <code>encoding</code>, чтобы указать кодировку, используемую в формируемом текстовом значении\r\n      Для <code>encoding</code> могут быть использованы следующие значения <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: кодировка Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: шестнадцатеричная кодировка</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Создает измененную запись об ошибке, которая не запускает откат при вызове обработчиком, определенным в представлении (через Binary.View).",
        "Documentation.LongDescription": "Создает измененную запись об ошибке из <code>errorRecord</code>, которая не запускает откат при вызове обработчиком, определенным в представлении (через Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Создает функцию, которая может быть перехвачена обработчиком, определенным в представлении (через Binary.View).",
        "Documentation.LongDescription": "<p>Создает на основе <code>function</code> функцию для представления, создаваемого <code>Binary.View</code>.</p>\r\n<p>Задать обработчик для функции представления можно с помощью обработчика <code>OnInvoke</code> из <code>Binary.View</code>.</p>\r\n<p>Как и в случае обработчиков встроенных операций, если обработчик <code>OnInvoke</code> не указан, не обрабатывает функцию представления или выдает ошибку, для представления применяется <code>function</code>.</p>\r\n<p>Более полное описание <code>Binary.View</code> и функций настраиваемого представления см. в опубликованной документации по настраиваемым соединителям Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Двоичный формат, который считывает 64-разрядное целое число со знаком, зашифрованное с использованием 7-разрядной кодировки с переменной длиной.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 64-разрядное целое число со знаком, зашифрованное с использованием 7-разрядной кодировки с переменной длиной.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Двоичный формат, который считывает 64-разрядное целое число без знака, зашифрованное с использованием 7-разрядной кодировки с переменной длиной.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 64-разрядное целое число без знака, зашифрованное с использованием 7-разрядной кодировки с переменной длиной.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Двоичный формат, который считывает 8-разрядное целое число без знака.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 8-разрядное целое число без знака.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Двоичный формат, который считывает 16-байтовое десятичное значение .NET.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 16-байтовое десятичное значение .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Двоичный формат, который считывает 8-байтовое значение двойной точности с плавающей запятой в формате IEEE.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 8-байтовое значение двойной точности с плавающей запятой в формате IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Возвращает двоичный формат, который считывает последовательность элементов и возвращает список.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который считывает последовательность элементов и возвращает <code>список</code>. Параметр <code>binaryFormat</code> указывает двоичный формат каждого элемента.  Определить число считанных элементов можно тремя способами. <ul><li>Если параметр <code>countOrCondition</code> не указан, то двоичный формат будет считываться, пока не будут обработаны все элементы.</li><li>Если <code>countOrCondition</code> — это число, то двоичный формат будет считывать только указанное число элементов.</li><li>Если <code>countOrCondition</code> — это функция, она будет вызвана для чтения каждого элемента. Функция возвращает значение true для продолжения и значение false для остановки считывания элементов. Последний элемент включается в список.</li><li>Если <code>countOrCondition</code> — это двоичный формат, ожидается, что указанное количество элементов будет предшествовать списку, а указанный формат будет использоваться для чтения этого количества.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Считывает байты до конца данных.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Считывает 2 байта.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Считывает байты, пока байтовое значение меньше 2.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Двоичный формат, который считывает нуль байт и возвращает NULL.",
        "Documentation.LongDescription": "Двоичный формат, который считывает нуль байт и возвращает NULL.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Возвращает двоичный формат, который считывает запись.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который считывает запись.  Параметр <code>record</code> указывает формат записи.  Каждое поле записи может содержать различные двоичные форматы.  Если поле содержит значение, которое не является значением двоичного формата, то данные не для этого поля не считываются, а значение поля переносится в результат.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Считывает запись, содержащую одно 16-разрядное целое число и одно 32-разрядное целое число.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Двоичный формат, который считывает 16-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 16-разрядное целое число со знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Двоичный формат, который считывает 32-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 32-разрядное целое число со знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Двоичный формат, который считывает 64-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 64-разрядное целое число со знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Двоичный формат, который считывает 4-байтовое значение одиночной точности с плавающей запятой в формате IEEE.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 4-байтовое значение одиночной точности с плавающей запятой в формате IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Возвращает двоичный формат, который считывает текстовое значение.",
        "Documentation.LongDescription": "Возвращает двоичный формат, который считывает текстовое значение. <code>length</code> указывает число байт для расшифровки или двоичный формат длины, предшествующей тексту. Необязательное значение <code>encoding</code> указывает кодировку текста. Если параметр <code>encoding</code> не указан, кодировка определяется по меткам порядка байтов Юникода. Если метки порядка байтов отсутствуют, используется <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Расшифровка 2 байтов в виде текста ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Расшифровка текста ASCII, где длина текста в байтах указывается перед текстом в виде байта.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Двоичный формат, который считывает 16-разрядное целое число без знака.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 16-разрядное целое число без знака.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Двоичный формат, который считывает 32-разрядное целое число без знака.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 32-разрядное целое число без знака.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Двоичный формат, который считывает 64-разрядное целое число без знака.",
        "Documentation.LongDescription": "Двоичный формат, который считывает 64-разрядное целое число без знака.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Создает 8-разрядное целое число, полученное из предоставленного значения.",
        "Documentation.LongDescription": "Возвращает 8-разрядное целочисленное значение <code>number</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Byte.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в диапазоне 8-разрядных целых чисел и не имеет дробной части, то <code>value</code> и возвращается. При наличии дробной части число округляется в соответствии с указанным режимом. Режим округления по умолчанию — <code>RoundingMode.ToEven</code>. Если <code>value</code> имеет какой-либо другой тип, сначала выполняется преобразование в <code>number</code> с помощью <code>Number.FromText</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить 8-разрядное целое значение <code>number</code> для <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получить 8-разрядное целое значение <code>number</code> для <code>\"4.5\"</code>, используя <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Преобразует число в текстовый символ.",
        "Documentation.LongDescription": "Возвращает символ, эквивалентный числу.<br>\r\n    <br>\r\n    Указанное значение <code>number</code> должно представлять собой 21-разрядную кодовую точку Unicode.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Преобразование числа в эквивалентное символьное значение.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Преобразование символа в число и обратно.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Преобразование шестнадцатеричной кодовой точки для смайлика \"ухмыляющееся лицо\" в эквивалентную суррогатную пару UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Преобразует символ в числовое значение.",
        "Documentation.LongDescription": "Возвращает число, эквивалентное <code>character</code>.<br>\r\n    <br>\r\n    Результатом будет 21-разрядная кодовая точка Unicode, представленная указанным символом или суррогатной парой.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Преобразование символа в эквивалентное числовое значение.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Преобразование суррогатной пары UTF-16 для смайлика \"ухмыляющееся лицо\" в эквивалентную шестнадцатеричную кодовую точку.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Возвращает функцию, которая объединяет список текстовых значений с помощью заданного разделителя.",
        "Documentation.LongDescription": "Возвращает функцию, которая объединяет список текстовых значений в одно текстовое значение с помощью заданного разделителя.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Объедините список текстовых значений с помощью точки запятой в качестве разделителя.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Объединение текста двух столбцов с помощью разделителя-запятой и цитирования в стиле CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Возвращает функцию, которая объединяет список текстовых значений с помощью последовательности разделителей.",
        "Documentation.LongDescription": "Возвращает функцию, которая объединяет список текстовых значений в одно текстовое значение с использованием последовательности разделителей.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Объединение списка текстовых значений с использованием последовательности разделителей.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Возвращает функцию, которая объединяет список текстовых значений с использованием указанных значений длины.",
        "Documentation.LongDescription": "Возвращает функцию, которая объединяет список текстовых значений в одно текстовое значение с использованием заданных значений длины.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Объединение списка текстовых значений путем извлечения указанного числа символов из каждого входного значения.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Объединение списка текстовых значений путем извлечения указанного числа символов после предварительного заполнения результата текстом шаблона.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Возвращает функцию, которая объединяет список текстовых значений с использованием указанных выходных позиций.",
        "Documentation.LongDescription": "Возвращает функцию, которая объединяет список текстовых значений в одно текстовое значение, используя заданные значения выходных позиций.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Объединение списка текстовых значений путем их размещения в выходных данных в указанных позициях.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Возвращает функцию, которая объединяет список текстовых элементов, используя заданные значения позиций и длины.",
        "Documentation.LongDescription": "Возвращает функцию, которая объединяет список текстовых значений в одно текстовое значение, используя заданные значения выходных позиций и длины. Нулевая длина означает, что будет включено все текстовое значение.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Объединение списка текстовых значений, используя заданные значения выходных позиций и длины.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Возвращает функцию сравнения с учетом указанных региональных параметров и регистра.",
        "Documentation.LongDescription": "Возвращает функцию сравнения, использующую <code>culture</code> с учетом регистра с настройкой посредством <code>ignoreCase</code> для выполнения сравнения.<br>\r\n      <br>\r\n      Функция сравнения принимает два аргумента и возвращает –1, 0 или 1, если первое значение соответственно меньше второго, равно ему или больше него.<br>\r\n      <br>\r\n      Значение по умолчанию для <code>ignoreCase</code> равно false. <code>culture</code> должен быть одним из языковых стандартов, поддерживаемых платформой .NET Framework (например, \"ru-RU\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Сравнение \"a\" и \"A\" с использованием языка \"en-US\" для определения того, равны ли значения.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Сравнение \"a\" и \"A\" с использованием языка \"en-US\" без учета регистра для определения того, равны ли значения.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Возвращает уникальный идентификатор члена из значения свойства члена.",
        "Documentation.LongDescription": "Возвращает уникальный идентификатор члена из значения свойства члена. <code>attribute</code>. Возвращает значение NULL для всех остальных значений.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Возвращает ключ свойства.",
        "Documentation.LongDescription": "Возвращает ключ свойства <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Возвращает значение валюты для заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>currency</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Currency.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в пределах диапазона currency, то возвращается <code>value</code> с округлением до четвертого знака дробной части. Если <code>value</code> имеет какой-либо другой тип, то значение сначала преобразуется в <code>number</code> с помощью <code>Number.FromText</code>. Допустимый диапазон для currency: от <code>-922,337,203,685,477.5808</code> до <code>922,337,203,685,477.5807</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. По умолчанию используется <code>RoundingMode.ToEven</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить значение <code>валюты</code> из значения <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Получим значение <code>currency</code> для <code>\"1,23455\"</code>, используя <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Возвращает компонент дня.",
        "Documentation.LongDescription": "Возвращает компонент дня значения <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, из которого извлекается компонент дня.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Получает компонент дня значения <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, представляющего дату 14.05.2011 и время 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Возвращает число (от 0 до 6), соответствующее дню недели предоставленного значения.",
        "Documentation.LongDescription": "Возвращает число (от 0 до 6), соответствующее дню недели предоставленного значения <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс).</li>\r\n        <li><code>firstDayOfWeek</code>: значение <code>Day</code> (День), которое будет считаться первым днем недели. Допустимые значения: Day.Sunday (воскресенье), Day.Monday (понедельник), Day.Tuesday (вторник), Day.Wednesday (среда), Day.Thursday (четверг), Day.Friday (пятница) или Day.Saturday (суббота). Если значение не указано, будет взято значение по умолчанию из региональных параметров.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Возвращает день недели, на который выпадает понедельник, 21 февраля 2011 г., если первым днем недели считается воскресенье.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Возвращает день недели, на который выпадает понедельник, 21 февраля 2011 г., если первым днем недели считается понедельник.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Возвращает название дня недели.",
        "Documentation.LongDescription": "Возвращает название дня недели для указанного значения <code>date</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Получение названия дня недели.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Возвращает число от 1 до 366, представляющее день года.",
        "Documentation.LongDescription": "Возвращает число, представляющее день года в соответствующем значении <code>date</code>, <code>datetime</code> или <code>datetimezone</code>: <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "День года для 1 марта 2011 г.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Возвращает число от 28 до 31, указывающее число дней в месяце.",
        "Documentation.LongDescription": "Возвращает число дней в месяце в значении <code>date</code>, <code>datetime</code> или <code>datetimezone</code>: <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, для которого возвращается число дней в месяце.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Число дней в декабре, представленное как <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Возвращает конец дня.",
        "Documentation.LongDescription": "Возвращает конец дня, который представлен с использованием <code>dateTime</code>. Данные о часовом поясе сохраняются.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется конец дня.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Возвращает конец дня для 14.05.2011 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Возвращает конец дня для 17.05.2011 17:00:00-19:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Возвращает конец месяца.",
        "Documentation.LongDescription": "Возвращает конец месяца, который содержит <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется конец месяца.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Возвращает конец месяца для 14.05.2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Возвращает конец месяца для 17.05.2011 17:00:00-7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Возвращает конец квартала.",
        "Documentation.LongDescription": "Возвращает конец квартала, который содержит <code>dateTime</code>. Данные о часовом поясе сохраняются.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется конец квартала.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск конца квартала для 10 октября 2011 г., 8:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Возвращает конец недели.",
        "Documentation.LongDescription": "Возвращает конец недели, которая содержит <code>dateTime</code>.\r\n    Эта функция принимает необязательное значение <code>Day</code>, <code>firstDayOfWeek</code>, для установки первого дня недели для относительного вычисления. Значение по умолчанию: <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется последний день недели.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Необязательно]</i> Значение <code>Day.Type</code>, представляющее первый день недели. Допустимые значения: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> и <code>Day.Saturday.</code>. Значение по умолчанию — <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Возвращает конец недели для 14.05.2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Получает конец недели для 17.05.2011 17:00:00-7:00, если воскресенье - первый день недели.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Возвращает конец года.",
        "Documentation.LongDescription": "Возвращает конец года, который содержит <code>dateTime</code>, включая доли секунды. Данные о часовом поясе сохраняются.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется конец года.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Возвращает конец года для 14.05.2011 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Получает конец часа для 17.05.2011 17:00:00-7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Создает дату из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>date</code> из указанного параметра <code>value</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").\r\nЕсли параметр <code>value</code> имеет значение <code>null</code>, <code>Date.From</code> возвращает <code>null</code>. Если параметр <code>value</code> имеет значение <code>date</code>, возвращается <code>value</code>. Значения следующих типов можно преобразовать в значение <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: значение <code>date</code> из текстового представления. Дополнительные сведения см. в разделе <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: компонент даты <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: компонент даты локального эквивалента datetime <code>value</code>.</li>\r\n        <li><code>number</code>: компонент даты эквивалента даты и времени OLE-автоматизации, выраженный <code>value</code>.</li>\r\n      </ul>\r\nЕсли <code>value</code> относится к другому типу, возвращается ошибка.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>43910</code> в значение <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Преобразовать <code>#datetime(1899, 12, 30, 06, 45, 12)</code> в значение <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Создает дату из локальных, универсальных и пользовательских форматов дат.",
        "Documentation.LongDescription": "Создает значение <code>date</code> из текстового представления <code>text</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, распознавание даты будет выполняться по принципу наилучшего возможного варианта.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> также может быть текстовым значением. При этом происходит то же самое, что и при <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>2010-12-31</code> в значение <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Поиск даты в григорианском календаре, которая соответствует началу 1400 года в календаре Хиджра.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущий день, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится заданное значение datetime <code>dateTime</code> на текущий день, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли текущее системное время на текущий день.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущий месяц, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение datetime <code>dateTime</code> на текущий месяц, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли текущее системное время на текущий месяц.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущий квартал, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение datetime <code>dateTime</code> на текущий квартал, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли текущее системное время на текущий квартал.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущую неделю, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение datetime <code>dateTime</code> на текущую неделю, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли текущее системное время на текущую неделю.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущий год, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение datetime <code>dateTime</code> на текущий год, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли текущее системное время на текущий год.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Указывает, приходится ли заданная дата на следующий день, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующий день, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли день, следующий после текущего системного времени, на следующий день.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Указывает, приходится ли заданная дата на следующий месяц, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующий месяц, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли месяц, следующий после текущего системного времени, на следующий месяц.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Указывает, приходится ли заданная дата на следующий квартал, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующий квартал, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли квартал, следующий после текущего системного времени, на следующий квартал.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Указывает, приходится ли заданная дата на следующую неделю, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующую неделю, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли неделя, идущая после текущего системного времени, на следующую неделю.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Указывает, приходится ли заданная дата на следующий год, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующий год, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли год, идущий после текущего системного времени, на следующий год.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Указывает, приходится ли заданная дата на предыдущий день, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущий день, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий день, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли день, идущий до текущего системного времени, на предыдущий день.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Указывает, приходится ли заданная дата на предыдущий месяц, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущий месяц, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий месяц, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли месяц, идущий до текущего системного времени, на предыдущий месяц.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Указывает, приходится ли заданная дата на предыдущий квартал, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущий квартал, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий квартал, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли квартал, идущий до текущего системного времени, на предыдущий квартал.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Указывает, приходится ли заданная дата на предыдущую неделю, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущую неделю, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую неделю, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли неделя, идущая до текущего системного времени, на предыдущую неделю.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Указывает, приходится ли заданная дата на предыдущий год, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущий год, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий год, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code> (дата), <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, приходится ли год, идущий до текущего системного времени, на предыдущий год.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Указывает, приходится ли эта дата на текущий год и идет ли она в течение текущего дня или после него, что определяется текущей датой и временем в системе.",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение datetime <code>dateTime</code> на текущий год и идет ли оно в течение текущего дня или после него, что определяется текущей датой и временем в системе.\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, относится ли текущее системное время к периоду, прошедшему с начала года.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Указывает, приходится ли эта дата на високосный год.",
        "Documentation.LongDescription": "Указывает, приходится ли указанное значение datetime <code>dateTime</code> на високосный год.\r\n <ul>\r\n        <li><code>dateTime</code>: значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>, которое необходимо оценить.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, является ли 2012 год, представленный <code>#date(2012, 01, 01)</code>, високосным.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Возвращает компонент месяца.",
        "Documentation.LongDescription": "Возвращает компонент месяца заданного значения <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Найти компонент месяца в #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Возвращает название компонента месяца.",
        "Documentation.LongDescription": "Возвращает название месяца для указанного значения <code>date</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Получение названия месяца.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Возвращает число, указывающее квартал года, на который приходится дата.",
        "Documentation.LongDescription": "Возвращает число от 1 до 4, указывающее квартал года, на который приходится дата <code>dateTime</code>. <code>dateTime</code> может иметь значение <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск квартала года для даты в #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Возвращает начало дня.",
        "Documentation.LongDescription": "Возвращает начало дня, который представлен с использованием <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск начала дня для 10 октября 2011 г., 8:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Возвращает начало месяца.",
        "Documentation.LongDescription": "Возвращает начало месяца, который содержит <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>date</code> или <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск начала месяца для 10 октября 2011 г., 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Возвращает начало квартала.",
        "Documentation.LongDescription": "Возвращает начало квартала, который содержит <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск начала квартала для 10 октября 2011 г., 8:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Возвращает начало недели.",
        "Documentation.LongDescription": "Возвращает начало недели, которая содержит <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Найти начало недели для вторника, 11 октября 2011 г.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Найти начало недели для вторника, 11 октября 2011 г., используя понедельник в качестве начала недели.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Возвращает начало года.",
        "Documentation.LongDescription": "Возвращает начало года, который содержит <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск начала года для 10 октября 2011 г., 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Возвращает запись, содержащую части значения даты.",
        "Documentation.LongDescription": "Возвращает запись, содержащую части заданного значения даты, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: значение <code>date</code>, для которого необходимо вычислить запись частей.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать значение <code>#date(2011, 12, 31)</code> в запись, содержащую состоит значения даты.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Возвращает текстовое представление значения даты.",
        "Documentation.LongDescription": "Возвращает текстовое представление <code>date</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. Параметр <code>culture</code> используется только для рабочих процессов прежних версий. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, будет использован формат даты по умолчанию, заданный в <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> и <code>culture</code> также могут быть текстовыми значениями. При этом происходит то же самое, что и при <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>#date(2010, 12, 31)</code> в значение <code>text</code>. <i>Результат может зависеть от текущего языка и региональных параметров.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Поиск года в календаре Хиджра, который соответствует 1 января 2000 года в григорианском календаре.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Возвращает число от 1 до 6, указывающее неделю в месяце, на которую приходится эта дата.",
        "Documentation.LongDescription": "Возвращает число от 1 до 6, указывающее неделю в месяце, на которую приходится дата <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значение <code>datetime</code>, для которого определяется неделя в месяце.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, на какую неделю марта приходится 15 марта 2011 г.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Возвращает число от 1 до 54, указывающее неделю в году, на которую приходится эта дата.",
        "Documentation.LongDescription": "Возвращает число от 1 до 54, обозначающее неделю в году для даты <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значение <code>datetime</code>, для которого определяется неделя года.</li>\r\n        <li><code>firstDayOfWeek</code>: необязательное значение <code>Day.Type</code>, указывающее первый день недели (например, <code>Day.Sunday</code>). Если оно не указано, используется значение по умолчанию, установленное для языка и региональных параметров.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Определить, какая неделя года содержит 27 марта 2011 г.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Определить, какая неделя года содержит 27 марта 2011 г., если понедельник считается началом недели.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Возвращает компонент года.",
        "Documentation.LongDescription": "Возвращает компонент года заданного значения <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск компонента года в значении #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Возвращает компонент даты для заданного значения date, datetime и datetimezone.",
        "Documentation.LongDescription": "Возвращает компонент даты <code>dateTime</code> для указанного значения <code>date</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Поиск значение даты #datetime (2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Создает значение datetime из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>datetime</code> из указанного параметра <code>value</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").\r\nЕсли параметр <code>value</code> имеет значение <code>null</code>, <code>DateTime.From</code> возвращает <code>null</code>. Если параметр <code>value</code> имеет значение <code>datetime</code>, возвращается <code>value</code>. Значения следующих типов можно преобразовать в значение <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: значение <code>datetime</code> из текстового представления. Дополнительные сведения см. в разделе <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetime</code> с <code>value</code> в качестве компонента даты и <code>12:00:00 AM</code> в качестве компонента времени.</li>\r\n        <li><code>datetimezone</code>: <code>datetime</code>, локальный эквивалент <code>value</code>.</li>\r\n        <li><code>time</code>: <code>datetime</code> с эквивалентом даты OLE-автоматизации, <code>0</code> в качестве компонента даты и <code>value</code> в качестве компонента времени.</li>\r\n        <li><code>number</code>: <code>datetime</code>, эквивалент даты OLE-автоматизации, выраженный <code>value</code>. </li>\r\n      </ul>\r\nЕсли <code>value</code> относится к другому типу, возвращается ошибка.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>#time(06, 45, 12)</code> в значение <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Преобразовать <code>#date(1975, 4, 4)</code> в значение <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Создает значение datetime из 64-разрядного числа.",
        "Documentation.LongDescription": "Создает значение <code>datetime</code> на основе значения <code>fileTime</code> и преобразует его в соответствии с местным часовым поясом. Значение filetime - время файла Windows, представляющее количество 100-наносекундных интервалов, прошедших с 12:00 1 января 1601 г. нашей эры (C.E.) по Гринвичу (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>129876402529842245</code> в значение datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Создает значение datetimezone из локальных и всеобщих форматов даты и времени.",
        "Documentation.LongDescription": "Создает значение <code>datetime</code> из текстового представления <code>text</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, распознавание даты будет выполняться по принципу наилучшего возможного варианта.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> также может быть текстовым значением. При этом происходит то же самое, что и при <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>\"2010-12-31T01:30:00\"</code> в значение даты и времени.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Преобразование <code>\"2010-12-31T01:30:00.121212\"</code> в значение даты и времени.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Преобразование <code>\"2010-12-31T01:30:00\"</code> в значение даты и времени.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Преобразование <code>\"20101231T013000\"</code> в значение даты и времени.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Указывает, наступает ли данный момент времени в течение текущего часа, по расчету на основе текущей системной даты и времени.",
        "Documentation.LongDescription": "Указывает, наступает ли данный момент времени (<code>dateTime</code>) в течение текущего часа, по расчету на основе текущей системной даты и времени.\r\n      <ul>\r\n      <li><code>dateTime</code>: вычисляемое значение <code>datetime</code> или <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли текущее системное время в текущем часе.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Указывает, наступает ли данный момент времени в течение текущей минуты, по расчету на основе текущей системной даты и времени.",
        "Documentation.LongDescription": "Указывает, наступает ли данный момент времени (<code>dateTime</code>) в течение текущей минуты, по расчету на основе текущей системной даты и времени.\r\n      <ul>\r\n      <li><code>dateTime</code>: вычисляемое значение <code>datetime</code> или <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли текущее системное время в текущей минуте.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Указывает, наступает ли данный момент времени в течение текущей секунды, по расчету на основе текущей системной даты и времени.",
        "Documentation.LongDescription": "Указывает, наступает ли данный момент времени (<code>dateTime</code>) в течение текущей секунды, по расчету на основе текущей системной даты и времени.\r\n      <ul>\r\n      <li><code>dateTime</code>: вычисляемое значение <code>datetime</code> или <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли текущее системное время в текущей секунде.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на следующий час, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующий час, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли час, следующий за текущим системным временем, в следующем часе.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на следующую минуту, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующую минуту, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли минута, следующая за текущим системным временем, в следующей минуте.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на следующую секунду, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на следующую секунду, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли секунда, следующая за текущим системным временем, в следующей секунде.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на предыдущий час, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущий час, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущий час, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли час, предшествующий текущему системному времени, в предыдущем часе.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на предыдущую минуту, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущую минуту, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую минуту, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли минута, предшествующая текущему системному времени, в предыдущей минуте.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Указывает, приходятся ли заданные дата и время на предыдущую секунду, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).",
        "Documentation.LongDescription": "Указывает, приходится ли заданное значение даты и времени <code>dateTime</code> на предыдущую секунду, опираясь на текущие дату и время в системе. При передаче функции значения, приходящегося на текущую секунду, она возвращает false (ложь).\r\n      <ul>\r\n      <li><code>dateTime</code>: значение <code>datetime</code> (дата и время) или <code>datetimezone</code> (дата, время и часовой пояс), для которого нужно произвести оценку.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Определяет, находится ли секунда, предшествующая текущему системному времени, в предыдущей секунде.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Возвращает компонент времени заданного значения datetime.",
        "Documentation.LongDescription": "Возвращает компонент времени заданного значения datetime, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Поиск значения времени #datetime (2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Возвращает запись, содержащую части значения datetime.",
        "Documentation.LongDescription": "Возвращает запись, содержащую части заданного значения datetime, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значение <code>datetime</code>, для которого необходимо вычислить запись частей.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Преобразование значения <code>#datetime(2011, 12, 31, 11, 56, 2)</code> в запись, содержащую значения даты и времени.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Возвращает текстовое представление значения datetime.",
        "Documentation.LongDescription": "Возвращает текстовое представление <code>dateTime</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. Параметр <code>culture</code> используется только для рабочих процессов прежних версий. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, будет использован формат даты по умолчанию, заданный в <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> и <code>culture</code> также могут быть текстовыми значениями. При этом происходит то же самое, что и при <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>#datetime(2010, 12, 31, 01, 30, 25)</code> в значение <code>text</code>. <i>Результат может зависеть от текущего языка и региональных параметров.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Преобразование с помощью шаблона ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Создает значение datetimezone из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>datetimezone</code> из указанного параметра <code>value</code>. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").\r\nЕсли параметр <code>value</code> имеет значение <code>NULL</code>, <code>DateTimeZone.From</code> возвращает <code>NULL</code>. Если параметр <code>value</code> имеет значение <code>datetimezone</code>, возвращается <code>value</code>. Значения следующих типов можно преобразовать в значение <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: значение <code>datetimezone</code> из текстового представления. Дополнительные сведения см. в разделе <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetimezone</code> с <code>value</code> в качестве компонента даты, <code>12:00:00 AM</code> в качестве компонента времени и со смещением, соответствующим местному часовому поясу.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> с <code>value</code> в качестве даты и времени, а также смещением, соответствующим местному часовому поясу.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> с эквивалентом даты OLE-автоматизации, <code>0</code> в качестве компонента даты, <code>value</code> в качестве компонента времени и со смещением, соответствующим местному часовому поясу.</li>\r\n        <li><code>number</code>: <code>datetimezone</code> с эквивалентом даты и времени даты OLE-автоматизации, выраженным <code>value</code>, и смещением, соответствующим местному часовому поясу.</li>\r\n      </ul>\r\nЕсли <code>value</code> относится к другому типу, возвращается ошибка.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>\"2020-10-30T01:30:00-08:00\"</code> в значение <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Создает значение datetimezone из 64-разрядного числа.",
        "Documentation.LongDescription": "Создает значение <code>datetimezone</code> на основе значения <code>fileTime</code> и преобразует его в соответствии с местным часовым поясом. Значение filetime — время файла Windows, представляющее количество 100-наносекундных интервалов, прошедших с 12:00 1 января 1601 г. нашей эры (C.E.) по Гринвичу (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>129876402529842245</code> в значение datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Создание datetimezone из локальных, универсальных и пользовательских форматов datetimezone.",
        "Documentation.LongDescription": "Создает значение <code>datetimezone</code> из текстового представления <code>text</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, распознавание даты будет выполняться по принципу наилучшего возможного варианта.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> также может быть текстовым значением. При этом происходит то же самое, что и при <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>\"2010-12-31T01:30:00-08:00\"</code> в значение <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Преобразование с помощью ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Удаляет данные о часовом поясе из заданного значения datetimezone.",
        "Documentation.LongDescription": "Возвращает значение #datetime из <code>dateTimeZone</code> с удаленными данными часового пояса.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Удалить данные часового пояса из значения #datetimezone (2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Преобразует компонент часового пояса в локальный часовой пояс.",
        "Documentation.LongDescription": "Изменяет данные о часовом поясе значения datetimezone <code>dateTimeZone</code> на локальный часовой пояс.\r\n    Если <code>dateTimeZone</code> не содержит компонента часового пояса, будут добавлены данные локальные часового пояса.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Изменение сведений о часовом поясе для #datetimezone (2010, 12, 31, 11, 56, 02, 7, 30) на локальный часовой пояс (по тихоокеанскому времени).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Возвращает запись, содержащую части значения datetimezone.",
        "Documentation.LongDescription": "Возвращает запись, содержащую части заданного значения datetimezone, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: значение <code>datetimezone</code>, для которого необходимо вычислить запись частей.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Преобразование значения <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> в запись, содержащую значения даты, времени и часового пояса.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Возвращает текстовое представление значения datetimezone.",
        "Documentation.LongDescription": "Возвращает текстовое представление <code>dateTimeZone</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. Параметр <code>culture</code> используется только для рабочих процессов прежних версий. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, будет использован формат даты по умолчанию, заданный в <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"MMM\"</code> представляется как <code>\"Jan\", \"Feb\", \"Mar\", …</code>, тогда как для <code>\"ru-RU\"</code> значение <code>\"MMM\"</code> выглядит как <code>\"янв\", \"фев\", \"мар\", …</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> и <code>culture</code> также могут быть текстовыми значениями. При этом происходит то же самое, что и при <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> в значение <code>text</code>. <i>Результат может зависеть от текущего языка и региональных параметров.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Преобразование с помощью шаблона ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Преобразует компонент часового пояса в часовой пояс в формате UTC.",
        "Documentation.LongDescription": "Изменяет данные о часовом значения даты и времени <code>dateTimeZone</code> в данные часового пояса в формате UTC или всемирного времени.\r\n    Если <code>dateTimeZone</code> не содержит компонента часового пояса, будут добавлены данные часового пояса UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Изменяет данные о часовом поясе для #datetimezone (2010, 12, 31, 11, 56, 02, 7, 30) на UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Изменяет часовой пояс значения.",
        "Documentation.LongDescription": "Изменяет часовой пояс значения.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Изменяет часовой пояс значения.",
        "Documentation.LongDescription": "Изменяет часовой пояс значения.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Создает число Decimal по заданному значению.",
        "Documentation.LongDescription": "Возвращает значение <code>number</code> типа Decimal, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Decimal.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в границах диапазона Decimal, то <code>value</code> и возвращается, а в противном случае возвращается ошибка. Если <code>value</code> имеет какой-либо другой тип, значение сначала преобразуется в <code>number</code> с помощью <code>Number.FromText</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить значение Decimal <code>number</code> для <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Возвращает содержимое таблицы Delta Lake.",
        "Documentation.LongDescription": "Возвращает содержимое таблицы Delta Lake.",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Создает число Double по заданному значению.",
        "Documentation.LongDescription": "Возвращает значение <code>number</code> типа Double, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Double.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в границах диапазона Double, то <code>value</code> и возвращается, а в противном случае возвращается ошибка. Если <code>value</code> имеет какой-либо другой тип, значение сначала преобразуется в <code>number</code> с помощью <code>Number.FromText</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить значение Double <code>number</code> для <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Возвращает дневную часть длительности.",
        "Documentation.LongDescription": "Возвращает дневную часть<code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Извлечь количество дней между двумя датами.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Создает длительность из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>duration</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Duration.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>duration</code>, то <code>value</code> и будет возвращено. Преобразовать в <code>duration</code> можно значения следующих типов:\r\n      <ul>\r\n        <li><code>text</code>. Значение <code>duration</code> берется из текстового представления прошедшего времени (d.h:m:s). Подробнее см. <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>. Значение <code>duration</code> будет эквивалентно числу дней (в полной и дробной форме), выраженному значением <code>value</code>.</li>\r\n      </ul>\r\nЕсли <code>value</code> имеет какой-либо другой тип, возвращается ошибка.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>2.525</code> в значение <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Возвращает значение длительности из текстового формата прошедшего времени (d.h:m:s).",
        "Documentation.LongDescription": "Возвращает значение длительности из указанного текста, <code>text</code>. Эта функция принимает следующие форматы:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (все диапазоны задаются с включением границ)<br>\r\n        ddd: число дней.<br>\r\n        hh: число часов от 0 до 23.<br>\r\n        mm: число минут от 0 до 59.<br>\r\n        ss: число секунд от 0 до 59.<br>\r\n        ff: число долей секунды от 0 до 9 999 999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>\"2.05:55:20\"</code> в значение <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Возвращает часовую часть длительности.",
        "Documentation.LongDescription": "Возвращает часовую часть <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Извлечь часы из значения длительности.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Возвращает минутную часть длительности.",
        "Documentation.LongDescription": "Возвращает минутную часть <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Извлечь минуты из значения длительности.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Возвращает секундную часть длительности.",
        "Documentation.LongDescription": "Возвращает секундную часть <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Извлечь секунды из значения длительности.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Возвращает запись, содержащую части длительности.",
        "Documentation.LongDescription": "Возвращает запись, содержащую части значения длительности, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: значение <code>duration</code>, на основе которого создается запись.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>#duration(2, 5, 55, 20)</code> в запись его частей, включая дни, часы, минуты и секунды, если применимо.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Возвращает текст в формате \"d.h:m:s\".",
        "Documentation.LongDescription": "Возвращает в формате \"день.час:мин:сек\" текстовое представление значения длительности, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code> — <code>длительность</code>, для которой вычисляется текстовое представление.</li>\r\n  <li><code>format</code> — <i>(необязательно)</i> устарело, выдает ошибку, если значение не NULL.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>#duration(2, 5, 55, 20)</code> в текстовое значение.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Возвращает общее количество дней, охватываемое этой длительностью.",
        "Documentation.LongDescription": "Возвращает общее количество дней, охваченных <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Найти общее количество дней, охваченных значением длительности.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Возвращает общее количество часов, охватываемое этой длительностью.",
        "Documentation.LongDescription": "Возвращает общее количество часов, охваченных <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Найти общее количество часов, охваченных значением длительности.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Возвращает общее количество минут, охватываемое этой длительностью.",
        "Documentation.LongDescription": "Возвращает общее количество минут, охваченных <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Найти общее количество минут, охваченных значением длительности.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Возвращает общее количество секунд, охватываемое этой длительностью.",
        "Documentation.LongDescription": "Возвращает общее количество секунд, охваченных <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Найти общее количество секунд, охваченных значением длительности.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Возвращает ошибочную запись из указанных текстовых значений для причины, сообщения и сведений.",
        "Documentation.LongDescription": "Возвращает ошибочную запись из указанных текстовых значений для причины, сообщения и сведений.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Возвращает представление константного значения в исходном коде M.",
        "Documentation.LongDescription": "Возвращает представление константного значения в исходном коде M.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Получить представление числового значения в исходном коде M.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Получить представление значения даты в исходном коде M.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Получить представление текстового значения в исходном коде M.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Возвращает результат вычисления выражения M.",
        "Documentation.LongDescription": "Возвращает результат вычисления выражения <code>document</code> языка M с доступными для ссылки идентификаторами, которые определяет <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Вычисление простой суммы.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Вычисление более сложной суммы.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Вычисление объединения текстового значения с идентификатором.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Возвращает представление идентификатора в исходном коде M.",
        "Documentation.LongDescription": "Возвращает представление идентификатора <code>name</code> в исходном коде M.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Получить представление идентификатора в исходном коде M.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Получить представление идентификатора, содержащего пробел, в исходном коде M.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Возвращает содержимое заданного файла в двоичном виде.",
        "Documentation.LongDescription": "Возвращает содержимое файла, <code>path</code> в виде двоичного кода. Параметр <code>options</code> в настоящее время предназначен только для внутреннего использования.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Определяет, считается ли данная функция источником данных.",
        "Documentation.LongDescription": "Определяет, считается ли <code>function</code> источником данных.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Преобразует текст, представляющий географическое значение в формате Well-Known Text (WKT), в структурированную запись.",
        "Documentation.LongDescription": "Преобразует текст, представляющий географическое значение в формате Well-Known Text (WKT), в структурированную запись. WKT — это стандартный формат от организации Open Geospatial Consortium (OGC), который часто используется для сериализации в базах данных, включая SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Преобразует значение структурированной географической точки в представление формата Well-Known Text (WKT).",
        "Documentation.LongDescription": "Преобразует значение структурированной географической точки в представление формата Well-Known Text (WKT), определяемого организацией Open Geospatial Consortium (OGC), который используется для сериализации во многих базах данных, включая SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Преобразует текст, представляющий геометрическое значение в формате Well-Known Text (WKT), в структурированную запись.",
        "Documentation.LongDescription": "Преобразует текст, представляющий геометрическое значение в формате Well-Known Text (WKT), в структурированную запись. WKT — это стандартный формат от организации Open Geospatial Consortium (OGC), который часто используется для сериализации в базах данных, включая SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Преобразует значение структурированной геометрической точки в представление формата Well-Known Text (WKT).",
        "Documentation.LongDescription": "Преобразует значение структурированной геометрической точки в представление формата Well-Known Text (WKT), определяемого организацией Open Geospatial Consortium (OGC), который используется для сериализации во многих базах данных, включая SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Возвращает значение GUID из указанного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>Guid.Type</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Guid.From</code> возвращает <code>NULL</code>. Данное <code>value</code> проверяется на соответствие приемлемому формату. Эти форматы приведены в примерах.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Идентификатор GUID может быть представлен в виде 32 шестнадцатеричных цифр, идущих непрерывно.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Идентификатор GUID может быть представлен в виде 32 шестнадцатеричных цифр, разделенных дефисами на блоки по 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Идентификатор GUID может быть представлен в виде 32 шестнадцатеричных цифр, разделенных дефисами и заключенных в фигурные скобки.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Идентификатор GUID может быть представлен в виде 32 шестнадцатеричных цифр, разделенных дефисами и заключенных в круглые скобки.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Создает 16-разрядное целое число по заданному значению.",
        "Documentation.LongDescription": "Возвращает 16-разрядное целочисленное значение <code>number</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Int16.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в диапазоне 16-разрядных целых чисел и не имеет дробной части, то <code>value</code> и возвращается. При наличии дробной части число округляется в соответствии с указанным режимом. Режим округления по умолчанию — <code>RoundingMode.ToEven</code>. Если <code>value</code> имеет какой-либо другой тип, сначала выполняется преобразование в <code>number</code> с помощью <code>Number.FromText</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить 16-разрядное целое значение <code>number</code> для <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получить 16-разрядное целое значение <code>number</code> для <code>\"4.5\"</code>, используя <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Создает 32-разрядное целое число по заданному значению.",
        "Documentation.LongDescription": "Возвращает 32-разрядное целочисленное значение <code>number</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Int32.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в диапазоне 32-разрядных целых чисел и не имеет дробной части, то <code>value</code> и возвращается. При наличии дробной части число округляется в соответствии с указанным режимом. Режим округления по умолчанию — <code>RoundingMode.ToEven</code>. Если <code>value</code> имеет какой-либо другой тип, сначала выполняется преобразование в <code>number</code> с помощью <code>Number.FromText</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить 32-разрядное целое значение <code>number</code> для <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получить 32-разрядное целое значение <code>number</code> для <code>\"4.5\"</code>, используя <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Создает 64-разрядное целое значение из данного значения.",
        "Documentation.LongDescription": "Возвращает 64-разрядное целочисленное значение <code>number</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Int64.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в диапазоне 64-разрядных целых чисел и не имеет дробной части, то <code>value</code> и возвращается. При наличии дробной части число округляется в соответствии с указанным режимом. Режим округления по умолчанию — <code>RoundingMode.ToEven</code>. Если <code>value</code> имеет какой-либо другой тип, сначала выполняется преобразование в <code>number</code> с помощью <code>Number.FromText</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить 64-разрядное целое значение <code>number</code> <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получим 64-разрядное целочисленное значение <code>number</code> для <code>\"4.5\"</code>, используя <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Создает 8-разрядное целое число со знаком по заданному значению.",
        "Documentation.LongDescription": "Возвращает 8-разрядное целочисленное значение <code>number</code> со знаком, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Int8.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в диапазоне 8-разрядных целых чисел со знаком и не имеет дробной части, то <code>value</code> и возвращается. При наличии дробной части число округляется в соответствии с указанным режимом. Режим округления по умолчанию — <code>RoundingMode.ToEven</code>. Если <code>value</code> имеет какой-либо другой тип, сначала выполняется преобразование в <code>number</code> с помощью <code>Number.FromText</code>. Доступные режимы округления см. в описании <code>Number.Round</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить 8-разрядное целое значение <code>number</code> со знаком для <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получить 8-разрядное целое значение <code>number</code> со знаком для <code>\"4.5\"</code>, используя <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Возвращает абстрактное синтаксическое дерево (AST) для текста функции.",
        "Documentation.LongDescription": "<p>Возвращает абстрактное синтаксическое дерево (AST) для текста <code>function</code>, нормализованное в <i>выражение элемента</i>:\r\n<ul>\r\n  <li>Функция должна быть лямбда-выражением с одним аргументом.</li>\r\n  <li>Все ссылки на параметр функции заменяются на <code>ItemExpression.Item</code>.</li>\r\n  <li>Дерево AST будет упрощенным и будет содержать только узлы следующих типов:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Если для текста <code>function</code> невозможно вернуть AST в виде выражения элемента, выдается ошибка.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Возвращает AST для тела функции <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Возвращает содержимое документа JSON.",
        "Documentation.LongDescription": "Возвращает содержимое документа JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Создает представление JSON указанного значения.",
        "Documentation.LongDescription": "<p>Создает представление JSON заданного значения (<code>value</code>) с кодировкой текста, указанной \"<code>encoding</code>\". Если \"<code>encoding</code>\" пропускается, используется UTF8. Значения представлены следующим образом:</p>\r\n <ul>\r\n        <li>Значения NULL, текстовые и логические значения представлены как соответствующие типы JSON.</li>\r\n        <li>Числа представлены как числа в JSON, за исключением <code>#infinity</code>, <code>-#infinity</code> и <code>#nan</code>, которые преобразуются в NULL.</li>\r\n        <li>Списки представлены как массивы JSON.</li>\r\n        <li>Записи представлены как объекты JSON.</li>\r\n        <li>Таблицы представлены как массив объектов.</li>\r\n        <li>Значения date, time, datetime, datetimezone и duration представлены как текст ISO-8601.</li>\r\n        <li>Двоичные значения представлены как текст в кодировке base-64.</li>\r\n        <li>Типы и функции создают ошибку.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Преобразование сложного значения в JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Преобразует двоичное значение в список текстовых значений, разделенных разрывами строк. Если указан стиль кавычек, разрывы строк могут отображаться между кавычками. Если значение includeLineSeparators равно true, то символы разрыва строк включаются в текст.",
        "Documentation.LongDescription": "Преобразует двоичное значение в список текстовых значений, разделенных разрывами строк. Если указан стиль кавычек, разрывы строк могут отображаться между кавычками. Если значение includeLineSeparators равно true, то символы разрыва строк включаются в текст.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Преобразует текстовое значение в список текстовых значений, разделенных разрывами строк. Если значение includeLineSeparators равно true, то символы разрыва строки включаются в текст.",
        "Documentation.LongDescription": "Преобразует текстовое значение в список текстовых значений, разделенных разрывами строк. Если значение includeLineSeparators равно true, то символы разрыва строки включаются в текст.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (по умолчанию) обработка специальных символов не требуется.</li>\r\n            <li><code>QuoteStyle.Csv:</code> обработка специальных символов как для формата CSV. Символ двойной кавычки используется для разграничения таких областей, пара символов двойной кавычки используется для представления одного символа двойной кавычки в пределах такой области. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Преобразует список текстовых значений в двоичное значение с использованием указанной кодировки и разделителя lineSeparator. Указанный lineSeparator добавляется к каждой строке.  Если разделитель не указан, используются символы возврата каретки и перевода строки.",
        "Documentation.LongDescription": "Преобразует список текстовых значений в двоичное значение с использованием указанной кодировки и разделителя lineSeparator. Указанный lineSeparator добавляется к каждой строке.  Если разделитель не указан, используются символы возврата каретки и перевода строки.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Преобразует список текстовых значений в одну текстовую строку.  Указанный разделитель lineSeparator добавляется к каждой строке.  Если разделитель не указан, используются символы возврата каретки и перевода строки.",
        "Documentation.LongDescription": "Преобразует список текстовых значений в одну текстовую строку.  Указанный разделитель lineSeparator добавляется к каждой строке.  Если разделитель не указан, используются символы возврата каретки и перевода строки.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Возвращает значение true, если все выражения равны true.",
        "Documentation.LongDescription": "Возвращает значение true, если все выражения в списке <code>list</code> равны true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Определить, все ли выражения в списке {true, true, 2 > 0} истинны.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Определить, все ли выражения в списке {true, true, 2 < 0} истинны.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Возвращает значение true, если любое выражение истинно.",
        "Documentation.LongDescription": "Возвращает значение true, если любое выражение в списке <code>list</code> истинно.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Определить, есть ли в списке {true, false, 2 > 0} истинные выражения.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Определить, есть ли в списке {2 = 0, false, 2 < 0} истинные выражения.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Возвращает среднее арифметическое значений. Работает с числовыми значениями, значениями даты, datetime, datetimezone и длительности.",
        "Documentation.LongDescription": "Возвращает среднее значение для элементов в списке <code>list</code>. Результат указывается с тем же типом данных, что и значения в списке. Работает только с числовыми значениями, значениями даты, времени, datetime, datetimezone и длительности.\r\n    Если список пуст, возвращается значение NULL.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Найти среднее значение списка чисел <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Найдите среднее значение из дат: 1 января 2011 г., 2 января 2011 г. и 3 января 2011 г.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Помещает список в буфер.",
        "Documentation.LongDescription": "Помещает список <code>list</code> в буфер в памяти. Результат вызова - стабильный список.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Создание стабильной копии списка {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Возвращает один список, объединяющий несколько списков.",
        "Documentation.LongDescription": "Принимает список списков <code>lists</code> и объединяет их в один новый список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Объединение двух простых списков {1, 2} и {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Объединение двух списков {1, 2} и {3, {4, 5}}, один из которых содержит вложенный список.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Возвращает число элементов в списке.",
        "Documentation.LongDescription": "Возвращает число элементов в списке <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Определить количество значений в списке {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Возвращает список значений с удаленными повторениями.",
        "Documentation.LongDescription": "Возвращает список, содержащий все значения в списке <code>list</code> с удаленными повторениями. Если этот список пуст, то результатом является пустой список.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Удалить повторяющиеся элементы из списка {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Возвращает первое значение списка или указанное значение по умолчанию, если список пуст.",
        "Documentation.LongDescription": "Возвращает первый элемент в списке <code>list</code> или необязательное значение по умолчанию <code>defaultValue</code>, если список пуст.\r\n    Если список пуст, а значение по умолчанию не указано, функция возвращает значение <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти первое значение в списке {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Найти первое значение в списке {}. Если этот список пуст, возвращается значение -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Возвращает пересечение значений списка, содержащихся во входных данных.",
        "Documentation.LongDescription": "Возвращает пересечение значений списка, обнаруженных во входном списке <code>lists</code>. Можно указать дополнительный параметр <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Определение пересечения двух списков {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Указывает, имеются ли повторяющиеся значения в списке.",
        "Documentation.LongDescription": "Возвращает логическое значение, указывающее, имеются ли повторяющиеся значения в списке <code>list</code>; <code>true</code>, если значения в списке уникальны; <code>false</code>, если есть повторяющиеся значения. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Определяет, уникальны ли значения списка {1, 2, 3} (т. е. отсутствуют ли в нем повторяющиеся значения).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Определяет, уникальны ли значения списка {1, 2, 3, 3} (т. е. отсутствуют ли в нем повторяющиеся значения).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Возвращает значение true, если список пуст.",
        "Documentation.LongDescription": "Возвращает значение <code>true</code>, если список <code>list</code> не содержит значений (длина равна 0). Если список содержит значения (длина > 0), возвращает <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Выясняет, пуст ли список {}.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Выясняет, пуст ли список {1, 2}.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Возвращает последнее значение списка или указанное значение по умолчанию, если список пуст.",
        "Documentation.LongDescription": "Возвращает последний элемент в списке <code>list</code> или необязательное значение по умолчанию <code>defaultValue</code>, если список пуст.\r\n    Если список пуст, а значение по умолчанию не указано, функция возвращает значение <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти последнее значение в списке {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Найти последнее значение в списке {} или получить -1, если он пуст.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Возвращает последнее значение в списке.  Дополнительно можно указать количество возвращаемых значений или условие соответствия.",
        "Documentation.LongDescription": "Возвращает последний элемент списка <code>list</code>. Если список пуст, возникает исключение.\r\n Эта функция принимает необязательный параметр <code>countOrCondition</code> для поддержки сбора нескольких элементов или фильтрации элементов. <code>countOrCondition</code> можно указать тремя способами:\r\n <ul>\r\n  <li>Если указано число, возвращается количество элементов до указанного. </li>\r\n  <li>Если указано условие, возвращаются все элементы, которые изначально соответствуют условию, начиная с конца списка. Как только обнаруживается элемент, не соответствующий условию, последующие элементы не рассматриваются. </li>\r\n  <li>Если этот параметр имеет значение NULL, то возвращается последний элемент в списке.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти последнее значение в списке {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Найти последние значения в списке {3, 4, 5, -1, 7, 8, 2}, превышающие 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Возвращает максимальное значение или значение по умолчанию для пустого списка.",
        "Documentation.LongDescription": "Возвращает максимальный элемент в списке <code>list</code> или необязательное значение по умолчанию <code>default</code>, если список пуст.\r\n    Может быть указано необязательное значение comparisonCriteria, <code>comparisonCriteria</code>, определяющее, как сравнивать элементы списка. Если этот параметр имеет значение NULL, используется функция сравнения по умолчанию.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Найти максимальное значение в списке {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Найти максимум в списке {} или получить -1, если список пуст. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Возвращает медиану для списка.",
        "Documentation.LongDescription": "Возвращает средний элемент списка <code>list</code>. Если все элементы списка имеют значение <code>null</code>, функция возвращает значение <code>null</code>.\r\n    Если в списке четное число элементов, функция возвращает наименьший из двух средних элементов за исключением случая, когда список\r\n    включает только даты, продолжительность, числа или временные отметки — в этом случае возвращается среднее значение двух элементов.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Найти медиану списка <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Возвращает минимальное значение или значение по умолчанию для пустого списка.",
        "Documentation.LongDescription": "Возвращает минимальный элемент в списке <code>list</code> или необязательное значение по умолчанию <code>default</code>, если список пуст.\r\n    Может быть указано необязательное значение comparisonCriteria, <code>comparisonCriteria</code>, определяющее, как сравнивать элементы списка. Если этот параметр имеет значение NULL, используется функция сравнения по умолчанию.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Найти минимальное значение в списке {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Найти минимум в списке {} или получить -1, если список пуст. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Возвращает наиболее частое значение в списке.",
        "Documentation.LongDescription": "Возвращает элемент, который появляется чаще всего в списке <code>list</code>. Если список пуст, возникает исключение. Если несколько элементов присутствуют с одинаковой максимальной частотой, выбирается последний из них.\r\n    Можно указать необязательное значение <code>comparisonCriteria</code>, <code>equationCriteria</code>, для управления проверкой на равенство. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Найти элемент, который наиболее часто появляется в списке <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Найти элемент, который наиболее часто появляется в списке <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Возвращает список наиболее частых значений в списке.",
        "Documentation.LongDescription": "Возвращает элемент, который появляется чаще всего в списке <code>list</code>. Если список пуст, возникает исключение. Если несколько элементов присутствуют с одинаковой максимальной частотой, выбирается последний из них.\r\n    Можно указать необязательное значение <code>comparisonCriteria</code>, <code>equationCriteria</code>, для управления проверкой на равенство. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Найти элементы, которые появляются чаще всего в списке <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Возвращает число элементов, отличных от NULL, в списке.",
        "Documentation.LongDescription": "Возвращает число элементов, отличных от NULL, в списке <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Возвращает список смещений для ввода.",
        "Documentation.LongDescription": "Возвращает список смещений для списка ввода <code>list</code>.\r\n    Если для изменения списка используется List.Transform, список позиций может служить для предоставления преобразованию доступа к позиции.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти смещения значений в списке {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Возвращает произведение чисел в списке.",
        "Documentation.LongDescription": "Возвращает произведение чисел в списке <code>numbersList</code>, отличных от NULL. Возвращает значение NULL, если в списке нет значений, отличных от NULL.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Найти произведение чисел в списке <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Возвращает список случайных чисел.",
        "Documentation.LongDescription": "Возвращает список случайных чисел от 0 до 1 для заданного количества создаваемых значений и необязательного начального значения.\r\n<ul>\r\n   <li><code>count</code>: число создаваемых случайных значений.</li>\r\n   <li><code>seed</code>:  <i>[необязательно]</i> числовое значение, используемое для инициализации генератора случайных чисел.  Если не указано, при каждом вызове функции создается уникальный список случайных чисел.  Если указано численное начальное значение, каждый вызов функции будет создавать один и тот же список случайных чисел для этого значения.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Создать список из 3 случайных чисел.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Создать список из 3 случайных чисел с указанным начальным значением.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Возвращает список, который пропускает указанное число элементов в начале списка.",
        "Documentation.LongDescription": "Возвращает список, который удаляет первый элемент списка <code>list</code>. Если <code>list</code> — пустой список, возвращается пустой список.\r\nЭта функция принимает необязательный параметр, <code>countOrCondition</code>, для поддержки удаления нескольких значений, как указано ниже.\r\n <ul>\r\n <li>Если указано число, будет удалено максимальное количество элементов. </li>\r\n <li>Если указано условие, все последовательные совпадающие элементы в начале <code>list</code> удаляются.</li>\r\n <li>Если этот параметр имеет значение NULL, наблюдается поведение по умолчанию. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1, 2, 3, 4, 5} без первых 3 цифр.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Создать список из {5, 4, 2, 6, 1}, который начинается с числа меньше 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Возвращает список, который удаляет указанное число элементов в конце списка.",
        "Documentation.LongDescription": "Возвращает список, который удаляет последние <code>countOrCondition</code> элементов в конце списка <code>list</code>. Если <code>list</code> имеет меньше <code>countOrCondition</code> элементов, возвращается пустой список.\r\n <ul>\r\n <li>Если указано число, будет удалено максимальное количество элементов. </li>\r\n <li>Если указано условие, все последовательные совпадающие элементы в конце <code>list</code> удаляются.</li>\r\n <li>Если этот параметр имеет значение NULL, удаляется только один элемент. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1, 2, 3, 4, 5} без последних 3 цифр.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Создать список из {5, 4, 2, 6, 4}, который оканчивается на число меньше 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Удаляет все значения NULL из указанного списка.",
        "Documentation.LongDescription": "Удаляет все вхождения значений NULL из списка <code>list</code>. Если в списке нет значений NULL, возвращается исходный список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Удалить значения NULL из списка {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Изменяет порядок значений в списке на противоположный.",
        "Documentation.LongDescription": "Возвращает список со значениями в списке <code>list</code> в обратном порядке.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1..10} в обратном порядке.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Возвращает один элемент списка для списка из одного элемента, в противном случае вызывает исключение.",
        "Documentation.LongDescription": "Если в списке <code>list</code> только один элемент, возвращает этот элемент.\r\n    Если в списке больше одного элемента или список пуст, функция вызывает исключение.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти единственное значение в списке {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Найти единственное значение в списке {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Возвращает один элемент списка для списка с длиной 1 и значение по умолчанию для пустого списка.",
        "Documentation.LongDescription": "Если в списке <code>list</code> только один элемент, возвращает этот элемент.\r\n    Если этот список пуст, функция возвращает значение NULL, если не указан необязательный параметр <code>default</code>. Если в списке больше одного элемента, функция возвращает ошибку.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Найти единственное значение в списке {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Найти единственное значение в списке {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Найти единственное значение в списке {}. Если список пуст, возвратить -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Возвращает список, который пропускает указанное число элементов в начале списка.",
        "Documentation.LongDescription": "Возвращает список, который пропускает первый элемент списка <code>list</code>. Если <code>list</code> — пустой список, возвращается пустой список.\r\nЭта функция принимает необязательный параметр, <code>countOrCondition</code>, для поддержки пропуска нескольких значений, как указано ниже.\r\n <ul>\r\n <li>Если указано число, будет пропущено максимальное количество элементов. </li>\r\n <li>Если указано условие, все последовательные совпадающие элементы в начале <code>list</code> пропускаются.</li>\r\n <li>Если этот параметр имеет значение NULL, наблюдается поведение по умолчанию. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Создать список из {1, 2, 3, 4, 5} без первых 3 цифр.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Создать список из {5, 4, 2, 6, 1}, который начинается с числа меньше 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Сортирует список данных по указанным критериям.",
        "Documentation.LongDescription": "Сортирует списки данных, <code>list</code>, в соответствии с заданными необязательными критериями.\r\n    В качестве критерия сравнения можно указать необязательный параметр <code>comparisonCriteria</code>. Он может принимать следующие значения:\r\n    <ul>\r\n    <li> Для управления порядком критерий сравнения может быть значением перечисления Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Для вычисления ключа, используемого для сортировки, можно использовать функцию 1 аргумента. </li>\r\n    <li> Для выбора ключа и порядка управления можно использовать критерий сравнения, представляющий собой список, содержащий ключ и порядок (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Для полного управления сравнением можно использовать функцию из 2 аргументов. Этой функции будут переданы два элемента из списка (два любых элемента в любом порядке). Эта функция должна возвратить одно из следующих значений:\r\n        <ul>\r\n            <li> <code>-1</code>: первый элемент меньше второго.</li>\r\n            <li> <code>0</code>: элементы равны.</li>\r\n            <li> <code>1</code>: первый элемент больше второго.</li>\r\n        </ul>\r\n        С помощью метода Value.Compare можно делегировать эту логику. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Сортировать список {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Сортировать список {2, 3, 1} в порядке убывания.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Сортировать список {2, 3, 1} в порядке убывания с помощью метода Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Возвращает основанную на выборке оценку стандартного отклонения.",
        "Documentation.LongDescription": "Возвращает основанную на выборке оценку стандартного отклонения значений в списке <code>numbersList</code>.\r\n    Если <code>numbersList</code> — список чисел, возвращается число.\r\n    Исключение возникает при пустом списке или списке элементов, не имеющих тип <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Найти стандартное отклонение чисел от 1 до 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Возвращает сумму элементов в списке.",
        "Documentation.LongDescription": "Возвращает сумму всех значений в списке <code>list</code> , отличных от NULL.  Возвращает значение NULL, если в списке нет значений, отличных от NULL.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Найти сумму чисел в списке <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Возвращает объединение значений списка, содержащихся во входных данных.",
        "Documentation.LongDescription": "Принимает список списков <code>lists</code>, объединяет элементы отдельных списков и возвращает их в выходном списке. Результирующий возвращаемый список содержит все элементы всех входных списков.\r\n    Эта операция поддерживает традиционную семантику мультимножества, поэтому повторяющиеся значения сопоставляются как часть объединения.\r\n    Можно указать необязательное значение критерия уравнения <code>equationCriteria</code> для управления проверкой на равенство. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Создать объединение списков {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Возвращает список списков, объединяя элементы, стоящие на одной позиции в разных списках.",
        "Documentation.LongDescription": "Принимает список списков, <code>lists</code> и возвращает список списков, объединяя элементы на одной позиции.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Пакует два простых списка {1, 2} и {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Пакует два простых списка разной длины {1, 2} и {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Создает логическое значение из заданного.",
        "Documentation.LongDescription": "Возвращает значение <code>logical</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Logical.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой значение <code>logical</code>, то <code>value</code> и будет возвращено. Преобразовать в <code>logical</code> можно значения следующих типов:\r\n      <ul>\r\n        <li><code>text</code>. Значение <code>logical</code> берется из текстового значения <code>\"true\"</code> (истина) или <code>\"false\"</code> (ложь). Подробнее см. <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>. Значение будет <code>false</code>, если <code>value</code> равно <code>0</code>, в противном случае — <code>true</code>.</li>\r\n      </ul>\r\nЕсли <code>value</code> имеет какой-либо другой тип, возвращается ошибка.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>2</code> в значение <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Создает логическое значение из текстовых значений true и false.",
        "Documentation.LongDescription": "Создает логическое значение из текстового значения <code>text</code>, которое может быть равно true или false. Если <code>text</code> содержит другую строку, возникает исключение. В текстовом значении <code>text</code> не учитывается регистр.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Создание логического значения из текстовой строки true.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Создание логического значения из текстовой строки \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Возвращает текст true или false для данного логического значения.",
        "Documentation.LongDescription": "Создает текстовое значение из логического значения <code>logicalValue</code>, <code>true</code> или <code>false</code>. Если <code>logicalValue</code> не является логическим значением, возникает исключение.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Создать текстовое значение из логического <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Возвращает абсолютное значение числа.",
        "Documentation.LongDescription": "Возвращает абсолютное значение \"<code>number</code>\". Если \"<code>number</code>\" имеет значение NULL, <code>Number.Abs</code> возвращает NULL.\r\n    <ul>\r\n        <li><code>number</code>: значение <code>number</code>, для которого вычисляется абсолютное значение.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Абсолютное значение -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Возвращает арккосинус числа.",
        "Documentation.LongDescription": "Возвращает арккосинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Возвращает арксинус числа.",
        "Documentation.LongDescription": "Возвращает арксинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Возвращает арктангенс числа.",
        "Documentation.LongDescription": "Возвращает арктангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Возвращает байт, где каждый бит является обратным по отношению к входному.",
        "Documentation.LongDescription": "Возвращает результат выполнения побитовой операции NOT над <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Возвращает косинус числа.",
        "Documentation.LongDescription": "Возвращает косинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Найти косинус угла 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Возвращает гиперболический косинус числа.",
        "Documentation.LongDescription": "Возвращает гиперболический косинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Возводит e в заданную степень.",
        "Documentation.LongDescription": "Возвращает результат возведения e в степень <code>number</code> (экспонента).\r\n      <ul>\r\n        <li><code>number</code>: значение <code>number</code>, для которого вычисляется экспонента. Если <code>number</code> имеет значение NULL, <code>Number.Exp</code> возвращает NULL. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Возвести e в степень 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Возвращает факториал числа.",
        "Documentation.LongDescription": "Возвращает факториал числа <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти факториал 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Создает число из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>number</code>, полученное из предоставленного значения <code>value</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").\r\nЕсли данное <code>value</code> равно <code>NULL</code>, то <code>Number.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code>, то <code>value</code> и возвращается. Преобразовать в <code>number</code> можно значения следующих типов:\r\n      <ul>\r\n        <li><code>text</code>. Значение <code>number</code> берется из текстового представления. Поддерживаются стандартные текстовые форматы (\"15\", \"3,423.10\", \"5.0E-10\"). Подробнее см. <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>. Значение равно 1 для <code>true</code> (истина) или 0 для <code>false</code> (ложь).</li>\r\n        <li><code>datetime</code>. Будет получено число двойной точности с плавающей запятой, содержащее эквивалент даты OLE Automation.</li>\r\n        <li><code>datetimezone</code>. Будет получено число двойной точности с плавающей запятой, содержащее дату OLE Automation, эквивалентную дате и местному времени из значения <code>value</code>.</li>\r\n        <li><code>date</code>. Будет получено число двойной точности с плавающей запятой, содержащее эквивалент даты OLE Automation.</li>\r\n        <li><code>time</code>. Выражение числа дней в дробной форме.</li>\r\n        <li><code>duration</code>. Выражение числа дней в целой и дробной форме.</li>\r\n      </ul>\r\nЕсли <code>value</code> имеет какой-либо другой тип, возвращается ошибка.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить значение <code>number</code> для <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Получить значение <code>number</code> для <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Получает значение <code>number</code> для <code>\"12.3 %\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Создает числа из стандартных текстовых форматов (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Возвращает значение <code>number</code> из заданного текстового значения <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: текстовое представление числового значения. Представление должно быть в обычном числовом формате, например: \"15\", \"3,423.10\" или \"5.0E-10\".</li>\r\n  <li><code>culture</code>: необязательное значение языка и региональных параметров, определяющее, как интерпретируется <code>text</code> (например, \"ru-RU\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Возвратить числовое значение <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Возвратить числовое значение <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Указывает, четно ли число.",
        "Documentation.LongDescription": "Указывает, четно ли значение <code>number</code>, возвращая <code>true</code>, если оно четно, и <code>false</code> - в противном случае.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Проверить, четно ли число 625.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Проверить, четно ли число 82.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Указывает, является ли значение NaN (нечисловым).",
        "Documentation.LongDescription": "Указывает, является ли значение NaN (нечисловым). Возвращает <code>true</code>, если значение <code>number</code> эквивалентно <code>Number.IsNaN</code>, и <code>false</code> - в противном случае.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Проверьте, будет ли получено NaN при делении 0 на 0.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Проверьте, будет ли получено NaN при делении 1 на 0.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Указывает, нечетно ли число.",
        "Documentation.LongDescription": "Указывает, нечетно ли число. Возвращает <code>true</code>, если <code>number</code> - нечетное число, <code>false</code> - в противном случае.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Проверить, нечетно ли число 625.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Проверить, нечетно ли число 82.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Возвращает натуральный логарифм числа.",
        "Documentation.LongDescription": "Возвращает натуральный логарифм числа <code>number</code>. Если <code>number</code> имеет значение NULL, то <code>Number.Ln</code> возвращает NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Получить натуральный логарифм числа 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Возвращает логарифм числа по указанному основанию (по умолчанию e).",
        "Documentation.LongDescription": "Возвращает логарифм числа <code>number</code> по основанию <code>base</code>. Если <code>base</code> не указано, применяется значение по умолчанию — Number.E.\r\n    Если <code>number</code> имеет значение NULL, <code>Number.Log</code> возвращает NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Получение десятичного логарифма для 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Получение натурального логарифма для 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Возвращает десятичный логарифм числа.",
        "Documentation.LongDescription": "Возвращает десятичный логарифм числа <code>number</code>. Если <code>number</code> имеет значение NULL, <code>Number.Log10</code> возвращает NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Получение десятичного логарифма для 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Возвращает округленное число. Можно указать количество знаков и режим округления.",
        "Documentation.LongDescription": "Возвращает результат округления <code>number</code> до ближайшего числа. Если <code>number</code> равно NULL, то <code>Number.Round</code> возвращает NULL.<br>\r\n      <br>\r\n      По умолчанию <code>number</code> округляется до ближайшего целого числа, а при неопределенности — до ближайшего четного числа (режим <code>RoundingMode.ToEven</code>, также известный как \"банковское округление\").<br>\r\n      <br>\r\n      Однако эти действия по умолчанию можно переопределить с помощью следующих необязательных параметров:\r\n      <ul>\r\n        <li><code>digits</code>. Округляет <code>number</code> до указанного числа десятичных разрядов.</li>\r\n        <li><code>roundingMode</code>. Переопределяет используемый по умолчанию принцип разрешения неопределенности, когда <code>number</code> лежит посередине между двумя возможными округленными значениями\r\n      (возможные значения см. в <code>RoundingMode.Type</code>).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлить 1,234 до ближайшего целого числа.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Округлить 1,56 до ближайшего целого числа.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Округлить 1,2345 до 2 десятичных разрядов.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Округлить 1,2345 до 3 десятичных разрядов (с округлением в большую сторону).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Округлить 1,2345 до 3 десятичных разрядов (с округлением в меньшую сторону).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Возвращает результат округления положительных чисел в большую сторону и отрицательных чисел в меньшую. Можно указать число цифр.",
        "Documentation.LongDescription": "Возвращает результат округления <code>number</code> в зависимости от знака числа. Эта функция будет округлять положительные числа в большую сторону, а отрицательные - в меньшую.\r\n    Если задано <code>digits</code>, то <code>number</code> округляется до заданного как <code>digits</code> числа десятичных цифр.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлить число -1,2 в сторону от нуля.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Округлить число 1,2 в сторону от нуля.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Округлить число –1,234 от нуля до двух знаков после запятой.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Возвращает наибольшее предыдущее число. Можно указать число цифр.",
        "Documentation.LongDescription": "Возвращает результат округления <code>number</code> в меньшую сторону к предыдущему наибольшему целому числу. Если <code>number</code> имеет значение NULL, эта функция возвращает NULL.\r\n\r\n    Если задано <code>digits</code>, <code>number</code> округляется до указанного количества десятичных цифр.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлить 1,234 в меньшую сторону до целого числа.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Округлить 1,999 в меньшую сторону до целого числа.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Округлить 1,999 до двух знаков.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Возвращает результат округления положительных чисел в меньшую сторону и отрицательных чисел в большую. Можно указать число цифр.",
        "Documentation.LongDescription": "Возвращает результат округления <code>number</code> в зависимости от знака числа. Эта функция будет округлять положительные числа в меньшую сторону, а отрицательные - в большую.\r\n    Если задано <code>digits</code>, то <code>number</code> округляется до заданного как <code>digits</code> числа десятичных цифр.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлить -1,2 в направлении к нулю.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Округлить 1,2 в направлении к нулю.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Округлить число –1,234 к нулю до двух знаков после запятой.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Возвращает наибольшее следующее число. Можно указать число цифр.",
        "Documentation.LongDescription": "Возвращает результат округления <code>number</code> в большую сторону к следующему наибольшему целому числу. Если <code>number</code> имеет значение NULL, эта функция возвращает NULL.\r\n    Если задано <code>digits</code>, <code>number</code> округляется до указанного количества десятичных цифр.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлить 1,234 в большую сторону до целого числа.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Округлить 1,999 в большую сторону до целого числа.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Округлить число 1,234 до двух знаков после запятой.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Возвращает значение 1, если число положительное, значение -1, если оно отрицательное, и 0, если оно равно нулю.",
        "Documentation.LongDescription": "Возвращает 1, если <code>number</code> является положительным числом; значение –1, если отрицательным; и 0, если оно равно нулю.\r\n    Если <code>number</code> имеет значение NULL, <code>Number.Sign</code> возвращает NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Определить знак числа 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Определить знак числа -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Определить знак числа 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Возвращает синус числа.",
        "Documentation.LongDescription": "Возвращает синус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Найти синус угла 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Возвращает гиперболический синус числа.",
        "Documentation.LongDescription": "Возвращает гиперболический синус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Возвращает квадратный корень числа.",
        "Documentation.LongDescription": "Возвращает квадратный корень числа <code>number</code>.\r\n    Если <code>number</code> имеет значение NULL, <code>Number.Sqrt</code> возвращает NULL. Если это отрицательное значение, возвращается значение <code>Number.NaN</code> (нечисловое).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Найти квадратный корень числа 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Найти квадратный корень числа 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Возвращает тангенс данного числа.",
        "Documentation.LongDescription": "Возвращает тангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Найти тангенс угла 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Возвращает гиперболический тангенс числа.",
        "Documentation.LongDescription": "Возвращает гиперболичный тангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Преобразует заданное число в текст.",
        "Documentation.LongDescription": "Преобразует числовое значение <code>number</code> в текстовое значение в соответствии с форматом, указанным <code>format</code>.<br>\r\n    <br>\r\n    Формат — это текстовое значение, указывающее, как следует преобразовать число. Дополнительные сведения о поддерживаемых значениях формата см. на страницах https://go.microsoft.com/fwlink/?linkid=2241210 и https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Также можно указать необязательный параметр <code>culture</code> (например, \"ru-RU\"), чтобы управлять поведением <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Преобразование числа в текст без указания формата.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Преобразование числа в экспоненциальный формат.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Преобразование числа в процентный формат с одним десятичным разрядом.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Возвращает таблицу каналов OData, предлагаемых службой OData.",
        "Documentation.LongDescription": "Возвращает таблицу веб-каналов OData, предоставляемых службой OData из URI <code>serviceUri</code> (заголовки: <code>headers</code>). Для управления следующими параметрами можно использовать логическое значение, указывающее, должны ли использоваться одновременные подключения, или необязательный параметр записи <code>options</code>:\r\n    <ul>\r\n    <li><code>Query</code>: добавление параметров запроса в URL-адрес программными средствами без необходимости маскировки escape-символами. </li>\r\n    <li> <code>Headers</code>: указание этого значения как записи приведет к добавлению дополнительных заголовков в HTTP-запрос.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: указание этого значения как списка приведет к исключению ключей заголовков HTTP из вычисления для кэширования данных.</li>\r\n    <li> <code>ApiKeyName</code>: если для целевого сайта указан ключ API, этот параметр можно использовать для указания имени (но не значения) параметра ключа, который должен использоваться в URL-адресе. Фактическое значение ключа указывается в учетных данных.</li>\r\n    <li> <code>Timeout</code>: указание этого значения в качестве длительности приводит к изменению времени ожидания HTTP-запроса. Значение по умолчанию — 600 секунд.</li>\r\n    <li> <code>EnableBatch</code> : логическое значение (true или false), которое разрешает или запрещает создавать запрос $batch OData при превышении значения MaxUriLength (по умолчанию — false).</li>\r\n    <li>  <code>MaxUriLength</code>: число, указывающее максимальную длину универсального кода ресурса, который отправляется в службу OData. Если оно превышено и параметр EnableBatch имеет значение true, запрос будет направлен в конечную точку $batch OData, в противном случае произойдет сбой (значение по умолчанию — 2048).</li>\r\n    <li> <code>Concurrent</code>: логическое значение (true или false). Если задано значение true, запросы к службе выполняются параллельно. Если установлено значение false, запросы выполняются последовательно. Если значение не указано, оно определяется заметкой AsynchronousRequestsSupported в службе. Если в службе не задана заметка AsynchronousRequestsSupported, запросы будут выполняться последовательн.</li>\r\n    <li> <code>ODataVersion</code>: число (3 или 4), указывающее версию протокола OData для этой службы OData. Если ничего не указано, запрашиваются все поддерживаемые версии. Версия службы определяется заголовком OData-Version, возвращаемым службой.</li>\r\n    <li> <code>FunctionOverloads</code>: логическое значение (true или false); если задано значение true, перегрузки импорта функции будут перечислены в отдельных записях в навигаторе; если задано значение false, перегрузки импорта функции будут перечислены в виде одной функции соединения в навигаторе. Значение по умолчанию для версии 3 — false, для версии 4 — true.</li>\r\n    <li> <code>MoreColumns</code> : логическое значение (true или false); если задано значение true, добавляется столбец \"More Columns\" для каждого веб-канала сущности, содержащего открытые и полиморфные типы. Столбец будет содержать поля, не объявленные в базовом типе. Если задано значение false, это поле будет отсутствовать. Значение по умолчанию — false.</li>\r\n    <li> <code>IncludeAnnotations</code> : разделенный запятыми список имен терминов или шаблонов с указанием пространства имен, которые будут включены с подстановочным знаком \"*\". По умолчанию заметки отключены.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: разделенный запятыми список имен терминов или шаблонов с указанием пространства имен, которые будут включены в запросы документов с метаданными с подстановочным знаком \"*\". По умолчанию включает те же заметки, что и в IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: позволяет службе OData не записывать определенные значения в ответах. При наличии подтверждения эти значения будут получены из опущенных полей. Параметры включают:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: позволяет службе OData не записывать значения null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code>: указывает реализацию соединителя OData, которую следует использовать. Допустимые значения — \"2.0\" или null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Подключение к службе OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Возвращает результат попытки вывести возможности SQL для драйвера ODBC.",
        "Documentation.LongDescription": "Возвращает результат попытки вывести возможности SQL по строке подключения <code>connectionString</code>, используя ODBC. <code>connectionString</code> может быть текстом или записью пар \"свойство-значение\". Значения свойств могут быть текстовыми или числовыми.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Возврат выводимой возможности SQL для строки подключения.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Возвращает содержимое документа Parquet в виде таблицы.",
        "Documentation.LongDescription": "Возвращает содержимое документа Parquet в виде таблицы. Параметры:\n    <ul>\n    <li> <code>TypeMapping</code>: текстовое значение, управляющее сопоставлением стандартного типа при чтении и записи файлов. Значение по умолчанию — null. Оно используется, чтобы сохранить максимально возможное соответствие исходному типу. Значение \"SQL\" позволяет получить результаты, наиболее совместимые с SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Возвращает значение процента от заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>percentage</code>, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Percentage.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>text</code> с конечным символом процентов, то возвращается преобразованное десятичное значение. В противном случае значение преобразуется в <code>number</code> с помощью <code>Number.From</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получапет значение <code>percentage</code> для <code>\"12.3 %\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Возвращает запись кадров данных из файла RData.",
        "Documentation.LongDescription": "Возвращает запись кадров данных из файла RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Объединяет записи в данном списке.",
        "Documentation.LongDescription": "Объединяет записи в данном <code>records</code>. Если <code>records</code> содержит значения, отличные от записи, возвращается ошибка.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Создание комбинированной записи из записей.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Возвращает число полей в записи.",
        "Documentation.LongDescription": "Возвращает число полей в записи <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Нахождение числа полей в записи.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Возвращает имена полей.",
        "Documentation.LongDescription": "Возвращает имена полей в записи <code>record</code> в виде текста.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Нахождение имен полей в записи.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Возвращает список значений полей.",
        "Documentation.LongDescription": "Возвращает список значений полей в записи <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Нахождение значений полей в записи.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Создает запись из таблицы в форме {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Возвращает запись из таблицы записей <code>table</code>, которая содержит имена полей и имена значений <code>{[Name = name, Value = value]}</code>. Если имена полей неуникальны, вызывает исключение.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Создание записи из таблицы формы Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Возвращает список значений, содержащий значения полей из входной записи.",
        "Documentation.LongDescription": "Возвращает список значений, содержащих значения полей из входных данных <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Извлечь значения полей из записи.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Возвращает абстрактное синтаксическое дерево (AST), представляющее доступ к столбцу в выражении строки.",
        "Documentation.LongDescription": "Возвращает абстрактное синтаксическое дерево (AST), представляющее доступ к столбцу <code>columnName</code> строки в выражении строки.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Создает AST, представляющий доступ к столбцу CustomerName.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Возвращает абстрактное синтаксическое дерево (AST) для текста функции.",
        "Documentation.LongDescription": "<p>Возвращает абстрактное синтаксическое дерево (AST) для текста <code>function</code>, нормализованное в <i>выражение строки</i>:\r\n<ul>\r\n  <li>Функция должна быть лямбда-выражением с одним аргументом.</li>\r\n  <li>Все ссылки на параметр функции заменяются на <code>RowExpression.Row</code>.</li>\r\n  <li>Все ссылки на столбцы заменяются на <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>Дерево AST будет упрощенным и будет содержать только узлы следующих типов:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Если для текста <code>function</code> невозможно вернуть AST в виде выражения строки, выдается ошибка.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Возвращает AST для тела функции <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Создает число Single со знаком по заданному значению.",
        "Documentation.LongDescription": "Возвращает значение <code>number</code> типа Single, полученное из предоставленного значения <code>value</code>. Если данное <code>value</code> равно <code>NULL</code>, то <code>Single.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>number</code> в границах диапазона Single, то <code>value</code> и возвращается, а в противном случае возвращается ошибка. Если <code>value</code> имеет какой-либо другой тип, значение сначала преобразуется в <code>number</code> с помощью <code>Number.FromText</code>. При необходимости можно также указать <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Получить значение Single <code>number</code> для <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Возвращает таблицу данных из конечной точки индекса Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Выполняет вызов REST API Smartsheet 2.0 в указанной конечной точке и преобразует возвращенный элемент данных в таблицу.",
        "Documentation.Examples": [
          {
            "Description": "Извлекает таблицу сведений о пользователях из API Smartsheet",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Таблица со сведениями о пользователях, возвращенная API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по всем указанным разделителям.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список по всем указанным разделителям.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных по запятой или точке с запятой, игнорируя кавычки и разделители в кавычках (с начала входных данных).",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Разделение входных данных по запятой или точке с запятой, игнорируя кавычки и разделители в кавычках (начиная с конца входных данных).",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список в соответствии с указанным разделителем.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список в соответствии с указанным разделителем.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных по запятой, игнорируя запятые в кавычках.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по всем заданным разделителям в последовательности.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список по всем заданным разделителям в последовательности.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных по запятой, а затем по точке с запятой с начала входных данных.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Разделение входных данных по запятой, а затем по точке с запятой, обрабатывая кавычки как любые другие символы (начиная с конца входных данных).",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по каждой указанной длине.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список по каждой указанной длине.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных на первые два символа, за которыми следует три следующих символа, с начала входных данных.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Разделение входных данных на первые три символа, за которыми следует два следующих символа, начиная с конца входных данных.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по всем указанным позициям.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список по всем указанным позициям.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных по указанным позициям с начала входных данных.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Разделение входных данных по указанным позициям начиная с конца входных данных.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список по заданным значениям смещения и длины.",
        "Documentation.LongDescription": "Возвращает функцию, которая разделяет текст на список текстовых элементов в соответствии с заданными значениями смещения и длины. Нулевая длина означает, что будет включен весь оставшийся входной текст.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Разделение входных данных по указанным парам позиции и длины с начала входных данных. Обратите внимание, что диапазоны в этом примере перекрываются.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Разделение входных данных по указанным парам позиции и длины начиная с конца входных данных.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Разделить входные данные на почтовый индекс фиксированной длины, за которым следует название города переменной длины.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Возвращает функцию, которая разбивает текст на текстовый список в цикле, после каждого отрезка указанной длины.",
        "Documentation.LongDescription": "Возвращает функцию, которая разбивает текст на текстовый список в цикле, после каждого отрезка указанной длины.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Повторяющееся разделение входных данных на блоки из трех символов с начала входных данных.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Повторяющееся разделение входных данных на блоки из трех символов начиная с конца входных данных.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Возвращает приблизительное количество строк в таблице.",
        "Documentation.LongDescription": "Возвращает приблизительное количество строк в <code>table</code> или ошибку, если источник данных не поддерживает приблизительное значение.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Оценка количества различных комбинаций города и области в большой таблице, которую можно использовать в качестве оценки кратности для столбцов. Оценки кратности достаточно важны, и различные источники данных (например, SQL Server) поддерживают это приблизительное значение, часто используя алгоритм HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Возвращает количество столбцов в таблице.",
        "Documentation.LongDescription": "Возвращает количество столбцов в таблице <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Определение числа столбцов в таблице.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Возвращает имена столбцов в виде списка.",
        "Documentation.LongDescription": "Возвращает имена столбцов в таблице <code>table</code> в виде текстового списка.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение имен столбцов таблицы.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Возвращает первую строку или указанное значение по умолчанию.",
        "Documentation.LongDescription": "Возвращает первую строку из <code>table</code> или необязательное значение по умолчанию <code>default</code>, если таблица пуста.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение первой строки таблицы.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Найти первую строку таблицы <code>({})</code> или получить [a = 0, b = 0], если она пуста.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Возвращает первый столбец первой строки таблицы или указанное значение по умолчанию.",
        "Documentation.LongDescription": "Возвращает первый столбец первой строки таблицы <code>table</code> или указанное значение по умолчанию.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Указывает, содержит ли таблица только уникальные строки (без повторений).",
        "Documentation.LongDescription": "Указывает, содержит ли \"<code>table</code>\" только уникальные строки (без повторений). Возвращает значение <code>true</code>, если строки уникальны, и <code>false</code> в противном случае.\r\n    Необязательный параметр \"<code>comparisonCriteria</code>\" определяет, какие столбцы таблицы проверяются на наличие повторов. Если \"<code>comparisonCriteria</code>\" не задан, проверяются все столбцы.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Определение, состоит ли таблица из уникальных строк.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Определение, уникальны ли все строки таблицы в столбце.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Указывает, содержит ли таблица хотя бы одну строку.",
        "Documentation.LongDescription": "Указывает, содержит ли \"<code>table</code>\" хотя бы одну строку. Возвращает значение <code>true</code>, если строк нет (т. е. таблица пуста), и <code>false</code> в противном случае.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Определение, пуста ли таблица.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Определить, пуста ли таблица <code>({})</code>.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Возвращает ключи указанной таблицы.",
        "Documentation.LongDescription": "Возвращает ключи указанной таблицы.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Получение списка ключей для таблицы.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Возвращает последнюю строку или указанное значение по умолчанию.",
        "Documentation.LongDescription": "Возвращает последнюю строку из <code>table</code> или необязательное значение по умолчанию <code>default</code>, если таблица пуста.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Нахождение последней строки таблицы.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Найти последнюю строку таблицы <code>({})</code> или возвратить [a = 0, b = 0], если она пуста.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Возвращает количество строк в таблице.",
        "Documentation.LongDescription": "Возвращает количество строк в <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Нахождение числа строк в таблице.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Возвращает одну строку в таблице.",
        "Documentation.LongDescription": "Возвращает единственную строку в одной строке <code>table</code>. Если <code>table</code> имеет более одной строки, возникает исключение.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Возврат одной строки из таблицы.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Создает список вложенных списков значений столбца из таблицы.",
        "Documentation.LongDescription": "Создает список вложенных списков из таблицы <code>table</code>.  Каждый элемент списка является внутренним списком, содержащим значения столбца.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Создание списка значений столбца из таблицы.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Преобразует таблицу в список путем применения заданной функции объединения к каждой строке значений в таблице.",
        "Documentation.LongDescription": "Преобразует таблицу в список путем применения заданной функции объединения к каждой строке значений в таблице.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Объединить текст каждой строки с запятой.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Преобразует таблицу в список записей.",
        "Documentation.LongDescription": "Преобразует таблицу <code>table</code> в список записей.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать таблицу в список записей.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Создает список вложенных списков значений строки из таблицы.",
        "Documentation.LongDescription": "Создает список вложенных списков из таблицы <code>table</code>.  Каждый элемент списка является внутренним списком, содержащим значения строки.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Создание списка значений строк из таблицы.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Создает измененную запись об ошибке, которая не запускает откат при вызове обработчика, определенного в представлении (через Table.View).",
        "Documentation.LongDescription": "Создает измененную запись об ошибке из <code>errorRecord</code>, которая не запускает откат при вызове обработчика, определенного в представлении (через Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Создает функцию, которая может быть перехвачена обработчиком, определенным в представлении (через Table.View).",
        "Documentation.LongDescription": "<p>Создает на основе <code>function</code> функцию для представления, создаваемого <code>Table.View</code>.</p>\r\n<p>Задать обработчик для функции представления можно с помощью <code>OnInvoke</code> из <code>Table.View</code>.</p>\r\n<p>Как и в случае обработчиков встроенных операций, если обработчик <code>OnInvoke</code> не указан, не обрабатывает функцию представления или выдает ошибку, для представления применяется <code>function</code>.</p>\r\n<p>Более полное описание <code>Table.View</code> и функций настраиваемого представления см. в опубликованной документации по настраиваемым соединителям Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Возвращает текстовое значение с удалением всех управляющих символов.",
        "Documentation.LongDescription": "Возвращает текстовое значение с удалением всех управляющих символов из <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Удаление переводов строки и других управляющих символов из текстового значения.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Объединяет список текстовых значений в одно текстовое значение.",
        "Documentation.LongDescription": "Возвращает результат объединения списка текстовых значений <code>texts</code> в одно текстовое значение. Все значения <code>NULL</code>, существующие в <code>texts</code>, игнорируются.\r\n    Можно указать необязательный <code>separator</code>, используемый в итоговом объединенном тексте.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Объединить текстовые значения \"Seattle\" и \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Объединить текстовые значения \"Seattle\" и \"WA\", разделенные запятыми и пробелом.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Объединить значения \"Seattle\", <code>NULL</code> и \"WA\", разделенные запятой и пробелом. (Обратите внимание, что значение <code>NULL</code> игнорируется.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Создает текстовое значение из заданного значения.",
        "Documentation.LongDescription": "Возвращает текстовое представление <code>value</code>. Значение <code>value</code> может иметь тип <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> или <code>binary</code>.\r\n    Если указанное значение равно NULL, <code>Text.From</code> возвращает значение NULL. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Создать текстовое значение из числа 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Декодирует данные из двоичного формата в текстовый.",
        "Documentation.LongDescription": "Декодирует данные <code>binary</code> из двоичного значения в текстовое, используя тип <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Выводит числовой тип с детализацией (Int64.Type, Double.Type и т. д.) для числа, закодированного в тексте",
        "Documentation.LongDescription": "Определяет тип детализированного числа (Int64.Type, Double.Type и т. д.) <code>text</code>. Ошибка возникает, если <code>text</code> не является числом. Также может быть предоставлено необязательное <code>culture</code> значение (например, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Возвращает число символов.",
        "Documentation.LongDescription": "Возвращает число символов в тексте <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Определить, сколько символов содержится в тексте \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Преобразует все символы в нижний регистр.",
        "Documentation.LongDescription": "Возвращает результат преобразования всех символов в значении <code>text</code> в нижний регистр. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Получить версию строки \"AbCd\" в нижнем регистре.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Переводит первую букву каждого слова в верхний регистр.",
        "Documentation.LongDescription": "Возвращает результат перевода в верхний регистр только первой буквы каждого слова в текстовом значении <code>text</code>. Все остальные буквы возвращаются в нижнем регистре. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Использовать <code>Text.Proper</code> для простого предложения.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Обращает порядок указанного <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Обратный порядок текста \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Кодирует текст в двоичную форму.",
        "Documentation.LongDescription": "Кодирует заданное текстовое значение <code>text</code> в двоичное значение с помощью указанного <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Возвращает список значений символов из заданного текстового значения.",
        "Documentation.LongDescription": "Возвращает список значений символов из заданного текстового значения <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Создать список значений символов из текста \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Удаляет все начальные и конечные пробелы.",
        "Documentation.LongDescription": "Возвращает результат удаления всех начальных и конечных пробелов из текстового значения <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Удалить начальные и конечные пробелы из \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Удаляет все конечные пробелы.",
        "Documentation.LongDescription": "Возвращает результат удаления всех конечных пробелов из текстового значения <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Удалить конечные пробелы из \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Удаляет все начальные пробелы.",
        "Documentation.LongDescription": "Возвращает результат удаления всех начальных пробелов из текстового значения <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Удалить начальные пробелы из \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Преобразует все символы в верхний регистр.",
        "Documentation.LongDescription": "Возвращает результат преобразования всех символов в значении <code>text</code> в верхний регистр. Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Получить версию строки \"aBcD\" в нижнем регистре.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Возвращает конец часа.",
        "Documentation.LongDescription": "Возвращает конец часа, который представлен с использованием <code>dateTime</code>, включая доли секунды. Данные о часовом поясе сохраняются.\r\n      <ul>\r\n        <li><code>dateTime</code>: значение <code>time</code>, <code>datetime</code> или <code>datetimezone</code>, на основе которого вычисляется конец часа.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Получить конец часа для 14.05.2011 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Получить конец часа для 17.05.2011 17:00:00-7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Создает значение времени из заданного значения.",
        "Documentation.LongDescription": "Возвращает значение <code>time</code>, полученное из предоставленного значения <code>value</code>. Также можно указать необязательный параметр <code>culture</code> (например, \"ru-RU\").\r\nЕсли данное <code>value</code> равно <code>NULL</code>, то <code>Time.From</code> возвращает <code>NULL</code>. Если данное <code>value</code> представляет собой <code>time</code>, то <code>value</code> и будет возвращено. Преобразовать в <code>time</code> можно значения следующих типов:\r\n      <ul>\r\n        <li><code>text</code>. Значение <code>time</code> берется из текстового представления. Подробнее см. <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>. Будет использован компонент времени из <code>value</code>.</li>\r\n        <li><code>datetimezone</code>. Будет взят компонент времени из datetime-эквивалента <code>value</code> по местному времени.</li>\r\n        <li><code>number</code>. Значение <code>time</code> будет эквивалентно доле дня (дроби), выражаемой <code>value</code>. Если значение <code>value</code> отрицательное либо равно единице или выше, возвращается ошибка.</li>\r\n      </ul>\r\nЕсли <code>value</code> имеет какой-либо другой тип, возвращается ошибка.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>0.7575</code> в значение <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Преобразовать <code>#datetime(1899, 12, 30, 06, 45, 12)</code> в значение <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Создает значение времени с применением локальных, универсальных и пользовательских форматов времени.",
        "Documentation.LongDescription": "Создает значение <code>time</code> из текстового представления <code>text</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, распознавание времени будет выполняться по принципу наилучшего возможного варианта.</li>\r\n   <li><code>Culture</code>: если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"tt\"</code> представляется как <code>\"AM\" или \"PM\"</code>, тогда как для <code>\"ar-EG\"</code> значение <code>\"tt\"</code> выглядит как <code>\"ص\" или \"م\"</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> также может быть текстовым значением. При этом происходит то же самое, что и при <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать <code>\"10:12:31am\"</code> в значение времени.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Преобразование <code>\"1012\"</code> в значение Time.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Преобразование <code>\"10\"</code> в значение Time.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Возвращает компонент часов.",
        "Documentation.LongDescription": "Возвращает компонент часов заданного значения <code>time</code>, <code>datetime</code> или <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Найти часы в #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Возвращает компонент минут.",
        "Documentation.LongDescription": "Возвращает компонент минут заданного значения <code>time</code>, <code>datetime</code> или <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Найти минуты в #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Возвращает второй компонент.",
        "Documentation.LongDescription": "Возвращает компонент секунд заданного значения <code>time</code>, <code>datetime</code> или <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Поиск второго значения в значении даты и времени.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Возвращает начало часа.",
        "Documentation.LongDescription": "Возвращает начало часа, который представлен с использованием <code>dateTime</code>.\r\n    <code>dateTime</code> должно быть значением <code>time</code>, <code>datetime</code> или <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Поиск начала часа для 10 октября 2011 г., 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Возвращает запись, содержащую части значения Time.",
        "Documentation.LongDescription": "Возвращает запись, содержащую части заданного значения времени, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: значение <code>time</code>, для которого необходимо вычислить запись частей.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Преобразовать значение <code>#time(11, 56, 2)</code> в запись, содержащую значения времени.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Возвращает текстовое представление значения времени.",
        "Documentation.LongDescription": "Возвращает текстовое представление <code>time</code>. При необходимости можно задать необязательный параметр <code>options</code> типа <code>record</code> для указания дополнительных свойств. Параметр <code>culture</code> используется только для рабочих процессов прежних версий. В состав <code>record</code> могут входить следующие поля:\r\n<ul>\r\n   <li><code>Format</code>. Значение типа <code>text</code>, указывающее используемый формат. Дополнительные сведения: https://go.microsoft.com/fwlink/?linkid=2180104 и https://go.microsoft.com/fwlink/?linkid=2180105. Если пропустить это поле или указать <code>NULL</code>, будет использован формат даты по умолчанию, заданный в <code>Culture</code>.</li>\r\n   <li><code>Culture</code>. Если <code>Format</code> не имеет значения NULL, <code>Culture</code> управляет определенными спецификаторами формата. Например, при использовании <code>\"en-US\"</code> значение <code>\"tt\"</code> представляется как <code>\"AM\" или \"PM\"</code>, тогда как для <code>\"ar-EG\"</code> значение <code>\"tt\"</code> выглядит как <code>\"ص\" или \"م\"</code>. Если <code>Format</code> имеет значение <code>NULL</code>, <code>Culture</code> задает формат, используемый по умолчанию. Если значение <code>Culture</code> равно <code>NULL</code> или пропущено, используется <code>Culture.Current</code>.</li>\r\n</ul>\r\nДля поддержки прежних версий рабочих процессов <code>options</code> и <code>culture</code> также могут быть текстовыми значениями. При этом происходит то же самое, что и при <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Преобразование <code>#time(01, 30, 25)</code> в значение <code>text</code>. <i>Результат может зависеть от текущего языка и региональных параметров.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Преобразование с помощью пользовательского формата и м формате и немецкого языка и региональных параметров.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Преобразование с помощью стандартного формата времени.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Возвращает закрытую версию данного типа записи (или такой же тип, если он уже закрыт).",
        "Documentation.LongDescription": "Возвращает закрытую версию данной записи <code>record</code> <code>type</code> (или тот же тип, если он уже закрыт).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Создать закрытую версию <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Возвращает аспекты типа.",
        "Documentation.LongDescription": "Возвращает запись, содержащую аспекты <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Возвращает запись со значениями полей, в качестве которых указаны имена параметров типа функции, а также их значения, отражающие соответствующие типы.",
        "Documentation.LongDescription": "Возвращает запись со значениями полей, в качестве которых указаны имена параметров <code>type</code>, значения которых отражают их соответствующие типы.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Найти типы параметров функции <code>(x как число, y как текст)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Возвращает число, обозначающее минимальное количество параметров, необходимое для вызова типа функции.",
        "Documentation.LongDescription": "Возвращает число, обозначающее минимальное количество параметров, необходимых для вызова входных данных <code>type</code> функции.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Найти число необходимых параметров для функции <code>(x как число, y как текст (дополнительно))</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Возвращает тип, возвращенный типом функции.",
        "Documentation.LongDescription": "Возвращает тип, возвращенный функцией <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Найти возвращаемый тип <code>() как любой)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Возвращает значение \"true\", если тип является допускающим значение \"null\". В противном случае возвращается значение \"false\".",
        "Documentation.LongDescription": "Возвращает <code>true</code>, если тип является типом <code>nullable</code>; в противном случае, возвращается <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Определяет, является ли <code>number</code> допускающим значение \"null\".",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Определяет, является ли <code>type nullable number</code> допускающим значение \"null\".",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Возвращает данные о том, является ли тип записи открытым.",
        "Documentation.LongDescription": "Возвращает значение <code>logical</code>, указывающее, является ли запись <code>type</code> открытой.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Определить, является ли запись <code>type [ A = число, ...]</code> открытой.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Возвращает тип элемента на основании типа списка.",
        "Documentation.LongDescription": "Возвращает тип элемента из списка. <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Найти тип элемента в списке <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Возвращает тип, не допускающий значение \"null\".",
        "Documentation.LongDescription": "Возвращает тип, не являющийся <code>nullable</code>, из <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Возврат типа, не допускающего значение \"null\", <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Возвращает открытую версию данного типа записи (или такой же тип, если запись уже является открытой).",
        "Documentation.LongDescription": "Возвращает открытую версию данной записи <code>record</code> <code>type</code> (или такой же тип, если запись уже является открытой).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Создать открытую версию <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Возвращает запись, описывающую поля типа записи, причем у каждого поля возвращаемого типа записи есть соответствующее имя и значение.",
        "Documentation.LongDescription": "Возвращает запись, описывающую поля записи <code>type</code>. Каждое поле возвращенного типа записи имеет соответствующее имя и значение в виде записи <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Найти имя и значение записи <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Возвращает (возможно, пустой) список ключей для данного типа таблицы.",
        "Documentation.LongDescription": "Возвращает (возможно, пустой) список ключей для данного типа таблицы.<br>\r\n    <br>\r\n    Каждый ключ определяется с помощью записи в следующей форме:\r\n    <ul>\r\n      <li>\r\n        <code>Столбцы</code>: список имен столбцов, которые определяют ключ\r\n      </li>\r\n      <li>\r\n        <code>Первичный</code>: <code>true</code> если ключ является первичным ключом таблицы; в противном случае <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Возвратить сведения о ключах для типа таблицы.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Возвращает тип строки для типа таблицы.",
        "Documentation.LongDescription": "Возвращает тип строки для указанного типа таблицы. Результатом всегда будет тип записи.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Возврат сведений о типе строки для простой таблицы.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Возвращает объединение списка типов.",
        "Documentation.LongDescription": "Возвращает объединение типов в <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Соберите запись в строку запроса универсального кода ресурса.",
        "Documentation.LongDescription": "Соберите запись <code>query</code> в строку запроса универсального кода ресурса, при необходимости добавив escape-символы.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Закодируйте строку запроса, которая содержит специальные символы.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Кодирует специальные символы в соответствии с RFC 3986.",
        "Documentation.LongDescription": "Кодирует специальные символы во входных данных <code>data</code> в соответствии с правилами RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Закодируйте специальные символы в \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Возвращает части введенного абсолютного URI в качестве записи.",
        "Documentation.LongDescription": "Возвращает (как запись) части введенного <code>absoluteUri</code> с такими значениями, как схема, узел, порт, путь, запрос, фрагмент, имя пользователя и пароль.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Найти части абсолютного URI \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Декодировать закодированную строку.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес своей службы аналитики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Возвращает в виде двоичного значения содержимое, скачанное по URL-адресу службы аналитики Azure DevOps. Эта функция использует разные учетные данные для разных организаций."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Введите URL-адрес своей службы аналитики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Возвращает в виде двоичного значения содержимое, скачанное по URL-адресу службы аналитики Azure DevOps. Эта функция использует глобальные учетные данные для всех доступных организаций."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Выражает альтернативные планы запросов.",
        "Documentation.LongDescription": "Выражает альтернативные планы запросов в выражении, полученном с помощью Value.Expression(Value.Optimize(...)). Не предназначено для других целей.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Возвращает абстрактное синтаксическое дерево (AST), представляющее выражение значения.",
        "Documentation.LongDescription": "Возвращает абстрактное синтаксическое дерево (AST), представляющее выражение значения",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Создает строго типизированное значение из текстового представления.",
        "Documentation.LongDescription": "Расшифровывает значение из текстового представления <code>text</code> и преобразует его в качестве значения с соответствующим типом.\r\n    <code>Value.FromText</code> принимает текстовое значение и возвращает число, логическое значение, значение NULL, значение даты и времени, значение длительности или текстовое значение. Пустое текстовое значение интерпретируется как значение NULL.\r\n    Также может быть указан необязательный параметр <code>culture</code> (например, \"ru-RU\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Возвращает запись, содержащую метаданные входных данных.",
        "Documentation.LongDescription": "Возвращает запись, содержащую метаданные входных данных.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Указывает Value.Expression вернуть для значения оптимизированное выражение.",
        "Documentation.LongDescription": "Если <code>value</code> при использовании в Value.Expression представляет запрос, который можно оптимизировать, эта функция означает, что должно возвращаться оптимизированное выражение. В противном случае <code>value</code> будет передаваться без каких-либо изменений.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Удаляет входные данные метаданных.",
        "Documentation.LongDescription": "Удаляет входные данные метаданных.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Возвращает тип данного значения.",
        "Documentation.LongDescription": "Возвращает тип данного значения.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.LongDescription": "Эта функция предназначена только для внутреннего использования.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Возвращает HTML-код для указанного URL-адреса, просматриваемого веб-браузером.",
        "Documentation.LongDescription": "Возвращает HTML-код для предоставленного значения <code>url</code> в том виде, как он отображается в браузере. Для указания дополнительных свойств можно указать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля.\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: если целевой сайт поддерживает ключ API, этот параметр можно использовать для указания имени (не значения) параметра ключа, который следует использовать в URL-адресе. Фактическое значение ключа указывается в учетных данных.</li>\r\n        <li><code>WaitFor</code>: указывает условие ожидания перед скачиванием HTML-кода, помимо ожидания загрузки страницы (всегда выполняется). Может быть записью, содержащей поля Timeout (Время ожидания) и Selector (Селектор). Если указано только значение Timeout, функция подождет указанное в нем время перед скачиванием HTML-кода. Если указаны оба поля и время ожидания истекает до начала существования на странице Selector, произойдет ошибка. Если значение Selector указано без Timeout, будет применено время ожидания по умолчанию, равное 30 секундам.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Доступ к данным",
        "Documentation.Examples": [
          {
            "Description": "Возвращает HTML-код для https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Возвращает HTML-код страницы https://microsoft.com после ожидания появления селектора CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Возвращает HTML-код для https://microsoft.com после ожидания в течение десяти секунд.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Возвращает HTML-код страницы https://microsoft.com после ожидания появления селектора CSS в течение десяти секунд.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Возвращает содержимое, загруженное с URL-адреса в двоичном виде.",
        "Documentation.LongDescription": "Возвращает содержимое, скачанное из <code>url</code>, как двоичное. Для указания дополнительных свойств можно задать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>Query</code> : Добавляйте параметры запросов в URL-адрес программным способом, не беспокоясь об экранировании.</li>\r\n<li><code>ApiKeyName</code> : Если целевой сайт поддерживает ключ API, этот параметр можно использовать для указания имени (не значения) параметра ключа, который следует использовать в URL-адресе. Фактическое значение ключа указывается в учетных данных.</li>\r\n<li><code>Headers</code> : При указании этого значения в виде записи в HTTP-запрос будут добавлены дополнительные заголовки.</li>\r\n<li><code>Timeout</code> : При указании этого значения в виде длительности будет изменено время ожидания HTTP-запроса. Значение по умолчанию&#160;— 100&#160;секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : При указании этого значения в виде списка эти ключи заголовков HTTP будут исключены из вычислений для кэширования данных.</li>\r\n<li><code>IsRetry</code> : При указании этого логического значения как True все существующие ответы в кэше будут игнорироваться при извлечении данных.</li>\r\n<li><code>ManualStatusHandling</code> : При указании этого значения в виде списка встроенная обработка HTTP-запросов, ответ которых имеет один из этих кодов состояния, будет невозможна.</li>\r\n<li><code>RelativePath</code> : Это значение, указанное в виде текста, будет добавлено к базовому URL-адресу перед выполнением запроса.</li>\r\n<li><code>Content</code> : Указание этого значения изменяет веб-запрос с &quot;GET&quot; на &quot;POST&quot;, так как значение параметра используется в качестве содержимого записи.</li>\r\n</ul>\r\n\r\n    HTTP-запрос выполняется как GET (если содержимое не указано) или POST (при наличии содержимого). Запросы POST можно делать только анонимно.\r\n    <br>\r\n    Заголовки HTTP-ответа доступны в качестве метаданных двоичного результата. Вне контекста настраиваемого соединителя данных доступно только подмножество заголовков ответов (по соображениям безопасности).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Получить содержимое <code>\"https://bing.com/search?q=Power+Query\"</code> с использованием параметров RelativePath и Query. С помощью этих параметров можно динамически запрашивать статический базовый URL-адрес.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Выполнить операцию POST для URL-адреса с передачей двоичных полезных данных JSON и анализом отклика в виде JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Подключитесь к безопасному URL-адресу, который принимает ключ проверки подлинности как часть строки запроса. Вместо жесткого кодирования секретного ключа в M (что может представлять угрозу безопасности), \r\n    можно подставить ключ безопасно, указав его имя (а не значение) в M, выбрав проверку подлинности веб-API и подставив значение ключа в качестве части учетных данных веб-API.\r\n    При таком использовании следующий пример создает запрос на <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Возвращает заголовки HTTP, скачанные с URL-адреса, в качестве значения записи.",
        "Documentation.LongDescription": "Возвращает заголовки, скачанные из <code>url</code> как запись. Для указания дополнительных свойств можно задать необязательный параметр записи <code>options</code>. Запись может содержать следующие поля:\r\n    <ul>\r\n<li><code>Query</code> : Добавляйте параметры запросов в URL-адрес программным способом, не беспокоясь об экранировании.</li>\r\n<li><code>ApiKeyName</code> : Если целевой сайт поддерживает ключ API, этот параметр можно использовать для указания имени (не значения) параметра ключа, который следует использовать в URL-адресе. Фактическое значение ключа указывается в учетных данных.</li>\r\n<li><code>Headers</code> : При указании этого значения в виде записи в HTTP-запрос будут добавлены дополнительные заголовки.</li>\r\n<li><code>Timeout</code> : При указании этого значения в виде длительности будет изменено время ожидания HTTP-запроса. Значение по умолчанию&#160;— 100&#160;секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : При указании этого значения в виде списка эти ключи заголовков HTTP будут исключены из вычислений для кэширования данных.</li>\r\n<li><code>IsRetry</code> : При указании этого логического значения как True все существующие ответы в кэше будут игнорироваться при извлечении данных.</li>\r\n<li><code>ManualStatusHandling</code> : При указании этого значения в виде списка встроенная обработка HTTP-запросов, ответ которых имеет один из этих кодов состояния, будет невозможна.</li>\r\n<li><code>RelativePath</code> : Это значение, указанное в виде текста, будет добавлено к базовому URL-адресу перед выполнением запроса.</li>\r\n</ul>\r\n\r\n    HTTP-запрос выполняется с помощью метода HEAD. Вне контекста настраиваемого соединителя данных доступно только подмножество заголовков ответов (по соображениям безопасности).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Получение заголовков HTTP для <code>\"https://bing.com/search?q=Power+Query\"</code> с помощью параметров RelativePath и Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Контекст авторизации, в котором анализируется условие элемента управления доступом (ACE).",
        "Documentation.LongDescription": "Контекст авторизации, в котором анализируется условие элемента управления доступом (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Таблица элементов управления доступом (ACE).",
        "Documentation.LongDescription": "Упорядоченная таблица элементов управления доступом (ACE), представляющих правила авторизации. Каждая строка анализируется в текущем контексте авторизации (по порядку), и первая строка, для которой выражение <code>Condition</code> возвращает значение true (истина), определяет, какое применяется правило. Столбец <code>Action</code> представляет тип действия, к которому применяется правило. Столбец <code>AccessControlKind</code> определяет, следует ли разрешить или отклонить для действия доступ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Указывает тип управления доступом.",
        "Documentation.LongDescription": "Указывает тип управления доступом.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Тип, представляющий все значения.",
        "Documentation.LongDescription": "Тип, представляющий все значения.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Тип, представляющий все двоичные значения.",
        "Documentation.LongDescription": "Тип, представляющий все двоичные значения.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Указывает тип двоичного кодирования.",
        "Documentation.LongDescription": "Указывает тип двоичного кодирования.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Указывает возможное количество вхождений элемента в группе.",
        "Documentation.LongDescription": "Указывает возможное количество вхождений элемента в группе.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Описывает тип выполняемой буферизации.",
        "Documentation.LongDescription": "Описывает тип выполняемой буферизации.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Тип, представляющий все байты.",
        "Documentation.LongDescription": "Тип, представляющий все байты.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Указывает порядок байтов.",
        "Documentation.LongDescription": "Указывает порядок байтов.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Тип, представляющий все символы.",
        "Documentation.LongDescription": "Тип, представляющий все символы.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Указывает тип сжатия.",
        "Documentation.LongDescription": "Указывает тип сжатия.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Описывает значение кавычек в CSV-документах.",
        "Documentation.LongDescription": "Описывает значение кавычек в CSV-документах.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Тип, представляющий денежное значение.",
        "Documentation.LongDescription": "Тип, представляющий денежное значение.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Тип, представляющий все значения даты.",
        "Documentation.LongDescription": "Тип, представляющий все значения даты.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Тип, представляющий все значения даты и времени без связанного часового пояса.",
        "Documentation.LongDescription": "Тип, представляющий все значения даты и времени без связанного часового пояса.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Тип, представляющий все значения даты и времени относительно часового пояса.",
        "Documentation.LongDescription": "Тип, представляющий все значения даты и времени относительно часового пояса.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Указывает день недели.",
        "Documentation.LongDescription": "Указывает день недели.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Тип, представляющий десятичное число с фиксированной запятой.",
        "Documentation.LongDescription": "Тип, представляющий десятичное число с фиксированной запятой.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Тип, представляющий число с плавающей запятой двойной точности.",
        "Documentation.LongDescription": "Тип, представляющий число с плавающей запятой двойной точности.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Тип, представляющий все значения длительности",
        "Documentation.LongDescription": "Тип, представляющий все значения длительности",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Указывает ожидаемое действие для дополнительных значений в строке, которая содержит больше столбцов, чем ожидается.",
        "Documentation.LongDescription": "Указывает ожидаемое действие для дополнительных значений в строке, которая содержит больше столбцов, чем ожидается.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Тип, представляющий все функции.",
        "Documentation.LongDescription": "Тип, представляющий все функции.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Указывает вид группировки.",
        "Documentation.LongDescription": "С одним значением ключа можно создать несколько локальных групп, но только одна глобальная группа создается для заданного значения ключа.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Тип, представляющий значение GUID.",
        "Documentation.LongDescription": "Тип, представляющий значение GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Удостоверение представляет пользователя, группу, устройство или иные идентифицируемые сущности.",
        "Documentation.LongDescription": "Удостоверение представляет пользователя, группу, устройство или иные идентифицируемые сущности.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Определяет область, в которой создаются и сравниваются удостоверения.",
        "Documentation.LongDescription": "Определяет область, в которой создаются и сравниваются удостоверения.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Тип, представляющий 16-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Тип, представляющий 16-разрядное целое число со знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Тип, представляющий 32-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Тип, представляющий 32-разрядное целое число со знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Тип, представляющий 64-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Тип, представляющий 64-разрядное целое число со знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Тип, представляющий 8-разрядное целое число со знаком.",
        "Documentation.LongDescription": "Тип, представляющий 8-разрядное целое число со знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Указывает алгоритм соединения для использования в операции соединения.",
        "Documentation.LongDescription": "Указывает алгоритм соединения для использования в операции соединения.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Указывает вид операции соединения.",
        "Documentation.LongDescription": "Указывает вид операции соединения.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Указывает левую или правую таблицу соединения.",
        "Documentation.LongDescription": "Указывает левую или правую таблицу соединения.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Описывает тип предложения LIMIT, поддерживаемого диалектом SQL в этом источнике данных.",
        "Documentation.LongDescription": "Описывает тип предложения LIMIT, поддерживаемого диалектом SQL в этом источнике данных.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Тип, представляющий все списки.",
        "Documentation.LongDescription": "Тип, представляющий все списки.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Тип, представляющий все логические значения.",
        "Documentation.LongDescription": "Тип, представляющий все логические значения.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Указывает ожидаемое действие для отсутствующих значений в строке, которая содержит меньшее количество столбцов, чем ожидается.",
        "Documentation.LongDescription": "Указывает ожидаемое действие для отсутствующих значений в строке, которая содержит меньшее количество столбцов, чем ожидается.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Тип, представляющий значение NULL.",
        "Documentation.LongDescription": "Тип, представляющий значение NULL.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Тип, представляющий все числа.",
        "Documentation.LongDescription": "Тип, представляющий все числа.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Задает типы значений, которые могут быть пропущены службой OData.",
        "Documentation.LongDescription": "Задает типы значений, которые могут быть пропущены службой OData.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Указывает вхождение элемента в последовательности.",
        "Documentation.LongDescription": "Указывает вхождение элемента в последовательности.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Указывает направление сортировки.",
        "Documentation.LongDescription": "Указывает направление сортировки.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Тип, представляющий текстовый пароль.",
        "Documentation.LongDescription": "Тип, представляющий текстовый пароль.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Тип, представляющий значение процента.",
        "Documentation.LongDescription": "Тип, представляющий значение процента.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Задает тип режима процентиля.",
        "Documentation.LongDescription": "Задает тип режима процентиля.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Указывает точность сравнения.",
        "Documentation.LongDescription": "Указывает точность сравнения.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Указывает стиль выделения цитаты.",
        "Documentation.LongDescription": "Указывает стиль выделения цитаты.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Задает тип ранжирования.",
        "Documentation.LongDescription": "Задает тип ранжирования.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Тип, представляющий все записи.",
        "Documentation.LongDescription": "Тип, представляющий все записи.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Указывает, откуда вести индексацию — с начала или с конца входных данных.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Указывает направление округления, если округление возможно в обе стороны.",
        "Documentation.LongDescription": "Указывает направление округления, если округление возможно в обе стороны.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Допустимые параметры для режима выполнения SAP Business Warehouse.",
        "Documentation.LongDescription": "Допустимые параметры для режима выполнения SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Допустимые параметры для параметра распределения SAP HANA.",
        "Documentation.LongDescription": "Допустимые параметры для параметра распределения SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Оператор диапазона для входных параметров диапазона SAP HANA.",
        "Documentation.LongDescription": "Оператор диапазона для входных параметров диапазона SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Тип, представляющий число с плавающей запятой одинарной точности.",
        "Documentation.LongDescription": "Тип, представляющий число с плавающей запятой одинарной точности.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Протокол, используемый при подключении к экземпляру Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Тип, представляющий все таблицы.",
        "Documentation.LongDescription": "Тип, представляющий все таблицы.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Тип, представляющий все текстовые значения.",
        "Documentation.LongDescription": "Тип, представляющий все текстовые значения.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Указывает тип кодировки текста.",
        "Documentation.LongDescription": "Указывает тип кодировки текста.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Тип, представляющий все значения времени.",
        "Documentation.LongDescription": "Тип, представляющий все значения времени.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Указывает уровень трассировки.",
        "Documentation.LongDescription": "Указывает уровень трассировки.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Тип, представляющий все типы.",
        "Documentation.LongDescription": "Тип, представляющий все типы.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Тип, представляющий текстовый URI.",
        "Documentation.LongDescription": "Тип, представляющий текстовый URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Указывает метод HTTP.",
        "Documentation.LongDescription": "Указывает метод HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
