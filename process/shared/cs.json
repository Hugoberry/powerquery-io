{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Vrátí strukturální reprezentaci databáze aplikace Access.",
        "Documentation.LongDescription": "Vrací strukturální reprezentaci databáze Access <code>database</code>. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Vrací databáze služby Analysis Services na konkrétním hostiteli.",
        "Documentation.LongDescription": "Vrací databáze v instanci služby Analysis Services <code>server</code>. Pomocí nepovinného parametru záznamu <code>options</code> můžete zadat další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Logick&#225; hodnota, kter&#225; ud&#225;v&#225;, jestli se pro typy přidan&#253;ch sloupců m&#237;ry budou použ&#237;vat typy určen&#233; v multidimenzion&#225;ln&#237;m nebo tabulkov&#233;m modelu. Při nastaven&#237; false se pro všechny sloupce m&#237;ry použije typ „number“. V&#253;choz&#237; hodnotou pro tuto možnost je false.</li>\r\n<li><code>Culture</code> : N&#225;zev jazykov&#233; verze, kter&#253; určuje jazykovou verzi pro data. Odpov&#237;d&#225; vlastnosti „Locale Identifier“ v připojovac&#237;m řetězci.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>SubQueries</code> : Č&#237;slo (0, 1 nebo 2), kter&#233; nastavuje hodnotu vlastnosti SubQueries v připojovac&#237;m řetězci. Ř&#237;d&#237; chov&#225;n&#237; poč&#237;tan&#253;ch členů při podv&#253;běrech nebo subkrychl&#237;ch. (V&#253;choz&#237; hodnota je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Datové krychle AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Importovat/DirectQuery dat datové krychle z AtScale.",
        "Documentation.LongDescription": "\r\nVrací data datové krychle z AtScale na serveru <code>server</code>. Může být zadán volitelný parametr záznamu <code>options</code> na řízení následujících možností:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Logická hodnota, která určuje, jestli se typy zadané v multidimenzionálním nebo tabulkovém modelu použijí pro typy přidaných sloupců měr. Pokud je nastaveno na hodnotu false, pro všechny sloupce měr bude použit typ „number“. Výchozí hodnota pro tuto možnost je false.</li>\r\n        <li><code>CommandTimeout</code>: Délka (v sekundách), která určuje, jak dlouho může běžet dotaz na straně serveru, než bude zrušen. Výchozí hodnota závisí na ovladači. </li>\r\n        <li><code>ConnectionTimeout</code>: Délka (v sekundách), která určuje, jak dlouho se má čekat, než bude ukončen pokus o připojení k serveru. Výchozí hodnota závisí na ovladači.</li>\r\n\r\n</ul>\r\nParametr záznamu se ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].",
        "Documentation.Examples": {
          "Description": "Zobrazí seznam dat datové krychle v datové krychli AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje data z Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje data z vaší instance Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku informací o událostech Storm.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabulka s událostmi Storm Events z databáze „Samples“ v clusteru „help“"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Zadejte URL vaší služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Vrátí obsah stažený z adresy URL Azure DevOps Analytics Service jako binární hodnotu. Tato funkce používá různé přihlašovací údaje pro různé organizace."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Kanál služby Azure DevOps Services",
        "Documentation.DisplayName": "Kanál služby Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vrátí tabulku informačních kanálů OData nabízených službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Zadejte adresu URL koncového bodu Azure Enterprise REST API přidruženého vaší registraci.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Vrátí seznam sestav a měsíců dostupných z rozhraní Azure Enterprise API.",
        "Documentation.Name": "Import dat z Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Použití funkce AzureEnterprise.Tables a navigace k určité hodnotě kvůli získání výsledků",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabulka"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vytvoří seznam tabulek v instanci Azure Spark.",
        "Documentation.LongDescription": "Vytvoří seznam tabulek v instanci Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam tabulek v instanci Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Vrátí navigační tabulku obsahující kontejnery nalezené v zadaném účtu trezoru úložiště služby Azure.",
        "Documentation.LongDescription": "Vrátí navigační tabulku obsahující řádek pro každý kontejner nalezený na adrese URL účtu <code>account</code> trezoru úložiště služby Azure. Každý řádek obsahuje odkaz na objekty blob kontejneru. Pomocí <code>options</code> je možné řídit následující možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtů, kter&#233; se maj&#237; přeč&#237;st, než se počk&#225; na př&#237;jemce dat. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtů, kter&#233; se maj&#237; zkusit přeč&#237;st z jednoho požadavku HTTP na server. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost ConcurrentRequests podporuje rychlejš&#237; stahov&#225;n&#237; dat t&#237;m, že umožňuje zadat počet požadavků, kter&#233; se provedou paralelně, za cenu vyšš&#237;ho využit&#237; paměti. Požadovan&#233; množstv&#237; paměti je (Souběžn&#233;Požadavky * VelikostPožadavku). V&#253;choz&#237; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Vrátí navigační tabulku obsahující dokumenty nalezené v zadaném kontejneru a jeho podsložkách z Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrátí navigační tabulku obsahující dokumenty nalezené v zadaném kontejneru a jeho podsložkách na adrese URL účtu <code>endpoint</code> ze systému souborů Azure Data Lake Storage. Pomocí <code>options</code> je možné řídit následující možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtů, kter&#233; se maj&#237; přeč&#237;st, než se počk&#225; na př&#237;jemce dat. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtů, kter&#233; se maj&#237; zkusit přeč&#237;st z jednoho požadavku HTTP na server. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost ConcurrentRequests podporuje rychlejš&#237; stahov&#225;n&#237; dat t&#237;m, že umožňuje zadat počet požadavků, kter&#233; se provedou paralelně, za cenu vyšš&#237;ho využit&#237; paměti. Požadovan&#233; množstv&#237; paměti je (Souběžn&#233;Požadavky * VelikostPožadavku). V&#253;choz&#237; hodnota je 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se soubory vr&#225;t&#237; ve stromov&#233;m zobrazen&#237; adres&#225;řů, nebo jako prost&#253; seznam. V&#253;choz&#237; hodnota je false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Vrátí navigační tabulku obsahující tabulky nalezené v zadaném účtu úložiště služby Azure.",
        "Documentation.LongDescription": "Vrátí navigační tabulku obsahující řádek pro každou tabulku, která se nachází na URL účtu, <code>account</code>, z trezoru úložiště Azure. Jednotlivé řádky obsahují propojení na tabulku Azure. Pokud chcete zadat další vlastnosti, použijte volitelný parametr záznamu, <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>Timeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se ž&#225;dost serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na zdroji.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight v AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Tato funkce není k dispozici, protože vyžaduje .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (starší verze)",
        "Documentation.Caption": "Common Data Service (starší verze)",
        "Documentation.LongDescription": "Připojení k instanci služby Common Data Service (Dynamics 365 a PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Vrátí obsah dokumentu CSV jako tabulku.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu CSV jako tabulku.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> může být null, počet sloupců, seznam názvů sloupců, typ tabulky nebo záznam možností.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> může být jeden znak, seznam znaků nebo výchozí hodnota: <code>\",\"</code>, která naznačuje, že řádky by měly být rozděleny po sobě následujícími prázdnými znaky. Výchozí hodnota: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Podporované hodnoty pro <code>extraValues</code> najdete v <code>ExtraValues.Type</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> určuje typ kódování textu.\r\n      </li>\r\n    </ul>\r\n\r\n    Pokud je pro <code>columns</code> zadán záznam (a <code>delimiter</code>, <code>extraValues</code>, a <code>encoding</code> jsou null), mohou být k dispozici následující pole záznamu:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: Oddělovač sloupců. Výchozí hodnota: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: Může být null, počet sloupců, seznam názvů sloupců nebo typ tabulky. Pokud je počet sloupců nižší než počet na vstupu, budou dodatečné sloupce ignorovány. Pokud je počet sloupců vyšší než počet na vstupu, dodatečné slupce budou vyplněny hodnotou null. Pokud počet není zadán, bude počet sloupců určen tím, kolik sloupců bylo nalezeno na vstupu.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: Kódování textu souboru. Výchozí hodnota: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Určuje, jak se bude zacházet s uvozovkami.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (výchozí): Uvozovky v poli jsou významné pouze bezprostředně po oddělovači.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Uvozovky v poli jsou vždy významné, ať se objevují kdekoli.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Určuje, jak se bude zacházet s konci řádků v uvozovkách.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (výchozí): S konci řádků v uvozovkách se zachází jako se součástí dat, nikoli jako s konci aktuálního řádku.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Se všemi konci řádků se zachází jako s konci aktuálního řádku, i když se nacházejí uvnitř hodnoty v uvozovkách.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Zpracuje text CSV se záhlavími sloupců.",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Vrací tabulku obsahující sadu dostupných dimenzí.",
        "Documentation.LongDescription": "Vrací tabulku obsahující sadu dostupných dimenzí v rámci <code>cube</code>. Každá dimenze je tabulka obsahující sadu atributů dimenze a každý atribut dimenze je reprezentován jako sloupec v tabulce dimenze. Dimenzi lze v datové krychli rozbalit příkazem Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Vrátí vnořenou stromovou strukturu tabulek reprezentující hierarchii zobrazovaných složek objektů (například dimenzí a měr).",
        "Documentation.LongDescription": "Vrátí vnořenou stromovou strukturu tabulek reprezentující hierarchii zobrazovaných složek objektů (například dimenzí a měr) k použití v <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Vrátí tabulku obsahující sadu dostupných vlastností pro míry, které jsou v datové krychli rozbalené.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující sadu dostupných vlastností pro míry, které jsou v datové krychli rozbalené.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Vrací tabulku obsahující sadu dostupných měr.",
        "Documentation.LongDescription": "Vrací tabulku obsahující sadu dostupných měr v rámci <code>cube</code>.\r\n    Každá míra je reprezentována jako funkce. Míry lze v datové krychli použít příkazem Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Vrátí tabulku obsahující sadu parametrů, které jde použít na datovou krychli.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující sadu parametrů, které jde použít na <code>cube</code>. Každý parametr je funkce, která se může vyvolat. Výsledkem je <code>cube</code> s použitým parametrem a jeho argumenty.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Vrátí tabulku obsahující sadu dostupných vlastností pro dimenze, které jsou v datové krychli rozbalené.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující sadu dostupných vlastností pro dimenze, které jsou v datové krychli rozbalené.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Zadejte URL svého účtu Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každou složku a soubor nacházející se na adrese <code>url</code> z Azure Data Lake Storage Gen1. Každý řádek obsahuje vlastnosti složky nebo souboru a odkaz na jejich obsah."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Zadejte adresu URL svého účtu Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každý soubor nacházející se na adrese <code>url</code> z Azure Data Lake Storage Gen1. Každý řádek obsahuje vlastnosti souboru a odkaz na jeho obsah."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Zadejte URL účtu Azure Cosmos DB.",
        "Documentation.LongDescription": "Vrátí tabulku databází Azure Cosmos DB na adrese <code>url</code>. Když je zadáno <code>database</code>, vrátí se místo tabulky databází tabulka kolekcí. Když je navíc zadáno pole <code>Dotaz</code> v záznamu <code>možnosti</code>, vrátí se výsledky dotazu provedeného na zadanou databázi nebo kolekci."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Zadejte adresu URL pro koncový bod služby Dynamics 365 Business Central (on-premises) OData.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (on-premises)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (on-premises)",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics 365 Business Central (on-premises). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Zadejte adresu URL koncového bodu služby Dynamics NAV OData.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Vrátí krychle v instanci Essbase seskupené podle serveru Essbase.",
        "Documentation.LongDescription": "Vrátí tabulku krychlí seskupených podle serveru Essbase z instance Essbase na serveru APS <code>url</code>. Lze zadat volitelný parametr záznamu, <code>options</code>, který řídí následující možnosti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Vrátí obsah excelového sešitu.",
        "Documentation.LongDescription": "Vrátí obsah excelového sešitu. \r\n    <ul>\r\n     <li> <code>useHeaders</code> může mít hodnotu null nebo logickou hodnotu (true/false) označující, jestli se má první řádek každé vrácené tabulky považovat za záhlaví nebo záznam možností. Výchozí hodnota: false. </li>\r\n     <li> <code>delayTypes</code> může mít hodnotu null nebo logickou hodnotu (true/false), která určuje, jestli se mají sloupce všech vrácených tabulek ponechat netypové. Výchozí hodnota: false. </li>\r\n    </ul>\r\n\r\n    Pokud se pro <code>useHeaders</code> zadá záznam (a <code>delayTypes</code> má hodnotu null), můžou se zadat následující pole záznamů: \r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Může mít hodnotu null nebo logickou hodnotu (true/false) označující, jestli by se měl první řádek každé vrácené tabulky považovat za záhlaví. Výchozí hodnota: false. </li>\r\n     <li> <code>DelayTypes</code>: Může mít hodnotu null nebo logickou hodnotu (true/false), která určuje, jestli se mají sloupce všech vrácených tabulek ponechat netypové. Výchozí hodnota: false. </li>\r\n     <li> <code>InferSheetDimensions</code>: Může mít hodnotu null nebo logickou hodnotu (true/false), která označuje, jestli má být oblast listu, která obsahuje data, odvozená čtením samotného listu, nikoli čtením metadat dimenze ze souboru. Může to být užitečné v případech, kdy nejsou metadata dimenzí správná. Poznámka: Tato možnost se podporuje jenom u souborů Excelu ve formátu Open XML, nikoli u souborů Excelu starší verze. Výchozí hodnota: false. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vrátí z excelového sešitu obsah listu List1.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Vrátí tabulku obsahující vlastnosti a obsah souborů a složek nalezených v určené složce.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každou složku a soubor nalezený ve složce <code>path</code>. Každý řádek obsahuje vlastnosti složky nebo souboru a odkaz na jeho obsah. Parametr <code>options</code> je aktuálně určen pouze pro interní použití.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Vrátí tabulku obsahující vlastnosti a obsah souborů a složek nalezených v zadané složce a jejích podsložkách.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každý soubor nalezený ve složce <code>path</code> a všech jejích podsložkách. Každý řádek obsahuje vlastnosti souboru a odkaz na jeho obsah. Parametr <code>options</code> je aktuálně určen pouze pro interní použití.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Umožňuje importovat data z databáze Google BigQuery pomocí Azure AD.",
        "Documentation.LongDescription": "\r\n      Vrátí tabulku s výpisem dostupných projektů v Google BigQuery pomocí Azure AD pro <code>ID fakturačního projektu</code>. Jde zadat volitelný parametr záznamu, <code>možnosti</code>, a nastavit následujících možností:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Časový interval, jak dlouho se má čekat, než se ukončí neúspěšný pokus o připojení k serveru. Výchozí hodnota je hodnota časového limitu připojení ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Časový interval, jak dlouho může běžet dotaz na straně serveru, než se zruší.</li>\r\n        <li><code>UseStorageApi</code>: Určuje, jestli se má pro velké sady výsledků dotazu použít rozhraní API úložiště BigQuery. Výchozí hodnota true (pravda) znamená použít rozhraní API úložiště. Pokud rozhraní API úložiště používat nechcete, nastavte hodnotu false (nepravda).</li>\r\n        <li><code>AudienceUri</code>: Toto je identifikátor URI cílové skupiny, který může ovladač ODBC použít u svých žádostí o výměnu tokenů. Toto pole musí být plně kvalifikovaný identifikátor URI (tzn. //iam.googleapis.com/locations/global/workforcePools/${id_fondu}/providers/aad-provider), kde id_fondu je globálně jedinečný název, který identifikuje fond pracovních sil.</li>\r\n      </ul>\r\n    Parametr záznamu se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Vypíše dostupné projekty v Google BigQuery pomocí Azure AD.",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Tabulky Google",
        "Documentation.Caption": "Tabulky Google",
        "Documentation.Description": "Importovat data z Tabulek Google",
        "Documentation.LongDescription": "Importovat data z Tabulek Google"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Vrátí navigační tabulku obsahující kontejnery nalezené v zadaném účtu trezoru úložiště služby Azure.",
        "Documentation.LongDescription": "Vrátí navigační tabulku obsahující řádek pro každý kontejner nalezený na adrese URL účtu <code>account</code> trezoru úložiště služby Azure. Každý řádek obsahuje odkaz na objekty blob kontejneru.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Vrátí navigační tabulku obsahující kontejnery nalezené v zadaném účtu trezoru úložiště služby Azure.",
        "Documentation.LongDescription": "Vrátí navigační tabulku obsahující řádek pro každý kontejner nalezený na adrese URL účtu <code>account</code> trezoru úložiště služby Azure. Každý řádek obsahuje odkaz na objekty blob kontejneru.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Vrátí tabulku obsahující vlastnosti a obsah souborů a složek nalezených v zadané složce systému souborů Hadoop.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každou složku a soubor nalezené na drese URL <code>url</code> systému souborů Hadoop. Každý řádek obsahuje vlastnosti složky nebo souboru a odkaz na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Vrátí tabulku obsahující vlastnosti a obsah souborů nalezených v zadané složce systému souborů Hadoop a jejích podsložkách.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každý soubor nalezený na drese URL <code>url</code> složky systému souborů Hadoop a v jejích podložkách. Každý řádek obsahuje vlastnosti souboru a odkaz na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importuje data z clusteru Impala.",
        "Documentation.LongDescription": "Importuje data z clusteru Impala <code>server</code>. Pokud nebyl zadaný port, použije se výchozí port 21050.",
        "Documentation.Examples": [
          {
            "Description": "Zobrazí seznam tabulek v clusteru Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje data z Azure Data Explorer  (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje data z vaší instance Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku informací o událostech Storm.",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabulka s událostmi Storm Events z databáze „Samples“ v clusteru „help“"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku s daty z koncového bodu MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Zavolá rozhraní API MailChimp a vrátí výslednou sadu dat jako tabulku. Automaticky stránkuje všemi výsledky. Pro koncové body rozhraní API lze použít volitelný parametr entityName, pokud se kořenový koncový bod a hlavní název entity v odpovědi JSON neshodují.",
        "Documentation.Examples": [
          {
            "Description": "Vyžádá si tabulku dat z koncového bodu lists rozhraní API MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Tabulka s daty lists"
          },
          {
            "Description": "Vyžádá si tabulku dat z koncového bodu campaign-folders rozhraní API MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Tabulka s daty campaign-folders"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Vrátí nezpracované výsledky odpovědi z koncového bodu rozhraní API MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Zavolá rozhraní API API MailChimp a vrátí nezpracovanou odpověď.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí nezpracovaná data z koncového bodu reports/click-details rozhraní API MailChimp pro danou kampaň.",
            "Code": "MailChimp.Instance(\"reports/{id_kampaně}/click-details\")",
            "Result": "Nezpracovaná data podrobností o kliknutí z dané kampaně"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Poskytuje rozšířené funkce dotazů.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Poskytuje rozšířené funkce dotazů.",
        "Documentation.Examples": [
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat mezi 2017-5-1 a 2017-6-15",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí souhrny dat mezi 2017-5-1 a 2017-6-15"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat za duben 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2017-4-1 a 2017-4-30"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat od dubna 2017 do nynějška.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2017-4-1 a 2017-6-15"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat od posledního prosince do tohoto února ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2016-12-1 a 2017-2-28"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat poplatky tržiště za posledních 18 měsíců",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2015-12-1 a 2017-6-15"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat podrobné poplatky pro červen 2017 a květen 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2017-5-1 a 2017-6-15"
          },
          {
            "Description": "Pokud je dnes 2017-07-03, získat podrobné poplatky za červenec 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2016-07-01 a 2016-07-31"
          },
          {
            "Description": "Pokud je dnes 2017-7-13, získat souhrny zůstatků za uplynulých 10 měsíců plus 13 dní tohoto měsíce",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkce vrátí data mezi 2016-9-1 a 2017-7-13"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL ze zdroje dat ODBC. ",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL ze zdroje dat ODBC určeného připojovacím řetězcem <code>connectionString</code>. <code>connectionString</code> může být text nebo záznam párů hodnot vlastnosti. Hodnoty vlastnosti můžou být text nebo číslo. K určení dalších vlastností je možné zadat nepovinný parametr záznamu <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota je 15 s.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulky a zobrazení SQL ze zadaného připojovacího řetězce.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL ze zdroje dat OLE DB.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL ze zdroje dat OLE DB určeného připojovacím řetězcem <code>connectionString</code>. <code>connectionString</code> může být text nebo záznam dvojic vlastností a hodnot. Hodnoty vlastností můžou být textové nebo číselné. Pomocí volitelného parametru záznamu (<code>options</code>) jde zadat další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například jako [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL z databáze Oracle.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL z databáze Oracle na serveru <code>server</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Vrátí všechny tabulky nalezené v souboru PDF.",
        "Documentation.LongDescription": "Vrátí jakékoli tabulky nalezené v <code>pdf</code>. Pomocí nepovinného parametru záznamu <code>options</code> můžete zadat další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>Implementation</code> : Verze algoritmu pro identifikaci tabulek. Star&#233; verze jsou k dispozici pouze kvůli zpětn&#233; kompatibilitě, aby se předešlo poškozen&#237; star&#253;ch dotazů aktualizacemi algoritmu. Nejnovějš&#237; verze by měla vždy poskytovat nejlepš&#237; v&#253;sledky. Platn&#233; hodnoty jsou 1.3, 1.2, 1.1 nebo null.</li>\r\n<li><code>StartPage</code> : Určuje prvn&#237; str&#225;nku v oblasti str&#225;nek ke zkoum&#225;n&#237;. V&#253;choz&#237; hodnota: 1.</li>\r\n<li><code>EndPage</code> : Určuje posledn&#237; str&#225;nku v oblasti str&#225;nek ke zkoum&#225;n&#237;. V&#253;choz&#237; hodnota: posledn&#237; str&#225;nka dokumentu.</li>\r\n<li><code>MultiPageTables</code> : Určuje, jestli se podobn&#233; tabulky na po sobě jdouc&#237;ch str&#225;nk&#225;ch automaticky kombinuj&#237; do jedn&#233; tabulky. V&#253;choz&#237; hodnota: true.</li>\r\n<li><code>EnforceBorderLines</code> : Určuje, jestli se č&#225;ry okrajů vždy vynucuj&#237; jako ohraničen&#237; buněk (v př&#237;padě hodnoty true), nebo se pouze použ&#237;vaj&#237; jako jeden z mnoha pomocn&#253;ch parametrů k určen&#237; ohraničen&#237; buněk (v př&#237;padě hodnoty false). V&#253;choz&#237; hodnota: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulky obsažené v souboru sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Zadejte URL vašeho účtu ve službě Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Vrátí tabulku s relevantními daty služby Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þỳтħóп §сгîφť",
        "Documentation.Description": "Ěх℮çūťĕś РУťћοņ śċґїρт άиð řзтùґи§ đªтά ƒřǻmэş",
        "Documentation.Examples": {
          "Description": "Ěх℮çūťĕś РУťћοņ śċґїρт άиð řзтùґи§ đªтά ƒřǻmэş",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Г ŝсřìрŧ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Vrátí tabulku obsahující v každém řádku název pole a hodnotu vstupního záznamu.",
        "Documentation.LongDescription": "Vrátí tabulku se sloupci <code>Name</code> a <code>Value</code> a řádkem pro každé pole v záznamu <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku ze záznamu.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Vrací balíčky v databázi SAP HANA.",
        "Documentation.LongDescription": "Vrací tabulku multidimenzionálních balíčků z databáze SAP HANA <code>server</code>. Zadáním volitelného parametru záznamu, <code>options</code>, je možné ovládat následující možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>Distribution</code> : Parametr SapHanaDistribution, kter&#253; nastavuje hodnotu vlastnosti „Distribution“ v připojovac&#237;m řetězci. Metoda vyhodnocen&#237; spr&#225;vn&#233;ho uzlu serveru distribuovan&#233;ho syst&#233;mu před proveden&#237;m př&#237;kazu je směrov&#225;n&#237; př&#237;kazu. V&#253;choz&#237; hodnota je SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Určuje implementaci konektoru SAP HANA, kter&#225; se m&#225; použ&#237;t.</li>\r\n<li><code>EnableColumnBinding</code> : Při nač&#237;t&#225;n&#237; dat vytvoř&#237; vazbu proměnn&#253;ch na sloupce sady v&#253;sledků dotazu SAP HANA. Může potenci&#225;lně zv&#253;šit v&#253;kon za cenu m&#237;rně vyšš&#237;ho využit&#237; paměti. V&#253;choz&#237; hodnota je false.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota je 15 s.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Vrátí tabulku s obsahem webu SharePoint.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každou složku a dokument nalezené na zadaném sharepointovém webu <code>url</code>. Každý řádek obsahuje vlastnosti složky nebo souboru a odkaz na jejich obsah. Zadáním <code>options</code> se dají řídit následující možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 nebo 15) nebo text „Auto“, kter&#253; určuje verzi rozhran&#237; API SharePointu, kter&#225; se m&#225; pro tento web použ&#237;vat. Když se tato možnost nezad&#225;, použije se rozhran&#237; API ve verzi 14. Při zad&#225;n&#237; možnosti Auto se automaticky zjist&#237; verze serveru, a když to nen&#237; možn&#233;, nastav&#237; se v&#253;choz&#237; verze 14. Weby SharePointu jin&#233; než anglick&#233; vyžaduj&#237; aspoň verzi 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Vrátí tabulku obsahující dokumenty z webu SharePoint.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každý dokument nalezený na zadaném sharepointovém webu <code>url</code> a v jeho podsložkách. Každý řádek obsahuje vlastnosti složky nebo souboru a odkaz na jejich obsah. Zadáním <code>options</code> se dají řídit následující možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 nebo 15) nebo text „Auto“, kter&#253; určuje verzi rozhran&#237; API SharePointu, kter&#225; se m&#225; pro tento web použ&#237;vat. Když se tato možnost nezad&#225;, použije se rozhran&#237; API ve verzi 14. Při zad&#225;n&#237; možnosti Auto se automaticky zjist&#237; verze serveru, a když to nen&#237; možn&#233;, nastav&#237; se v&#253;choz&#237; verze 14. Weby SharePointu jin&#233; než anglick&#233; vyžaduj&#237; aspoň verzi 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Vrátí tabulku s obsahem ze sharepointového seznamu.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každou položku seznamu nalezenou v zadaném sharepointovém seznamu <code>url</code>. Každý řádek obsahuje vlastnosti seznamu. Je možné zadat: <code>options</code> a řídit tak následující možnosti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 nebo 15) nebo text „Auto“, kter&#253; určuje verzi rozhran&#237; API SharePointu, kter&#225; se m&#225; pro tento web použ&#237;vat. Když se tato možnost nezad&#225;, použije se rozhran&#237; API ve verzi 14. Při zad&#225;n&#237; možnosti Auto se automaticky zjist&#237; verze serveru, a když to nen&#237; možn&#233;, nastav&#237; se v&#253;choz&#237; verze 14. Weby SharePointu jin&#233; než anglick&#233; vyžaduj&#237; aspoň verzi 15.</li>\r\n<li><code>Implementation</code> : Voliteln&#233;. Určuje, kter&#225; verze konektoru SharePointu se m&#225; použ&#237;t. Př&#237;pustn&#233; hodnoty jsou 2.0 nebo null. Pokud je hodnota 2.0, použije se implementace 2.0 konektoru SharePointu. Pokud je hodnota null, použije se původn&#237; implementace konektoru SharePointu.</li>\r\n<li><code>ViewMode</code> : Voliteln&#233;. Tato možnost je platn&#225; jenom pro implementaci 2.0. Př&#237;pustn&#233; hodnoty jsou Vše a V&#253;choz&#237;. Pokud nen&#237; zad&#225;na ž&#225;dn&#225; hodnota, je hodnota nastavena na hodnotu Vše. Pokud je zad&#225;na možnost Vše, zobrazen&#237; zahrnuje všechny sloupce vytvořen&#233; uživatelem a syst&#233;mem definovan&#233; sloupce. Pokud je zad&#225;na možnost V&#253;choz&#237;, bude se zobrazen&#237; shodovat s t&#237;m, co uživatel uvid&#237; při prohl&#237;žen&#237; seznamu online v libovoln&#233;m zobrazen&#237;, kter&#233; uživatel v nastaven&#237; nastavil jako V&#253;choz&#237;. Pokud uživatel uprav&#237; sv&#233; v&#253;choz&#237; zobrazen&#237; tak, aby přidal nebo odebral sloupce vytvořen&#233; uživatelem nebo definovan&#233; syst&#233;mem, nebo vytvořen&#237;m nov&#233;ho zobrazen&#237; a jeho nastaven&#237;m jako v&#253;choz&#237;ho, budou tyto změny rozš&#237;řeny prostřednictv&#237;m konektoru.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Zabr&#225;n&#237; konektoru v použit&#237; samostatn&#233;ho koncov&#233;ho bodu pro sloupce pozn&#225;mek.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Vrátí tabulku z obsahu na zadané adrese URL formátovaného podle rozhraní API SODA 2.0.",
        "Documentation.LongDescription": "Vrátí tabulku z obsahu na zadané adrese URL <code>url</code> formátovaného podle rozhraní API SODA 2.0. Adresa URL musí odkazovat na platný zdroj kompatibilní s rozhraním SODA, který má příponu CSV.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Tuto funkci jde použít na volání libovolného z koncových bodů „List“ nabízených v rozhraní SparkPost API v1. Při volání rozhraní SparkPost API pomocí této funkce mějte na paměti, že rozhraní SparkPost API má striktní limit četnosti volání rozhraní API. Pokud vidíte, že server SparkPost vrací stavový kód 429, dosáhli jste tohoto limitu četnosti a před dalším voláním bude nutné chvíli počkat.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s jedním sloupcem naplněnou daty z jednoho z koncových bodů „Lists“ rozhraní SparkPost API v1 (podrobnosti naleznete v dokumentaci SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Načtení vestavěných tabulek vystavených přes konektor SparkPost s daty agregovanými za uživatelem zadaný počet dnů. Při aktualizaci těchto tabulek nebo volání na rozhraní SparkPost API pomocí tohoto konektoru mějte na paměti, že rozhraní SparkPost API má striktní limit četnosti volání rozhraní API. Pokud vidíte, že server SparkPost vrací stavový kód 429, dosáhli jste tohoto limitu četnosti a před dalším voláním bude nutné chvíli počkat. Při výběru hodnot pro parametr Počet dnů mějte na paměti, že rozhraní API ukládá jenom 6 měsíců dat."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Vrátí tabulku databází na serveru SQL.",
        "Documentation.LongDescription": "Vrací tabulku databází na zadaném SQL serveru <code>server</code>. Pomocí nepovinného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Č&#237;slo, kter&#233; určuje hodnotu klauzule dotazu maxdop v generovan&#233;m dotazu SQL.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje hodnotu vlastnosti MultiSubnetFailover v připojovac&#237;m řetězci (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logick&#225; hodnota (true/false), kter&#225; se při hodnotě true pokus&#237; posunout převody typů, kter&#233; by mohly selhat a způsobit selh&#225;n&#237; cel&#233;ho dotazu. Nedoporučuje se pro obecn&#233; použit&#237;.</li>\r\n<li><code>ContextInfo</code> : Bin&#225;rn&#237; hodnota, kter&#225; se použ&#237;v&#225; k nastaven&#237; CONTEXT_INFO před spuštěn&#237;m jednotliv&#253;ch př&#237;kazů</li>\r\n<li><code>OmitSRID</code> : Logick&#225; hodnota (true/false), kter&#225; při hodnotě true při vytv&#225;řen&#237; Well-Known Text z geometrick&#253;ch a geografick&#253;ch typů vynech&#225; SRID.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logick&#225; hodnota (true/false), kter&#225; v př&#237;padě hodnoty true povoluje posouv&#225;n&#237; dotazů mezi datab&#225;zemi na stejn&#233;m serveru. V&#253;choz&#237; hodnota je false.</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].\r\n    <br>\r\n    Nepodporuje nastavení dotazu SQL, aby se spustil na serveru. Ke spuštění dotazu SQL se místo toho používá <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Zavolá rozhraní Stripe API, existuje možnost omezit počet provedených volání API.",
        "Documentation.LongDescription": "Zavolá rozhraní Stripe API na adrese https://api.stripe.com/v1/<code>metoda</code> s volitelným záznamem <code>dotaz</code>, předaným jako dodatečný parametr, a volitelným omezením počtu žádostí API <code>limit_stránek</code>. Nejnovější data jsou vrácena jako první. Není-li <code>limit_stránek</code> zadán, vrátí se všechna data. Použije se Stripe verze 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí všechna data o poplatcích",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabulka všech poplatků spojených s aktuálním účtem Stripe"
          },
          {
            "Description": "Vrátí jednu stránku dat poplatků",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabulka s nejnovějšími daty poplatků pro aktuální účet Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Uložením do vyrovnávací paměti tabulku během vyhodnocení izoluje od externích změn.",
        "Documentation.LongDescription": "Ukládá tabulku do vyrovnávací paměti a během vyhodnocování ji izoluje od externích změn.\r\n    Ukládání do vyrovnávací paměti je mírné. Vynutí vyhodnocení všech skalárních hodnot buněk, ale ponechá neskalární hodnoty (záznamy, seznamy, tabulky a podobně) tak, jak jsou. \r\n    <br>\r\n    <br>\r\n    Upozorňujeme, že použití této funkce může nebo nemusí mít za následek rychlejší spouštění dotazů. V některých případech můžou vaše dotazy běžet pomaleji kvůli přidaným \r\n    nárokům na čtení všech dat a jejich ukládání do paměti a také kvůli tomu, že ukládání do vyrovnávací paměti znemožňuje posouvání. Pokud se data nemusejí\r\n    ukládat do vyrovnávací paměti, ale chcete pouze zabránit posouvání, použijte místo toho <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Načtěte všechny řádky tabulky SQL do paměti, aby se už žádné podřízené operace nemohly dotazovat na SQL server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Vrátí tabulku, která je výsledkem sloučení seznamu tabulek.",
        "Documentation.LongDescription": "Vrátí tabulku, která je výsledkem sloučení seznamu tabulek, <code>tables</code>. Výsledná tabulka bude mít strukturu typu řádku definovanou pomocí <code>columns</code> nebo sjednocením typů vstupu, pokud <code>columns</code> není zadáno.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Sloučí tři tabulky dohromady.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Sloučí tři tabulky s odlišnými strukturami.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Sloučí dvě tabulky a provede projekci na daný typ.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Sníží úroveň záhlaví sloupců na první řádek hodnot.",
        "Documentation.LongDescription": "Sníží úroveň záhlaví sloupců (např. názvy sloupců) na první řádek hodnot. Výchozí názvy sloupců jsou Sloupec1, Sloupec2 atd.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje snížit úroveň prvního řádku hodnot v tabulce.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Odebere z tabulky duplicitní řádky.",
        "Documentation.LongDescription": "Odebere z tabulky duplicitní řádky.\r\n    Volitelný parametr <code>equationCriteria</code> určuje, které sloupce tabulky jsou testovány na duplikaci. Pokud <code>equationCriteria</code> neurčíte,  testují se všechny sloupce.<br>\r\n    <br>\r\n    Protože Power Query někdy přesměrovává určité operace do back-endových zdrojů dat (označované jako „skládání“) a také někdy optimalizuje dotazy \r\n     přeskakováním operací, které nejsou nezbytně nutné, obecně neexistuje žádná záruka, který konkrétní duplikát se zachová.\r\n    Nemůžete například předpokládat, že první řádek s jedinečnou sadou hodnot sloupců zůstane a řádky v tabulce budou dále dole odebrány.\r\n    Pokud chcete, aby se duplicitní odebrání chovalo předvídatelně, nejprve tabulku uložte do vyrovnávací paměti pomocí <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odebere z tabulky všechny duplicitní řádky.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Odebere duplicitní řádky ze sloupce [b] v tabulce <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Vytvoří tabulku ze seznamu sloupců a zadaných hodnot.",
        "Documentation.LongDescription": "Vytvoří ze seznamu <code>lists</code> tabulku typu <code>columns</code>, která obsahuje vnořené seznamy s názvy a hodnotami sloupců.\r\n    Pokud mají některé sloupce více hodnot než jiné, chybějící hodnoty budou zaplněny výchozí hodnotou null, pokud sloupce umožňují použití hodnoty null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku ze seznamu názvů zákazníků v seznamu. Každá hodnota v seznamu zákazníků se stane hodnotou řádku a každý seznam hodnotou sloupce.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvoří tabulku z daného seznamu sloupců a seznamu názvů sloupců.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvoří tabulku s různým počtem sloupců na řádek. Chybějící hodnota řádku je null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Převede seznam na tabulku použitím zadané funkce rozdělení na jednotlivé položky seznamu.",
        "Documentation.LongDescription": "Převede seznam <code>list</code> na tabulku použitím volitelné funkce rozdělení <code>splitter</code> na jednotlivé položky seznamu. Ve výchozím nastavení se předpokládá, že seznam je tvořen textovými hodnotami oddělenými čárkami. Parametr <code>columns</code> může volitelně představovat počet sloupců, seznam sloupců nebo vlastnost TableType. Volitelně mohou být zadány také parametry <code>default</code> a <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvoření tabulky ze seznamu pomocí výchozího rozdělovače",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Vytvoření tabulky ze seznamu pomocí vlastního rozdělovače",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Vytvoření tabulky ze seznamu pomocí rozdělovače Record.FieldValues",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Převede seznam záznamů na tabulku.",
        "Documentation.LongDescription": "Převede seznam záznamů <code>records</code> na tabulku.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří tabulku ze záznamů a názvy polí záznamů použije jako názvy sloupců.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvoří tabulku ze záznamů se zadanými sloupci a vybere číselné sloupce.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Vytvoří tabulku ze seznamu hodnot řádků a volitelných sloupců.",
        "Documentation.LongDescription": "Vytvoří tabulku ze seznamu <code>rows</code>, kde každý element seznamu představuje vnitřní seznam obsahující hodnoty sloupců pro jeden řádek. Jako argument <code>columns</code> je možné zadat volitelný seznam názvů sloupců, typ tabulky nebo počet sloupců.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku se sloupcem [CustomerID] s hodnotami {1, 2}, sloupcem [Name] s hodnotami {\"Bob\", \"Jim\"} a sloupcem [Phone] s hodnotami {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vrátí tabulku se sloupcem [CustomerID] s hodnotami {1, 2}, sloupcem [Name] s hodnotami {\"Bob\", \"Jim\"} a sloupcem [Phone] s hodnotami {\"123-4567\", \"987-6543\"}, kde [CustomerID] je číselného typu a [Name] a [Phone] textového typu.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Vytvoří ze zadaných hodnot tabulku se sloupcem.",
        "Documentation.LongDescription": "Vytvoří tabulku se sloupcem obsahujícím zadanou hodnotu nebo seznam hodnot (<code>value</code>). Nepovinným parametrem záznamu <code>options</code> se dají určit následující možnosti:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: název sloupce použitý při sestavování tabulky ze seznamu nebo skalární hodnoty</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří tabulku z hodnoty 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Vytvoří tabulku ze seznamu.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Vytvořte tabulku z hodnoty 1 a vlastním názvem sloupce.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Vrátí informace o rozdělení tabulky.",
        "Documentation.LongDescription": "Vrátí informace o rozdělení tabulky.  Je vrácena tabulka, ve které je každý sloupec sloupcem oddílu původní tabulky a každý řádek odpovídá oddílu původní tabulky.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Vrátí profil sloupců tabulky.",
        "Documentation.LongDescription": "<p>Vrátí profil pro sloupce v: <code>table</code>.</p>\r\n<p>Pro každý sloupec se vrátí následující informace (v odpovídajících případech):\r\n<ul>\r\n<li>minimum</li>\r\n<li>maximum</li>\r\n<li>průměr</li>\r\n<li>směrodatná odchylka</li>\r\n<li>počet</li>\r\n<li>počet hodnot null</li>\r\n<li>počet jedinečných hodnot</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Zvýší úroveň prvního řádku hodnot na nová záhlaví sloupců (tj. názvy sloupců).",
        "Documentation.LongDescription": "Zvýší úroveň prvního řádku hodnot na nová záhlaví sloupců (tj. názvy sloupců). Standardně se na záhlaví převedou jenom textové nebo číselné hodnoty. Platné možnosti:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: Při nastavení na hodnotu <code>true</code> se převedou všechny skalární hodnoty v prvním řádku na záhlaví podle nastavení <code>Culture</code>, pokud je zadané (nebo podle národního prostředí aktuálního dokumentu).\r\n    U hodnot, které se nedají převést na text, se použije výchozí název sloupce.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: Název jazykové verze, který určuje jazykovou verzi dat.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje zvýšit úroveň prvního řádku hodnot v tabulce.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Umožňuje zvýšit úroveň všech skalárních hodnot v prvním řádku tabulky na záhlaví.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Vrátí tabulku, ve které budou přeskočeny první zadané řádky počtu.",
        "Documentation.LongDescription": "Vrátí tabulku, která neobsahuje zadaný první počet řádků (<code>countOrCondition</code>) tabulky <code>table</code>.\r\n    Počet odebraných řádků závisí na volitelném parametru <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Pokud je parametr <code>countOrCondition</code> vynechán, je odebrán pouze první řádek. </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> číslo, bude odebrán tento počet řádků (od začátku tabulky). </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> podmínka, řádky splňující podmínku budou odebrány až po řádek, který podmínku nesplňuje.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odebere první řádek tabulky.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odebere první dva řádky tabulky.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odebere první řádky tabulky, pro které platí [CustomerID] <= 2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Vrátí tabulku, ze které je odebráno posledních N řádků.",
        "Documentation.LongDescription": "Vrátí tabulku, která neobsahuje posledních <code>countOrCondition</code> řádků tabulky <code>table</code>.\r\n        Počet odebraných řádků závisí na volitelném parametru <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Pokud je parametr <code>countOrCondition</code> vynechán, je odebrán pouze poslední řádek. </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> číslo, bude odebrán tento počet řádků (od konce tabulky). </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> podmínka, řádky splňující podmínku budou odebrány až po řádek, který podmínku nesplňuje.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odebere poslední řádek tabulky.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Odebere poslední řádky tabulky, pro které platí [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Vrátí tabulku s řádky odebranými ze vstupní tabulky, které obsahují alespoň v jedné buňce chybu. Pokud je zadán seznam sloupců, jsou zjišťovány chyby pouze v buňkách v zadaných sloupcích.",
        "Documentation.LongDescription": "Vrátí tabulku s řádky odebranými ze vstupní tabulky, které obsahují alespoň v jedné buňce chybu. Pokud je zadán seznam sloupců, jsou zjišťovány chyby pouze v buňkách v zadaných sloupcích.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje odebrat chybovou hodnotu z prvního řádku.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Vrátí tabulku s řádky v opačném pořadí.",
        "Documentation.LongDescription": "Vrátí tabulku s řádky ze vstupu <code>table</code> v opačném pořadí.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Obrátí pořadí řádků v tabulce.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Vrátí tabulku obsahující popis sloupců (tj. schéma) zadané tabulky.",
        "Documentation.LongDescription": "<p>Vrátí tabulku popisující sloupce <code>table</code>.</p>\r\n<p>Každý řádek v tabulce popisuje vlastnosti sloupce <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Název sloupce</b></td>\r\n    <td><b>Popis</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Název sloupce</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Pozice sloupce v: <code>table</code> vycházející z nuly</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n   <td>Název typu sloupce</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Druh typu sloupce</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Informace o tom, jestli sloupec může obsahovat hodnoty <code>null</code></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Číselná soustava (například dvojková nebo desítková) polí <code>NumericPrecision</code> a <code>NumericScale</code></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Přesnost číselného sloupce v číselné soustavě určené parametrem <code>NumericPrecisionBase</code>. Jde o maximální počet číslic, které mohou být reprezentovány hodnotou tohoto typu (včetně desetinných míst).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Rozsah číselného sloupce v číselné soustavě určené parametrem <code>NumericPrecisionBase</code>. Jde o počet číslic v desetinné části hodnoty tohoto typu. Hodnota <code>0</code> znamená pevný rozsah bez desetinných míst. Hodnota <code>null</code> znamená, že rozsah není znám (buď proto, že je plovoucí, nebo proto, že není definován).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Maximální počet desetinných míst podporovaných v části sekund hodnoty data nebo času</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Maximální počet znaků povolený ve sloupci <code>text</code> nebo maximální počet bajtů povolený ve sloupci <code>binary</code></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Označuje, jestli může být délka tohoto sloupce proměnlivá (až do délky určené parametrem <code>MaxLength</code>), nebo jestli je pevná.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Název typu sloupce v nativním systému typů zdroje (například <code>nvarchar</code> pro SQL Server)</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Výchozí výraz pro hodnotu tohoto sloupce v nativním jazyce výrazů zdroje (například <code>42</code> nebo <code>newid()</code> pro SQL Server)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Popis sloupce</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Vrátí tabulku pouze s řádky vstupní tabulky, které obsahují alespoň v jedné buňce chybu. Pokud je zadán seznam sloupců, jsou zjišťovány chyby pouze v buňkách v zadaných sloupcích.",
        "Documentation.LongDescription": "Vrátí tabulku pouze s řádky vstupní tabulky, které obsahují alespoň v jedné buňce chybu. Pokud je zadán seznam sloupců, jsou zjišťovány chyby pouze v buňkách v zadaných sloupcích.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vybere jména zákazníků, která v řádcích obsahují chyby.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Vrátí tabulku, ve které budou přeskočeny první zadané řádky počtu.",
        "Documentation.LongDescription": "Vrátí tabulku, která neobsahuje zadaný první počet řádků (<code>countOrCondition</code>) tabulky <code>table</code>.\r\n    Počet přeskočených řádků závisí na volitelném parametru <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Pokud je parametr <code>countOrCondition</code> vynechán, je přeskočen pouze první řádek. </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> číslo, bude přeskočen tento počet řádků (od začátku tabulky). </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> podmínka, řádky splňující podmínku budou přeskočeny až po řádek, který podmínku nesplňuje.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Přeskočí první řádek tabulky.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Přeskočí první dva řádky tabulky.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Přeskočí první řádky tabulky, pro které platí [Price] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Brání spuštění podřízených operací na původním zdroji dat.",
        "Documentation.LongDescription": "Brání spuštění podřízených operací na původním zdroji dat v <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Načte data z tabulky SQL způsobem, který brání spuštění podřízených operací jako dotazu na serveru SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Změní sloupce na řádky a řádky na sloupce.",
        "Documentation.LongDescription": "Změní sloupce na řádky a řádky na sloupce.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Změní řádky tabulky ve dvojici název-hodnota na sloupce.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Získá relace mezi sadou tabulek.",
        "Documentation.LongDescription": "Získá relace mezi sadou tabulek. U sady <code>tables</code> se předpokládá struktura podobná struktuře navigační tabulky. Sloupec definovaný pomocí <code>dataColumn</code> obsahuje skutečné tabulky dat.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL z databáze Teradata.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL z databáze Teradata na serveru <code>server</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Zadejte počet měsíců v minulosti, za které chcete získat data Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tabulky",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Vrátí tabulku s příslušnými daty Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Vrací tabulku obsahující popis sloupců (tj. schéma) zadaného typu tabulky.",
        "Documentation.LongDescription": "<p>Vrací tabulku popisující sloupce <code>tableType</code>.</p>\r\n<p>V dokumentaci pro <code>Table.Schema</code> vyhledejte popis výsledné tabulky.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Kanál služby Azure DevOps Services",
        "Documentation.DisplayName": "Kanál služby Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vrátí tabulku informačních kanálů OData nabízených službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Připojení k datům Viva Přehledy",
        "Documentation.LongDescription": "Umožňuje importovat týdenní metriky a data atributů z Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s viditelnými atributy a týdenními metrikami pro jednotlivé měřené zaměstnance v oddílu.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Vrátí obsah dokumentu HTML rozložený do struktur, kterými je dokument tvořen, a reprezentaci celého dokumentu a jeho textu po odebrání značek.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu HTML rozložený do struktur, kterými je dokument tvořen, a reprezentaci celého dokumentu a jeho textu po odebrání značek.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku s klíčovými metrikami Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Provede volání koncového bodu Webtrends KeyMetrics a vrátí všechna data jako tabulku.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku klíčových metrik pro tenanta 98765 za posledních 30 dní.",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabulka klíčových metrik"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Zadejte ID profilu přidružené vašemu účtu Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Vrátí tabulku relevantních dat Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Připojení k datům Viva Přehledy",
        "Documentation.LongDescription": "Umožňuje importovat týdenní metriky a data atributů z Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s viditelnými atributy a týdenními metrikami pro jednotlivé měřené zaměstnance v oddílu.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Vrátí obsah dokumentu XML jako hierarchickou tabulku.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu XML jako hierarchickou tabulku.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Vrátí obsah dokumentu XML jako vnořenou kolekci plochých tabulek.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu XML jako vnořenou kolekci plochých tabulek.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Načtěte obsah místního souboru XML.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zadejte adresu URL vašeho účtu Zendesku.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Vrátí tabulku s příslušnými daty Zendesku."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Vrátí kolekci schémat pro zdroj dat ADO.NET.",
        "Documentation.LongDescription": "Vrátí kolekci schémat pro zdroj dat ADO.NET s názvem zprostředkovatele <code>providerName</code> a připojovacím řetězcem <code>connectionString</code>. <code>connectionString</code> může být text nebo záznam dvojic vlastností a jejich hodnot. Hodnoty vlastností mohou být textové nebo číselné. K určení dalších vlastností je možné zadat nepovinný parametr záznamu <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Umožňuje importovat data z databáze Amazon Redshift.",
        "Documentation.LongDescription": "Vrátí tabulku se seznamem tabulek v Amazon Redshift clusterovém <code>serveru</code> v <code>databázi</code>. Zadáním volitelného parametru záznamu <code>možností</code> můžete řídit následující možnosti:\r\n<ul>\r\n<li><code>Název zprostředkovatele</code>: Textová hodnota, která se má použít jako název zprostředkovatele pro připojení. Používá se při použití Microsoft Authentication.</li>\r\n<li><code>Velikost dávky</code> : Počet řádků načtených jedním voláním do serveru.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Vrátí tabulku multidimenzionálních krychlí nebo tabulkových modelů z databáze služby Analysis Services.",
        "Documentation.LongDescription": "Vrátí tabulku multidimenzionálních krychlí nebo tabulkových modelů z databáze služby Analysis Services <code>database</code> na serveru <code>server</code>. Pomocí nepovinného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Nativn&#237; dotaz MDX použit&#253; k načten&#237; dat.</li>\r\n<li><code>TypedMeasureColumns</code> : Logick&#225; hodnota, kter&#225; ud&#225;v&#225;, jestli se pro typy přidan&#253;ch sloupců m&#237;ry budou použ&#237;vat typy určen&#233; v multidimenzion&#225;ln&#237;m nebo tabulkov&#233;m modelu. Při nastaven&#237; false se pro všechny sloupce m&#237;ry použije typ „number“. V&#253;choz&#237; hodnotou pro tuto možnost je false.</li>\r\n<li><code>Culture</code> : N&#225;zev jazykov&#233; verze, kter&#253; určuje jazykovou verzi pro data. Odpov&#237;d&#225; vlastnosti „Locale Identifier“ v připojovac&#237;m řetězci.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>SubQueries</code> : Č&#237;slo (0, 1 nebo 2), kter&#233; nastavuje hodnotu vlastnosti SubQueries v připojovac&#237;m řetězci. Ř&#237;d&#237; chov&#225;n&#237; poč&#237;tan&#253;ch členů při podv&#253;běrech nebo subkrychl&#237;ch. (V&#253;choz&#237; hodnota je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vrátí tabulku se seznamem tabulek pro zadaný cluster Spark.",
        "Documentation.LongDescription": "Vrátí tabulku se seznamem tabulek pro cluster Spark <code>host</code> pomocí <code>protocol</code>. Platné protokoly jsou tyto:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku se seznamem tabulek pro zadaný cluster Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Zadejte názvy organizace a projektu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (jen Boards)",
        "Documentation.LongDescription": "Vrátí tabulku obsahující seznam zobrazení Analýzy, která nabízí služba Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Import dat z HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nVrátí seznam tabulek z HDInsight Interactive Query, jak je zadáno pomocí <code>database</code> na <code>server</code> HDInsight Interactive Query. U serveru může být volitelně zadán i port oddělený dvojtečkou. Může být zadán volitelný parametr záznamu <code>options</code>, který bude řídit následující možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Jak dlouho se má čekat, než se ukončí pokus o připojení k serveru. Výchozí hodnota je závislá na ovladači.</li>\r\n        <li><code>CommandTimeout</code>: Jak dlouho může běžet dotaz na straně serveru, než bude zrušen. Výchozí hodnota je závislá na ovladači.</li>\r\n</ul>\r\nParametr záznamu <code>options</code> se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Vrátí tabulku se sloupci namapovanými na atributy entity v modelu Common Data Model, včetně datových typů.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Vrátí tabulku se sloupci namapovanými na atributy entity v modelu Common Data Model, včetně datových typů. Pokud se mapování neprovede, přidají se sloupce z definice entity a všechny nenamapované sloupce se odeberou.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Vrátí datovou krychli po použití parametru.",
        "Documentation.LongDescription": "Vrátí datovou krychli po použití <code>parameter</code> s <code>arguments</code> na <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Změní dimenzionální členitost kontextu filtru pro datovou krychli sbalením atributů mapovaných na konkrétní sloupce.",
        "Documentation.LongDescription": "Změní dimenzionální členitost kontextu filtru pro datovou krychli <code>cube</code> sbalením atributů mapovaných na zadané sloupce <code>columnNames</code>. Sloupce jsou také odebrány z tabulkového zobrazení datové krychle.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Nahradí sadu dimenzí vrácenou objektem Cube.Dimensions.",
        "Documentation.LongDescription": "Nahradí sadu dimenzí vrácenou objektem <code>Cube.Dimensions</code>.\r\n    Tuto funkci lze například použít k přidání sloupce ID do atributu dimenze, aby zdroj dat mohl provést seskupení podle ID, a ne podle zobrazené hodnoty.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Použije seznam funkcí datové krychle.",
        "Documentation.LongDescription": "Použije seznam funkcí datové krychle <code>transforms</code> na položku <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Db2.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Db2 na serveru <code>server</code> v instanci databáze <code>database</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>Implementation</code> : Určuje implementaci zprostředkovatele intern&#237; datab&#225;ze, kter&#225; se m&#225; použ&#237;t. Platn&#233; hodnoty jsou: &quot;IBM&quot; a &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Č&#237;slo pro identifik&#225;tor CCSID (Coded Character Set Identifier) k dek&#243;dov&#225;n&#237; bin&#225;rn&#237;ch dat Db2 FOR BIT na znakov&#233; řetězce. Plat&#237; pro Implementation = “Microsoft”. Nastaven&#237; hodnoty 0 zak&#225;že konverzi (v&#253;choz&#237;). Nastaven&#237; hodnoty 1 provede konverzi na z&#225;kladě k&#243;dov&#225;n&#237; datab&#225;ze. Nastaven&#237; jin&#233;ho č&#237;sla CCSID provede konverzi na z&#225;kladě k&#243;dov&#225;n&#237; aplikace.</li>\r\n<li><code>PackageCollection</code> : Určuje řetězcovou hodnotu pro kolekci bal&#237;čků (v&#253;choz&#237; hodnota je NULLID), aby se umožnilo použit&#237; sd&#237;len&#253;ch bal&#237;čků požadovan&#253;ch pro zpracov&#225;n&#237; př&#237;kazů SQL. Použije se pro Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Určuje, jestli se připojen&#237; uskutečňuje prostřednictv&#237;m br&#225;ny Db2 Connect. Plat&#237; pro Implementation = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Načte datovou sadu z Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Vrátí tabulku obsahující vlastnosti a obsah objektů blob nalezené v zadaném kontejneru v trezoru úložiště služby Azure.",
        "Documentation.LongDescription": "Vrátí tabulku obsahující řádek pro každý soubor blob nalezený na adrese URL kontejneru <code>account</code> z trezoru úložiště služby Azure. Každý řádek obsahuje vlastnosti souboru a odkaz na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Vrátí tabulku obsahující výsledky spuštění zadaných selektorů CSS pro zadaný kód HTML.",
        "Documentation.LongDescription": "Vrací tabulku, která obsahuje výsledky spuštění zadaných selektorů CSS proti poskytnuté <code>html</code>. Je možné zadat volitelný parametr <code>options</code>, který zadá dodatečné vlastnosti. Tento záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": [
          {
            "Description": "Vrací tabulku z hodnoty ukázkového textu html.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Extrahuje všechny odkazy href ze vzorového textu ve formátu HTML.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Informix.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Informix na serveru <code>server</code> v instanci databáze <code>database</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Vrátí tabulku s podrobnostmi potenciálních zákazníků.",
        "Documentation.LongDescription": "Zavolá koncový bod služby Marketo REST API na adrese <code>url</code>/rest/v1/leads.json. Vrátí všechny potenciální zákazníky ze seznamu <code>ID_zákazníků</code>.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí podrobnosti o třech potenciálních zákaznících.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabulka s podrobnostmi o zadaných potenciálních zákaznících"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Zadejte adresu URL koncového bodu Marketo REST API přidruženého k vašemu účtu.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Vrátí tabulku relevantních dat Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Vrátí tabulku tabulek, zobrazení a uložených skalárních funkcí SQL dostupných v databázi MySQL.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek, zobrazení a uložených skalárních funkcí SQL dostupných v databázi MySQL na serveru <code>server</code> v instanci databáze <code>database</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním nepovinného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>Encoding</code> : Hodnota TextEncoding, kter&#225; určuje znakovou sadu použitou ke k&#243;dov&#225;n&#237; všech dotazů odeslan&#253;ch na server (v&#253;choz&#237; hodnota je null).</li>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Logick&#253; parametr (true/false), kter&#253; určuje, jestli maj&#237; b&#253;t sloupce tinyint na serveru vynuceny jako logick&#233; hodnoty. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>OldGuids</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli budou br&#225;ny jako identifik&#225;tory GUID sloupce char(36) (při false) nebo sloupce binary(16) (při true). V&#253;choz&#237; hodnota je false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli maj&#237; b&#253;t vr&#225;ceny všechny tabulky ze všech datab&#225;z&#237; (false), nebo tabulky a zobrazen&#237; ze zadan&#233; datab&#225;ze (true). V&#253;choz&#237; hodnota je false.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importuje data z databáze IBM Netezza.",
        "Documentation.LongDescription": "\r\nVrátí tabulku se seznamem zobrazení, tabulek a uložených funkcí Netezza z databáze Netezza Server <code>database</code> na serveru <code>server</code>. U serveru se může volitelně zadat i port oddělený dvojtečkou. Může se zadat volitelný parametr záznamu <code>options</code>, který bude řídit následující možnosti:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Logická hodnota (true/false), která nastavuje, jestli se mají generovat navigační vlastnosti pro vrácené hodnoty (výchozí nastavení true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Logická hodnota (true/false), která nastavuje, jestli se tabulky mají zobrazovat seskupené podle svých názvů schémat (výchozí nastavení false)</li>\r\n        <li><code>ConnectionTimeout</code>: Jak dlouho se má čekat, než se ukončí pokus o připojení k serveru. Výchozí hodnota je závislá na ovladači.</li>\r\n        <li><code>CommandTimeout</code>: Jak dlouho může běžet dotaz na straně serveru, než bude zrušen. Výchozí hodnota je závislá na ovladači.</li>\r\n<li><code>NormalizeDatabaseName</code>: Logická hodnota (true/false), která nastavuje, jestli se má název databáze normalizovat na všechna velká písmena nebo se má interpretovat doslovně (výchozí nastavení je true).</li>\r\n</ul>\r\nParametr záznamu se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].",
        "Documentation.Examples": [
          {
            "Description": "Výpis tabulek v projektu IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Vrací výsledek spuštění nativního dotazu z datového zdroje ODBC.",
        "Documentation.LongDescription": "Vrátí výsledek spuštění <code>query</code> s připojovacím řetězcem <code>connectionString</code> s použitím ODBC. <code>connectionString</code> může být text nebo záznam párů hodnot vlastnosti. Hodnoty vlastnosti můžou být text nebo číslo. K určení dalších vlastností je možné zadat nepovinný parametr záznamu <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota je 15 s.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vrátí výsledek spuštění jednoduchého dotazu na zadaný připojovací řetězec.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Vrací výsledek spuštění nativního dotazu na datovém zdroji OLE DB.",
        "Documentation.LongDescription": "Vrátí výsledek spuštění <code>query</code> s připojovacím řetězcem <code>connectionString</code> s použitím OLE DB. <code>connectionString</code> může být text nebo záznam párů hodnot vlastnosti. Hodnoty vlastnosti můžou být text nebo číslo. K určení dalších vlastností je možné zadat nepovinný parametr záznamu <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi PostgreSQL.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi PostgreSQL na serveru <code>server</code> v instanci databáze <code>database</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Naimportuje data ze skladu Snowflake Computing.",
        "Documentation.LongDescription": "Vrátí zápis tabulek ve <code>skladu</code> Snowflake Computing umístěném na <code>serveru</code>. Může se zadat nepovinný parametr záznamu, <code>možnosti</code>, který řídí následující možnosti:\r\n<ul>\r\n<li><code>Role</code>: Textová hodnota, která se použije jako název role připojení.</li>\r\n<li><code>CreateNavigationProperties</code>: Logická hodnota (pravda/nepravda), která nastavuje, jestli generovat navigační vlastnosti pro vrácené hodnoty (výchozí hodnota je pravda)</li>\r\n<li><code>ConnectionTimeout</code>: Počet sekund čekání na síťové odezvy ze Snowflake.</li>\r\n<li><code>CommandTimeout</code>: Počet sekund čekání na provedení dotazu.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Vypíše tabulky ve skladu Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vrátí tabulku se seznamem tabulek pro zadaný cluster Spark.",
        "Documentation.LongDescription": "Vrátí tabulku se seznamem tabulek pro cluster Spark <code>host</code> pomocí <code>protocol</code>. Platné protokoly jsou tyto:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam tabulek v instanci Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Vrátí tabulku tabulek, zobrazení a uložených funkcí SQL z databáze systému SQL Server.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek, zobrazení a uložených funkcí SQL z databáze systému SQL Server <code>database</code> na serveru <code>server</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou nebo čárkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Č&#237;slo, kter&#233; určuje hodnotu klauzule dotazu maxdop v generovan&#233;m dotazu SQL.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje hodnotu vlastnosti MultiSubnetFailover v připojovac&#237;m řetězci (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logick&#225; hodnota (true/false), kter&#225; se při hodnotě true pokus&#237; posunout převody typů, kter&#233; by mohly selhat a způsobit selh&#225;n&#237; cel&#233;ho dotazu. Nedoporučuje se pro obecn&#233; použit&#237;.</li>\r\n<li><code>ContextInfo</code> : Bin&#225;rn&#237; hodnota, kter&#225; se použ&#237;v&#225; k nastaven&#237; CONTEXT_INFO před spuštěn&#237;m jednotliv&#253;ch př&#237;kazů</li>\r\n<li><code>OmitSRID</code> : Logick&#225; hodnota (true/false), kter&#225; při hodnotě true při vytv&#225;řen&#237; Well-Known Text z geometrick&#253;ch a geografick&#253;ch typů vynech&#225; SRID.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logick&#225; hodnota (true/false), kter&#225; v př&#237;padě hodnoty true povoluje posouv&#225;n&#237; dotazů mezi datab&#225;zemi na stejn&#233;m serveru. V&#253;choz&#237; hodnota je false.</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Sybase.",
        "Documentation.LongDescription": "Vrátí tabulku tabulek a zobrazení SQL dostupných v databázi Sybase na serveru <code>server</code> v instanci databáze <code>database</code>. Společně se serverem se volitelně může zadat port oddělený dvojtečkou. Zadáním volitelného parametru záznamu <code>options</code> můžete řídit následující možnosti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkce použ&#237;van&#225; ke generov&#225;n&#237; n&#225;zvů navigačn&#237;ch vlastnost&#237;.</li>\r\n<li><code>Query</code> : Nativn&#237; dotaz SQL použit&#253; k načten&#237; dat. Pokud dotaz vyprodukuje v&#237;ce sad v&#253;sledků, bude vr&#225;cena jenom prvn&#237;.</li>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>ConnectionTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se pokus o připojen&#237; k serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na ovladači.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n</ul>\r\n\r\n    Parametr záznamu se zadává například ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...] nebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Přidá sloupec s explicitními hodnotami pozic.",
        "Documentation.LongDescription": "Přidá sloupec <code>newColumnName</code> s explicitními hodnotami pozic do tabulky <code>table</code>.\r\n    Lze zadat volitelnou hodnotu <code>initialValue</code>, což je výchozí hodnota indexu. Volitelná hodnota <code>increment</code> určuje, o kolik se zvýší jednotlivé hodnoty indexu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Přidá sloupec indexu s názvem Index do tabulky.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Přidá sloupec indexu s názvem Index začínající hodnotou 10 s hodnotami narůstajícími o vždy o 5 do tabulky.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Na základě sloupce seznamů v tabulce vytvoří kopii řádku pro každou hodnotu ve svém seznamu.",
        "Documentation.LongDescription": "Na základě sloupce <code>table</code>, kde <code>column</code> je seznam hodnot, rozdělí seznam na řádek pro jednotlivé hodnoty. V každém novém vytvořeném řádku jsou duplikovány hodnoty ostatních sloupců.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdělí sloupec seznamu [Name] v tabulce.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Rozšíří hodnotu předcházejí buňky do buňky s hodnotou null níže ve sloupci.",
        "Documentation.LongDescription": "Vrátí tabulku ze zadané položky <code>table</code>, kde je hodnota předcházejí buňky rozšířena do buněk s hodnotou null níže v zadané položce <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s hodnotami null ve sloupci [Place] vyplněnou hodnotou uvedenou nad nimi v tabulce.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Rozšíří hodnotu buňky do buňky s hodnotou null výše ve sloupci.",
        "Documentation.LongDescription": "Vrátí tabulku ze zadané položky <code>table</code>, kde je hodnota následující buňky rozšířena do buněk s hodnotou null výše v zadané položce <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s hodnotami null ve sloupci [Column2] vyplněnou hodnotou uvedenou pod nimi v tabulce.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Vrátí všechny řádky, které obsahují daný text v tabulce.",
        "Documentation.LongDescription": "Vrátí řádky v tabulce <code>table</code>, které obsahují daný text <code>text</code>. Pokud text není nalezen, vrátí se prázdná tabulka.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nalezne řádky v tabulce, které obsahují text Bob.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Vrací první zadané řádky počtu.",
        "Documentation.LongDescription": "Vrací první řádek (řádky) tabulky <code>table</code> v závislosti na hodnotě <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> číslo, bude vrácen tento počet řádků (od začátku tabulky). </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> podmínka, řádky splňující podmínku budou vráceny až po řádek, který podmínku nesplňuje.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Najde první dva řádky tabulky.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Najde první řádky tabulky, pro které platí [a] > 0.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Vrátí tabulku, která je výsledkem kombinace sady rozdělených tabulek.",
        "Documentation.LongDescription": "Vrátí tabulku, která je výsledkem spojení sady tabulek rozdělených na oddíly, <code>partitions</code>. <code>partitionColumn</code> je název sloupce, který se má přidat. Pro typ sloupce se používá výchozí hodnota <code>any</code>, ale <code>partitionColumnType</code> může zadat jinou.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít typ položky ze seznamu <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Vrátí poslední zadaný počet řádků.",
        "Documentation.LongDescription": "Vrací poslední řádek (řádky) tabulky <code>table</code> v závislosti na hodnotě <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> číslo, bude vrácen tento počet řádků od pozice (konec - <code>countOrCondition</code>). </li>\r\n    <li> Pokud je parametrem <code>countOrCondition</code> podmínka, řádky splňující podmínku budou vráceny ve vzestupné pozici až po řádek, který podmínku nesplňuje.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Najde poslední dva řádky tabulky.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Najde poslední řádky tabulky, pro které platí [a] > 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Vrátí tabulku, ve které mají všechny sloupce předponu tvořenou daným textem.",
        "Documentation.LongDescription": "Vrátí tabulku, ve které všechny názvy sloupců zadané tabulky <code>table</code> začínají daným textem, <code>prefix</code>, a tečkou ve tvaru <code>prefix</code>.<code>ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje vytvořit předpony sloupců MyTable v tabulce.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Vrátí řádky začínající na zadaném posunu.",
        "Documentation.LongDescription": "Vrátí řádky z tabulky <code>table</code> začínající v zadaném umístění <code>offset</code>. Volitelný parametr <code>count</code> určuje, kolik řádků se má vrátit. Ve výchozím nastavení jsou vráceny všechny řádky následující po posunu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí všechny řádky začínající na posunu 1 v tabulce.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vrátí jeden řádek začínající na posunu 1 v tabulce.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Odebere zadané sloupce.",
        "Documentation.LongDescription": "Odebere zadanou položku <code>columns</code> z poskytnuté tabulky <code>table</code>.\r\n    Pokud zadaný sloupec neexistuje, je vyvolána chyba, jestliže volitelný parametr <code>missingField</code> neurčí alternativní chování (např. <code>MissingField.UseNull</code> nebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odebere sloupec [Phone] z tabulky.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Zkuste z tabulky odebrat neexistující sloupec.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Odebere všechny výskyty zadaných řádků z tabulky.",
        "Documentation.LongDescription": "Odebere všechny výskyty zadaných položek <code>rows</code> z tabulky <code>table</code>.\r\n    Za účelem řízení porovnání mezi řádky tabulky může být určen volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odebere z tabulky <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> všechny řádky, ve kterých platí [a = 1].",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Odebere zadaný počet řádků.",
        "Documentation.LongDescription": "Odebere <code>count</code> z řádků ze začátku tabulky <code>table</code> začínajících na zadané pozici <code>offset</code>. Pokud není zadán parametr <code>count</code>, je použit výchozí počet 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odebere z tabulky první řádek.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odebere z tabulky řádek na pozici 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odebere z tabulky dva řádky začínající na pozici 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Použije přejmenování tvaru {old, new}.",
        "Documentation.LongDescription": "Provede zadané přejmenování sloupců v tabulce <code>table</code>. Operace nahrazení <code>renames</code> se skládá ze seznamu dvou hodnot, starého názvu sloupce a nového názvu sloupce, zadaných ve formě seznamu.\r\n    Pokud sloupec neexistuje, je vyvolána výjimka, jestliže volitelný parametr <code>missingField</code> neurčí alternativu (např. <code>MissingField.UseNull</code> nebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nahradí v tabulce název sloupce CustomerNum názvem CustomerID.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Nahradí v tabulce název sloupce CustomerNum názvem CustomerID a název sloupce PhoneNum názvem Phone.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Nahradí v tabulce název sloupce NewCol názvem NewColumn a ignoruje příkaz, pokud sloupec neexistuje.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Vrátí tabulku se sloupci v zadaném pořadí.",
        "Documentation.LongDescription": "Vrátí tabulku ze vstupu <code>table</code> se sloupci v pořadí určeném hodnotou <code>columnOrder</code>. Pořadí sloupců, které nejsou v seznamu uvedeny, nebude změněno.\r\n     Pokud sloupec neexistuje, je vržena výjimka, jestliže volitelný parametr <code>missingField</code> neurčí alternativu (např. <code>MissingField.UseNull</code> nebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamění v tabulce pořadí sloupců [Phone] a [Name] .",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamění v tabulce pořadí sloupců [Phone] a [Address] nebo použije vlastnost MissingField.Ignore. Tabulku nezmění, protože sloupec [Address] neexistuje.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Opakuje řádky tabulek zadaných na základě zadaného počtu opakování.",
        "Documentation.LongDescription": "Vrátí tabulku s řádky ze vstupu <code>table</code> s následujícím zadaným počtem opakování: <code>count</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Dvakrát opakuje řádky v tabulce.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Nahradí chybové hodnoty v uvedených sloupcích odpovídající zadanou hodnotou.",
        "Documentation.LongDescription": "Nahradí chybové hodnoty v zadaných sloupcích (<code>table</code>) novými hodnotami v seznamu <code>errorReplacement</code>. Formát seznamu je {{sloupec1, hodnota1}, ...}. Pro sloupec se může použít jenom jedna nahrazující hodnota. Pokud se sloupec uvede víc než jednou, bude výsledkem chyba.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahradí chybovou hodnotu textem „world“ v tabulce.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Nahradí chybovou hodnotu ve sloupci A textem „hello“ a ve sloupci B textem „world“ v tabulce.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Nahradí klíče zadané tabulky.",
        "Documentation.LongDescription": "Nahradí klíče zadané tabulky.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte existující klíče tabulky.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Nahradí všechny zadané řádky zadanými řádky.",
        "Documentation.LongDescription": "Nahradí všechny zadané řádky v tabulce <code>table</code> zadanými řádky. Řádky, které mají být nahrazeny, a nahrazení, jsou zadány v části <code>replacements</code> pomocí formátování {old, new}.\r\n    Za účelem řízení porovnání mezi řádky tabulky může být určen volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nahradí v tabulce řádky [a = 1, b = 2] a [a = 2, b = 3] pomocí řádků [a = -1, b = -2] a [a = -2, b = -3].",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Vrátí tabulku pouze se zadanými sloupci.",
        "Documentation.LongDescription": "Vrátí tabulku <code>table</code> pouze se zadanými sloupci <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: Zadaná tabulka</li>\r\n       <li><code>columns</code>: Seznam sloupců z tabulky <code>table</code>, které mají být vráceny Sloupce ve vrácené tabulce mají pořadí uvedené v seznamu <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Volitelně)</i> Postup v případě, že sloupec neexistuje.  Příklad: <code>MissingField.UseNull</code> nebo <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zahrne jenom sloupec [Jméno].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Zahrne jenom sloupce [IDZákazníka] a [Jméno].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Pokud zahrnutý sloupec neexistuje, je výchozím výsledkem chyba.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Pokud zahrnutý sloupec neexistuje, možnost <code>MissingField.UseNull</code> vytvoří sloupec hodnot null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Vybere řádky splňující funkci podmínky.",
        "Documentation.LongDescription": "Vrátí tabulku s řádky z tabulky <code>table</code>, která odpovídá výběru <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vybere řádky v tabulce, kde jsou hodnoty ve sloupci [IDZákazníka] větší než 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vybere řádky v tabulce, kde názvy neobsahují B.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Seřadí tabulku podle jednoho nebo více názvů sloupců a kritérií porovnání.",
        "Documentation.LongDescription": "Seřadí tabulku <code>table</code> pomocí seznamu jednoho nebo více názvů sloupců a volitelného parametru <code>comparisonCriteria</code> ve formátu { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Seřadí tabulku podle sloupce OrderID.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Seřadí tabulku podle sloupce OrderID v sestupném pořadí.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Seřadí tabulku podle sloupce CustomerID a pak podle sloupce OrderID, přičemž sloupec CustomerID bude seřazený ve vzestupném pořadí.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformuje názvy sloupců pomocí příslušné funkce.",
        "Documentation.LongDescription": "Transformuje názvy sloupců pomocí příslušné funkce <code>nameGenerator</code>. Platné možnosti:\r\n    <div>\r\n      <code>MaxLength</code>: Určuje maximální délku nových názvů sloupců. Pokud je výsledkem funkce delší název sloupce, název se ořízne.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code>: Používá se k řízení porovnání při generování nových názvů sloupců. Porovnávače se dají použít k porovnávání bez rozlišování velikosti písmen nebo porovnávání s ohledem na jazykovou verzi a národní prostředí.\r\n    </div>\r\n    <div>\r\n      V jazyku vzorců jsou k dispozici následující předdefinované porovnávače:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Používá se k provedení přesného porovnání ordinálů.</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Používá se k provedení přesného porovnání ordinálů bez rozlišování velikosti písmen.</li>\r\n      <li> <code>Comparer.FromCulture</code>: Používá se k provedení porovnání s ohledem na jazykovou verzi a národní prostředí.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odebrat znak <code>#(tab)</code> z názvů sloupců",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Převede názvy sloupců, aby se generovaly názvy bez rozlišování velikosti písmen o délce 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Použije transformace typu ve formátu { column, type } pomocí konkrétní jazykové verze.",
        "Documentation.LongDescription": "Vrátí tabulku ze vstupu <code>table</code> použitím operace transformace na sloupce zadané v parametru <code>typeTransformations</code> (ve formátu { název sloupce, název typu}) pomocí jazykové verze zadané nepovinným parametrem <code>culture</code> (např. en-US).\r\n    Pokud sloupec neexistuje, je vyvolána výjimka.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformuje v tabulce <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> číselné hodnoty sloupce [a] na textové hodnoty.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformuje hodnoty jednoho nebo více sloupců.",
        "Documentation.LongDescription": "Transformuje <code>table</code> použitím každé operace sloupce uvedené v <code>transformOperations</code> (ve formátu { název sloupce, transformace } nebo { název sloupce, transformace, nový typ sloupce }).\r\n    Pokud je zadána <code>defaultTransformation</code>, použije se pro všechny sloupce neuvedené v <code>transformOperations</code>.\r\n    Pokud sloupec uvedený v <code>transformOperations</code> neexistuje, vyvolá se výjimka, pokud volitelný parametr <code>missingField</code> neurčí alternativu (například <code>MissingField.UseNull</code> nebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Převeďte textové hodnoty ve sloupci [A] na číselné hodnoty a číselné hodnoty ve sloupci [B] na textové hodnoty.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Konvertuje číselné hodnoty chybějícího sloupce [X] na textové hodnoty a ignoruje sloupce, které neexistují.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Převede číselné hodnoty v chybějícím sloupci [X] na textové hodnoty, přičemž u neexistujících sloupců je výchozí hodnota nulová.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Zvyšte číselné hodnoty ve sloupci [B] a převeďte je na textové hodnoty a všechny ostatní sloupce převeďte na čísla.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Vytvoří nebo rozšíří tabulku s uživatelsky definovanými obslužnými rutinami pro operace s dotazy a akcemi.",
        "Documentation.LongDescription": "<p>Vrátí zobrazení <code>table</code>, kde se funkce zadané v <code>handlers</code> používají místo výchozího chování operace, když se operace použije pro toto zobrazení.</p>\r\n<p>Pokud je zadáno <code>table</code>, všechny funkce obslužných rutin jsou volitelné. Pokud <code>table</code> zadáno není, vyžadují se funkce obslužných rutin <code>GetType</code> a <code>GetRows</code>. Když pro operaci není zadaná funkce obslužné rutiny, použije se pro <code>table</code> výchozí chování příslušné operace (s výjimkou <code>GetExpression</code>).</p>\r\n<p>Funkce obslužné rutiny musí vrátit hodnotu, která je sémanticky ekvivalentní výsledku použití operace na <code>table</code> (nebo výslednému zobrazení v případě <code>GetExpression</code>).</p>\r\n<p>Když funkce obslužné rutiny vyvolá chybu, použije se pro zobrazení výchozí chování operace.</p>\r\n<p>K implementaci překládání zdroje dat se může použít <code>Table.View</code> – překlad M dotazů na dotazy specifické pro konkrétní zdroj (třeba pro vytvoření příkazů T-SQL z M dotazů).</p>\r\n<p>Kompletnější popis funkcí <code>Table.View</code> najdete v publikované dokumentaci k vlastnímu konektoru Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvořit základní zobrazení, které nevyžaduje přístup k řádkům, aby bylo možné určit typ nebo počet řádků",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Zadejte názvy organizace a projektu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (jen Boards)",
        "Documentation.LongDescription": "Vrátí tabulku obsahující seznam zobrazení Analýzy, která nabízí služba Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Import dat z Vertica",
        "Documentation.LongDescription": "Vrací tabulku schémat dostupných na serveru určeném parametrem <code>server</code> v databázi určené parametrem <code>database</code>.\r\nJe možné zadat volitelný parametr záznamu <code>options</code> k určení dalších vlastností. Záznam může obsahovat následující pole:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Doba, jak dlouho se má čekat, než bude ukončen neúspěšný pokus o navázání připojení k serveru. Výchozí hodnota závisí na ovladači.</li>\r\n    <li><code>CommandTimeout </code>: Doba, jak dlouho může běžet dotaz na straně serveru, než bude zrušen. Výchozí hodnota závisí na ovladači.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Seznam tabulek v Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku s obsahem sestavy z Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Provede volání daného koncového bodu generování sestav Webtrends a vrátí všechna data jako tabulku.",
        "Documentation.Examples": [
          {
            "Description": "Provede volání koncového bodu sestavy návštěvníků Webtrends pro data za posledních 30 dní.",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabulka dat návštěvníků"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Vrátí seznam domén služby Active Directory ze stejné doménové struktury jako zadaná doména. Pokud nebyla doména zadána, vrátí aktuální doménu počítače.",
        "Documentation.LongDescription": "Vrátí seznam domén služby Active Directory ze stejné doménové struktury jako zadaná doména. Pokud nebyla doména zadána, vrátí aktuální doménu počítače.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Vrací výsledek spuštění nativního dotazu z datového zdroje ADO.NET.",
        "Documentation.LongDescription": "Vrátí výsledek spuštění <code>query</code> s připojovacím řetězcem <code>connectionString</code> pomocí zprostředkovatele ADO.NET <code>providerName</code>. Řetězec <code>connectionString</code> může být text nebo záznam párů hodnot vlastností. Hodnoty vlastností můžou být text nebo čísla. K určení dalších vlastností je možné zadat nepovinný parametr záznamu <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho může dotaz b&#253;t dotaz na straně serveru spuštěn&#253;, než se zruš&#237;. V&#253;choz&#237; hodnota je 10 minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), kter&#225; určuje, jestli se maj&#237; generovat možnosti připojovac&#237;ho řetězce pro ověřov&#225;n&#237; syst&#233;mu Windows (kompatibiln&#237; se SQL Serverem). V&#253;choz&#237; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Vrátí sady sestav ve službě Adobe Analytics.",
        "Documentation.LongDescription": "Vrátí tabulku multidimenzionálních balíčků ze služby Adobe Analytics. Zadáním volitelného parametru záznamu, <code>options</code>, je možné ovládat následující možnosti:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; tabulky zobrazit seskupen&#233; podle sv&#253;ch n&#225;zvů sch&#233;mat (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>MaxRetryCount</code> : Počet opakov&#225;n&#237; při dotazov&#225;n&#237; na v&#253;sledek dotazu. V&#253;choz&#237; hodnota je 120.</li>\r\n<li><code>RetryInterval</code> : Doba mezi pokusy o opakov&#225;n&#237;. V&#253;choz&#237; hodnota je 1 sekunda.</li>\r\n<li><code>Implementation</code> : Určuje verzi rozhran&#237; API Adobe Analytics. Platn&#233; hodnoty jsou: 2.0. V&#253;choz&#237; nastaven&#237; použ&#237;v&#225; verzi rozhran&#237; API 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Import dat z Hive LLAP",
        "Documentation.LongDescription": "\r\nVrátí seznam tabulek z Hive LLAP určených <code>databází</code> na <code>serveru</code> Hive LLAP pomocí vybraného <code>protokolu</code>. Pro server je možné volitelně zadat číslo portu oddělené dvojtečkou. Protokol Thrift Transport Protocol je výčtový typ s hodnotami Standard a HTTP. Je možné zadat nepovinný parametr <code>options</code>, pomocí kterého se dají určovat následující možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Jak dlouho se má čekat, než se ukončí pokus o připojení k serveru. Výchozí hodnota je závislá na ovladači.</li>\r\n        <li><code>CommandTimeout</code>: Jak dlouho může běžet dotaz na straně serveru, než se zruší. Výchozí hodnota je závislá na ovladači.</li>\r\n</ul>\r\nParametr <code>options</code> se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat mezi 2017-5-1 a 2017-6-15",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkce vrátí souhrny dat mezi 2017-5-1 a 2017-6-15"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat za duben 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkce vrátí data mezi 2017-4-1 a 2017-4-30"
          },
          {
            "Description": "Pokud je dnes 2017-6-15, získat souhrny dat od dubna 2017 do nynějška.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkce vrátí data mezi 2017-4-1 a 2017-6-15"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Zadejte názvy organizace a projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Vrátí tabulku informačních kanálů OData nabízených službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Připojení k instanci Dataverse (Dynamics 365 a PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Sloučí zadanou tabulku dimenze do kontextu filtru datové krychle a změní dimenzionální členitost kontextu filtru rozbalením zadané sady atributů dimenzí.",
        "Documentation.LongDescription": "Sloučí zadanou tabulku dimenze <code>dimensionSelector</code> do kontextu filtru datové krychle <code>cube</code> a změní dimenzionální členitost kontextu filtru rozbalením zadané sady atributů dimenzí <code>attributeNames</code>. Atributy dimenze jsou přidány do tabulkového zobrazení pomocí sloupců s názvem <code>newColumnNames</code>, nebo <code>attributeNames</code> (pokud nebyl název zadán).",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Přidá do datové krychle sloupec obsahující výsledky míry použité v kontextu řádku na každém řádku.",
        "Documentation.LongDescription": "Přidá do datové krychle <code>cube</code> sloupec s názvem <code>column</code> obsahující výsledky míry <code>measureSelector</code> použité v kontextu řádku na každém řádku. Měření je ovlivněno změnami členitosti a řezů dimenze. Hodnoty měření budou upraveny po provedení určitých operací datové krychle.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Zadejte své prostředí a společnost ve službě Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Zadejte své prostředí a společnost ve službě Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Zadejte své prostředí a společnost ve službě Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Zadejte své prostředí a společnost ve službě Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vrátí tabulku s odpovídajícími daty Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Vrátí obsah aktuálního excelového sešitu.",
        "Documentation.LongDescription": "Vrátí obsah aktuálního excelového sešitu. Vrátí tabulky, pojmenované oblasti a dynamická pole. Na rozdíl od <code>Excel.Workbook</code> nevrací listy.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Vrátí tabulku s obsahem z účtu Microsoft Exchange.",
        "Documentation.LongDescription": "Vrátí tabulku obsahu z účtu Microsoft Exchange <code>mailboxAddress</code>. Pokud účet <code>mailboxAddress</code> není zadaný, použije se výchozí účet pro příslušné pověření.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Sklad",
        "Documentation.Caption": "Sklad",
        "Documentation.Description": "Importuje data ze skladů.",
        "Documentation.LongDescription": "Importuje data ze skladů."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Vrátí účty Google Analytics.",
        "Documentation.LongDescription": "Vrátí účty Google Analytics, které jsou přístupné se současnými přihlašovacími údaji.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Umožňuje importovat data z databáze Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Vrátí tabulku s výpisem dostupných projektů v Google BigQuery. Jde zadat volitelný parametr záznamu, <code>možnosti</code>, a nastavit následujících možností:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Časový interval, jak dlouho se má čekat, než se ukončí neúspěšný pokus o připojení k serveru. Výchozí nastavení je hodnota časového limitu připojení ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Časový interval, jak dlouho může běžet dotaz na straně serveru, než se zruší.</li>\r\n        <li><code>BillingProject</code>: ID fakturačního projektu. Výchozí hodnota je první dostupný projekt.</li>\r\n      <li><code>UseStorageApi</code>: Určuje, jestli se má pro velké sady výsledků použít rozhraní API úložiště BigQuery. Výchozí hodnota true (pravda) znamená použít rozhraní API úložiště. Pokud rozhraní API úložiště používat nechcete, nastavte hodnotu false (nepravda).</li>\r\n      </ul>\r\n    Parametr záznamu se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Vypíše dostupné projekty v Google BigQuery.",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Import dat z Lakehouse",
        "Documentation.Description": "Import dat z Lakehouse",
        "Documentation.LongDescription": "Připojte se ke všem Lakehouses, ke kterým máte přístup, a vyberte entity, které chcete používat."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku s klíčovými daty MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Vrátí tabulku s klíčovými daty MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s klíčovými daty MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabulka s klíčovými daty MailChimp"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Vrací tabulku s aktivitami ohledně potenciálních zákazníků.",
        "Documentation.LongDescription": "Zavolá koncový bod služby Marketo REST API na adrese <code>url</code>/rest/v1/activities.json. Vrátí všechny aktivity ze seznamu <code>ID_aktivit</code>, ke kterým došlo od <code>čas_začátku</code>.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku aktivit typu „návštěva webu“ od 1. listopadu 2015.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabulka obsahující všechny „návštěvy webu“ od 1. listopadu 2015"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Toky dat Power BI (starší verze)",
        "Documentation.Caption": "Importovat data z toku dat Power BI",
        "Documentation.LongDescription": "Připojte se ke všem tokům dat Power BI, ke kterým máte přístup, a vyberte entity, které chcete použít."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datová tržiště",
        "Documentation.Caption": "Datová tržiště",
        "Documentation.Description": "Importuje data z datových tržišť.",
        "Documentation.LongDescription": "Importuje data z datových tržišť."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Toky dat",
        "Documentation.Caption": "Import dat z toku dat",
        "Documentation.Description": "Import dat z toku dat",
        "Documentation.LongDescription": "Připojte se ke všem tokům dat, ke kterým máte přístup, a vyberte entity, které chcete používat."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importujte data z QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Vrátí tabulku s výpisem dostupných tabulek v QuickBooks Online. Je možné zadat volitelný parametr záznamu <code>options</code> k nastavení následujících možností:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Časový interval určující, jak dlouho se má čekat, než se ukončí neúspěšný pokus o připojení k serveru.</li>\r\n            <li><code>CommandTimeout</code>: Časový interval určující, jak dlouho může běžet dotaz na straně serveru, než bude zrušen.</li>\r\n          </ul>\r\n        Parametr záznamu se zadává ve formátu [možnost1 = hodnota1, možnost2 = hodnota2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Vrací objekty z účtu Salesforce.",
        "Documentation.LongDescription": "Vrací objekty v účtu Salesforce poskytnutém v přihlašovacích údajích. Účet se připojí přes zadané prostředí <code>loginUrl</code>. Pokud jste žádné prostředí nezadali, připojí se účet k produkčnímu prostředí (https://login.salesforce.com). Pomocí nepovinného parametru záznamu <code>options</code> můžete zadat další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#253; parametr (true/false), kter&#253; nastavuje, jestli se maj&#237; u vr&#225;cen&#253;ch hodnot generovat navigačn&#237; vlastnosti (v&#253;choz&#237; hodnota je false).</li>\r\n<li><code>ApiVersion</code> : Verze rozhran&#237; Salesforce API, kter&#225; se m&#225; pro tento dotaz použ&#237;t. Pokud nen&#237; zad&#225;no, použije se API verze 29.0.</li>\r\n<li><code>Timeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se ž&#225;dost serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na zdroji.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Vrací sestavy z účtu Salesforce.",
        "Documentation.LongDescription": "Vrací sestavy v účtu Salesforce poskytnutém v přihlašovacích údajích. Účet se připojí přes zadané prostředí <code>loginUrl</code>. Pokud jste žádné prostředí nezadali, připojí se účet k produkčnímu prostředí (https://login.salesforce.com). Pomocí nepovinného parametru záznamu <code>options</code> můžete zadat další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Verze rozhran&#237; Salesforce API, kter&#225; se m&#225; pro tento dotaz použ&#237;t. Pokud nen&#237; zad&#225;no, použije se API verze 29.0.</li>\r\n<li><code>Timeout</code> : Doba trv&#225;n&#237;, kter&#225; ř&#237;d&#237;, jak dlouho se m&#225; čekat, než se ž&#225;dost serveru opust&#237;. V&#253;choz&#237; hodnota z&#225;vis&#237; na zdroji.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Vrátí InfoCubes a dotazy v systému SAP Business Warehouse seskupené podle InfoArea.",
        "Documentation.LongDescription": "Vrátí tabulku InfoCubes a dotazů seskupených podle InfoArea z instance SAP Business Warehouse na serveru <code>server</code> s číslem systému <code>systemNumberOrSystemId</code> a ID klienta <code>clientId</code>. Je možné zadat volitelný parametr záznamu <code>optionsOrLogonGroup</code>, který řídí následující možnosti:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku listů, sestav, složek a pracovních prostorů z rozhraní Smartsheet API.",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Vrátí vnořenou tabulku dostupných listů, sestav, složek a pracovních prostorů z rozhraní Smartsheet API.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí listy, složky, sestavy a pracovní prostory na nejvyšší úrovni hierarchie Smartsheet.",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabulka složek, sestav a pracovních prostorů z nejvyšší úrovně hierarchie Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku dostupných metrik z rozhraní SparkPost API v1.",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Tuto funkci jde použít k načtení dat z konkrétního koncového bodu „Metric“ v rozhraní SparkPost API v1. Při aktualizaci těchto tabulek nebo volání rozhraní SparkPost API pomocí tohoto konektoru mějte na paměti, že rozhraní SparkPost API má striktní limit četnosti volání rozhraní API. Pokud vidíte, že server SparkPost vrací stavový kód 429, dosáhli jste tohoto limitu četnosti a před dalším voláním bude nutné chvíli počkat. Při výběru hodnoty pro parametr „Počet dní“ pamatujte, že toto rozhraní API ukládá data jen za 6 měsíců.",
        "Documentation.Examples": [
          {
            "Description": "Načte metriky doručitelnosti count_sent a count_rejected pro všechny campaign_ids agregované za poslední tři dny. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabulka"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Zavolá rozhraní Stripe API.",
        "Documentation.LongDescription": "Zavolá rozhraní Stripe API na adrese https://api.stripe.com/v1/<code>metoda</code> se záznamem dodatečných parametrů <code>další_parametry</code> a seznamem názvů očekávaných sloupců <code>názvy_sloupců</code>. Použije se Stripe verze 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku událostí vytvořených po 1. listopadu 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabulka s požadovanými událostmi pro aktuální účet Stripe"
          },
          {
            "Description": "Vrátí tabulku všech skladových položek",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabulka všech skladových položek pro aktuální účet Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Vrátí tabulku se seznamem všech dostupných tabulek a funkcí Stripe.",
        "Documentation.LongDescription": "Vrátí tabulku se seznamem všech dostupných tabulek a funkcí Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Pracovní prostor Azure Synapse Analytics",
        "Documentation.Caption": "Pracovní prostor Azure Synapse Analytics",
        "Documentation.LongDescription": "Konektor PQ pro pracovní prostor Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Přidá sloupec se zadaným názvem. Hodnota je vypočítána pomocí zadané výběrové funkce a jednotlivých řádků, které jsou použity jako vstup.",
        "Documentation.LongDescription": "Přidá sloupec <code>newColumnName</code> do tabulky <code>table</code>. Hodnoty sloupce jsou vypočítány pomocí zadané výběrové funkce <code>columnGenerator</code> a jednotlivých řádků, které jsou použity jako vstup.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Do tabulky přidejte číselný sloupec s názvem TotalPrice, přičemž každá hodnota je součtem sloupců [Price] a [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Přidá nový sloupec s hodnotami zástupců získanými přibližným seskupováním hodnot zadaného sloupce v tabulce.",
        "Documentation.LongDescription": "Přidá do tabulky <code>table</code> nový sloupec <code>newColumnName</code> s reprezentativními hodnotami <code>columnName</code>. Zástupci pro jednotlvé řádky se získají pomocí přibližné shody s hodnotami v <code>columnName</code>.\r\n    <p>Jde zahrnout nepovinnou sadu <code>options</code>, která určuje, jak se mají klíčové sloupce porovnat. Možnosti zahrnují: \r\n    <ul>\r\n<li><code>Culture</code> : Povoluje seskupov&#225;n&#237; z&#225;znamů podle pravidel specifick&#253;ch pro jazykovou verzi. Může to b&#253;t jak&#253;koli platn&#253; n&#225;zev jazykov&#233; verze. Např&#237;klad možnost jazykov&#225; verze pro skupiny „ja-JP“ seskup&#237; z&#225;znamy podle japonsk&#233; jazykov&#233; verze. V&#253;choz&#237; hodnota je „“, kter&#225; seskupuje na z&#225;kladě invariantn&#237; anglick&#233; jazykov&#233; verze.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje seskupen&#237; kl&#237;čů bez rozlišov&#225;n&#237; velikosti p&#237;smen. Např&#237;klad při hodnotě true se „Hrozny“ seskup&#237; s „hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje kombinov&#225;n&#237; č&#225;st&#237; textu za &#250;čelem naj&#237;t skupiny. Např&#237;klad při hodnotě true se „Hro zny“ seskup&#237; s „Hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zev sloupce, kter&#253; zobrazuje podobnost mezi vstupn&#237; a reprezentativn&#237; hodnotou dan&#233;ho vstupu. V&#253;choz&#237; hodnota je null – v tomto př&#237;padě se nov&#253; sloupec pro podobnosti nepřid&#225;.</li>\r\n<li><code>Threshold</code> : Č&#237;slo mezi 0,00 a 1,00, kter&#233; určuje sk&#243;re podobnosti, podle kter&#233;ho se budou seskupovat dvě hodnoty.\r\n    Např&#237;klad „Grapes“ a „Graes“ (chyb&#237; „p“) se seskupuj&#237; jenom v př&#237;padě, že je tato možnost nastaven&#225; na hodnotu menš&#237; než 0,90.\r\n    Prahov&#225; hodnota 1,00 povoluje jenom přesnou shodu.\r\n    (Mějte na paměti, že přibližn&#225; shoda může ignorovat rozd&#237;ly, jako jsou mal&#225; a velk&#225; p&#237;smena, pořad&#237; slov nebo interpunkce.) \r\n    V&#253;choz&#237; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabulka, kter&#225; umožňuje seskupov&#225;n&#237; z&#225;znamů na z&#225;kladě mapov&#225;n&#237; vlastn&#237;ch hodnot. Mus&#237; obsahovat sloupce „Z“ a „Na“. Např&#237;klad „Hrozny“ se seskup&#237; s „Hrozinky“, pokud se poskytne transformačn&#237; tabulka se sloupcem „Z“ obsahuj&#237;c&#237;m „Hrozny“ a sloupcem „Na“, kter&#253; obsahuje „Hrozinky“. Všimněte si, že se transformace použije na všechny v&#253;skyty textu v transformačn&#237; tabulce. Pomoc&#237; v&#253;še uveden&#233; transformačn&#237; tabulky se tak&#233; „Hrozny jsou sladk&#233;“ seskup&#237; s „Hrozinky jsou sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Najde hodnoty zástupců pro umístění zaměstnanců.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Spojí určené sloupce tabulek a vytvoří výsledek spojení v novém sloupci.",
        "Documentation.LongDescription": "Spojí řádky tabulky <code>table1</code> s řádky tabulky <code>table2</code> na základě rovnosti hodnot klíčových sloupců vybraných funkcí <code>key1</code> (pro tabulku <code>table1</code>) a <code>key2</code> (pro tabulku <code>table2</code>). Výsledky jsou vloženy do sloupce <code>newColumnName</code>.\r\nTato funkce se chová podobně jako funkce Table.Join hodnotou argumentu JoinKind LeftOuter, ale výsledky spojení jsou prezentovány ve vnořeném, nikoliv plochém formátu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Přidá sloupec spojení do tabulky ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) s názvem \"price/stock\" z tabulky ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) spojené na základě sloupce [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Přidá klíč do tabulky.",
        "Documentation.LongDescription": "Přidá klíč do tabulky <code>table</code>, kde hodnota <code>columns</code> představuje seznam názvů sloupců, které definují klíč, a kde hodnota <code>isPrimary</code> určuje, zda je klíč primární.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje přidat do tabulky primární klíč s jedním sloupcem.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Připojí sloupec s řazením jednoho nebo více dalších sloupců.",
        "Documentation.LongDescription": "Připojí sloupec s názvem <code>newColumnName</code> k <code>table</code> s řazením jednoho nebo více dalších sloupců popsaných v <code>comparisonCriteria</code>.\r\nMožnost RankKind v <code>options</code> můžou pokročilí uživatelé použít k výběru konkrétnější metody řazení.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Přidá do tabulky sloupec s názvem RevenueRank, který seřadí sloupec Výnosy od nejvyšších po nejnižší.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agreguje sloupec tabulek do více sloupců v obsahující tabulce.",
        "Documentation.LongDescription": "Agreguje tabulky v databázi <code>table</code>[<code>column</code>] do více sloupců obsahujících agregované hodnoty tabulek. Hodnota <code>aggregations</code> se používá k určení sloupců obsahujících tabulky k agregaci, agregačních funkcí, které se použijí s tabulkami k vygenerování jejich hodnot, a názvů agregovaných sloupců k vytvoření.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agreguje sloupce tabulky v <code>[t]</code> v tabulce <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> na součet <code>[t.a]</code>, minimální a maximální hodnotu <code>[t.b]</code> a počet hodnot v <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Zachovává počáteční posun a pak střídavě přebírá a přeskakuje následující řádky.",
        "Documentation.LongDescription": "Zachovává počáteční posun a pak střídavě přebírá a přeskakuje následující řádky.\r\n    <ul>\r\n       <li><code>table</code>: Vstupní tabulka</li>\r\n       <li><code>offset</code>: Počet řádků, které mají být zachovány před zahájením iterací</li>\r\n       <li><code>skip</code>: Počet řádků, které mají být při každé iteraci odebrány</li>\r\n       <li><code>take</code>: Počet řádků, které mají být při každé iteraci zachovány</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku z tabulky, která od prvního řádku přeskočí jednu hodnotu a pak jednu hodnotu zachová.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Zkombinuje zadané sloupce do nového sloupce pomocí zadané kombinační funkce.",
        "Documentation.LongDescription": "Zkombinuje zadané sloupce do nového sloupce pomocí zadané kombinační funkce.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte příjmení a křestní jména do nového sloupce odděleného čárkou.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Zkombinuje určené sloupce do nového sloupce s hodnotou záznamů, kde každý záznam obsahuje názvy polí a hodnoty odpovídající názvům a hodnotám zkombinovaných sloupců",
        "Documentation.LongDescription": "Sloučí zadané sloupce <code>table</code> do nového sloupce se záznamy s názvem <code>newColumnName</code>, kde každý záznam obsahuje názvy a hodnoty polí odpovídající názvům a hodnotám sloučených sloupců. Pokud se pro <code>options</code> zadá záznam, můžete zadat následující možnosti: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Pokud se zadá jako text, znamená to, že se název daného sloupce bude považovat za zobrazovaný název záznamu. Nemusí se jednat o jeden ze sloupců v samotném záznamu. </li>\r\n     <li> <code>TypeName</code>: Pokud se zadá jako text, zastupuje pro výsledný záznam název logického typu, který se dá při načítání dat použít k řízení chování načítajícím prostředím. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplikuje sloupec se zadaným názvem. Hodnoty a typ jsou kopírovány ze zdrojového sloupce.",
        "Documentation.LongDescription": "Duplikuje sloupec <code>columnName</code> do tabulky <code>table</code>. Hodnoty a typ sloupce <code>newColumnName</code> jsou zkopírovány ze sloupce <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Duplikuje sloupec „a“ do sloupce „zkopírovaný sloupec“ v tabulce <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Rozšíří sloupec záznamů na sloupce pomocí jednotlivých hodnot.",
        "Documentation.LongDescription": "Na základě sloupce <code>column</code> záznamů vstupní tabulky <code>table</code> vytvoří tabulku pro každé pole záznamu. Volitelně může být určen seznam <code>newColumnNames</code>, který zajistí jedinečnost názvů sloupců v nové tabulce.\r\n    <ul>\r\n        <li><code>table</code>: Původní tabulka se sloupcem záznamu, který se má rozšířit </li>\r\n        <li><code>column</code>: Sloupec, který se má rozšířit</li>\r\n        <li><code>fieldNames</code>: Seznam polí, která se mají rozšířit na sloupce tabulky</li>\r\n        <li><code>newColumnNames</code>: Seznam názvů sloupců, které mají být dány novým sloupcům Názvy nových sloupců nemohou duplikovat žádné sloupce v nové tabulce.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozšíří sloupec [a] tabulky <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> na tři sloupce aa, bb a cc.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Rozšíří sloupec záznamů nebo sloupec tabulek na více sloupců v obsahující tabulce.",
        "Documentation.LongDescription": "Rozšíří sloupec tabulky <code>table</code>[<code>column</code>] na více řádků a sloupců. <code>columnNames</code> slouží k výběru sloupců z vnitřní tabulky, které mají být rozšířeny. Určením parametru <code>newColumnNames</code> se vyhnete konfliktům mezi stávajícími a novými sloupci.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozšíří sloupce tabulky v <code>[a]</code> v tabulce <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> na tři sloupce <code>[t.a]</code>, <code>[t.b]</code> a <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Řádky skupin v tabulce podle přibližné shody klíčů",
        "Documentation.LongDescription": "Seskupí řádky <code>table</code> podle přibližné shody hodnot v zadaném sloupci <code>key</code>, pro každý řádek.\r\n    Pro jednotlivé skupiny se vytvoří záznam, který obsahuje klíčové sloupce (a jejich hodnoty) společně s agregovanými sloupci určenými pomocí <code>aggregatedColumns</code>.\r\n    Tato funkce nemůže zaručit vrácení pevného pořadí řádků.\r\n    <p>Jde zahrnout nepovinnou sadu <code>options</code>, která určuje, jak se mají klíčové sloupce porovnat. Možnosti zahrnují: \r\n    <ul>\r\n<li><code>Culture</code> : Povoluje seskupov&#225;n&#237; z&#225;znamů podle pravidel specifick&#253;ch pro jazykovou verzi. Může to b&#253;t jak&#253;koli platn&#253; n&#225;zev jazykov&#233; verze. Např&#237;klad možnost jazykov&#225; verze pro skupiny „ja-JP“ seskup&#237; z&#225;znamy podle japonsk&#233; jazykov&#233; verze. V&#253;choz&#237; hodnota je „“, kter&#225; seskupuje na z&#225;kladě invariantn&#237; anglick&#233; jazykov&#233; verze.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje seskupen&#237; kl&#237;čů bez rozlišov&#225;n&#237; velikosti p&#237;smen. Např&#237;klad při hodnotě true se „Hrozny“ seskup&#237; s „hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje kombinov&#225;n&#237; č&#225;st&#237; textu za &#250;čelem naj&#237;t skupiny. Např&#237;klad při hodnotě true se „Hro zny“ seskup&#237; s „Hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zev sloupce, kter&#253; zobrazuje podobnost mezi vstupn&#237; a reprezentativn&#237; hodnotou dan&#233;ho vstupu. V&#253;choz&#237; hodnota je null – v tomto př&#237;padě se nov&#253; sloupec pro podobnosti nepřid&#225;.</li>\r\n<li><code>Threshold</code> : Č&#237;slo mezi 0,00 a 1,00, kter&#233; určuje sk&#243;re podobnosti, podle kter&#233;ho se budou seskupovat dvě hodnoty.\r\n    Např&#237;klad „Grapes“ a „Graes“ (chyb&#237; „p“) se seskupuj&#237; jenom v př&#237;padě, že je tato možnost nastaven&#225; na hodnotu menš&#237; než 0,90.\r\n    Prahov&#225; hodnota 1,00 povoluje jenom přesnou shodu.\r\n    (Mějte na paměti, že přibližn&#225; shoda může ignorovat rozd&#237;ly, jako jsou mal&#225; a velk&#225; p&#237;smena, pořad&#237; slov nebo interpunkce.) \r\n    V&#253;choz&#237; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabulka, kter&#225; umožňuje seskupov&#225;n&#237; z&#225;znamů na z&#225;kladě mapov&#225;n&#237; vlastn&#237;ch hodnot. Mus&#237; obsahovat sloupce „Z“ a „Na“. Např&#237;klad „Hrozny“ se seskup&#237; s „Hrozinky“, pokud se poskytne transformačn&#237; tabulka se sloupcem „Z“ obsahuj&#237;c&#237;m „Hrozny“ a sloupcem „Na“, kter&#253; obsahuje „Hrozinky“. Všimněte si, že se transformace použije na všechny v&#253;skyty textu v transformačn&#237; tabulce. Pomoc&#237; v&#253;še uveden&#233; transformačn&#237; tabulky se tak&#233; „Hrozny jsou sladk&#233;“ seskup&#237; s „Hrozinky jsou sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Seskupení tabulky a přidání agregovaného sloupce [Count], který obsahuje počet zaměstnanců v jednotlivých lokalitách (each Table.RowCount(_)))",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Propojí dva ze řádky dvou tabulek, které se přibližně shodují na základě daných klíčů.",
        "Documentation.LongDescription": "<p>Spojí řádky tabulky <code>table1</code> s řádky tabulky <code>table2</code> na základě přibližného shody hodnot klíčových sloupců vybraných funkcí <code>key1</code> (pro tabulku <code>table1</code>) a <code>key2</code> (pro tabulku <code>table2</code>).</p>\r\n<p>Přibližná shoda je porovnání založené na podobnosti, nikoli absolutní shodě textu.</p>\r\n<p>Ve výchozím nastavení se provede vnitřní spojení, volitelně však jde zahrnout parametr <code>joinKind</code>, který určuje typ spojení. Možnosti:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Zahrnutá může být volitelná sada <code>joinOptions</code> pro určení způsobu porovnávání klíčových sloupců. Možnosti:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Č&#237;slo mezi 1 a 8 určuj&#237;c&#237; počet paraleln&#237;ch vl&#225;ken, kter&#233; se maj&#237; použ&#237;t pro přibližnou shodu. V&#253;choz&#237; hodnota je 1.</li>\r\n<li><code>Culture</code> : Povoluje shodu z&#225;znamů podle pravidel specifick&#253;ch pro jazykovou verzi. Může to b&#253;t jak&#253;koli platn&#253; n&#225;zev jazykov&#233; verze. Např&#237;klad možnost jazykov&#225; verze pro skupiny „ja-JP“ posuzuje shodu z&#225;znamů podle japonsk&#233; jazykov&#233; verze. V&#253;choz&#237; hodnota je „“, kter&#225; posuzuje shodu na z&#225;kladě invariantn&#237; anglick&#233; jazykov&#233; verze.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje shodu kl&#237;čů bez rozlišov&#225;n&#237; velikosti p&#237;smen. Např&#237;klad při hodnotě true se „Hrozny“ shoduje s „hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje kombinov&#225;n&#237; č&#225;sti textu souč&#225;st&#237; za &#250;čelem naj&#237;t shody. Např&#237;klad při hodnotě true se „Hro zny“ shoduje s „Hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>NumberOfMatches</code> : Cel&#233; č&#237;slo určuj&#237;c&#237; maxim&#225;ln&#237; počet shodn&#253;ch ř&#225;dků, kter&#233; se daj&#237; vr&#225;tit, pro všechny ř&#225;dky vstupu. Např&#237;klad hodnota 1 vr&#225;t&#237; pro každ&#253; vstupn&#237; ř&#225;dek nejv&#253;še jeden shodn&#253; ř&#225;dek. Pokud tato možnost nen&#237; zadan&#225;, vr&#225;t&#237; se všechny shodn&#233; ř&#225;dky.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zev sloupce, kter&#253; zobrazuje podobnost mezi vstupn&#237; a reprezentativn&#237; hodnotou dan&#233;ho vstupu. V&#253;choz&#237; hodnota je null – v tomto př&#237;padě se nov&#253; sloupec pro podobnosti nepřid&#225;.</li>\r\n<li><code>Threshold</code> : Č&#237;slo mezi 0,00 a 1,00, kter&#233; určuje sk&#243;re podobnosti, podle kter&#233;ho se budou porovn&#225;vat dvě hodnoty.\r\n    Např&#237;klad „Grapes“ a „Graes“ (chyb&#237; „p“) se shoduj&#237; jenom v př&#237;padě, že je tato možnost nastaven&#225; na hodnotu menš&#237; než 0,90.\r\n    Prahov&#225; hodnota 1,00 povoluje jenom přesnou shodu.\r\n    (Mějte na paměti, že přibližn&#225; shoda může ignorovat rozd&#237;ly, jako jsou mal&#225; a velk&#225; p&#237;smena, pořad&#237; slov nebo interpunkce.) \r\n    V&#253;choz&#237; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabulka, kter&#225; umožňuje určit shodu z&#225;znamů na z&#225;kladě mapov&#225;n&#237; vlastn&#237;ch hodnot. Mus&#237; obsahovat sloupce „Z“ a „Na“. Např&#237;klad „Hrozny“ se budou shodovat s „Hrozinky“, pokud se poskytne transformačn&#237; tabulka se sloupcem „Z“ obsahuj&#237;c&#237;m „Hrozny“ a sloupcem „Na“, kter&#253; obsahuje „Hrozinky“. Všimněte si, že se transformace použije na všechny v&#253;skyty textu v transformačn&#237; tabulce. Pomoc&#237; v&#253;še uveden&#233; transformačn&#237; tabulky se tak&#233; „Hrozny jsou sladk&#233;“ bude shodovat s „Hrozinky jsou sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levé vnitřní přibližné spojení dvou tabulek na základě [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Provede fuzzy spojení mezi tabulkami na dodaných sloupcích a vytvoří výsledek spojení v novém sloupci.",
        "Documentation.LongDescription": "<p>Spojí řádky tabulky <code>table1</code> s řádky tabulky <code>table2</code> na základě přibližné shody hodnot klíčových sloupců vybraných funkcí <code>key1</code> (pro tabulku <code>table1</code>) a <code>key2</code> (pro tabulku <code>table2</code>). Výsledky se vrací v novém sloupci s názvem <code>newColumnName</code>.</p>\r\n<p>Přibližná shoda je porovnání založené na podobnosti, nikoli na shodě textu.</p>\r\n<p>Volitelná hodnota <code>joinKind</code> určuje druh prováděného spojení. Pokud se hodnota <code>joinKind</code> nezadá, provede se ve výchozím nastavení levé vnější spojení. Možnosti zahrnují:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Jde zahrnout nepovinnou sadu <code>joinOptions</code> a určit způsob porovnávání klíčových sloupců. Možnosti zahrnují::\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Č&#237;slo mezi 1 a 8 určuj&#237;c&#237; počet paraleln&#237;ch vl&#225;ken, kter&#233; se maj&#237; použ&#237;t pro přibližnou shodu. V&#253;choz&#237; hodnota je 1.</li>\r\n<li><code>Culture</code> : Povoluje shodu z&#225;znamů podle pravidel specifick&#253;ch pro jazykovou verzi. Může to b&#253;t jak&#253;koli platn&#253; n&#225;zev jazykov&#233; verze. Např&#237;klad možnost jazykov&#225; verze pro skupiny „ja-JP“ posuzuje shodu z&#225;znamů podle japonsk&#233; jazykov&#233; verze. V&#253;choz&#237; hodnota je „“, kter&#225; posuzuje shodu na z&#225;kladě invariantn&#237; anglick&#233; jazykov&#233; verze.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje shodu kl&#237;čů bez rozlišov&#225;n&#237; velikosti p&#237;smen. Např&#237;klad při hodnotě true se „Hrozny“ shoduje s „hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), kter&#225; povoluje kombinov&#225;n&#237; č&#225;sti textu souč&#225;st&#237; za &#250;čelem naj&#237;t shody. Např&#237;klad při hodnotě true se „Hro zny“ shoduje s „Hrozny“. V&#253;choz&#237; hodnota je true.</li>\r\n<li><code>NumberOfMatches</code> : Cel&#233; č&#237;slo určuj&#237;c&#237; maxim&#225;ln&#237; počet shodn&#253;ch ř&#225;dků, kter&#233; se daj&#237; vr&#225;tit, pro všechny ř&#225;dky vstupu. Např&#237;klad hodnota 1 vr&#225;t&#237; pro každ&#253; vstupn&#237; ř&#225;dek nejv&#253;še jeden shodn&#253; ř&#225;dek. Pokud tato možnost nen&#237; zadan&#225;, vr&#225;t&#237; se všechny shodn&#233; ř&#225;dky.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zev sloupce, kter&#253; zobrazuje podobnost mezi vstupn&#237; a reprezentativn&#237; hodnotou dan&#233;ho vstupu. V&#253;choz&#237; hodnota je null – v tomto př&#237;padě se nov&#253; sloupec pro podobnosti nepřid&#225;.</li>\r\n<li><code>Threshold</code> : Č&#237;slo mezi 0,00 a 1,00, kter&#233; určuje sk&#243;re podobnosti, podle kter&#233;ho se budou porovn&#225;vat dvě hodnoty.\r\n    Např&#237;klad „Grapes“ a „Graes“ (chyb&#237; „p“) se shoduj&#237; jenom v př&#237;padě, že je tato možnost nastaven&#225; na hodnotu menš&#237; než 0,90.\r\n    Prahov&#225; hodnota 1,00 povoluje jenom přesnou shodu.\r\n    (Mějte na paměti, že přibližn&#225; shoda může ignorovat rozd&#237;ly, jako jsou mal&#225; a velk&#225; p&#237;smena, pořad&#237; slov nebo interpunkce.) \r\n    V&#253;choz&#237; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabulka, kter&#225; umožňuje určit shodu z&#225;znamů na z&#225;kladě mapov&#225;n&#237; vlastn&#237;ch hodnot. Mus&#237; obsahovat sloupce „Z“ a „Na“. Např&#237;klad „Hrozny“ se budou shodovat s „Hrozinky“, pokud se poskytne transformačn&#237; tabulka se sloupcem „Z“ obsahuj&#237;c&#237;m „Hrozny“ a sloupcem „Na“, kter&#253; obsahuje „Hrozinky“. Všimněte si, že se transformace použije na všechny v&#253;skyty textu v transformačn&#237; tabulce. Pomoc&#237; v&#253;še uveden&#233; transformačn&#237; tabulky se tak&#233; „Hrozny jsou sladk&#233;“ bude shodovat s „Hrozinky jsou sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Levé vnitřní přibližné spojení dvou tabulek na základě [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Řádky skupin v tabulce, které mají stejný klíč",
        "Documentation.LongDescription": "Seskupí řádky <code>table</code> podle klíčových sloupců definovaných parametrem <code>key</code>. Parametr <code>key</code> může být název jednoho sloupce nebo seznam názvů sloupců.\r\n    Pro každou skupinu je vytvořen záznam obsahující klíčové sloupce (a jejich hodnoty) společně s agregovanými sloupci zadanými parametrem <code>aggregatedColumns</code>.\r\n    Volitelně můžou být určeny také parametry <code>groupKind</code> a <code>comparer</code>.<br>\r\n    <br>\r\n    Pokud jsou data již seřazena podle klíčových sloupců, můžete zadat parametr <code>groupKind</code> z GroupKind.Local. To může v určitých případech zlepšit výkon seskupení,\r\n    protože se všechny řádky s danou sadou klíčových hodnot považují za souvislé.<br>\r\n    <br>\r\n    Při předávání parametru <code>comparer</code> si uvědomte, že pokud se odlišné klíče považují za shodné, může se řádek umístit ve skupině, jejíž klíče se liší od klíčů řádku.<br>\r\n    <br>\r\n    Tato funkce nezaručuje řazení řádků, které vrací.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Seskupí tabulku přidáním agregovaného sloupce [total] obsahujícího součet cen (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Na zadaném umístění vloží do tabulky seznam řádků.",
        "Documentation.LongDescription": "Vrátí tabulku se seznamem řádků, <code>rows</code>, vložených do <code>table</code> na dané pozici, <code>offset</code>. Každý sloupec v řádku, který má být vložen, musí odpovídat typům sloupců tabulky.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vloží řádek do tabulky na pozici 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vloží dva řádky do tabulky na pozici 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Spojí dva řádky dvou tabulek, které se shodují na základě daných klíčů.",
        "Documentation.LongDescription": "<p>Spojí řádky tabulky <code>table1</code> s řádky tabulky <code>table2</code> na základě rovnosti hodnot klíčových sloupců vybraných funkcí <code>key1</code> (pro tabulku <code>table1</code>) a <code>key2</code> (pro tabulku <code>table2</code>).</p>\r\n<p>Ve výchozím nastavení se provede vnitřní spojení, volitelně se však dá zahrnout parametr <code>joinKind</code>, který určuje typ spojení. Možnosti:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Zahrnutá může být volitelná sada <code>keyEqualityComparers</code> pro určení způsobu porovnávání klíčových sloupců. Tento parametr je určený jenom pro interní použití.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojit dvě tabulky pomocí jednoho klíčového sloupce",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Spojení dvou tabulek s konfliktními názvy sloupců pomocí více klíčových sloupců.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Na základě daných kritérií vrátí největší řádky.",
        "Documentation.LongDescription": "Na základě daných kritérií (<code>comparisonCriteria</code>) vrátí největší řádky v tabulce <code>table</code>.\r\n    Po seřazení řádků se musí zadat parametr <code>countOrCondition</code> pro další filtrování výsledku. Algoritmus řazení nedokáže zaručit pevně seřazený výsledek. Parametr <code>countOrCondition</code> může mít několik tvarů:\r\n    <ul>\r\n        <li> Pokud je zadané číslo, vrátí se seznam až <code>countOrCondition</code> položek ve vzestupném pořadí. </li>\r\n        <li> Pokud je zadaná podmínka, vrátí se seznam položek, které splňují tuto podmínku. Jakmile nějaká položka podmínku nesplňuje, další položky se už neuvažují. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Najde v tabulce řádek s největší hodnotou ve sloupci [a] splňující podmínku [a] > 0. Před použitím filtru jsou řádky seřazeny.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Najde v tabulce řádek s největší hodnotou ve sloupci [a] splňující podmínku [b] > 0. Před použitím filtru jsou řádky seřazeny.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Na základě daných kritérií vrátí nejmenší řádky.",
        "Documentation.LongDescription": "Na základě daných kritérií (<code>comparisonCriteria</code>) vrátí nejmenší řádky v tabulce <code>table</code>. Po seřazení řádků se musí zadat parametr <code>countOrCondition</code> pro další filtrování výsledku. Algoritmus řazení nedokáže zaručit pevně seřazený výsledek. Parametr <code>countOrCondition</code> může mít několik tvarů:\r\n    <ul>\r\n        <li> Pokud je zadané číslo, vrátí se seznam až <code>countOrCondition</code> položek ve vzestupném pořadí. </li>\r\n        <li> Pokud je zadaná podmínka, vrátí se seznam položek, které splňují tuto podmínku. Jakmile nějaká položka podmínku nesplňuje, další položky se už neuvažují. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Najde v tabulce řádek s nejmenší hodnotou ve sloupci [a] splňující podmínku [a] < 3. Před použitím filtru jsou řádky seřazeny.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Najde v tabulce řádek s nejmenší hodnotou ve sloupci [a] splňující podmínku [b] < 0. Před použitím filtru jsou řádky seřazeny.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Spojí určené sloupce tabulek a vytvoří výsledek spojení v novém sloupci.",
        "Documentation.LongDescription": "<p> Spojí řádky tabulky <code>table1</code> s řádky tabulky <code>table2</code> na základě rovnosti hodnot klíčových sloupců vybraných funkcí <code>key1</code> (pro tabulku <code>table1</code>) a <code>key2</code> (pro tabulku <code>table2</code>). Výsledky jsou vloženy do sloupce <code>newColumnName</code>.</p>\r\n<p>Volitelná hodnota <code>joinKind</code> určuje druh prováděného spojení. Pokud hodnota <code>joinKind</code> není zadaná, provede se ve výchozím nastavení levé vnější spojení.</p>\r\n<p>Zahrnutá může být volitelná sada <code>keyEqualityComparers</code> pro určení způsobu porovnávání klíčových sloupců. Tato funkce je určená jenom pro interní použití.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojit dvě tabulky pomocí jednoho klíčového sloupce",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Na základě páru sloupců představujícího pár atribut-hodnota, otočí data ve sloupci atributu do záhlaví sloupců.",
        "Documentation.LongDescription": "Na základě páru sloupců představujícího pár atribut-hodnota, otočí data ve sloupci atributu do záhlaví sloupců.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vezme hodnoty „a“, „b“ a „c“ ve sloupci atributů tabulky <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> a převede je na jejich vlastní sloupce.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Vezme hodnoty „a“, „b“ a „c“ ve sloupci atributů tabulky <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> a převede je na jejich vlastní sloupce.  K atributu „c“ pro klíč „x“ je přidruženo více hodnot. Konflikt vyřešíte použitím funkce List.Max.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Nahradí zadaný rozsah řádků zadanými řádky.",
        "Documentation.LongDescription": "Nahradí zadaný počet řádků (<code>count</code>) ve vstupu <code>table</code> zadaným seznamem <code>rows</code> začínajícím po řádku <code>offset</code>. Parametr <code>rows</code> představuje seznam záznamů.\r\n    <ul>\r\n       <li><code>table</code>: Tabulka, ve které se provádí nahrazení</li>\r\n       <li><code>offset</code>: Počet řádků, které mají být přeskočeny po nahrazení</li>\r\n       <li><code>count</code>: Počet řádků, které mají být nahrazeny</li>\r\n       <li><code>rows</code>: Seznam záznamů řádků, které mají být vloženy do tabulky <code>table</code> v umístění zadaném hodnotou <code>offset</code></li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Od pozice 1 nahradí 3 řádky.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Nahradí v zadaných sloupcích jednu hodnotu druhou.",
        "Documentation.LongDescription": "Nahradí v zadaných sloupcích tabulky <code>table</code> hodnotu <code>oldValue</code> hodnotou <code>newValue</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte text „goodbye“ textem „world“ ve sloupci B, který odpovídá pouze celé hodnotě.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Nahraďte text „your“ textem „or“ ve sloupci B, který odpovídá jakékoli části hodnoty.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonymizujte jména zaměstnanců v USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonymizujte všechny sloupce zaměstnanců v USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Rozdělí zadané sloupce na sadu dalších sloupců pomocí zadané rozdělovací funkce.",
        "Documentation.LongDescription": "Rozdělí zadané sloupce na sadu dalších sloupců pomocí zadané rozdělovací funkce.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdělí sloupec [Jméno] na pozici „i“ do dvou sloupců.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Změní sadu sloupců v tabulce na páry atribut-hodnota.",
        "Documentation.LongDescription": "Změní sadu sloupců v tabulce na páry atribut-hodnota kombinované se zbytkem hodnot v jednotlivých řádcích.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vezme sloupce „a“, „b“ a „c“ tabulky <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> a převedením na řádky je změní na páry atribut-hodnota.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Přeloží všechny sloupce mimo zadanou sadu na páry atribut-hodnota.",
        "Documentation.LongDescription": "Přeloží všechny sloupce mimo zadanou sadu na páry atribut-hodnota kombinované se zbytkem hodnot v jednotlivých řádcích.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Přeloží všechny sloupce mimo zadanou sadu na páry atribut-hodnota kombinované se zbytkem hodnot v jednotlivých řádcích.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams – Osobní analýza",
        "Documentation.LongDescription": "<p>Konektor analytiky Teams umožňuje získat přehledy o využití Teams. Data jsou k dispozici pro vaši osobní aktivitu v Teams i pro aktivitu v Teams, kde které jste členem. </p>\r\n<p>Data jsou k dispozici za uplynulých 90 dnů. </p>\r\n<p> Podrobnosti o dostupných typech dat najdete v následující dokumentaci nápovědy: </p>\r\n<ul>\r\n<li><b>Využití Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Aktivita uživatele Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Zadejte názvy organizace a projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Vrátí tabulku informačních kanálů OData nabízených službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Vrátí binární formát, který čte binární hodnotu.",
        "Documentation.LongDescription": "Vrátí binární formát, který čte binární hodnotu. Je-li zadán parametr <code>length</code>, bude binární hodnota obsahovat přesně tolik bajtů. Pokud parametr <code>length</code> zadán není, bude binární hodnota obsahovat zbylé bajty. Parametr <code>length</code> lze zadat jako číslo nebo v binárním formátu o délce, která předchází binární data.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Vrátí logickou hodnotu založenou na kontrole rovnosti dvou daných hodnot.",
        "Documentation.LongDescription": "Vrátí <code>logickou</code> hodnotu založenou na kontrole rovnosti dvou zadaných hodnot <code>x</code> a <code>y</code>, using the provided <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> je <code>Porovnávač</code>, který se používá k řízení porovnání.\r\n        Porovnávač je funkce, která přijímá dva argumenty a vrací -1, 0 nebo 1 na základě toho, jestli je první hodnota menší než, rovna,  nebo větší než druhá.\r\n        Porovnávač lze použít k porovnání bez rozlišování malých a velkých písmen nebo jazykové verze a národního prostředí.\r\n      </div>\r\n      <div>\r\n        V jazyce vzorců jsou k dispozici následující integrované porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>:  Používá se k přesnému porovnání pořadí</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Používá se k porovnání bez rozlišování velkých a malých písmen s přesným pořadím</li>\r\n        <li> <code>Comparer.FromCulture</code>: Používá se k porovnání s jazykovou verzí</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porovnáním hodnot „1“ a „A“ s použitím národního prostředí „en-us“ určí, jestli jsou hodnoty stejné.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v místním časovém pásmu. Tato hodnota je pevná a při následných voláních se nezmění.",
        "Documentation.LongDescription": "Vrací hodnotu <code>datetime</code> nastavenou na aktuální datum a čas v systému. Tato hodnota je pevná a při následných voláních se nezmění – na rozdíl od funkce DateTime.LocalNow, která během provádění výrazu může vracet různé hodnoty.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v místním časovém pásmu.",
        "Documentation.LongDescription": "Vrací hodnotu <code>datetime</code> nastavenou na aktuální datum a čas v systému.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v místním časovém pásmu. Tato hodnota je pevná a při následných voláních se nezmění.",
        "Documentation.LongDescription": "Vrací hodnotu <code>datetime</code> nastavenou na aktuální datum a čas v systému. Vrácená hodnota obsahuje údaj o časovém pásmu, který představuje místní časové pásmo. Tato hodnota je pevná a při následných voláních se nezmění – na rozdíl od funkce DateTimeZone.LocalNow, která během provádění výrazu může vracet různé hodnoty.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v UTC (časové pásmo GMT). Tato hodnota je pevná a při následných voláních se nezmění.",
        "Documentation.LongDescription": "Vrátí aktuální datum a čas v UTC (časové pásmo GMT). Tato hodnota je pevná a při následných voláních se nezmění.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v místním časovém pásmu.",
        "Documentation.LongDescription": "Vrací hodnotu <code>datetimezone</code> nastavenou na aktuální datum a čas v systému.\r\n    Vrácená hodnota obsahuje údaj o časovém pásmu, který představuje místní časové pásmo.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Vrátí aktuální datum a čas v UTC (časové pásmo GMT).",
        "Documentation.LongDescription": "Vrátí aktuální datum a čas v UTC (časové pásmo GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Získat aktuální datum a čas v UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Vrátí neprůhledný identifikátor pro právě probíhající vyhodnocení.",
        "Documentation.LongDescription": "Vrátí neprůhledný identifikátor pro právě probíhající vyhodnocení.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Vrátí netransparentní identifikátor pro korelaci příchozích žádostí s odchozími.",
        "Documentation.LongDescription": "Vrátí netransparentní identifikátor pro korelaci příchozích žádostí s odchozími.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Zapíše položku trasování, pokud je trasování je povolené, a vrátí hodnotu.",
        "Documentation.LongDescription": "Zapíše trasování <code>message</code>, pokud je trasování povolené, a vrátí <code>value</code>. Volitelný parametr <code>delayed</code> určuje, jestli se má pozdržet vyhodnocení <code>value</code>, dokud se neprovede trasování zprávy. <code>traceLevel</code> může mít jednu z následujících hodnot:\r\n    <code>TraceLevel.Critical</code>,\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Trasuje zprávu před vyvoláním funkce Text.From a vrátí výsledek.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Výchozí zprostředkovatel identity pro aktuálního hostitele.",
        "Documentation.LongDescription": "Výchozí zprostředkovatel identity pro aktuálního hostitele.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Shromažďuje souhrnnou hodnotu položek v seznamu.",
        "Documentation.LongDescription": "Shromažďuje souhrnnou hodnotu položek v seznamu <code>list</code> pomocí výrazu <code>accumulator</code>.\r\n    Lze nastavit volitelný parametr počáteční hodnoty <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Shromažďuje souhrnnou hodnotu položek v seznamu {1, 2, 3, 4, 5} pomocí výrazu ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Vygeneruje seznam hodnot datetimezone na základě předané výchozí hodnoty, počtu a přírůstkové hodnoty duration.",
        "Documentation.LongDescription": "Vrátí seznam hodnot <code>datetimezone</code> o velikosti <code>count</code> začínající hodnotou <code>start</code>. Daný přírůstek <code>step</code> je hodnota <code>duration</code>, která je přičtena ke každé hodnotě.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 10 hodnot začínajících 5 minut před 1. lednem (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) a narůstajících o jednu minutu (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Vygeneruje seznam hodnot datetime na základě předané výchozí hodnoty, počtu a přírůstkové hodnoty duration.",
        "Documentation.LongDescription": "Vrátí seznam hodnot <code>datetime</code> o velikosti <code>count</code> začínající hodnotou <code>start</code>. Daný přírůstek <code>step</code> je hodnota <code>duration</code>, která je přičtena ke každé hodnotě.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 10 hodnot začínajících 5 minut před 1. lednem (#datetime(2011, 12, 31, 23, 55, 0)) a narůstajících o jednu minutu (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Vygeneruje seznam hodnot date na základě předané výchozí hodnoty, počtu a přírůstkové hodnoty duration.",
        "Documentation.LongDescription": "Vrátí seznam hodnot <code>date</code> o velikosti <code>count</code> začínající hodnotou <code>start</code>. Daný přírůstek <code>step</code> je hodnota <code>duration</code>, která je přičtena ke každé hodnotě.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 5 hodnot začínajících 1. lednem (#date(2011, 12, 31)) a narůstajících o jeden den (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Vygeneruje seznam hodnot duration na základě předané výchozí hodnoty, počtu a přírůstkové hodnoty duration.",
        "Documentation.LongDescription": "Vrátí seznam hodnot <code>count</code> <code>duration</code> začínající hodnotou <code>start</code> a narůstající o předanou hodnotu <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 5 hodnot začínající 1 hodinou a narůstající o hodinu.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Vygeneruje seznam hodnot.",
        "Documentation.LongDescription": "Vygeneruje seznam hodnot pomocí zadaných funkcí. Funkce <code>initial</code> vygeneruje počáteční hodnotu kandidáta, která se pak testuje na <code>condition</code>.\r\n Pokud je kandidátská hodnota schválená, vrátí se jako součást výsledného seznamu a další kandidátská hodnota se vygeneruje předáním nově schválené hodnoty do <code>next</code>.\r\n Jakmile se kandidátské hodnotě nepodaří spárovat <code>condition</code>, proces generování seznamu se zastaví.\r\n K transformaci položek ve výsledném seznamu lze zadat také volitelný parametr <code>selector</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvořte seznam tak, že začnete od deseti, opakovaně snižujte o jednu položku a dbejte, aby každá položka byla větší než nula.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Vygenerovat seznam záznamů obsahujících x a y, kde x je hodnota a y seznam. x by mělo zůstat nižší než 10 a představovat počet položek seznamu y. Po vygenerování seznamu vrátit jen hodnoty x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Vloží hodnoty do seznamu na pozici určenou předaným indexem.",
        "Documentation.LongDescription": "Vrátí nový seznam vytvořený vložením hodnot v seznamu <code>values</code> do seznamu <code>list</code> na pozici <code>index</code>. První pozice v seznamu má index 0.\r\n      <ul>\r\n        <li><code>list</code>: Cílový seznam, do kterého budou vloženy hodnoty.</li>\r\n        <li><code>index</code>: Index cílového seznamu (<code>list</code>), do kterého budou vloženy hodnoty. První pozice v seznamu má index 0.</li>\r\n        <li><code>values</code>: Seznam hodnot, které budou vloženy do seznamu <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vloží seznam ({3, 4}) do cílového seznamu ({1, 2, 5}) na pozici 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Vloží seznam s vnořeným seznamem ({1, {1.1, 1.2}}) do cílového seznamu ({2, 3, 4}) na pozici 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Nahradí určený počet hodnot počínaje určenou pozicí nahrazujícími hodnotami.",
        "Documentation.LongDescription": "Nahradí <code>count</code> hodnoty v seznamu <code>list</code> seznamem <code>replaceWith</code> počínaje určenou pozicí <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "V seznamu {1, 2, 7, 8, 9, 5} nahradí hodnoty {7, 8, 9} hodnotami {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Vyhledá v seznamu zadanou hodnotu a nahradí ji.",
        "Documentation.LongDescription": "Vyhledá v seznamu hodnot <code>list</code> hodnotu <code>oldValue</code> a nahradí každý její výskyt nahrazující hodnotou <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nahradí v seznamu {\"a\", \"B\", \"a\", \"a\"} všechny hodnoty a hodnotou A.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Vygeneruje seznam hodnot time na základě předané výchozí hodnoty, počtu a přírůstkové hodnoty duration.",
        "Documentation.LongDescription": "Vrátí seznam hodnot <code>time</code> o velikosti <code>count</code> začínající hodnotou <code>start</code>. Daný přírůstek <code>step</code> je hodnota <code>duration</code>, která je přičtena ke každé hodnotě.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 4 hodnot začínajících polednem (#time(12, 0, 0)) a narůstajících o jednu hodinu (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Vrátí seznam, jehož elementy jsou transformovány ze vstupního seznamu pomocí určených funkcí.",
        "Documentation.LongDescription": "Vrátí seznam, jehož elementy jsou promítány ze vstupního seznamu.<br>\r\n    <br>\r\n    Funkce <code>collectionTransform</code> transformuje každý prvek na zprostředkující seznam a funkce <code>resultTransform</code> přijímá původní element i položku z přechodného seznamu, aby bylo možné vytvořit konečný výsledek.<br>\r\n    <br>\r\n    Funkce <code>collectionTransform</code> má signaturu <code>(x jako libovolný) jako seznam =>... </code>, kde <code>x</code> je prvek v <code>list</code>.\r\n    Funkce <code>resultTransform</code> promítá tvar výsledku a má signaturu <code>(x jako jakýkoli jiný, y jako jakýkoli jiný) jako jakýkoli =>... </code>, kde <code>x</code> je element v <code>list</code> a <code>y</code> je prvek ze seznamu vygenerovaný předáním <code>x</code> do <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zploštit seznam lidí a jejich mazlíčků.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Vrátí náhodné číslo.",
        "Documentation.LongDescription": "Vrátí náhodné číslo v rozsahu od 0 do 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Vrátí náhodné číslo.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Přidá pole do záznamu.",
        "Documentation.LongDescription": "Přidá pole do záznamu <code>record</code> na základě jeho názvu <code>fieldName</code> a hodnoty <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Přidá pole adresy do záznamu.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Nahradí text v zadaném vstupu.",
        "Documentation.LongDescription": "Nahradí text <code>old</code> v původním záznamu <code>text</code> textem <code>new</code>. Tento nahrazovač lze použít u hodnot <code>List.ReplaceValue</code> a <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Nahradí v řetězci \"hEllo world\" podřetězec \"hE\" podřetězcem \"He\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Nahradí hodnoty v zadaném vstupu.",
        "Documentation.LongDescription": "Nahradí hodnotu <code>old</code> v původním záznamu <code>value</code> hodnotou <code>new</code>. Tento nahrazovač lze použít u hodnot <code>List.ReplaceValue</code> a <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Nahradí hodnotu 11 hodnotou 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Vrátí výsledek JSON z rozhraní Smartsheet API.",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Provede volání rozhraní Smartsheet 2.0 REST API v určeném koncovém bodě a vrátí výsledky jako záznam JSON.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí data z listů koncového bodu rozhraní Smartsheet API s dalšími určenými argumenty.",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabulka s informacemi o listech vrácená rozhraním Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Vrátí funkci, která neprovádí rozdělení, a její argument jako seznam s jedním prvkem.",
        "Documentation.LongDescription": "Vrátí funkci, která neprovádí rozdělení, a její argument jako seznam s jedním prvkem.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě mezer.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě mezer.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup prázdnými znaky, zpracovávat uvozovky jako jakýkoli jiný znak.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Rozdělí tabulku na seznam tabulek na základě zadaného počtu skupin a sloupců.",
        "Documentation.LongDescription": "Rozdělí tabulku <code>table</code> na seznam <code>groups</code> tabulek na základě hodnoty sloupce <code>column</code> a funkce <code>hash</code>.\r\n    Na hodnotu řádku <code>column</code> se použije funkce <code>hash</code> za účelem získání hodnoty hash řádku. Modulo hodnoty hash <code>groups</code> určí, do které z vrácených tabulek bude řádek umístěn.\r\n    <ul>\r\n       <li><code>table</code>: Tabulka, která má být rozdělena.</li>\r\n       <li><code>column</code>: Sloupec rozdělený podle algoritmu hash, který určuje, ve které vrácené tabulce se nachází řádek.</li>\r\n       <li><code>groups</code>: Počet tabulek, na které bude rozdělena vstupní tabulka.</li>\r\n       <li><code>hash</code>: Funkce použitá k získání hodnoty hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rozdělí tabulku <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> na dvě tabulky na sloupci [a] pomocí hodnoty sloupců jako funkce hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Vrátí část z <code>text</code> mezi zadanými <code>startDelimiter</code> a <code>endDelimiter</code>.\r\n    Volitelné číselná hodnota <code>startIndex</code> označuje, který výskyt <code>startDelimiter</code> se má brát.\r\n    Volitelný seznam <code>startIndex</code> označuje, který výskyt <code>startDelimiter</code> se má brát, a také jestli se jeho pořadí má počítat od začátku nebo od konce vstupu.\r\n    <code>endIndex</code> je podobné, akorát že pořadí se počítá relativně vůči <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získat část z „111 (222) 333 (444)“ mezi (první) otevírací závorkou a (první) uzavírací závorkou, která ji následuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Získat část z „111 (222) 333 (444)“ mezi druhou otevírací závorkou a první uzavírací závorkou, která ji následuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Získat část z „111 (222) 333 (444)“ mezi druhou otevírací závorkou od konce a druhou uzavírací závorkou, která ji následuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Vloží jednu textovou hodnotu do jiné na dané pozici.",
        "Documentation.LongDescription": "Vrátí výsledek vložení textové hodnoty <code>newText</code> do textové hodnoty <code>text</code> na pozici <code>offset</code>. Pozice začínají číslem 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Vloží znak „C“ mezi znaky „B“ a „D“ v řetězci „ABD“.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Vrátí nový náhodný globálně jedinečný identifikátor (GUID).",
        "Documentation.LongDescription": "Vrátí nový náhodný globálně jedinečný identifikátor (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Nahradí všechny výskyty daného podřetězce v textu.",
        "Documentation.LongDescription": "Vrátí výsledek nahrazení všech výskytů textové hodnoty <code>old</code> v textové hodnotě <code>text</code> textovou hodnotou <code>new</code>. Funkce rozlišuje velká a malá písmena.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Nahradí všechny výskyty řetězce „the“ ve větě řetězcem „a“.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Odebere rozsah znaků a vloží novou hodnotu na zadané pozici.",
        "Documentation.LongDescription": "Vrátí výsledek odebrání <code>count</code> znaků z textové hodnoty <code>text</code> počínaje na pozici <code>offset</code> a následného vložení textové hodnoty <code>newText</code> na stejné pozici v hodnotě <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Nahradí jediný znak na pozici 2 v textové hodnotě „ABGF“ novou textovou hodnotou „CDE“.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Přidá klíč k danému typu tabulky.",
        "Documentation.LongDescription": "Přidá klíč k danému typu tabulky.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Vrátí seznam identit, které bude podmínka přijímat.",
        "Documentation.LongDescription": "<p>Pomocí zadaného <code>identityProvider</code> převede <code>condition</code> na seznam identit, pro které by <code>condition</code> vrátilo <code>true</code> ve všech kontextech autorizace, ve kterých je poskytovatel identity <code>identityProvider</code>. Pokud <code>condition</code> není možné převést na seznam identit, je vyvolána chyba – například pokud <code>condition</code> při rozhodování konzultuje jiné atributy než identity uživatele nebo skupiny.</p>\r\n    <p>Upozorňujeme, že tento seznam identit představuje identity tak, jak je vnímá <code>condition</code>, a není na nich prováděna žádná normalizace (například rozšíření skupiny).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Zkomprimuje binární hodnotu pomocí zadaného typu komprese.",
        "Documentation.LongDescription": "Zkomprimuje binární hodnotu pomocí zadaného typu komprese. Výsledkem tohoto volání je komprimovaná kopie vstupu. Mezi typy komprese patří:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Zkomprimuje binární hodnotu.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Dekomprimuje binární hodnotu pomocí zadaného typu komprese.",
        "Documentation.LongDescription": "Dekomprimuje binární hodnotu pomocí zadaného typu komprese.  Výsledkem tohoto volání je dekomprimovaná kopie vstupu. Mezi typy komprese patří:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekomprimuje binární hodnotu.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Vrátí podmnožinu binární hodnoty začínající posunem.",
        "Documentation.LongDescription": "Vrátí podmnožinu binární hodnoty začínající posunem <code>binary</code>. Volitelný parametr <code>offset</code> určuje maximální délku podmnožiny.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vrátí podmnožinu binární hodnoty začínající posunem 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Vrátí podmnožinu binární hodnoty o délce 2 od posunu 6.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Rozdělí zadaný binární soubor na seznam binárních souborů pomocí zadané velikosti stránky.",
        "Documentation.LongDescription": "Rozdělí <code>binary</code> do seznamu binárních souborů, kde první prvek výstupního seznamu je binární soubor obsahující prvních <code>pageSize</code> bajtů z\r\n zdrojového binárního souboru, další prvek výstupního seznamu je binární soubor obsahující dalších <code>pageSize</code> bajtů ze zdrojového binárního souboru atd.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Vytvoří nebo rozšíří binární soubor s uživatelsky definovanými obslužnými rutinami pro operace dotazů a akcí.",
        "Documentation.LongDescription": "<p>Vrací zobrazení <code>binary</code>, kde se funkce zadané v <code>handlers</code> používají místo výchozího chování operace při použití dané operace na zobrazení.</p>\r\n<p>Pokud je uvedené <code>binary</code>, jsou všechny funkce obslužné rutiny volitelné. Pokud se <code>binary</code> neuvede, vyžaduje se funkce obslužné rutiny <code>GetStream</code>. Pokud pro operaci není zadaná funkce obslužné rutiny, použije se místo toho výchozí chování operace na <code>binary</code> (s výjimkou <code>GetExpression</code>).</p>\r\n<p>Funkce obslužné rutiny musí vracet hodnotu, která je sémanticky ekvivalentní výsledku použití operace na <code>binary</code> (nebo výsledné zobrazení v případě <code>GetExpression</code>).</p>\r\n<p>Pokud funkce obslužné rutiny vyvolá chybu, použije se na zobrazení výchozí chování operace.</p>\r\n<p><code>Binary.View</code> se dá použít k implementaci sbalení do zdroje dat, pomocí které se přeloží dotazy jazyka M na operace specifické pro zdroj (pro stažení oddílu souboru).</p>\r\n<p>Řiďte se publikovanou dokumentací k vlastnímu konektoru Power Query, ve které najdete podrobnější popis <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vytvořte základní zobrazení, které pro určení délky nevyžaduje přístup k datům.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Vrátí binární formát s pořadím bajtů zadaným funkcí.",
        "Documentation.LongDescription": "Vrátí binární formát s pořadím bajtů zadaným parametrem <code>binaryFormat</code>.  Výchozí pořadí bajtů je <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Vrátí binární formát, který vybírá další binární formát na základě již čtené hodnoty.",
        "Documentation.LongDescription": "Vrátí binární formát, který vybírá další binární formát na základě již čtené hodnoty. Hodnota v binárním formátu vytvořená touto funkcí pracuje v několika fázích:<ul>\r\n<li>Binární formát určený parametrem <code>binaryFormat</code> se používá při čtení hodnoty.</li>\r\n<li>Hodnota je předána funkci výběru, kterou určil parametr <code>chooseFunction</code> .</li>\r\n<li>Funkce výběru zkontroluje hodnotu a vrátí druhý binární formát.</li>\r\n<li>Druhý binární formát přečte druhou hodnotu.</li>\r\n<li>Je-li zadána kombinační funkce, první i druhá hodnota je předána této funkci, což vrátí výslednou hodnotu.</li>\r\n<li>Není-li zadána kombinační funkce, vrátí se jen druhá hodnota.</li>\r\n<li>Vrátí se druhá hodnota.</li>\r\n</ul>Volitelný parametr <code>type</code> určuje typ binárního formátu, který je vrácen zvolenou funkcí. Lze zadat hodnotu <code>type any</code>, <code>type list</code>, nebo <code>type binary</code>. Není-li zadán parametr <code>type</code>, použije se hodnota <code>type any</code>. Pokud se použije hodnota <code>type list</code> nebo hodnota <code>type binary</code>, systém může případně vrátit hodnotu datového proudu <code>binary</code> nebo <code>list</code> místo hodnoty z vyrovnávací paměti, což sníží množství paměti nutné k přečtení formátu.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Čte seznam bajtů, kde je počet elementů určen prvním bajtem.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Čte seznam bajtů, kde je počet elementů určen prvním bajtem, a zachová první čtený bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "S využitím datového proudu čte seznam bajtů, ve kterém je počet elementů určen prvním bajtem.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Vrátí binární formát, který čte skupinu položek.",
        "Documentation.LongDescription": "Parametry jsou následující:\r\n<ul>\r\n<li>Parametr <code>binaryFormat</code> určuje binární formát hodnoty klíče.</li>\r\n<li>Parametr <code>group</code> poskytuje informace o skupině známých položek.</li>\r\n<li>Volitelný parametr <code>extra</code> se může použít, pokud chcete zadat funkci, která vrátí hodnotu v binárním formátu u hodnot, které následují po neočekávaném klíči. Když parametr <code>extra</code> není zadaný a zjistí se neočekávané hodnoty klíče, zobrazí se chybová zpráva.</li>\r\n</ul>\r\nParametr <code>group</code> určuje seznam definic položky. Každou položku definuje seznam obsahující 3 až 5 následujících hodnot:\r\n<ul>\r\n<li>Hodnota klíče. Hodnota klíče, která odpovídá položce. Ta musí být v rámci sady položek jedinečná.</li>\r\n<li>Formát položky. Binární formát, který odpovídá hodnotě položky. To umožní každé položce, aby měla jiný formát. </li>\r\n<li>Výskyt položky. Hodnota <code>BinaryOccurrence.Type</code> uvádí, kolikrát se má položka ve skupině objevit. Pokud chybí požadované položky, dojde k chybě. Požadované nebo volitelné duplicitní položky se zpracují jako neočekávané hodnoty klíče.</li>\r\n<li>Hodnota výchozí položky (volitelné). Pokud se v seznamu definic položky objeví hodnota výchozí položky a není null, použije se místo výchozího nastavení. Výchozí nastavení pro opakované nebo volitelné položky je null a výchozí nastavení pro opakované hodnoty je prázdný seznam { }.</li>\r\n<li>Transformace hodnoty položky (volitelné). Pokud se v seznamu definic položky objeví funkce transformace hodnoty položky a není null, vyvolá se, aby změnila hodnotu položky předtím, než se vrátí. Funkce transformace se vyvolá, jenom pokud se položka objeví ve vstupu (nikdy ji nevyvolá výchozí hodnota). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Následující situace předpokládá hodnotu klíče ve formě jednoho bajtu se čtyřmi očekávanými položkami ve skupině. U každé z nich po klíči následuje bajt dat. Položky se ve vstupu zobrazí takto:\r\n<ul>\r\n<li>Klíč 1 je požadovaný a zobrazí se s hodnotou 11.</li>\r\n<li>Klíč 2 se opakuje a zobrazí se dvakrát s hodnotou 22. Výsledkem je hodnota { 22, 22 }.</li>\r\n<li>Klíč 3 je volitelný a nezobrazí se. Výsledkem je hodnota null.</li>\r\n<li>Klíč 4 se opakuje, ale nezobrazí se. Výsledkem je hodnota { }.</li>\r\n<li>Klíč 5 není součástí skupiny, ale zobrazí se jednou s hodnotou 55. Hodnota klíče 5 vyvolá další funkci a vrátí formát, který odpovídá dané hodnotě (BinaryFormat.Byte). Čte se hodnota 55 a pak se zahodí.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Následující příklad ukazuje změnu hodnoty položky a výchozí hodnotu položky. Opakovaná položka s klíčem 1 sečte seznam čtených hodnot za použití funkce List.Sum. Volitelná položka s klíčem 2 má výchozí hodnotu 123 místo null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Vrátí binární formát omezující množství dat, které lze číst.",
        "Documentation.LongDescription": "Vrátí binární formát omezující množství dat, které lze číst. Funkce <code>BinaryFormat.List</code> a <code>BinaryFormat.Binary</code> lze použít ke čtení až na konec dat. Funkci <code>BinaryFormat.Length</code> lze použít k omezení počtu bajtů, které se mají číst. Parametr <code>binaryFormat</code> určuje binární formát, který má být omezen. Parametr <code>length</code> určuje počet bajtů ke čtení. Parametr <code>length</code> může být číselná hodnota nebo hodnota binárního formátu. Určuje formát délky zobrazené hodnoty, která předchází právě čtené hodnotě.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Omezit počet čtených bajtů na 2 při čtení seznamu bajtů",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Omezte počet čtených bajtů při čtení seznamu bajtů na hodnotu bajtu předcházející seznamu.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Vrátí binární formát, který transformuje hodnoty přečtené jiným binárním formátem.",
        "Documentation.LongDescription": "Vrátí binární formát, který transformuje hodnoty přečtené jiným binárním formátem. Parametr <code>binaryFormat</code> určuje binární formát, který bude použit ke čtení hodnoty. Funkce <code>function</code> volána s přečtenou hodnotou a vrátí transformovanou hodnotu.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Číst bajt a přidat k němu jeden další",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Vrátí funkci porovnávače, která pro porovnání hodnot používá pravidla řadových číslovek.",
        "Documentation.LongDescription": "Vrátí porovnávací funkci, která pomocí řadových pravidel porovnává zadané hodnoty <code>x</code> a <code>y</code>.<br>\r\n      <br>\r\n      Porovnávací funkce přijímá dva argumenty a vrací -1, 0 nebo 1 na základě toho, zda je první hodnota menší než, rovna nebo větší než druhá.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Pomocí pravidel řadových číslovek porovná, jestli jsou zadání „encyclopædia“ a „encyclopaedia“ ekvivalentní. Poznámka: Zadání jsou vyhodnocena jako ekvivalentní při použití funkce <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Vrátí funkci porovnávače bez rozlišení malých a velkých písmen, která pro porovnání hodnot používá pravidla řadových číslovek.",
        "Documentation.LongDescription": "Vrátí porovnávací funkci bez rozlišování malých a velkých písmen, která pomocí řadových pravidel porovnává zadané hodnoty  <code>x</code> a <code>y</code>.<br>\r\n        <br>\r\n        Porovnávací funkce přijímá dva argumenty a vrací -1, 0 nebo 1 podle toho, jestli je první hodnota menší než, rovna,  nebo větší než druhá.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Pomocí pravidel řadových číslovek bez rozlišení malých a velkých písmen můžete porovnat řetězec Abc s řetězcem abc. Při použití příkazu <code>Comparer.Ordinal</code> je Abc menší než abc. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Vrátí vlastnost atributu dimenze.",
        "Documentation.LongDescription": "Vrátí vlastnost <code>propertyName</code> atributu dimenze <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Vrátí vlastnost míry (vlastnost buňky).",
        "Documentation.LongDescription": "Vrátí vlastnost <code>propertyName</code> atributu míry <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Zdroj dotazu SQL Databricks",
        "Documentation.LongDescription": "Definování zdroje dat Databricks pro spouštění dotazů SQL"
      },
      "ReturnType": "Dotaz SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Zdroj dotazu SQL Databricks",
        "Documentation.LongDescription": "Definování zdroje dat Databricks pro spouštění dotazů SQL"
      },
      "ReturnType": "Dotaz SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Přičte zadaný počet dní k datu.",
        "Documentation.LongDescription": "Vrátí výsledek <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> z přičtení <code>numberOfDays</code> dní k hodnotě <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ke které se přičítají dny.</li>\r\n      <li><code>numberOfDays</code>: Počet dní, které se mají přičíst.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Přičíst 5 dní k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Přičte zadaný počet měsíců k datu.",
        "Documentation.LongDescription": "Vrátí výsledek <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> z přičtení <code>numberOfMonths</code> měsíců k hodnotě <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ke které se přičítají měsíce.</li>\r\n        <li><code>numberOfMonths</code>: Počet měsíců, které se mají přičíst.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Přičíst 5 měsíců k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Přičíst 18 měsíců k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011, čas 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Přičte zadaný počet čtvrtletí k datu.",
        "Documentation.LongDescription": "Vrátí výsledek <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> z přičtení <code>numberOfQuarters</code> čtvrtletí k hodnotě <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ke které se přičítají čtvrtletí.</li>\r\n      <li><code>numberOfQuarters</code>: Počet čtvrtletí, které se mají přičíst.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Přičíst 1 čtvrtletí k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Přičte zadaný počet týdnů k datu.",
        "Documentation.LongDescription": "Vrátí výsledek <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> z přičtení <code>numberOfWeeks</code> týdnů k hodnotě <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ke které se přičítají týdny.</li>\r\n      <li><code>numberOfWeeks</code>: Počet týdnů, které se mají přičíst.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Přičíst 2 týdny k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Přičte zadaný počet roků k datu.",
        "Documentation.LongDescription": "Vrátí výsledek <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> z přičtení <code>numberOfYears</code> roků k hodnotě <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ke které se přičítají roky.</li>\r\n        <li><code>numberOfYears</code>: Počet roků, které se mají přičíst.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Přičíst 4 roky k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Přičíst 10 let k hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011, čas 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu následujích dní vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících dní vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>days</code>: Počet dní</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda den následující po aktuálním systémovém čase spadá do následujících dvou dní.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu následujících měsíců vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících měsíců vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>months</code>: Počet měsíců</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda měsíc následující po aktuálním systémovém čase spadá do následujících dvou měsíců.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu následujících čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>quarters</code>: Počet čtvrtletí</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda čtvrtletí následující po aktuálním systémovém čase spadá do následujících dvou čtvrtletí.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu následujících týdnů vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících týdnů vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>weeks</code>: Počet týdnů</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda týden následující po aktuálním systémovém čase spadá do následujících dvou týdnů.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu následujících roků vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících roků vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>years</code>: Počet roků</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda rok následující po aktuálním systémovém čase spadá do následujících dvou roků.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu přechozích dní vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích dní vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>days</code>: Počet dní</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda den předcházející aktuálnímu systémovému času spadá do předchozích dvou dní.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu předchozích měsíců vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích měsíců vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>months</code>: Počet měsíců</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda měsíc předcházející aktuálnímu systémovému času spadá do předchozích dvou měsíců.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu předchozích čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>quarters</code>: Počet čtvrtletí</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda čtvrtletí předcházející aktuálnímu systémovému času spadá do předchozích dvou čtvrtletí.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu předchozích týdnů vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích týdnů vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>weeks</code>: Počet týdnů</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda týden předcházející aktuálnímu systémovému času spadá do předchozích dvou týdnů.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Označuje, jestli toto datum spadá do určitého počtu předchozích roků vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích roků vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, která má být vyhodnocena</li>\r\n      <li><code>years</code>: Počet roků</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda rok předcházející aktuálnímu systémovému času spadá do předchozích dvou roků.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Přidá informace o časovém pásmu do hodnoty datetime.",
        "Documentation.LongDescription": "Přidá informace o časovém pásmu do hodnoty <code>dateTime</code>. Informace o časovém pásmu zahrnují <code>timezoneHours</code> a volitelně <code>timezoneMinutes</code>, které určují požadovaný posun od času UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nastaví časové pásmo na UTC+7:30 (7 hodin a 30 minut po UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu následujících hodin vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících hodin vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>hours</code>: Počet hodin.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli hodina následující po hodině určené aktuálním systémovým časem spadá do příštích dvou hodin.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu následujících minut vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících minut vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>minutes</code>: Počet minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli minuta následující po minutě určené aktuálním systémovým časem spadá do příštích dvou minut.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu následujících sekund vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu následujících sekund vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>seconds</code>: Počet sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli sekunda následující po sekundě určené aktuálním systémovým časem spadá do příštích dvou sekund.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu předchozích hodin vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích hodin vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>hours</code>: Počet hodin.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli hodina předcházející hodině určené aktuálním systémovým časem spadá do předchozích dvou hodin.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu předchozích minut vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích minut vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>minutes</code>: Počet minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli minuta předcházející minutě určené aktuálním systémovým časem spadá do předchozích dvou minut.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do určitého počtu předchozích sekund vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do určitého počtu předchozích sekund vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      <li><code>seconds</code>: Počet sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli sekunda předcházející sekundě určené aktuálním systémovým časem spadá do předchozích dvou sekund.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Změní časové pásmo hodnoty.",
        "Documentation.LongDescription": "Změní údaj o časovém pásmu v hodnotě datetimezone <code>dateTimeZone</code> na nový údaj o časovém pásmu vrácený z <code>timezoneHours</code> a volitelně <code>timezoneMinutes</code>.\r\n    Pokud <code>dateTimeZone</code> neobsahuje komponentu časového pásma, je vrácena výjimka.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Změnit údaj o časovém pásmu pro hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na 8 hodin",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Změnit informace o časovém pásmu pro hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na -30 minut.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Umožňuje přístup k vestavěné hybridní webové aplikaci na základě jejího názvu.",
        "Documentation.LongDescription": "Umožňuje přístup k vestavěné hybridní webové aplikaci na základě jejího názvu.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Vytváří funkci s konkrétním podpisem parametru nad funkcí, která přijímá jeden argument typu seznam",
        "Documentation.LongDescription": "Vezme unární funkci <code>function</code> a vytvoří novou funkci s typem <code>functionType</code>, která sestaví seznam ze svých argumentů a předá ho do funkce <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Převede List.Sum na funkci se dvěma argumenty, jejíž argumenty se dají dohromady",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Převede funkci, která přijímá jako vstup seznam, na funkci se dvěma argumenty",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Zavolá předanou funkci.",
        "Documentation.LongDescription": "Zavolá předanou funkci s předaným seznamem argumentů a vrátí výsledek.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Zavolá funkci Record.FieldNames s jedním argumentem [A=1,B=2].",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Vyvolá danou funkci po uplynutí zadané doby.",
        "Documentation.LongDescription": "Vrátí výsledek vyvolání funkce <code>function</code> po uplynutí doby <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Vytvoří skalární funkci nad vektorovou funkcí, dávkuje se více volání.",
        "Documentation.LongDescription": "<p>Vrátí skalární funkci typu <code>scalarFunctionType</code>, která volá <code>vectorFunction</code> s jedním řádkem argumentů a vrátí jeden výstup. Kromě toho, když je tato skalární funkce opakovaně použita pro každý řádek tabulky vstupů, například v Table.AddColumn, použije se místo toho <code>vectorFunction</code> jednou pro všechny vstupy.</p>\r\n<p><code>vectorFunction</code> se předá jako tabulka, jejíž sloupce odpovídají názvu a pozici parametrů v <code>scalarFunctionType</code>. Každý řádek v této tabulce obsahuje argumenty pro jedno volání dané skalární funkce se sloupci odpovídajícími parametrům v <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> musí vrátit seznam stejné délky jako vstupní tabulka a položky tohoto seznamu na každé pozici musí být stejný výsledek, jaký by přineslo vyhodnocení skalární funkce na vstupním řádku na stejné pozici.</p>\r\n<p>Očekává se, že vstupní tabulka bude dodána streamem, takže se očekává, že <code>vectorFunction</code> bude streamovat svůj výstup průběžně s tím, jak bude přicházet vstup. Vždy se bude současně pracovat jen s jedním blokem dat. Především nesmí <code>vectorFunction</code> provést výčet vstupní tabulky více než jednou.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Vytvoří záznam reprezentující geografický bod ze součástí.",
        "Documentation.LongDescription": "Vytvoří záznam reprezentující geografický bod ze součástí, jako jsou zeměpisná délka, zeměpisná šířka a pokud existují, nadmořská výška (Z) a míra (M). Pokud se liší od výchozí hodnoty (4326), můžete uvést nepovinný identifikátor prostorové reference (SRID).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Vytvoří záznam reprezentující geometrický bod ze součástí.",
        "Documentation.LongDescription": "Vytvoří záznam reprezentující geografický bod ze součástí, jako jsou souřadnice X, souřadnice Y, a pokud existují, souřadnice Z a míra Z (M). Pokud se liší od výchozí hodnoty (0), můžete uvést nepovinný identifikátor prostorové reference (SRID).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Vytvoří identitu.",
        "Documentation.LongDescription": "Vytvoří identitu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Určuje, jestli je identita členem kolekce identit.",
        "Documentation.LongDescription": "Určuje, jestli je identita členem kolekce identit.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Vrátí seznam složený ze všech prvků odsazení s lichými čísly v seznamu.",
        "Documentation.LongDescription": "Vrátí seznam složený ze všech prvků odsazení s lichými čísly v seznamu. Alternuje mezi přebíráním a přeskakování hodnot v seznamu <code>list</code> v závislosti na parametrech.\r\n    <ul>\r\n    <li><code>count</code>: Určuje počet hodnot, které jsou pokaždé vynechány.</li>\r\n    <li><code>repeatInterval</code>: Volitelný interval opakování, který značí, kolik hodnot je přičteno mezi přeskočenými hodnotami.</li>\r\n    <li><code>offset</code>: Volitelný parametr odsazení, jehož pomocí lze určit odsazení, po kterém začnou být přeskakovány hodnoty.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam z rozsahu {1..10}, který přeskočí první číslo.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Vytvoří seznam z rozsahu {1..10}, který přeskočí každé druhé číslo.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Vytvoří seznam z rozsahu {1..10}, který začne položkou jedna a přeskočí každé druhé číslo.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Vytvoří seznam z rozsahu {1..10}, který začne položkou jedna, přeskočí jednu hodnotu, zachová dvě hodnoty atd.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Značí, zda seznam obsahuje hodnotu.",
        "Documentation.LongDescription": "Značí, zda seznam <code>list</code> obsahuje hodnotu <code>value</code>.\r\n    Vrátí hodnotu True, pokud je hodnota nalezena v seznamu, jinak vrátí hodnotu False. K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnotu 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnotu 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Značí, kde seznam obsahuje všechny hodnoty jiného seznamu.",
        "Documentation.LongDescription": "Značí, zda seznam <code>list</code> obsahuje všechny hodnoty jiného seznamu <code>values</code>.\r\n    Vrátí hodnotu True pokud je hodnota nalezena v seznamu, jinak vrátí hodnotu False. K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnoty 3 a 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnoty 5 a 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Značí, kde seznam obsahuje jakoukoliv hodnotu jiného seznamu.",
        "Documentation.LongDescription": "Značí, zda seznam <code>list</code> obsahuje jakoukoliv hodnotu v jiném seznamu <code>values</code>.\r\n        Vrátí hodnotu True, pokud je hodnota nalezena v seznamu, jinak vrátí hodnotu False. K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnotu 3 nebo 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 4, 5} obsahuje hodnotu 6 nebo 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Vrátí kovarianci mezi dvěma seznamy čísel.",
        "Documentation.LongDescription": "Vrátí kovarianci mezi dvěma seznamy <code>numberList1</code> a <code>numberList2</code>. Seznamy <code>numberList1</code> a <code>numberList2</code> musí obsahovat stejný počet hodnot <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Vypočítá kovarianci mezi dvěma seznamy.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Vrátí rozdíl mezi dvěma danými seznamy.",
        "Documentation.LongDescription": "Vrátí položky seznamu <code>list1</code>, které nejsou v seznamu <code>list2</code>. Duplicitní hodnoty jsou podporovány.\r\n    K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Zjistí položky seznamu {1, 2, 3, 4, 5}, které nejsou v seznamu {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Zjistí položky seznamu {1, 2}, které nejsou v seznamu {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Vrátí seznam hodnot (včetně polí záznamů), které obsahují zadaný text.",
        "Documentation.LongDescription": "Vrátí seznam hodnot seznamu <code>list</code>, které obsahují hodnotu <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá v seznamu {\"a\", \"b\", \"ab\"} textové hodnoty, které odpovídají textu a. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Vrátí první sadu položek v seznamu na základě určení počtu položek k vrácení nebo kvalifikující podmínky.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Pokud je zadané číslo, vrátí sadu položek obsahující maximálně tolik položek, kolik určuje toto číslo. </li>\r\n  <li>Pokud je zadaná podmínka, vrátí všechny položky, které podmínku splňují. Pokud jakákoliv položka podmínku nesplňuje, už se další položky po této položce nezpracují. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá v seznamu {3, 4, 5, -1, 7, 8, 2} výchozí hodnoty, které jsou větší než 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Vrátí hodnotu True, pokud funkci podmínky splňují všechny hodnoty v seznamu.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>true</code>, pokud funkci podmínky <code>condition</code> splňují všechny hodnoty v seznamu <code>list</code>, jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda jsou všechny hodnoty v seznamu {11, 12, 13} větší než 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Určí, zda jsou všechny hodnoty v seznamu {1, 2, 3} větší než 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Vrátí hodnotu True, pokud funkci podmínky splňuje jakákoliv hodnota v seznamu.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>true</code>, pokud funkci podmínky <code>condition</code> splňuje jakákoliv hodnota v seznamu <code>list</code>, jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda je jakákoliv hodnota v seznamu {9, 10, 11} větší než 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda je jakákoliv hodnota v seznamu {1, 2, 3} větší než 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Vrátí maximální hodnotu (hodnoty) v seznamu. Je nutné zadat počet hodnot, který se má vrátit, nebo podmínku filtrování.",
        "Documentation.LongDescription": "Vrátí maximální hodnotu (hodnoty) v seznamu, <code>list</code>.\r\n    Po seřazení parametrů lze zadat volitelné parametry a dále jejich pomocí filtrovat výsledky. Volitelný parametr <code>countOrCondition</code> určuje počet hodnot, který se má vrátit, nebo podmínku filtrování. Volitelný parametr <code>comparisonCriteria</code> určuje, jak se mají porovnat hodnoty v seznamu.\r\n <ul>\r\n        <li> <code>list</code>: Seznam hodnot</li>\r\n        <li> <code>countOrCondition</code>: Pokud je zadáno číslo, je vrácen seznam až <code>countOrCondition</code> položek ve vzestupném pořadí. Pokud je zadána podmínka, vrátí se seznam všech položek, které splňují tuto podmínku. Pokud jakákoliv položka podmínku nesplňuje, nejsou již další položky po této položce zpracovány.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> a určit její pomocí způsob porovnání položek v seznamu. Pokud má parametr hodnotu null, použije se výchozí porovnávač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Vrátí minimální hodnotu (hodnoty) v seznamu. Lze zadat počet hodnot, který se má vrátit, nebo podmínku filtrování.",
        "Documentation.LongDescription": "Vrátí minimální hodnotu (hodnoty) v seznamu, <code>list</code>.\r\n    Parametr <code>countOrCondition</code> určuje počet hodnot, který se má vrátit, nebo podmínku filtrování. Volitelný parametr <code>comparisonCriteria</code> určuje, jak se mají porovnat hodnoty v seznamu.\r\n <ul>\r\n        <li> <code>list</code>: Seznam hodnot</li>\r\n        <li> <code>countOrCondition</code>: Pokud je zadáno číslo, je vrácen seznam až <code>countOrCondition</code> položek ve vzestupném pořadí. Pokud je zadána podmínka, vrátí se seznam všech položek, které splňují tuto podmínku. Pokud jakákoliv položka podmínku nesplňuje, nejsou již další položky po této položce zpracovány. Pokud má tento parametr hodnotu null, je vrácena jediná nejmenší hodnota v seznamu.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> a určit její pomocí způsob porovnání položek v seznamu. Pokud má parametr hodnotu null, použije se výchozí porovnávač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá 5 nejnižších hodnot v seznamu <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Vrátí seznam čísel na základě předané počáteční hodnoty, počtu hodnot a volitelné hodnoty přírůstku.",
        "Documentation.LongDescription": "Vrátí seznam čísel na základě předané počáteční hodnoty, počtu hodnot a volitelné hodnoty přírůstku. Výchozí hodnota přírůstku je 1.\r\n<ul>\r\n   <li><code>start</code>: Počáteční hodnota seznamu.</li>\r\n   <li><code>count</code>: Počet hodnot, které mají být vytvořeny.</li>\r\n   <li><code>increment</code>: <i>[Volitelné]</i> Hodnota přírůstku. Pokud je tato hodnota vynechána, hodnoty narůstají o hodnotu 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vygeneruje seznam 10 po sobě jdoucích čísel začínající hodnotou 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Vygeneruje seznam 10 čísel začínající číslem 1. Každé další číslo v seznamu je o 2 vyšší než předchozí.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Vrátí jeden nebo více vzorků percentilů, které odpovídají daným pravděpodobnostem.",
        "Documentation.LongDescription": "Vrátí jeden nebo více dílčích percentilů seznamu <code>list</code>. Pokud je hodnota <code>percentiles</code> číslo mezi 0,0 a 1,0, zpracuje se jako percentil a výsledek bude\r\n    jedna hodnota odpovídající této pravděpodobnosti Pokud je hodnota <code>percentiles</code> seznam čísel s hodnotami mezi 0,0 a 1,0, bude výsledkem seznam percentilů.\r\n    odpovídající pravděpodobnosti vstupu. Možnost PercentileMode v <code>options</code> můžou používat pokročilí uživatelé pro výběr konkrétnější metody interpolace, pro většinu použití se ale nedoporučuje.\r\n    Předdefinované symboly <code>PercentileMode.ExcelInc</code> a <code>PercentileMode.ExcelExc</code> odpovídají metodám interpolace používaným funkcemi Excel\r\n    <code>PERCENTIL. INC</code> a <code>PERCENTILE.EXC</code>. Výchozí chování odpovídá <code>PercentileMode.ExcelInc</code>. Symboly\r\n    <code>PercentileMode.SqlCont</code> a <code>PercentileMode.SqlDisc</code> odpovídají chování SQL Server pro<code>PERCENTILE_CONT</code> a\r\n    <code>PERCENTILE_DISC</code> v uvedeném pořadí.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá první kvartil v seznamu <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Najděte kvartily seznamu <code> {5, 3, 1, 7, 9} </code> pomocí metody interpolace odpovídající <code>PERCENTILE.EXC</code> v Excelu.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Vrátí posunutí hodnoty v seznamu.",
        "Documentation.LongDescription": "Vrátí posunutí hodnoty <code>value</code> v seznamu <code>list</code>. Pokud se hodnota v seznamu nevyskytuje, vrátí hodnotu -1.\r\n    Lze zadat volitelný parametr výskytu <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maximální počet výskytů k ohlášení.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá pozici v seznamu {1, 2, 3}, na které se vyskytuje hodnota 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Vrátí první posunutí hodnoty v seznamu.",
        "Documentation.LongDescription": "Vrátí posunutí prvního výskytu hodnoty v seznamu <code>values</code> v seznamu <code>list</code>. Pokud není nalezen žádný výskyt, vrátí hodnotu -1.\r\n    Lze zadat volitelný parametr výskytu <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maximální počet výskytů, který se může vrátit.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá první pozici v seznamu {1, 2, 3}, na které se vyskytuje hodnota 2 nebo 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Vrátí podmnožinu seznamu počínaje posunutím.",
        "Documentation.LongDescription": "Vrátí podmnožinu seznamu počínaje posunutím <code>list</code>. Volitelný parametr <code>offset</code> určuje maximální počet položek v podmnožině.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá podmnožinu seznamu čísel 1 až 10 počínaje posunutím o hodnotu 6.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Vrátí podmnožinu o délce 2 položky počínaje posunutím 6 ze seznamu čísel od 1 do 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Odebere ze seznamu list1 položky, které jsou v seznamu list.",
        "Documentation.LongDescription": "Odebere všechny výskyty daných hodnot v seznamu <code>list2</code> ze seznamu <code>list1</code>. Pokud hodnoty v seznamu <code>list2</code> v seznamu <code>list1</code> neexistují, je vrácen původní seznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odebere ze seznamu {1, 2, 3, 4, 2, 5, 5} položky seznamu {2, 4, 6}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Odebere všechny výskyty vstupních hodnot.",
        "Documentation.LongDescription": "Odebere všechny výskyty daných hodnot v seznamu <code>list2</code> ze seznamu <code>list1</code>. Pokud hodnoty v seznamu <code>list2</code> v seznamu <code>list1</code> neexistují, je vrácen původní seznam.\r\n    K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří ze seznamu {1, 2, 3, 4, 5, 5} seznam bez hodnot {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Odebere počet hodnot počínaje na určené pozici.",
        "Documentation.LongDescription": "Odebere <code>count</code> hodnot seznamu <code>list</code> počínaje na zadané pozici <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odebere 3 hodnoty seznamu {1, 2, 3, 4, -6, -2, -1, 5} počínaje indexem 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Vrátí seznam obsahující určený počet opakování původního seznamu.",
        "Documentation.LongDescription": "Vrátí seznam který obsahuje <code>count</code> opakování původního seznamu <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam, který obsahuje 3 opakování seznamu {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Použije každé nahrazení { old, new }.",
        "Documentation.LongDescription": "Provede předaná nahrazení v seznamu <code>list</code>. Operace nahrazení <code>replacements</code> pracuje se seznamem dvou hodnot, staré hodnoty a nové hodnoty, předaných v seznamu.\r\n    K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam ze seznamu {1, 2, 3, 4, 5}, přičemž nahradí hodnotu 5 hodnotou -5 a hodnotu 1 hodnotou -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Vrátí seznam hodnot, které splňují podmínku.",
        "Documentation.LongDescription": "Vrátí seznam hodnot v seznamu <code>list</code>, které splňují podmínku výběru <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá v seznamu {1, -3, 4, 9, -2} hodnoty, které jsou větší než 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Rozdělí zadaný seznam do seznamu seznamů s použitím zadané velikosti stránky.",
        "Documentation.LongDescription": "Rozdělí <code>list</code> do seznamu seznamů, kde první prvek výstupního seznamu je seznam s prvními <code>pageSize</code> prvky ze zdrojového seznamu,\r\n    další prvek výstupního seznamu je seznam s dalšími <code>pageSize</code> prvky ze zdrojového seznamu atd.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Vrátí nový seznam hodnot vypočítaný z tohoto seznamu.",
        "Documentation.LongDescription": "Vrátí nový seznam hodnot na základě použití transformační funkce <code>transform</code> se seznamem <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Přičte 1 ke každé hodnotě v seznamu {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Vrátí arkus tangens podílu dvou čísel.",
        "Documentation.LongDescription": "Vrátí arkus tangens podílu dvou čísel <code>y</code> a <code>x</code>. Podíl bude vypočten ve formátu <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Vrátí výsledek provedení bitové operace And mezi dvěma vstupy.",
        "Documentation.LongDescription": "Vrátí výsledek provedení bitové operace And mezi hodnotami <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Vrátí výsledek provedení bitové operace Or mezi dvěma vstupy.",
        "Documentation.LongDescription": "Vrátí výsledek provedení bitové operace Or mezi hodnotami <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Posune sadu bitů doleva.",
        "Documentation.LongDescription": "Vrátí výsledek bitového posunu hodnoty <code>number1</code> směrem doleva o zadaný počet bitů <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Posune sadu bitů doprava.",
        "Documentation.LongDescription": "Vrátí výsledek bitového posunu hodnoty <code>number1</code> směrem doprava o zadaný počet bitů <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Vrátí výsledek provedení bitové operace XOR (exkluzivní disjunkce OR) mezi dvěma vstupy.",
        "Documentation.LongDescription": "Vrátí výsledek provedení bitové operace XOR (exkluzivní disjunkce OR) mezi hodnotami <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Vrátí počet jedinečných kombinací.",
        "Documentation.LongDescription": "Vrátí počet jedinečných kombinací položek seznamu <code>setSize</code> se zadanou velikostí kombinace <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Počet položek v seznamu.</li>\r\n    <li><code>combinationSize</code>: Počet položek v každé kombinaci.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Zjistí počet kombinací celkového počtu pěti položek, pokud je každá kombinace skupina tří položek.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Provede dělení dvou čísel a vrátí celočíselnou část výsledku.",
        "Documentation.LongDescription": "Vrátí celočíselnou část výsledku dělení čísla <code>number1</code> číslem <code>number2</code>.\r\n    Pokud je hodnota <code>number1</code> nebo <code>number2</code> null, funkce <code>Number.IntegerDivide</code> vrátí hodnotu null.\r\n      <ul>\r\n        <li><code>number1</code>: Dělenec</li>\r\n        <li><code>number2</code>: Dělitel</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vydělí číslo 6 číslem 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Vydělí číslo 8,3 číslem 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Provede celočíselné dělení dvou čísel a vrátí zbytek.",
        "Documentation.LongDescription": "Vrátí zbytek celočíselného dělení čísla <code>number</code> číslem <code>divisor</code>.\r\n    Pokud je hodnota <code>number</code> nebo <code>divisor</code> null, funkce <code>Number.Mod</code> vrátí hodnotu null.\r\n      <ul>\r\n        <li><code>number</code>: Dělenec</li>\r\n        <li><code>divisor</code>: Dělitel</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Zjistí zbytek po dělení čísla 5 číslem 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Vrátí počet permutací.",
        "Documentation.LongDescription": "Vrátí počet permutací, které lze vygenerovat z počtu položek <code>setSize</code> se zadanou velikostí permutace <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Zjistí počet permutací celkového počtu 5 položek ve skupinách po 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Umocní číslo daným exponentem.",
        "Documentation.LongDescription": "Vrátí výsledek umocnění čísla <code>number</code> exponentem <code>power</code>.\r\n    Pokud je hodnota <code>number</code> nebo <code>power</code> null, funkce <code>Number.Power</code> vrátí hodnotu null.\r\n      <ul>\r\n        <li><code>number</code>: Základ</li>\r\n        <li><code>power</code>: Exponent</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnotu 5 umocněnou exponentem 3.",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Vrátí náhodné číslo v rozsahu určeném dvěma čísly.",
        "Documentation.LongDescription": "Vrátí náhodné číslo v rozsahu určeném čísly <code>bottom</code> a <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Vrátí náhodné číslo v intervalu 1 až 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Vrátí hodnotu zadaného pole záznamu.",
        "Documentation.LongDescription": "Vrátí hodnotu zadaného pole <code>field</code> záznamu <code>record</code>. Pokud pole není nalezeno, je vržena výjimka.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnotu pole CustomerID záznamu.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Vrátí hodnotu zadaného pole záznamu nebo výchozí hodnotu, pokud pole není nalezeno.",
        "Documentation.LongDescription": "Vrátí hodnotu zadaného pole <code>field</code> záznamu <code>record</code>. Pokud pole není nalezeno, vrátí se volitelná hodnota <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnotu pole Phone záznamu nebo hodnotu null, pokud neexistuje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Vrátí hodnotu pole Phone záznamu nebo výchozí hodnotu, pokud neexistuje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Vrátí záznam na základě seznamu hodnot polí a sady polí.",
        "Documentation.LongDescription": "Vrátí záznam na základě seznamu hodnot polí <code>list</code> a sady polí.  Záznam <code>fields</code> lze zadat pomocí seznamu textových hodnot nebo typu záznamu.  Pokud pole nejsou jedinečná, je vržena chyba.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří záznam na základě seznamu hodnot polí a seznamu názvů polí.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Vytvoří záznam na základě seznamu hodnot polí a typu záznamu.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Značí, zda má záznam zadaná pole.",
        "Documentation.LongDescription": "Vrácením logické hodnoty značí, zda má záznam <code>record</code> pole zadaná ve výrazu <code>fields</code>.\r\n    Pomocí seznamu lze zadat více hodnot polí.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, jestli záznam obsahuje pole CustomerID.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Zjistí, jestli záznam obsahuje pole CustomerID a Address.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Odebere zadaná pole ze vstupního záznamu.",
        "Documentation.LongDescription": "Vrátí záznam, který odebere všechna pole určená v seznamu <code>fields</code> ze vstupu <code>record</code>. Pokud zadané pole neexistuje, vrhne výjimku.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odebere pole Price ze záznamu.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Odebere pole Price a Item ze záznamu.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Použije přejmenování ze seznamu ve formátu { old, new }.",
        "Documentation.LongDescription": "Vrátí záznam po přejmenování polí ve vstupu <code>record</code> na nové názvy zadané v seznamu <code>renames</code>. K provedení více přejmenování lze použít vnořený seznam ({ {starý1, nový1}, {starý2, nový2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Přejmenuje pole UnitPrice v záznamu na pole Price.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Přejmenuje pole UnitPrice a OrderNum v záznamu na pole Price a OrderID.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Změní pořadí zadaných polí.",
        "Documentation.LongDescription": "Vrátí záznam po změně pořadí polí v záznamu <code>record</code> podle pořadí určeného v seznamu <code>fieldOrder</code>. Hodnoty polí jsou zachovány a pole, která nejsou uvedena v seznamu <code>fieldOrder</code>, jsou ponechána na původních pozicích.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Změní pořadí některých polí v záznamu.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Vrátí záznam, který obsahuje pouze zadaná pole.",
        "Documentation.LongDescription": "Vrátí záznam, který obsahuje pouze pole určená v seznamu <code>fields</code> ze vstupu <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vybere pole Item a Price v záznamu.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Provede zadané transformace a vrátí výsledný záznam.",
        "Documentation.LongDescription": "Provede transformace zadané v seznamu <code>transformOperations</code> v záznamu <code>record</code> a vrátí výsledný záznam.\r\n    V jednu chvíli lze transformovat jedno nebo více polí.\r\n      <div>Při transformaci jednoho pole se očekává, že je hodnota <code>transformOperations</code> seznam se dvěma položkami. První položka v seznamu <code>transformOperations</code> určuje název pole a druhá položka v seznamu <code>transformOperations</code> určuje funkci, která se má použít k transformaci. Příklad: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Pokud je transformováno více polí, očekává se, že je hodnota <code>transformOperations</code> seznam seznamů, ve kterém každý vnořený seznam obsahuje pár tvořený názvem pole a operací transformace. Příklad: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Převede pole Cena na číslo.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Převede pole OrderID a Cena na čísla.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textů na základě přechodu z jednoho druhu znaků na jiný. Parametry {0} a {1} mohou být buď seznam znaků, nebo funkce, která přijímá znak a vrací hodnotu true nebo false.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textů na základě přechodu z jednoho druhu znaků na jiný. Parametry <code>before</code> a <code>after</code> mohou být buď seznam znaků, nebo funkce, která přijímá znak a vrací hodnotu true nebo false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Pokaždé, když za velkým nebo malým písmenem následuje číslice, rozdělte vstup.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Převede zadaný dotaz SQL na kód M. Tato funkce je určena pouze pro interní použití.",
        "Documentation.LongDescription": "Převede zadaný dotaz <code>sql</code> na kód M s dostupnými identifikátory, které definuje <code>environment</code>. Tato funkce je určena pouze pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Vrátí zadaný sloupec dat z tabulky jako seznam.",
        "Documentation.LongDescription": "Vrátí sloupec dat zadaný hodnotou <code>column</code> z tabulky <code>table</code> jako seznam.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnoty ze sloupce [Name] tabulky.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Vrátí seznam s názvy sloupců, které odpovídají zadaným typům.",
        "Documentation.LongDescription": "Vrátí seznam s názvy sloupců z tabulky <code>table</code>, které odpovídají typům zadaných v <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí názvy sloupců typu Number.Type z tabulky.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Značí, zda se má zadaný záznam zobrazovat jako řádek tabulky.",
        "Documentation.LongDescription": "Značí, zda se má zadaný záznam (<code>row</code>) zobrazovat jako řádek tabulky <code>table</code>.\r\n    Za účelem řízení porovnání mezi řádky tabulky může být určen volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli tabulka obsahuje řádek.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určí, jestli tabulka obsahuje řádek.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určí, jestli tabulka obsahuje řádek porovnáním pouze se sloupcem [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Značí, zda se mají všechny zadané záznamy zobrazovat jako řádky tabulky.",
        "Documentation.LongDescription": "Značí, zda se mají všechny zadané záznamy v seznamu záznamů <code>rows</code> zobrazovat jako řádky tabulky <code>table</code>.\r\n    Za účelem řízení porovnání mezi řádky tabulky může být určen volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli tabulka obsahuje všechny řádky, porovnáním pouze se sloupcem [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určí, jestli tabulka obsahuje všechny řádky.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Značí, zda se mají zadané záznamy zobrazovat jako řádky tabulky.",
        "Documentation.LongDescription": "Značí, zda se mají zadané záznamy v seznamu záznamů <code>rows</code> zobrazovat jako řádky tabulky <code>table</code>.\r\n    Za účelem řízení porovnání mezi řádky tabulky může být určen volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda tabulka <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> obsahuje řádky <code>[a = 1, b = 2]</code> nebo <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určí, zda tabulka <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> obsahuje řádky <code>[a = 1, b = 3]</code> nebo <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určí, zda tabulka <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> obsahuje řádky <code>[a = 1, b = 3]</code> nebo <code>[a = 3, b = 5]</code> porovnáním pouze se sloupcem [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Určuje, zda tabulka obsahuje zadaný sloupec nebo sloupce.",
        "Documentation.LongDescription": "Určuje, zda <code>table</code> obsahuje zadaný sloupec nebo sloupce <code>columns</code>. Vrátí <code>true</code> pokud tabulka obsahuje sloupce, <code>false</code> jinak.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli tabulka obsahuje sloupec [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, jestli tabulka obsahuje sloupec [Name] a [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Značí, zda všechny řádky v tabulce splňují danou podmínku.",
        "Documentation.LongDescription": "Značí, zda všechny řádky v tabulce <code>table</code> splňují danou podmínku <code>condition</code>. Vrátí hodnotu <code>true</code>, pokud jsou všechny řádky shodné, jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli všechny hodnoty řádků ve sloupci [a] jsou i v tabulce.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda všechny hodnoty řádků v tabulce <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> jsou [a = 1, b = 2].",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Značí, zda některé řádky v tabulce splňují danou podmínku.",
        "Documentation.LongDescription": "Značí, zda některé řádky v tabulce <code>table</code> splňují danou podmínku <code>condition</code>. Vrátí hodnotu <code>true</code>, pokud jsou některé řádky shodné, jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Určuje, zda některé hodnoty řádků ve sloupci [a] jsou i v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určuje, zda některé hodnoty řádků v tabulce <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> jsou [a = 1, b = 2].",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Na základě daných kritérií vrátí největší řádek nebo výchozí hodnotu.",
        "Documentation.LongDescription": "Na základě daných kritérií (<code>comparisonCriteria</code>) vrátí největší řádek v tabulce <code>table</code>. Pokud je tabulka prázdná, vrátí se volitelná hodnota <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Najde v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> řádek s největší hodnotou ve sloupci [a].",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Najde v tabulce <code>({})</code> řádek s největší hodnotou ve sloupci [a]. Pokud je prázdný, vrátí se hodnota -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Na základě daných kritérií vrátí nejmenší řádek nebo výchozí hodnotu.",
        "Documentation.LongDescription": "Na základě daných kritérií (<code>comparisonCriteria</code>) vrátí nejmenší řádek v tabulce <code>table</code>. Pokud je tabulka prázdná, vrátí se volitelná hodnota <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Najde v tabulce řádek s nejmenší hodnotou ve sloupci [a].",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Najde v tabulce řádek s nejmenší hodnotou ve sloupci [a]. Pokud je prázdný, vrátí se hodnota -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Vrátí pozici nebo pozice řádku tabulky.",
        "Documentation.LongDescription": "Vrátí pozici prvního výskytu řádku <code>row</code> v tabulce <code>table</code>. Pokud není nalezen žádný výskyt, vrátí hodnotu -1.\r\n    <ul>\r\n       <li><code>table</code>: Vstupní tabulka</li>\r\n       <li><code>row</code>: Řádek v tabulce, jehož pozice se mají hledat.</li>\r\n       <li><code>occurrence</code>: <i>[Volitelné]</i> Určí, které výskyty řádku se mají vrátit.</li>\r\n       <li><code>equationCriteria</code>: <i>[Volitelné]</i> Řídí porovnávání mezi řádky tabulky.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít pozici prvního výskytu [a = 2, b = 4] v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Umožňuje najít pozici druhého výskytu [a = 2, b = 4] v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Umožňuje najít pozici všech výskytů [a = 2, b = 4] v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Vrátí pozici nebo pozice libovolných zadaných řádků tabulky.",
        "Documentation.LongDescription": "Vrátí pozice řádků z tabulky <code>table</code> pro první výskyt seznamu <code>rows</code>. Pokud není nalezen žádný výskyt, vrátí hodnotu -1.\r\n    <ul>\r\n    <li><code>table</code>: Vstupní tabulka</li>\r\n       <li><code>rows</code>: Seznam řádků v tabulce, jejichž pozice se mají hledat.</li>\r\n       <li><code>occurrence</code>: <i>[Volitelné]</i> Určí, které výskyty řádku se mají vrátit.</li>\r\n       <li><code>equationCriteria</code>: <i>[Volitelné]</i> Řídí porovnávání mezi řádky tabulky.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít pozici prvního výskytu [a = 2, b = 4] nebo [a = 6, b = 8] v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Umožňuje najít pozici všech výskytů [a = 2, b = 4] nebo [a = 6, b = 8] v tabulce <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Rozdělí zadanou tabulku do seznamu tabulek s použitím zadané velikosti stránky.",
        "Documentation.LongDescription": "Rozdělí <code>table</code> do seznamu tabulek, kde první prvek seznamu je tabulka s prvními <code>pageSize</code> řádky ze zdrojové tabulky,\r\n    další prvek seznamu je tabulka s dalšími <code>pageSize</code> prvky ze zdrojové tabulky atd.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdělení tabulky s pěti záznamy do tabulek po dvou záznamech.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Vrátí seznam obsahující zadané první řádky počtu a zbývající řádky.",
        "Documentation.LongDescription": "Vrátí seznam obsahující dvě tabulky: tabulku, která obsahuje prvních N řádků <code>table</code> (podle specifikace <code>count</code>), a tabulku, která obsahuje zbývající řádky <code>table</code>. \r\n\r\nPokud jsou tabulky výsledného seznamu uvedeny přesně jednou a v pořadí, bude funkce provádět výčet <code>table</code> pouze jednou.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí první dva řádky tabulky a zbývající řádky tabulky.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformuje řádky tabulky pomocí zadané funkce transformace.",
        "Documentation.LongDescription": "Vytvoří <code>seznam</code> díky využití operace <code>transform</code> pro každý řádek v <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Převede řádky tabulky na seznam čísel.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Převede řádky numerické tabulky na textové záznamy.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Vrátí část z <code>text</code> po zadaném <code>delimiter</code>.\r\n    Volitelná číselná hodnota <code>index</code> označuje, který výskyt <code>delimiter</code> se má brát.\r\n    Volitelný seznam <code>index</code> označuje, který výskyt <code>delimiter</code> se má brát, a také jestli se má jeho pořadí počítat od začátku nebo od konce vstupu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získat část z „111-222-333“ za (prvním) spojovníkem.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Získat část z „111-222-333“ za druhým spojovníkem.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Získat část z „111-222-333“ za druhým spojovníkem od konce.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Vrátí znak na zadané pozici.",
        "Documentation.LongDescription": "Vrátí znak v textové hodnotě <code>text</code> na pozici <code>index</code>. První znak textu je na pozici 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Najde v řetězci „Hello, World“ znak na pozici 4.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Vrátí část z <code>text</code> před zadaným <code>delimiter</code>.\r\n    Volitelná číselná hodnota <code>index</code> označuje, který výskyt <code>delimiter</code> se má brát.\r\n    Volitelný seznam <code>index</code> označuje, který výskyt <code>delimiter</code> se má brát, a také jestli se má jeho pořadí počítat od začátku nebo od konce vstupu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získat část z „111-222-333“ před (prvním) spojovníkem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Získat část z „111-222-333“ před druhým spojovníkem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Získat část z „111-222-333“ před druhým spojovníkem od konce.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Vrátí, zda text obsahuje dílčí řetězec.",
        "Documentation.LongDescription": "Zjistí, jestli <code>text</code> obsahuje hodnotu <code>substring</code>. Vrátí hodnotu True, pokud je tato hodnota nalezena. Tato funkce nepodporuje zástupné znaky ani regulární výrazy.\r\n      <br>\r\n      <br>\r\n      Nepovinný argument <code>comparer</code> lze použít k určení porovnání bez rozlišování malých a velkých písmen nebo porovnání s podporou jazykové verze a národního prostředí.\r\n      V jazyce vzorců jsou k dispozici následující integrované porovnávače:\r\n       <ul>\r\n        <li><code>Comparer.Ordinal</code>: Používá se k provádění řadového porovnání s rozlišováním malých a velkých písmen.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Používá se k provádění řadového porovnání bez rozlišování malých a velkých písmen.</li>\r\n        <li> <code>Comparer.FromCulture</code>: Používá se k provádění porovnání s rozlišením jazykové verze.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda text „Hello, World“ obsahuje text „Hello“.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda text „Hello, World“ obsahuje text „hello“.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Zjistěte, jestli text „Hello World“ obsahuje „hello“, pomocí porovnávače, který nerozlišuje velká a malá písmena.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Vrátí poslední znaky textu.",
        "Documentation.LongDescription": "Vrátí <code>text</code>ovou hodnotu, která představuje poslední znaky (počet: <code>count</code>) <code>text</code>ové hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Získá posledních 5 znaků textu „Hello, World“.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Určuje, zda text končí zadanou hodnotou.",
        "Documentation.LongDescription": "Určuje, jestli daný text <code>text</code> končí zadanou hodnotou <code>substring</code>. Při určení se rozlišují malá a velká písmena.\r\n\r\n      <div>\r\n        <code>comparer</code> je porovnávač <code>Comparer</code>, který slouží k řízení porovnání. Porovnávače můžou být použité k porovnání bez rozlišení malých a velkých písmen nebo porovnání zohledňujících jazykovou verzi a národní prostředí.\r\n      </div>\r\n      <div>\r\n        Následující zabudované porovnávače jsou dostupné v jazyce vzorců:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Slouží k provádění přesného řadového porovnání.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Slouží k provádění přesného řadového porovnání bez rozlišení malých a velkých písmen.</li>\r\n        <li> <code>Comparer.FromCulture</code>: Slouží k provádění porovnání zohledňujících jazykovou verzi.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Kontroluje, zda text „Hello, World“ končí textem „world“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Kontroluje, zda text „Hello, World“ končí textem „World“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Vrátí formátovaný text z formátovacího řetězce a argumentů.",
        "Documentation.LongDescription": "Vrátí formátovaný text, který se vytvoří, když se použije <code>arguments</code> ze seznamu nebo záznamu na formátovací řetězec <code>formatString</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Naformátování seznamu čísel",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Naformátování různých typů dat ze záznamu podle jazykové verze Angličtina (Spojené státy)",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Vrátí podřetězec do zadané délky.",
        "Documentation.LongDescription": "Vrátí <code>count</code> znaků nebo do konce řetězce <code>text</code> od pozice <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Najde dílčí řetězec z textu „Hello World“ začínající na indexu 6 po odsazení 5 znaků.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Najde dílčí řetězec z textu „Hello World“ začínající na indexu 6 do konce.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Vrátí text zadané délky odsazením konce daného textu.",
        "Documentation.LongDescription": "Vrátí <code>text</code>ovou hodnotu odsazenou na délku <code>count</code> vložením mezer na konec textové hodnoty <code>text</code>.\r\n    K určení znaku použitého k odsazení může být použit znak <code>character</code>. Výchozím výplňovým znakem je mezera.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odsadí konec textové hodnoty, aby byla 10 znaků dlouhá.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Odsadí konec textové hodnoty pomocí znaku |, aby byla 10 znaků dlouhá.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Vrátí text zadané délky odsazením začátku daného textu.",
        "Documentation.LongDescription": "Vrátí <code>text</code>ovou hodnotu odsazenou na délku <code>count</code> vložením mezer na začátek textové hodnoty <code>text</code>.\r\n    K určení znaku použitého k odsazení může být použit znak <code>character</code>. Výchozím výplňovým znakem je mezera.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odsadí začátek textové hodnoty, aby byla 10 znaků dlouhá.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Odsadí začátek textové hodnoty pomocí znaku |, aby byla 10 znaků dlouhá.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Vrátí první pozici hodnoty (-1, pokud není nalezena).",
        "Documentation.LongDescription": "Vrátí pozici zadaného výskytu textové hodnoty <code>substring</code> nalezené v řetězci <code>text</code>.\r\n    K určení pozice výskytu, která se má vrátit, se může použít volitelný parametr <code>occurrence</code> (výchozí je první výskyt).\r\n    Vrátí -1, pokud hodnota <code>substring</code> nebyla nalezena.\r\n\r\n      <div>\r\n        <code>comparer</code> je porovnávač <code>Comparer</code>, který slouží k řízení porovnání. Porovnávače se můžou použít k porovnání bez rozlišení malých a velkých písmen nebo k porovnání se zohledněním jazykové verze a národního prostředí.\r\n      </div>\r\n      <div>\r\n        V jazyce vzorců jsou dostupné následující zabudované porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal:</code> Slouží k provádění přesného řadového porovnání.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase:</code> Slouží k provádění přesného řadového porovnání bez rozlišení malých a velkých písmen.</li>\r\n        <li><code>Comparer.FromCulture</code>: Slouží k provádění porovnání zohledňujícího jazykovou verzi.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Získá pozici prvního výskytu textu „World“ v textu „Hello, World! Hello, World!“.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Získá pozici posledního výskytu textu „World“ v řetězci „Hello, World! Hello, World!“.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Vrátí první pozici textové hodnoty všech uvedených znaků (-1, pokud není nalezena).",
        "Documentation.LongDescription": "Vrátí první pozici libovolného znaku v seznamu <code>characters</code> nalezeného v <code>text</code>.\n    Volitelný parametr <code>occurrence</code> lze použít k určení pozice výskytu, která se má vrátit.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Najděte první pozici „W“ nebo „H“ v textu „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Najděte všechny pozice „W“ nebo „H“ v textu „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Vrátí dílčí řetězec nalezený na posunu.",
        "Documentation.LongDescription": "Vrátí dílčí řetězec z textu <code>text</code> nalezený na posunu <code>offset</code>.\r\n    K určení počtu vrácených znaků se může použít volitelný parametr <code>count</code>. Vrátí chybu, když znaků není dost.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Najde dílčí řetězec z textu „Hello World“ začínající na indexu 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Najde dílčí řetězec z textu „Hello World Hello“ začínající na indexu 6 po odsazení 5 znaků.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Odebere všechny výskyty daného znaku nebo seznamu znaků ze vstupní textové hodnoty.",
        "Documentation.LongDescription": "Vrátí kopii textové hodnoty <code>text</code> s odebranými znaky z hodnoty <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odebere znaky , a ; z textové hodnoty.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Odebere počet znaků počínaje daným posunem.",
        "Documentation.LongDescription": "Vrátí kopii textové hodnoty <code>text</code> po odebrání všech znaků z pozice <code>offset</code>.\r\n    K určení počtu odebraných znaků může být použit volitelný parametr <code>count</code>. Výchozí hodnota parametru <code>count</code> je 1. Hodnoty pozice začínají hodnotou 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odebere 1 znak z textové hodnoty „ABEFC“ na pozici 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Odebere dva znaky z textové hodnoty „ABEFC“ počínaje pozicí 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Vrátí textovou hodnotu složenou ze vstupního textu opakovaného tolikrát, kolikrát je určeno.",
        "Documentation.LongDescription": "Vrátí textovou hodnotu složenou ze vstupního textu <code>text</code> opakovaného <code>count</code>x.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pětkrát opakuje text „a“.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Třikrát opakuje text „helloworld“.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Vybere všechny výskyty daného znaku nebo seznamu znaků ze vstupní textové hodnoty.",
        "Documentation.LongDescription": "Vrátí kopii textové hodnoty <code>text</code> s odebranými všemi znaky, které nejsou v <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Vybrat všechny znaky v rozsahu od „a“ do „z“ z dané textové hodnoty.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Rozdělí text na seznam textových hodnot na základě určeného oddělovače.",
        "Documentation.LongDescription": "Vrátí seznam textových hodnot, který je výsledkem rozdělení textové hodnoty <code>text</code> na základě zadaného oddělovače <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam z textové hodnoty Name|Address|PhoneNumber obsahující oddělovač |.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Vrátí seznam textových hodnot rozdělený libovolnými znaky v oddělovači.",
        "Documentation.LongDescription": "Vrátí seznam textových hodnot, který je výsledkem rozdělení textové hodnoty <code>text</code> na základě libovolného znaku v zadaném oddělovači <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam z textové hodnoty „Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com“.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Vrátí začátek textu.",
        "Documentation.LongDescription": "Vrátí prvních <code>count</code> znaků hodnoty <code>text</code> jako textovou hodnotu.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Vrátí prvních 5 znaků řetězce „Hello, World“.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Značí, zda text začíná zadanou hodnotou.",
        "Documentation.LongDescription": "Pokud textová hodnota <code>text</code> začíná textovou hodnotou <code>substring</code>, vrátí hodnotu True.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Hledaná hodnota <code>text</code></li>\r\n        <li><code>substring</code>: <i></i> Hledaná hodnota <code>text</code>, která je podřetězcem řetězce <code>substring</code>.</li>\r\n        <li><code>comparer</code>: <i>[volitelné]</i> Porovnávač <code>Comparer</code> použitý k provedení porovnání. K vyhledávání, při kterém se nerozlišují velká a malá písmena, jde například použít porovnávací objekt <code>Comparer.OrdinalIgnoreCase</code>.</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> je porovnávač <code>Comparer</code>, který slouží k řízení porovnání. Porovnávače se dají použít k porovnání bez rozlišení malých a velkých písmen nebo porovnání zohledňujících jazykovou verzi a národní prostředí.\r\n      </div>\r\n      <div>\r\n        Následující zabudované porovnávače jsou dostupné v jazyce vzorců:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Slouží k provádění přesného řadového porovnání.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Slouží k provádění přesného řadového porovnání bez rozlišení malých a velkých písmen.</li>\r\n        <li> <code>Comparer.FromCulture</code>: Slouží k provádění porovnání zohledňujících jazykovou verzi.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda text Hello, World začíná textem hello.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Zjistí, zda text Hello, World začíná textem Hello.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Vrátí typ, který reprezentuje funkce s konkrétními parametry a omezením návratového typu.",
        "Documentation.LongDescription": "Vytvoří typ funkce (<code>function type</code>) z: <code>signature</code>, záznam <code>returnType</code> a <code>Parameters</code> a <code>min</code>, minimální počet argumentů potřebných k vyvolání funkce.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří typ pro funkci, která přijímá jako vstup číselný parametr názvem X a vrací číslo.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Vrátí typ, který reprezentuje záznamy s konkrétním omezením typů polí.",
        "Documentation.LongDescription": "Vrátí typ, který reprezentuje záznamy s konkrétním omezením typů polí.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dynamické generování typu tabulky",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Určuje, zda je hodnota prvního typu vždy kompatibilní s druhým typem.",
        "Documentation.LongDescription": "Určuje, zda je hodnota <code>type1</code> vždy kompatibilní s <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Určete, zda lze hodnotu typu number vždy považovat za hodnotu typu any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Určuje, zda hodnota typu any může být vždy také považována za typ number.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Nahradí omezující vlastnosti typu.",
        "Documentation.LongDescription": "Nahradí omezující vlastnosti pro: <code>type</code> omezujícími vlastnostmi obsaženými v záznamu <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Vrátí nový typ tabulky se všemi klíči nahrazenými zadaným seznamem klíčů.",
        "Documentation.LongDescription": "Vrátí nový typ tabulky se všemi klíči nahrazenými zadaným seznamem klíčů.<br>\r\n    <br>\r\n    Každý klíč je definován pomocí záznamu v následujícím formátu:\r\n    <ul>\r\n      <li>\r\n        <code>Sloupce</code>: seznam názvů sloupců, které definují klíč\r\n      </li>\r\n      <li>\r\n        <code>Primární</code>: <code>true</code> pokud je klíč primárním klíčem tabulky; jinak <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Zadaný seznam klíčů projde ověřením, aby se zajistilo, že není definován více než jeden primární klíč a že v typu tabulky existují všechny názvy klíčových sloupců.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte informace o klíči u typu tabulky.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Vymažte informace o klíči dříve definované pro typ tabulky.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Vrátí typ sloupce tabulky.",
        "Documentation.LongDescription": "Vrátí typ sloupce <code>column</code> tabulky typu <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Vrátí absolutní identifikátor URI, který je kombinací základního identifikátoru URI vstupu a relativního identifikátoru URI.",
        "Documentation.LongDescription": "Vrátí absolutní identifikátor URI, který je kombinací identifikátoru <code>baseUri</code> vstupu a identifikátoru <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Vrátí součet dvou hodnot.",
        "Documentation.LongDescription": "Vrátí součet hodnoty <code>value1</code> s hodnotou <code>value2</code>. Lze zadat volitelný parametr <code>precision</code>. Ve výchozím nastavení se používá hodnota <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Vrátí hodnotu, pokud je kompatibilní se zadaným typem.",
        "Documentation.LongDescription": "Vrátí hodnotu, pokud je kompatibilní se zadaným typem. Toto je ekvivalent operátoru as v M s výjimkou toho, že může přijímat odkazy na typ identifikátoru, třeba Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Přetypování čísla na číslo.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Pokus o přetypování textové hodnoty na číslo.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Vrátí hodnotu -1, 0 nebo 1 na základě toho, zda je první hodnota menší než, rovna nebo větší než druhá.",
        "Documentation.LongDescription": "Vrátí hodnotu -1, 0 nebo 1 na základě toho, zda je první hodnota menší než, rovna nebo větší než druhá.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Vrátí výsledek dělení první hodnoty druhou.",
        "Documentation.LongDescription": "Vrátí výsledek dělení hodnoty <code>value1</code> hodnotou <code>value2</code>. Lze zadat volitelný parametr <code>precision</code>. Ve výchozím nastavení se používá hodnota <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Zjistí, zda jsou si dvě hodnoty rovny.",
        "Documentation.LongDescription": "Pokud je hodnota <code>value1</code> rovna hodnotě <code>value2</code>, vrátí hodnotu True. Jinak vrátí hodnotu False.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Určuje, zda je hodnota kompatibilní se zadaným typem.",
        "Documentation.LongDescription": "Určuje, zda je hodnota kompatibilní se zadaným typem. Jedná se o ekvivalent operátoru is v M s výjimkou toho, že může přijímat odkazy na typ identifikátoru, třeba Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Porovnejte dva způsoby, jak určit, zda je číslo kompatibilní s typem number.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Vrátí součin dvou hodnot.",
        "Documentation.LongDescription": "Vrátí součin hodnot <code>value1</code> a <code>value2</code>. Lze zadat volitelný parametr <code>precision</code>. Ve výchozím nastavení se používá hodnota <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Vyhodnocuje dotaz proti cílové databázi.",
        "Documentation.LongDescription": "<p>Vyhodnotí <code>query</code> nad <code>target</code> pomocí parametrů zadaných v <code>parameters</code> a možností zadaných v <code>options</code>.</p>\r\n<p>Výstup dotazu je definován pomocí <code>target</code>.</p>\r\n<p><code>target</code> poskytuje kontext pro operaci, kterou popisuje <code>query</code>.</p>\r\n<p><code>query</code> popisuje dotaz, který se má provést nad <code>target</code>. <code>query</code> se vyjadřuje způsobem, který je specifický pro <code>target</code> (třeba výrazem jazyka T-SQL).</p>\r\n<p>Volitelná hodnota <code>parameters</code> může obsahovat buď seznam, nebo záznam – podle toho, jak je vhodné zadat hodnoty parametrů, které očekává <code>query</code>.</p>\r\n<p>Volitelný záznam <code>options</code> by měl obsahovat možnosti, které ovlivňují chování spuštění <code>query</code> nad <code>target</code>. Tyto možnosti jsou specifické pro <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Zjistí, zda jsou si dvě hodnoty rovny.",
        "Documentation.LongDescription": "Pokud má některý z argumentů <code>value1</code> a <code>value2</code> hodnotu null, vrátí hodnotu null. Jinak vrátí hodnotu odpovídají hodnotě Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Nahradí informace metadat vstupu.",
        "Documentation.LongDescription": "Nahradí informace metadat vstupu.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Nahradí typ hodnoty.",
        "Documentation.LongDescription": "Nahradí typ <code>value</code> zadaným <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte výchozí typ záznamu konkrétnějším typem.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Vrátí rozdíl dvou hodnot.",
        "Documentation.LongDescription": "Vrátí rozdíl hodnot <code>value1</code> a <code>value2</code>. Lze zadat volitelný parametr <code>precision</code>. Ve výchozím nastavení se používá hodnota <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Vytvoří akci, která při spuštění vrátí výsledky provedení požadavku HTTP jako binární hodnotu.",
        "Documentation.LongDescription": "Vytvoří akci, která po provedení vrátí výsledky provedení žádosti <code>method</code> na <code>url</code> pomocí HTTP jako binární hodnoty.\r\n   Pro určení dalších vlastností můžete zadat volitelný parametr záznamu, <code>options</code>. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>Query</code> : Přidejte parametry dotazu k URL programově bez nutnosti starat se o uvozovac&#237; znaky</li>\r\n<li><code>ApiKeyName</code> : Pokud c&#237;lov&#253; web obsahuje z&#225;pis kl&#237;če rozhran&#237; API, jde tento parametr použ&#237;t k určen&#237; n&#225;zvu (nikoli hodnoty) parametru kl&#237;če, kter&#253; se mus&#237; použ&#237;t v adrese URL. Skutečn&#225; hodnota kl&#237;če je uveden&#225; v referenci.</li>\r\n<li><code>Headers</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako z&#225;znamu dopln&#237;te do požadavku HTTP dalš&#237; z&#225;hlav&#237;.</li>\r\n<li><code>Timeout</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako doby trv&#225;n&#237; se změn&#237; časov&#253; limit požadavku HTTP. V&#253;choz&#237; hodnota je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu vylouč&#237;te tyto kl&#237;če z&#225;hlav&#237; protokolu HTTP jako souč&#225;st v&#253;počtu pro ukl&#225;d&#225;n&#237; dat do mezipaměti.</li>\r\n<li><code>IsRetry</code> : Po zad&#225;n&#237; t&#233;to logick&#233; hodnoty jako true se budou při nač&#237;t&#225;n&#237; dat ignorovat všechny existuj&#237;c&#237; odpovědi v mezipaměti.</li>\r\n<li><code>ManualStatusHandling</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu zabr&#225;n&#237;te všem integrovan&#253;m zpracov&#225;n&#237;m požadavků HTTP, jejichž odpověď obsahuje jeden z těchto stavov&#253;ch k&#243;dů.</li>\r\n<li><code>RelativePath</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako textu ji před vytvořen&#237;m ž&#225;dosti připoj&#237;te k b&#225;zi URL.</li>\r\n<li><code>Content</code> : Po zad&#225;n&#237; t&#233;to hodnoty se jej&#237; obsah stane textem zpr&#225;vy požadavku HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Upozorňujeme, že tato funkce je ve většině kontextů zakázaná. Zvažte místo toho použití Web.Contents nebo Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Proveďte v rámci služby požadavek GET.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Zadejte adresu URL koncového bodu Azure Enterprise REST API přidruženého vaší registraci.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Vrátí binární výsledky volání adresy URL zadané pro rozhraní Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Použití funkce AzureEnterprise.Contents k vrácení výsledků určité sestavy",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabulka"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Vrátí obsah zadaného objektu blob z trezoru úložiště Azure.",
        "Documentation.LongDescription": "Vrátí obsah objektu blob na adrese URL <code>url</code> z trezoru Azure Storage. Pomocí <code>options</code> je možné řídit následující možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtů, kter&#233; se maj&#237; přeč&#237;st, než se počk&#225; na př&#237;jemce dat. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtů, kter&#233; se maj&#237; zkusit přeč&#237;st z jednoho požadavku HTTP na server. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost ConcurrentRequests podporuje rychlejš&#237; stahov&#225;n&#237; dat t&#237;m, že umožňuje zadat počet požadavků, kter&#233; se provedou paralelně, za cenu vyšš&#237;ho využit&#237; paměti. Požadovan&#233; množstv&#237; paměti je (Souběžn&#233;Požadavky * VelikostPožadavku). V&#253;choz&#237; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Vrátí obsah souboru ze systému souborů Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vrátí obsah souboru na adrese URL <code>url</code> ze systému souborů Azure Data Lake Storage. Pomocí <code>options</code> je možné řídit následující možnosti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtů, kter&#233; se maj&#237; přeč&#237;st, než se počk&#225; na př&#237;jemce dat. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtů, kter&#233; se maj&#237; zkusit přeč&#237;st z jednoho požadavku HTTP na server. V&#253;choz&#237; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnost ConcurrentRequests podporuje rychlejš&#237; stahov&#225;n&#237; dat t&#237;m, že umožňuje zadat počet požadavků, kter&#233; se provedou paralelně, za cenu vyšš&#237;ho využit&#237; paměti. Požadovan&#233; množstv&#237; paměti je (Souběžn&#233;Požadavky * VelikostPožadavku). V&#253;choz&#237; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Vrátí přibližnou délku binárního souboru.",
        "Documentation.LongDescription": "Vrátí přibližnou délku <code>binary</code> nebo chybu, pokud zdroj dat nepodporuje přibližnou délku.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Načte přibližnou délku binární hodnoty.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Uloží binární hodnotu do vyrovnávací paměti.",
        "Documentation.LongDescription": "Uloží binární hodnotu do vyrovnávací paměti. Výsledkem tohoto volání je stabilní binární hodnota, což znamená, že bude mít deterministickou délku a pořadí bajtů.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vytvořit stabilní verzi binární hodnoty",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Sloučí seznam binárních hodnot do jediné binární hodnoty.",
        "Documentation.LongDescription": "Sloučí seznam binárních hodnot do jediné binární hodnoty.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Vytvoří binární hodnotu z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>binary</code> z předané hodnoty <code>value</code>. Pokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Binary.From</code> vrátí hodnotu <code>null</code>.  Pokud je předaná hodnota <code>value</code> typu <code>binary</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>binary</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>binary</code> z textové reprezentace. Další informace naleznete v popisu funkce <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Získat hodnotu <code>binary</code> hodnoty <code>\"1011\"</code>",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Převede seznam čísel na binární hodnotu.",
        "Documentation.LongDescription": "Převede seznam čísel na binární hodnotu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Dekóduje data z textové formy do binární hodnoty.",
        "Documentation.LongDescription": "Vrátí výsledek převodu textové hodnoty <code>text</code> na binární hodnotu (seznam položek <code>number</code>). Může být zadán i parametr <code>encoding</code>, který označuje kódování použité v textové hodnotě.\r\n      Pro parametr <code>encoding</code> lze použít následující hodnoty <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Kódování Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Šestnáctkové kódování</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekódovat \"1011\" na binární hodnotu",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekódovat \"1011\" na binární hodnotu s šestnáctkovým kódováním",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Čte binární stream a pokouší se určit informace o typu obsahu a formátu streamu.",
        "Documentation.LongDescription": "Vrátí záznam s polem Content.Type, které obsahuje odvozený typ MIME.\r\n    Pokud je odvozený typ obsahu text/* a je zjištěna znaková stránka pro kódování, je navíc vráceno pole Content.Encoding, které obsahuje kódování streamu.\r\n    Pokud je odvozený typ obsahu text/csv a formát je delimited, je navíc vráceno pole Csv.PotentialDelimiter obsahující tabulku pro analýzu, co mohou být oddělovače.\r\n    Pokud je odvozený typ obsahu text/csv a formát je fixed-width, je navíc vráceno pole Csv.PotentialPositions obsahující seznam pro analýzu možných pozic sloupců s pevnou šířkou.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Vrátí počet znaků.",
        "Documentation.LongDescription": "Vrátí počet znaků.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Převede binární hodnotu na seznam čísel.",
        "Documentation.LongDescription": "Převede binární hodnotu na seznam čísel.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Zakóduje binární data do textového formátu.",
        "Documentation.LongDescription": "Vrátí výsledek převodu binárního seznamu čísel <code>binary</code> na textovou hodnotu. Volitelně může být zadán i parametr <code>encoding</code>, který označuje kódování použité ve vrácené textové hodnotě.\r\n      Pro parametr <code>encoding</code> lze použít následující hodnoty <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Kódování Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Šestnáctkové kódování</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Vytvoří upravený záznam o chybě, který neaktivuje záložní událost, když ji vyvolá obslužná rutina definovaná v zobrazení (prostřednictvím Binary.View).",
        "Documentation.LongDescription": "Vytvoří z <code>errorRecord</code> upravený záznam o chybě, který neaktivuje záložní událost, když ji vyvolá obslužná rutina definovaná v zobrazení (prostřednictvím Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Vytvoří funkci, kterou může zachytit obslužná rutina definovaná v zobrazení (prostřednictvím Binary.View).",
        "Documentation.LongDescription": "<p>Vytvoří funkci zobrazení založenou na <code>function</code>, která se dá zpracovat v zobrazení vytvořeném pomocí <code>Binary.View</code>.</p>\r\n<p>Obslužnou rutinu <code>OnInvoke</code> <code>Binary.View</code> lze použít k definování obslužné rutiny funkce zobrazení.</p>\r\n<p>Obdobně jako tomu je u obslužných rutin pro předdefinované operace, pokud není zadána obslužná rutina <code>OnInvoke</code> nebo pokud nezpracovává funkci zobrazení nebo pokud obslužná rutina vyvolá chybu, použije se nad zobrazením <code>function</code>.</p>\r\n<p>Řiďte se publikovanou dokumentaci k vlastnímu konektoru Power Query, ve které najdete podrobnější popis <code>Binary.View</code> a vlastních funkcí zobrazení.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Binární formát, který umí číst 64bitové celé číslo se znaménkem kódované pomocí 7bitového kódování s proměnnou délkou",
        "Documentation.LongDescription": "Binární formát, který umí číst 64bitové celé číslo se znaménkem kódované pomocí 7bitového kódování s proměnnou délkou",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Binární formát, který umí číst 64bitové celé číslo bez znaménka kódované pomocí 7bitového kódování s proměnnou délkou",
        "Documentation.LongDescription": "Binární formát, který umí číst 64bitové celé číslo bez znaménka kódované pomocí 7bitového kódování s proměnnou délkou",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Binární formát, který čte 8bitové celé číslo bez znaménka",
        "Documentation.LongDescription": "Binární formát, který čte 8bitové celé číslo bez znaménka",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Binární formát, který čte 16bajtovou desetinnou hodnotu .NET.",
        "Documentation.LongDescription": "Binární formát, který čte 16bajtovou desetinnou hodnotu .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Binární formát, který čte 8bajtovou hodnotu IEEE s pohyblivou desetinnou čárkou a s přesností na dvě desetinná čísla.",
        "Documentation.LongDescription": "Binární formát, který čte 8bajtovou hodnotu IEEE s pohyblivou desetinnou čárkou a s přesností na dvě desetinná čísla.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Vrátí binární formát, který čte sekvenci položek a vrátí seznam.",
        "Documentation.LongDescription": "Vrátí binární formát, který čte sekvenci položek a vrátí <code>list</code>. Parametr <code>binaryFormat</code> určuje binární formát každé položky. Jsou tři způsoby, jak lze určit počet čtených položek: <ul><li>Pokud <code>countOrCondition</code> není zadáno, bude binární formát číst položky, dokud nezbudou žádné další.</li><li>Pokud <code>countOrCondition</code> je číslo, binární formát načte tento počet položek.</li><li>Pokud <code>countOrCondition</code> je funkce, bude tato funkce volána při každém čtení položky. Funkce vrací hodnotu true, pokud se má v čtení pokračovat, nebo false, pokud se má se čtením položek skončit. Poslední položka je do seznamu zahrnuta.</li><li>Pokud <code>countOrCondition</code> je binární formát, pak počet položek má být uveden před seznamem a zadaný formát se používá k načtení daného počtu položek.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Číst bajty až na konec dat",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Číst dva bajty",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Číst bajty, dokud hodnota bajtu je vyšší nebo rovna dvěma",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Binární formát, který čte nula bajtů a vrátí hodnotu null",
        "Documentation.LongDescription": "Binární formát, který čte nula bajtů a vrátí hodnotu null",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Vrátí binární formát, který čte záznam.",
        "Documentation.LongDescription": "Vrátí binární formát, který čte záznam. Parametr <code>record</code> určuje binární formát záznamu. Každé pole v záznamu může mít jiný binární formát. Pokud pole obsahuje hodnotu, která není hodnotou binárního formátu, pro dané pole se nenačtou žádná data a hodnota pole bude pro výsledek opakována.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Přečíst záznam obsahující jedno 16bitové celé číslo a jedno 32bitové celé číslo.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Binární formát, který čte 16bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Binární formát, který čte 16bitové celé číslo se znaménkem",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Binární formát, který čte 32bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Binární formát, který čte 32bitové celé číslo se znaménkem",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Binární formát, který čte 64bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Binární formát, který čte 64bitové celé číslo se znaménkem",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Binární formát, který čte 4bajtovou hodnotu IEEE s pohyblivou desetinnou čárkou s jednoduchou přesností.",
        "Documentation.LongDescription": "Binární formát, který čte 4bajtovou hodnotu IEEE s pohyblivou desetinnou čárkou s jednoduchou přesností.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Vrátí binární formát, který čte textovou hodnotu.",
        "Documentation.LongDescription": "Vrátí binární formát, který čte textovou hodnotu. Parametr <code>length</code> určuje počet bajtů k dekódování nebo binární formát o délce, která předchází textu. Volitelná hodnota <code>encoding</code> určuje kódování textu. Pokud hodnota <code>encoding</code> není zadána, kódování se určí ze značek pořadí bajtů ve formátu Unicode. Pokud nejsou přítomny žádné značky pořadí bajtů, použije se kódování <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekódovat dva bajty jako text ASCII",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dékodovat text ASCII, kde délka textu v bajtech je uvedena jako bajt před textem",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Binární formát, který čte 16bitové celé číslo bez znaménka",
        "Documentation.LongDescription": "Binární formát, který čte 16bitové celé číslo bez znaménka",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Binární formát, který čte 32bitové celé číslo bez znaménka",
        "Documentation.LongDescription": "Binární formát, který čte 32bitové celé číslo bez znaménka",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Binární formát, který čte 64bitové celé číslo bez znaménka",
        "Documentation.LongDescription": "Binární formát, který čte 64bitové celé číslo bez znaménka",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Vytvoří z dané hodnoty 8bitové celé číslo.",
        "Documentation.LongDescription": "Vrátí 8bitovou celočíselnou hodnotu <code>number</code> z dané hodnoty <code>value</code>. Pokud má daná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Byte.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> číslo <code>number</code> v rozsahu 8bitových celých čísel bez zlomkové části, vrátí se hodnota <code>value</code>. Pokud má zlomkovou část, číslo se zaokrouhlí podle zadaného režimu zaokrouhlování. Výchozí režim zaokrouhlování je <code>RoundingMode.ToEven</code>. Pokud má hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Další režimy zaokrouhlování viz <code>Number.Round</code>. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte 8bitovou celočíselnou hodnotu <code>\"4\"</code> <code>number</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Načte 8bitovou celočíselnou hodnotu <code>number</code> <code>\"4,5\"</code> s použitím <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Převede číslo na textový znak.",
        "Documentation.LongDescription": "Vrátí znakový ekvivalent funkce number.<br>\r\n    <br>\r\n    Poskytnutý <code>number</code> by měl být 21bitový bod kódu Unicode.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Převede číslo na jeho odpovídající hodnotu znaku.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Umožňuje převést znak na číslo a znovu ho převést zpět.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Převeďte šestnáctkový bod kódu emotikony „šklebící se tvář“ na ekvivalentní náhradní pár UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Převede znak na číselnou hodnotu.",
        "Documentation.LongDescription": "Vrátí číselný ekvivalent <code>character</code>.<br>\r\n    <br>\r\n    Výsledkem bude 21bitový bod kódu Unicode reprezentovaný zadaným znakem nebo náhradním párem.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Převede znak na jeho ekvivalentní číselnou hodnotu.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Převeďte náhradní pár UTF-16 emotikony „šklebící se tvář“ na odpovídající šestnáctkový bod kódu.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Vrátí funkci, která kombinuje seznam textu pomocí zadaného oddělovače.",
        "Documentation.LongDescription": "Vrátí funkci, která sloučí seznam textových hodnot do jedné textové hodnoty pomocí zadaného oddělovače.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte seznam textových hodnot oddělených středníkem.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Zkombinujte text dvou sloupců pomocí čárkového oddělovače a uvozovek ve stylu CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Vrátí funkci, která kombinuje seznam textu pomocí posloupnosti oddělovačů.",
        "Documentation.LongDescription": "Vrátí funkci, která sloučí seznam textových hodnot do jedné textové hodnoty pomocí posloupnosti oddělovačů.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte seznam textových hodnot pomocí posloupnosti oddělovačů.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Vrátí funkci, která kombinuje seznam textu pomocí zadaných délek.",
        "Documentation.LongDescription": "Vrátí funkci, která sloučí seznam textových hodnot do jedné textové hodnoty s použitím zadaných délek.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte seznam textových hodnot extrahováním zadaného počtu znaků z každé vstupní hodnoty.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Zkombinujte seznam textových hodnot extrahováním zadaného počtu znaků po prvním vyplnění výsledku textem šablony.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Vrátí funkci, která kombinuje seznam textu pomocí zadaných výstupních pozic.",
        "Documentation.LongDescription": "Vrátí funkci, která sloučí seznam textových hodnot do jedné textové hodnoty pomocí zadaných výstupních pozic.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte seznam textových hodnot jejich umístěním do výstupu na zadaných pozicích.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Vrátí funkci, která kombinuje seznam textu pomocí zadaných pozic a délek.",
        "Documentation.LongDescription": "Vrátí funkci, která sloučí seznam textových hodnot do jedné textové hodnoty pomocí zadaných výstupních pozic a délek. Délka s hodnotou null označuje, že by měla být zahrnuta celá textová hodnota.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Zkombinujte seznam textových hodnot pomocí zadaných výstupních pozic a délek.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Vrátí funkci porovnávací metody založenou na zadané jazykové verzi a rozlišování velkých a malých písmen.",
        "Documentation.LongDescription": "Vrátí porovnávací funkci, která používá <code>culture</code> a rozlišování malých a velkých písmen určené <code>ignoreCase</code> k provedení comparisons.<br>\r\n      <br>\r\n      Porovnávací funkce přijímá dva argumenty a vrací -1, 0 nebo 1 na základě toho, jestli je první hodnota menší než, rovna,  nebo větší než druhá.<br>\r\n      <br>\r\n      Výchozí hodnota pro <code>ignoreCase</code> je false. <code>culture</code> musí být jedním z národních prostředí podporovaných rozhraním .NET Framework (například en-US).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porovnáním hodnot „a“ a „A“ s použitím národního prostředí „en-US“ určí, jestli jsou hodnoty stejné.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Porovnáním hodnot „a“ a „A“ s použitím národního prostředí „en-US“ a s ignorováním velikosti písmen určí, jestli jsou hodnoty stejné.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Vrací jedinečný identifikátor členu z hodnoty vlastnosti členů.",
        "Documentation.LongDescription": "Vrací jedinečný identifikátor členu z hodnoty vlastnosti členu. <code>attribute</code>. Pro všechny ostatní hodnoty vrací hodnotu null.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Vrátí klíč vlastnosti.",
        "Documentation.LongDescription": "Vrátí klíč vlastnosti <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Z dané hodnoty vrátí hodnotu měny.",
        "Documentation.LongDescription": "Z předané hodnoty <code>value</code> vrátí hodnotu <code>currency</code>. Pokud má předaná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Currency.From</code> vrátí <code>null</code>. Pokud je předaná hodnota <code>value</code> typu <code>number</code> v rozsahu měny, vrátí se hodnota <code>value</code> zaokrouhlená na čtyři desetinná místa. Pokud je předaná hodnota <code>value</code> jakéhokoli jiného typu, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Platný rozsah měny je <code>-922,337,203,685,477.5808</code> až <code>922,337,203,685,477.5807</code>. Informace o dostupných režimech zaokrouhlení najdete u příkazu <code>Number.Round</code>. Výchozí je <code>RoundingMode.ToEven</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získá hodnotu <code>currency</code> z hodnoty <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Získá hodnotu <code>currency</code> z hodnoty <code>1,23455</code> pomocí funkce <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Vrátí komponentu dne.",
        "Documentation.LongDescription": "Vrátí komponentu dne předané hodnoty <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se extrahuje komponenta dne.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získat komponentu dne z hodnoty <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> představující datum 14. 5. 2011, čas 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Vrátí číslo (od 0 do 6) označující den v týdnu z poskytnuté hodnoty.",
        "Documentation.LongDescription": "Vrátí číslo (od 0 do 6) označující den v týdnu z poskytnuté <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Hodnota <code>Day</code> určující den, který má být považován za první den v týdnu. Povolené hodnoty jsou Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday a Day.Saturday. Pokud tento parametr není zadán, použije se výchozí hodnota jazykové verze.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získat den v týdnu představovaný pondělím 21. února 2011, přičemž první den v týdnu je Sunday (neděle).",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Získat den v týdnu představovaný pondělím 21. února 2011, přičemž první den v týdnu je Monday (pondělí).",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Vrátí název dne v týdnu.",
        "Documentation.LongDescription": "Vrátí název dne v týdnu pro poskytnuté <code>date</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získejte název dne v týdnu.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Vrátí číslo od 1 do 366 představující den v roce.",
        "Documentation.LongDescription": "Vrací číslo představující den v roce v předané hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Den v roce pro 1. březen 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Vrátí číslo od 28 do 31 představující počet dní v měsíci.",
        "Documentation.LongDescription": "Vrací číslo představující počet dní v měsíci v hodnotě <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, <code>dateTime</code>. \r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, pro kterou je vrácen počet dní v měsíci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Počet dní v prosinci, jak je přestavováno řetězcem <code>#date(2011, 12, 01)></code>",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Vrátí konec dne.",
        "Documentation.LongDescription": "Vrátí konec dne, který představuje <code>dateTime</code>. Informace o časovém pásmu se zachovají.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se počítá konec dne.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získat konec dne pro 14. 5. 2011, 17:00:00",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Získat konec dne pro 17. 5. 2011, 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Vrátí konec měsíce.",
        "Documentation.LongDescription": "Vrátí konec měsíce, který obsahuje <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code>, nebo <code>datetimezone</code>, ze které se počítá konec měsíce</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získat konec měsíce pro 14. 5. 2011",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Získat konec měsíce pro 14. 5. 2011, 17:00:00 -7:00",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Vrátí konec čtvrtletí.",
        "Documentation.LongDescription": "Vrátí konec čtvrtletí, které obsahuje <code>dateTime</code>. Informace o časovém pásmu se zachovají.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se počítá konec čtvrtletí.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte konec čtvrtletí pro 10. října 2011, 8:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Vrátí konec týdne.",
        "Documentation.LongDescription": "Vrátí konec týdne, který obsahuje <code>dateTime</code>.\r\n    Tato funkce používá volitelný <code>den</code> <code>firstDayOfWeek</code>, který se  pro tento relativní výpočet nastaví jako první den v týdnu. Výchozí hodnota je <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se počítá poslední den v týdnu</li>\r\n        <li><code>firstDayOfWeek</code>:  <i>[Volitelné]</i> Hodnota <code>Day.Type</code> představující první den v týdnu. Možné hodnoty jsou <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> and <code>Day.Saturday.</code>. Výchozí hodnota je <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vrátí konec týdne pro hodnotu 5/14/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Vrátí konec týdne pro hodnotu 5/17/2011 05:00:00 PM -7:00, přičemž použije neděli jako první den týdne.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Vrátí konec roku.",
        "Documentation.LongDescription": "Vrátí konec roku, který obsahuje <code>dateTime</code> včetně zlomkových sekund. Informace o časovém pásmu se zachovají.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se počítá konec roku.</li>\r\n </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vrátí konec roku pro hodnotu 5/14/2011 05:00:00 PM.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Vrátí konec hodiny pro hodnotu 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Vytvoří datum z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>date</code> z předané hodnoty <code>value</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).\r\nPokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Date.From</code> vrátí hodnotu <code>null</code>. Pokud je předaná hodnota <code>value</code> typu <code>date</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>date</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>date</code> z textové reprezentace. Další informace naleznete v popisu funkce <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: Komponenta data hodnoty <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Komponenta data místního ekvivalentu datetime hodnoty <code>value</code>.</li>\r\n        <li><code>number</code>: Komponenta data místního ekvivalentu datetime data OLE Automation vyjádřená hodnotou <code>value</code>.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, vrátí se chyba.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>43910</code> na hodnotu <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Převede hodnotu <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na hodnotu <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Vytvoří datum z místních, univerzálních a vlastních formátů data.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>date</code> z textové reprezentace <code>text</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum parsuje podle nejvhodnějšího postupu.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má hodnota <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, jazyková verze <code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, může být <code>options</code> také textová hodnota. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = null, Culture= <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>\"2010-12-31\"</code> na hodnotu <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Vyhledá datum v gregoriánském kalendáři, které odpovídá začátku roku 1400 v kalendáři Hidžra.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Značí, zda toto datum odpovídá aktuálnímu dni určenému aktuálním datem a časem v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> odpovídá aktuálnímu dni určenému aktuálním datem a časem v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do aktuálního dne.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Značí, zda toto datum spadá do aktuálního měsíce určeného aktuálním datem a časem v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do aktuálního měsíce určeného aktuálním datem a časem v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do aktuálního měsíce.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Značí, zda toto datum spadá do aktuálního čtvrtletí určeného aktuálním datem a časem v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do aktuálního čtvrtletí určeného aktuálním datem a časem v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do aktuálního čtvrtletí.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Značí, zda toto datum spadá do aktuálního týdne určeného aktuálním datem a časem v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do aktuálního týdne určeného aktuálním datem a časem v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do aktuálního týdne.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Značí, zda toto datum spadá do aktuálního roku určeného aktuálním datem a časem v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do aktuálního roku určeného aktuálním datem a časem v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do aktuálního roku.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Označuje, jestli toto datum spadá do příštího dne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příštího dne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda den následující po dni určeném aktuálním systémovým časem odpovídá následujícímu dni.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Označuje, jestli toto datum spadá do příštího měsíce vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příštího měsíce vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda měsíc následující po měsíci určeném aktuálním systémovým časem odpovídá následujícímu měsíci.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Označuje, jestli toto datum spadá do příštího čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příštího čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda čtvrtletí následující po čtvrtletím určeném aktuálním systémovým časem odpovídá následujícímu čtvrtletí.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Označuje, jestli toto datum spadá do příštího týdne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příštího týdne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda týden následující po týdnu určeném aktuálním systémovým časem odpovídá následujícímu týdnu.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Označuje, jestli toto datum spadá do příštího roku vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příštího roku vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda rok následující po roce určeném aktuálním systémovým časem odpovídá následujícímu roku.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Označuje, jestli toto datum spadá do předchozího dne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozího dne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního dne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda den předcházející dni určenému aktuálním systémovým časem odpovídá předchozímu dni.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Označuje, jestli toto datum spadá do předchozího měsíce vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozího měsíce vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního měsíce.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda měsíc předcházející měsíci určenému aktuálním systémovým časem odpovídá předchozímu měsíci.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Označuje, jestli toto datum spadá do předchozího čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozího čtvrtletí vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního čtvrtletí.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda čtvrtletí předcházející měsíci určenému aktuálním systémovým časem odpovídá předchozímu čtvrtletí.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Označuje, jestli toto datum spadá do předchozího týdne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozího týdne vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního týdne.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda týden předcházející týdnu určenému aktuálním systémovým časem odpovídá předchozímu týdnu.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Označuje, jestli toto datum spadá do předchozího roku vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozího roku vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuálního roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda rok předcházející roku určenému aktuálním systémovým časem odpovídá předchozímu roku.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Značí, zda toto datum spadá do aktuálního roku a následuje nebo předchází aktuálnímu dni podle aktuálního data a času v systému.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do aktuálního roku a následuje nebo předchází aktuálnímu dni podle aktuálního data a času v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda aktuální systémový čas spadá do roku končícího aktuálním datem.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Značí, zda datum spadá do přestupného roku.",
        "Documentation.LongDescription": "Značí, zda předaná hodnota datetime <code>dateTime</code> spadá do přestupného roku. \r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda je rok 2012 reprezentovaný hodnotou <code>#date(2012, 01, 01)</code> přestupný",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Vrátí komponentu měsíce.",
        "Documentation.LongDescription": "Vrátí komponentu měsíce předané hodnoty <code>datetime</code> <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá měsíc v hodnotě #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Vrátí komponentu názvu měsíce.",
        "Documentation.LongDescription": "Vrátí název složky měsíce pro poskytnuté <code>date</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získejte název měsíce.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Vrátí číslo značící, do kterého čtvrtletí roku datum spadá.",
        "Documentation.LongDescription": "Vrátí číslo v rozsahu 1 až 4 značící, do kterého čtvrtletí roku spadá datum <code>dateTime</code>. <code>dateTime</code> může být hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, do kterého čtvrtletí roku spadá datum #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Vrátí začátek dne.",
        "Documentation.LongDescription": "Vrátí začátek dne, který představuje <code>dateTime</code>.\r\n    <code>dateTime</code> musí být hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek dne pro 10. října 2011, 8:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Vrátí začátek měsíce.",
        "Documentation.LongDescription": "Vrátí začátek měsíce, který obsahuje <code>dateTime</code>.\r\n    <code>dateTime</code> musí být hodnota <code>date</code> nebo <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek měsíce pro 10. října 2011, 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Vrátí začátek čtvrtletí.",
        "Documentation.LongDescription": "Vrátí začátek čtvrtletí, které obsahuje <code>dateTime</code>.\r\n      <code>dateTime</code> musí být hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek čtvrtletí pro 10. října 2011, 8:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Vrátí začátek týdne.",
        "Documentation.LongDescription": "Vrátí začátek týdne, který obsahuje <code>dateTime</code>.\r\n    <code>dateTime</code> musí být hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek týdne na úterý 11. října 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Najděte začátek týdne pro úterý 11. října 2011 a jako začátek týdne použijte pondělí.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Vrátí začátek roku.",
        "Documentation.LongDescription": "Vrátí začátek roku, který obsahuje <code>dateTime</code>.\r\n    <code>dateTime</code> musí být hodnota <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek roku pro 10. října 2011, 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Vrátí záznam obsahující části hodnoty date.",
        "Documentation.LongDescription": "Vrátí záznam obsahující části předané hodnoty date <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: Hodnota <code>date</code>, ze které bude vypočítán záznam jejích částí.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>#date(2011, 12, 31)</code> na záznam obsahující části hodnoty date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Vrátí textovou reprezentaci hodnoty data.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci <code>date</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>culture</code> se používá pouze pro starší pracovní postupy.<code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum naformátuje výchozí hodnotou definovanou jazykovou verzí <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, hodnota<code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, můžou být <code>options</code> a <code>culture</code> také textové hodnoty. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>#date(2010, 12, 31)</code> na hodnotu <code>text</code>. <i>Výsledný výstup se může lišit v závislosti na aktuální jazykové verzi.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Najde rok v kalendáři Hidžra odpovídající 1. lednu 2000 v gregoriánském kalendáři.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Vrátí číslo od 1 do 6 určující, do kterého týdne v měsíci spadá toto datum.",
        "Documentation.LongDescription": "Vrátí číslo od 1 do 6 určující, do kterého týdne v měsíci spadá datum <code>dateTime</code>.\r\n <ul>\r\n         <li><code>dateTime</code>: Hodnota <code>datetime</code>, pro kterou je určen týden v měsíci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určete, na který týden připadá v roce 2011 15. března.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Vrátí číslo v rozsahu 1 až 54 značící, do kterého týdne roku spadá toto datum.",
        "Documentation.LongDescription": "Vrátí číslo od 1 do 54, které znamená, do jakého týdne roku datum <code>dateTime</code> spadá do.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>datetime</code>, pro kterou se týden roku určuje.</li>\r\n        <li><code>firstDayOfWeek</code>: Volitelná hodnota <code>Day.Type</code>, která určuje, který den se považuje za začátek nového týdne (například <code>Day.Sunday</code>). Pokud tento parametr není zadán, se použije se výchozí začátek týdne definovaný v jazykové verzi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určete, který týden v roce obsahuje 27. března 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Určete, který týden v roce obsahuje 27. března 2011, a jako začátek týdne použijte pondělí.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Vrátí komponentu roku.",
        "Documentation.LongDescription": "Vrátí komponentu roku předané hodnoty <code>datetime</code> <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá rok v hodnotě #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Vrátí komponentu data předané hodnoty date, datetime nebo datetimezone.",
        "Documentation.LongDescription": "Vrátí komponentu data <code>dateTime</code>, předané hodnoty <code>date</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Najít datum v hodnotě #datetime(2010, 12, 31, 11, 56, 02)",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Vytvoří z dané hodnoty hodnotu datetime.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>datetime</code> z předané hodnoty <code>value</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).\r\nPokud předaná hodnota <code>value</code> je <code>null</code>, funkce <code>DateTime.From</code> vrátí hodnotu <code>null</code>. Pokud je předaná hodnota <code>value</code> typu <code>datetime</code>, je vrácena hodnota <code>value</code>. Na hodnoty <code>datetime</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>datetime</code> z textové reprezentace. Další informace naleznete v popisu funkce <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: Hodnota <code>datetime</code> s <code>value</code> jako komponentou data a <code>12:00:00 AM</code> jako komponentou času.</li>\r\n        <li><code>datetimezone</code>: Místní ekvivalent <code>datetime</code> hodnoty <code>value</code>.</li>\r\n        <li><code>time</code>: Hodnota <code>datetime</code> s ekvivalentem data OLE Automation Date z <code>0</code> jako komponentou data a <code>value</code> jako komponentou času.</li>\r\n        <li><code>number</code>: Ekvivalent <code>datetime</code> vyjádřený OLE Automation Date podle <code>value</code>. </li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Převést hodnotu <code>#time(06, 45, 12)</code> na hodnotu <code>datetime</code>",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Převést řetězec <code>#date(1975, 4, 4)</code> na hodnotu <code>datetime</code>",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Vytvoří z čísla dlouhého 64 bitů hodnotu datetime.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>datetime</code> z hodnoty <code>fileTime</code> a převede ji na místní časové pásmo. Hodnota filetime je hodnota času souboru systému Windows, která znamená počet intervalů o délce 100 nanosekund, které uplynuly od 00:00 1. ledna roku 1601. (C.E.) Koordinovaný světový čas (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Převést řetězec <code>129876402529842245</code> na hodnotu datetime",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Vytvoří hodnotu datetimezone z místního a univerzálního formátu datetime.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>datetime</code> z textové reprezentace <code>text</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum parsuje podle nejvhodnějšího postupu.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má hodnota <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, jazyková verze <code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, může být <code>options</code> také textová hodnota. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = null, Culture= <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>\"2010-12-31T01:30:00\"</code> na hodnotu datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Převede řetězec <code>\"2010-12-31T01:30:00.121212\"</code> na hodnotu datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Převede řetězec <code>\"2010-12-31T01:30:00\"</code> na hodnotu datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Převede řetězec <code>\"20101231T013000\"</code> na hodnotu datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Určuje, jestli tato hodnota datetime spadá do aktuální hodiny vzhledem k aktuálnímu systémovému datu a času.",
        "Documentation.LongDescription": "Určuje, jestli předaná hodnota datetime <code>dateTime</code> spadá do aktuální hodiny vzhledem k aktuálnímu systémovému datu a času.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli aktuální systémový čas spadá do aktuální hodiny.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Určuje, jestli tato hodnota datetime spadá do aktuální minuty vzhledem k aktuálnímu datu a času v systému.",
        "Documentation.LongDescription": "Určuje, jestli předaná hodnota datetime <code>dateTime</code> spadá do aktuální minuty vzhledem k aktuálnímu datu a času v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli aktuální systémový čas spadá do aktuální minuty.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Určuje, jestli tato hodnota datetime spadá do aktuální sekundy vzhledem k aktuálnímu datu a času v systému.",
        "Documentation.LongDescription": "Určuje, jestli předaná hodnota datetime <code>dateTime</code> spadá do aktuální sekundy vzhledem k aktuálnímu datu a času v systému.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli aktuální systémový čas spadá do aktuální sekundy.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do příští hodiny vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příští hodiny vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli hodina následující po hodině určené aktuálním systémovým časem spadá do příští hodiny.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do příští minuty vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příští minuty vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli minuta následující po minutě určené aktuálním systémovým časem spadá do příští minuty.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do příští sekundy vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do příští sekundy vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli sekunda následující po sekundě určené aktuálním systémovým časem spadá do příští sekundy.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do předchozí hodiny vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozí hodiny vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli hodina předcházející hodině určené aktuálním systémovým časem spadá do předchozí hodiny.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do předchozí minuty vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozí minuty vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli minuta předcházející minutě určené aktuálním systémovým časem spadá do předchozí minuty.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Označuje, jestli tato hodnota datetime spadá do předchozí sekundy vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.",
        "Documentation.LongDescription": "Označuje, jestli daná hodnota datetime <code>dateTime</code> spadá do předchozí sekundy vzhledem k aktuálnímu datu a času v systému. Pozor, že tato funkce vrátí „false“, pokud je jí předána hodnota, která nastává v rámci aktuální sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> nebo <code>datetimezone</code> k vyhodnocení.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určuje, jestli sekunda předcházející sekundě určené aktuálním systémovým časem spadá do předchozí sekundy.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Vrátí časovou část předané hodnoty datetime.",
        "Documentation.LongDescription": "Vrátí časovou část předané hodnoty datetime, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Najít hodnotu času v hodnotě #datetime(2010, 12, 31, 11, 56, 02)",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Vrátí záznam obsahující části hodnoty datetime.",
        "Documentation.LongDescription": "Vrátí záznam obsahující části předané hodnoty datetime, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>datetime</code>, ze které bude vypočítán záznam jejích částí.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Převést hodnotu <code>#datetime(2011, 12, 31, 11, 56, 2)</code> na záznam obsahující hodnoty data a času",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Vrátí textovou reprezentaci hodnoty datetime.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci <code>dateTime</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>culture</code> se používá pouze pro starší pracovní postupy.<code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum naformátuje výchozí hodnotou definovanou jazykovou verzí <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, hodnota<code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, můžou být <code>options</code> a <code>culture</code> také textové hodnoty. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>#datetime(2010, 12, 31, 01, 30, 25)</code> na hodnotu <code>text</code>. <i>Výsledný výstup se může lišit v závislosti na aktuální jazykové verzi.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Převod pomocí vzoru ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Vytvoří z dané hodnoty hodnotu datetimezone.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>datetimezone</code> z předané hodnoty <code>value</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).\r\nPokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>DateTimeZone.From</code> vrátí hodnotu <code>null</code>. Pokud předaná hodnota <code>value</code> je typu <code>datetimezone</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>datetimezone</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>datetimezone</code> z textové reprezentace. Další informace naleznete v popisu funkce <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: Hodnota <code>datetimezone</code> s <code>value</code> jako komponentou data, <code>12:00:00 AM</code> jako komponentou času a posunem odpovídajícím místnímu časovému pásmu.</li>\r\n        <li><code>datetime</code>: Hodnota <code>datetimezone</code> s <code>value</code> jako datetime a posunem odpovídajícím místnímu časovému pásmu.</li>\r\n        <li><code>time</code>: Hodnota <code>datetimezone</code> s datem ekvivalentním OLE Automation Date <code>0</code> jako komponentou data, <code>value</code> jako komponentou času a posunem odpovídajícím místnímu časovému pásmu.</li>\r\n        <li><code>number</code>: Hodnota <code>datetimezone</code> s datetime ekvivalentem OLE Automation Date vyjádřeným pomocí <code>value</code> a posunem odpovídajícím místnímu časovému pásmu </li>.\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Převést řetězec <code>\"2020-10-30T01:30:00-08:00\"</code> na hodnotu <code>datetimezone</code>",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Vytvoří z čísla dlouhého 64 bitů hodnotu datetimezone.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>datetimezone</code> z hodnoty <code>fileTime</code> a převede ji na místní časové pásmo. Hodnota filetime je hodnota času souboru systému Windows, která znamená počet intervalů o délce 100 nanosekund, které uplynuly od 00:00 1. ledna 1601 (n. l.) koordinovaného světového času (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Převést řetězec <code>129876402529842245</code> na hodnotu datetimezone",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Vytvoří hodnotu datetimezone z místních, univerzálních a vlastních formátů datetimezone.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>datetimezone</code> z textové reprezentace <code>text</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum parsuje podle nejvhodnějšího postupu.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má hodnota <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, jazyková verze <code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, může být <code>options</code> také textová hodnota. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = null, Culture= <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>\"2010-12-31T01:30:00-08:00\"</code> na hodnotu <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Převod pomocí ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Odebere údaj o časovém pásmu z dané hodnoty datetimezone.",
        "Documentation.LongDescription": "Vrátí hodnotu #datetime z <code>dateTimeZone</code> s odebraným údajem o časovém pásmu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Odebrat údaj o časovém pásmu z hodnoty #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Převede komponentu údajů o časovém pásmu na místní časové pásmo.",
        "Documentation.LongDescription": "Změní údaj o časovém pásmu z hodnoty datetimezone <code>dateTimeZone</code> na údaje o místním časovém pásmu.\r\n    Pokud <code>dateTimeZone</code> neobsahuje komponentu časového pásma, přidá se údaj o místním časovém pásmu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Změnit údaj o časovém pásmu pro hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na místní časové pásmo (předpokládá se PST)",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Vrátí záznam obsahující části hodnoty datetimezone.",
        "Documentation.LongDescription": "Vrátí záznam obsahující části předané hodnoty datetimezone, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Hodnota <code>datetimezone</code>, ze které bude vypočítán záznam jejích částí.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> na záznam obsahující hodnoty data, času a časového pásma.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Vrátí textovou reprezentaci hodnoty datetimezone.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci <code>dateTimeZone</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>culture</code> se používá pouze pro starší pracovní postupy.<code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Další informace najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum naformátuje výchozí hodnotou definovanou jazykovou verzí <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"MMM\"</code> hodnotu <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatímco u <code>\"ru-RU\"</code> má <code>\"MMM\"</code> hodnotu <code>\"янв\", \"фев\", \"мар\", ...</code>. Když má <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, hodnota<code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, můžou být <code>options</code> a <code>culture</code> také textové hodnoty. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> na hodnotu <code>text</code>. <i>Výsledný výstup se může lišit v závislosti na aktuální jazykové verzi.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Převod pomocí vzoru ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Převede komponentu údajů o časovém pásmu na časové pásmo UTC.",
        "Documentation.LongDescription": "Změní údaj o časovém pásmu z hodnoty datetime <code>dateTimeZone</code> na údaje o časovém pásmu UTC.\r\n    Pokud <code>dateTimeZone</code> neobsahuje komponentu časového pásma, přidá se údaj o časovém pásmu UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Změnit údaj o časovém pásmu pro hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na časové pásmo UTC",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Změní časové pásmo hodnoty.",
        "Documentation.LongDescription": "Změní časové pásmo hodnoty.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Změní časové pásmo hodnoty.",
        "Documentation.LongDescription": "Změní časové pásmo hodnoty.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Vytvoří z dané hodnoty hodnotu Decimal.",
        "Documentation.LongDescription": "Vrátí hodnotu Decimal <code>number</code> z dané hodnoty <code>value</code>. Pokud je daná hodnota <code>value</code> <code>null</code>, příkaz <code>Decimal.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> <code>number</code> v rozsahu Decimal, vrátí se <code>value</code>, jinak se vrátí chyba. Pokud má daná hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte hodnotu Decimal <code>number</code> <code>\"4,5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Vrátí obsah tabulky Delta Lake.",
        "Documentation.LongDescription": "Vrátí obsah tabulky Delta Lake.",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Vytvoří z dané hodnoty hodnotu Double.",
        "Documentation.LongDescription": "Vrátí hodnotu Double <code>number</code> z dané hodnoty <code>value</code>. Pokud je daná hodnota <code>value</code> <code>null</code>, příkaz <code>Double.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> <code>number</code> v rozsahu Double, vrátí se <code>value</code>, jinak se vrátí chyba. Pokud má daná hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte hodnotu Double <code>number</code> <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Vrátí denní část doby trvání.",
        "Documentation.LongDescription": "Vrátí denní část z <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahuje počet dní mezi dvěma daty.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Vytvoří hodnotu duration z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>duration</code> z předané hodnoty <code>value</code>. Pokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Duration.From</code> vrátí hodnotu <code>null</code>.  Pokud je předaná hodnota <code>value</code> typu <code>duration</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>duration</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>duration</code> z textového formátu uplynulého času (d.h:m:s). Další informace naleznete v popisu funkce <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: Hodnota <code>duration</code> ekvivalentní k počtu celých dnů a zlomků dnů vyjádřených hodnotou <code>value</code>.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>2.525</code> na hodnotu <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Vrátí hodnotu duration z textového formátu uplynulého času (d.h:m:s).",
        "Documentation.LongDescription": "Vrátí hodnotu trvání z předané textové hodnoty <code>text</code>. Pomocí této funkce lze analyzovat následující formáty:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd.hh:mm(:ss(.ff)) </li>\r\n </ul>\r\n        <br>\r\n        (Všechny rozsahy jsou včetně krajních hodnot)<br>\r\n        ddd: Počet dnů.<br>\r\n        hh: Počet hodin, mezi 0 a 23.<br>\r\n        mm: Počet minut, mezi 0 a 59.<br>\r\n        ss: Počet sekund, mezi 0 a 59.<br>\r\n        ff: Část sekundy, mezi 0 a 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>\"2.05:55:20\"</code> na hodnotu <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Vrátí hodinovou část doby trvání.",
        "Documentation.LongDescription": "Vrátí hodinovou část z <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahovat hodiny z hodnoty doby trvání.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Vrátí minutovou část doby trvání.",
        "Documentation.LongDescription": "Vrátí minutovou část z <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahovat minuty z hodnoty doby trvání.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Vrátí sekundovou část doby trvání.",
        "Documentation.LongDescription": "Vrátí sekundovou část z <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahovat sekundy z hodnoty doby trvání.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Vrátí záznam obsahující části hodnoty duration.",
        "Documentation.LongDescription": "Vrátí záznam obsahující části hodnoty duration <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: Hodnota <code>duration</code>, ze které je vytvořen záznam.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>#duration(2, 5, 55, 20)</code> na záznam obsahující její části včetně dnů, hodin, minut a sekund (pokud je to možné).",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Vrátí textovou reprezentaci formátu d.h:m:s.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci ve formě „day.hour:mins:sec“ dané hodnoty doby trvání, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>Doba trvání</code>, ze které je textová reprezentace počítána. </li>\r\n  <li><code>format</code>: <i>[Volitelné]</i> Už není podporováno – pokud není null, vyvolá chybu</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>#duration(2, 5, 55, 20)</code> na textovou hodnotu.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Vrátí celkový počet dnů doby trvání.",
        "Documentation.LongDescription": "Vrátí celkový počet dnů zahrnutý do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Vyhledat celkový počet dnů zahrnutý do hodnoty doby trvání.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Vrátí celkový počet hodin doby trvání.",
        "Documentation.LongDescription": "Vrátí celkový počet hodin zahrnutý do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Vyhledat celkový počet hodin zahrnutý do hodnoty doby trvání.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Vrátí celkový počet minut doby trvání.",
        "Documentation.LongDescription": "Vrátí celkový počet minut zahrnutý do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Vyhledat celkový počet minut zahrnutý do hodnoty doby trvání.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Vrátí celkový počet sekund doby trvání.",
        "Documentation.LongDescription": "Vrátí celkový počet sekund zahrnutý do <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Vyhledat celkový počet sekund zahrnutý do hodnoty doby trvání.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Vrátí záznam chyby z poskytnutých textových hodnot obsahující informaci o příčině, zprávu a podrobnosti.",
        "Documentation.LongDescription": "Vrátí záznam chyby z poskytnutých textových hodnot obsahující informaci o příčině, zprávu a podrobnosti.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Vrátí reprezentaci zdrojového kódu M konstantní hodnoty.",
        "Documentation.LongDescription": "Vrátí reprezentaci zdrojového kódu M konstantní hodnoty.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Získá reprezentaci zdrojového kódu M číselné hodnoty.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Získá reprezentaci zdrojového kódu M hodnoty data.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Získá reprezentaci zdrojového kódu M textové hodnoty.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Vrátí výsledek vyhodnocení výrazu M.",
        "Documentation.LongDescription": "Vrátí výsledek vyhodnocení výrazu M <code>document</code> s dostupnými identifikátory, na které se dá odkazovat, definovanými podle <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Vyhodnotí jednoduchý součet.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Vyhodnotí komplexnější součet.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Vyhodnotí zřetězení textové hodnoty s identifikátorem.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Vrátí reprezentaci zdrojového kódu M identifikátoru.",
        "Documentation.LongDescription": "Vrátí reprezentaci zdrojového kódu M identifikátoru <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Získá reprezentaci zdrojového kódu M identifikátoru.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Získá reprezentaci zdrojového kódu M identifikátoru, který obsahuje mezeru.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Vrátí obsah určeného souboru jako binární hodnotu.",
        "Documentation.LongDescription": "Vrátí obsah souboru <code>path</code>jako binární. Parametr <code>options</code> je aktuálně určen pouze pro interní použití.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Vrátí informaci o tom, jestli se konkrétní funkce považuje za zdroj dat, nebo ne.",
        "Documentation.LongDescription": "Vrátí informaci o tom, jestli se <code>function</code> považuje za zdroj dat, nebo ne.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Přeloží text reprezentující geografickou hodnotu ve formátu WKT (Well-Known Text) na strukturovaný záznam.",
        "Documentation.LongDescription": "Přeloží text reprezentující geografickou hodnotu ve formátu WKT (Well-Known Text) na strukturovaný záznam. WKT je standardní formát definovaný konsorciem Open Geospatial Consortium (OGC) a jedná se o typický formát serializace používaný databázemi včetně SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Přeloží strukturovanou hodnotu geografických bodů na její reprezentaci WKT (Well-Known Text).",
        "Documentation.LongDescription": "Přeloží strukturovanou hodnotu geografických bodů na její reprezentaci WKT (Well-Known Text), jak je definovaná konsorciem Open Geospatial Consortium (OGC), a také formát serializace, který používá mnoho databází, včetně SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Přeloží text reprezentující geometrickou hodnotu ve formátu WKT (Well-Known Text) na strukturovaný záznam.",
        "Documentation.LongDescription": "Přeloží text reprezentující geometrickou hodnotu ve formátu WKT (Well-Known Text) na strukturovaný záznam. WKT je standardní formát definovaný konsorciem Open Geospatial Consortium (OGC) a jedná se o typický formát serializace používaný databázemi včetně SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Přeloží strukturovaný geometrický bod na jeho reprezentaci WKT (Well-Known Text).",
        "Documentation.LongDescription": "Přeloží strukturovaný geometrický bod na jeho reprezentaci WKT (Well-Known Text), jak je definovaná konsorciem Open Geospatial Consortium (OGC), a také formát serializace, který používá mnoho databází, včetně SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Vrátí hodnotu GUID ze zadané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>Guid.Type</code> z dané <code>value</code>. Pokud dané <code>value</code> je <code>null</code>, <code>Guid.From</code> vrátí <code>null</code>.  Bude provedena kontrola, jestli je dané <code>value</code> v přijatelném formátu. Přípustné formáty jsou uvedeny v příkladech.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Identifikátor Guid lze zadat jako 32 šestnáctkových číslic bez mezer.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor Guid lze zadat jako 32 šestnáctkových číslic oddělených spojovníky na bloky 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor Guid lze zadat jako 32 šestnáctkových číslic oddělených spojovníky a uzavřených v závorkách.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor Guid lze zadat jako 32 šestnáctkových číslic oddělených spojovníky a uzavřených v uvozovkách.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Vytvoří z dané hodnoty 16bitové celé číslo.",
        "Documentation.LongDescription": "Vrátí 16bitovou celočíselnou hodnotu <code>number</code> z dané hodnoty <code>value</code>. Pokud má daná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Int16.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> číslo <code>number</code> v rozsahu 16bitových celých čísel bez zlomkové části, vrátí se hodnota <code>value</code>. Pokud má zlomkovou část, číslo se zaokrouhlí podle zadaného režimu zaokrouhlování. Výchozí režim zaokrouhlování je <code>RoundingMode.ToEven</code>. Pokud má hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Další režimy zaokrouhlování viz <code>Number.Round</code>. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte 16bitové celé číslo hodnoty <code>number</code> <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Načte 16bitové celé číslo hodnoty <code>number</code> <code>\"4,5\"</code> s použitím <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Vytvoří z dané hodnoty 32bitové celé číslo.",
        "Documentation.LongDescription": "Vrátí 32bitovou celočíselnou hodnotu <code>number</code> z dané hodnoty <code>value</code>. Pokud má daná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Int32.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> číslo <code>number</code> v rozsahu 32bitových celých čísel bez zlomkové části, vrátí se hodnota <code>value</code>. Pokud má zlomkovou část, číslo se zaokrouhlí podle zadaného režimu zaokrouhlování. Výchozí režim zaokrouhlování je <code>RoundingMode.ToEven</code>. Pokud má hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Další režimy zaokrouhlování viz <code>Number.Round</code>. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte 32bitové celé číslo hodnoty <code>number</code> <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Načte 32bitové celé číslo hodnoty <code>number</code> <code>\"4,5\"</code> s použitím <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Vytvoří 64bitové celé číslo z dané hodnoty.",
        "Documentation.LongDescription": "Vrátí 64bitovou celočíselnou hodnotu <code>number</code> z dané hodnoty <code>value</code>. Pokud má daná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Int64.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> číslo <code>number</code> v rozsahu 64bitových celých čísel bez zlomkové části, vrátí se hodnota <code>value</code>. Pokud má zlomkovou část, číslo se zaokrouhlí podle zadaného režimu zaokrouhlování. Výchozí režim zaokrouhlování je <code>RoundingMode.ToEven</code>. Pokud má hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Další režimy zaokrouhlování viz <code>Number.Round</code>. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získá 64bitovou celočíselnou hodnotu <code>number</code> hodnoty <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získá 64bitovou celočíselnou hodnotu <code>number</code> hodnoty <code>4,5</code> pomocí funkce <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Vytvoří z dané hodnoty 8bitové celé číslo se znaménkem.",
        "Documentation.LongDescription": "Vrátí podepsanou 8bitovou celočíselnou hodnotu <code>number</code> z dané hodnoty <code>value</code>. Pokud má daná hodnota <code>value</code> hodnotu <code>null</code>, příkaz <code>Int8.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> číslo <code>number</code> v rozsahu podepsaných 8bitových celých čísel bez zlomkové části, vrátí se hodnota <code>value</code>. Pokud má zlomkovou část, číslo se zaokrouhlí podle zadaného režimu zaokrouhlování. Výchozí režim zaokrouhlování je <code>RoundingMode.ToEven</code>. Pokud má hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Další režimy zaokrouhlování viz <code>Number.Round</code>. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte 8bitové celé číslo se znaménkem z hodnoty <code>number</code> <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Načte 8bitové celé číslo se znaménkem hodnoty <code>number</code> <code>\"4,5\"</code> s použitím <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Vrátí strom abstraktní syntaxe (AST) pro tělo funkce.",
        "Documentation.LongDescription": "<p>Vrátí strom abstraktní syntaxe (AST) pro tělo funkce <code>function</code> normalizované do <i>výrazu položky</i>:\r\n<ul>\r\n  <li>Funkce musí být lambda s jedním argumentem.</li>:\r\n  <li>Všechny reference na parametr funkce se nahradí za <code>ItemExpression.Item</code>.</li>:\r\n  <li>AST bude zjednodušený a bude obsahovat jenom uzly těchto druhů:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Pokud pro tělo <code>function</code> nejde vrátit strom abstraktní syntaxe výrazu položky, vyvolá se chyba.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrátí AST pro tělo funkce <code>each _ <> null</code>.",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Vrátí obsah dokumentu JSON.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Vytvoří reprezentaci JSON dané hodnoty.",
        "Documentation.LongDescription": "<p>Vytvoří reprezentaci JSON dané hodnoty <code>value</code> s kódováním textu zadaným pomocí <code>encoding</code>. Při vynechání <code>encoding</code> se použije kódování UTF8. Hodnoty se reprezentují takto:</p>\r\n <ul>\r\n        <li>Hodnoty null, textové a logické hodnoty se reprezentují jako odpovídající typy JSON.</li>\r\n        <li>Čísla se reprezentují jako čísla v JSON s tou výjimkou, že <code>#infinity</code>, <code>-#infinity</code> a <code>#nan</code> se převedou na hodnotu null.</li>\r\n        <li>Seznamy se reprezentují jako pole JSON.</li>\r\n        <li>Záznamy se reprezentují jako objekty JSON.</li>\r\n        <li>Tabulky se reprezentují jako pole objektů.</li>\r\n        <li>Data, časy, data a časy, časová pásma a doby trvání se reprezentují jako text ISO-8601.</li>\r\n        <li>Binární hodnoty se reprezentují jako text s kódováním base-64.</li>\r\n        <li>Typy a funkce způsobí chybu.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Převod komplexní hodnoty na JSON",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Převede binární hodnotu na seznam textových hodnot rozdělených na koncích řádků. Pokud je určen styl uvozovek, mohou být znaky konců řádků uzavřeny do uvozovek. Pokud má parametr includeLineSeparators hodnotu True, jsou znaky konců řádků zahrnuty do textu.",
        "Documentation.LongDescription": "Převede binární hodnotu na seznam textových hodnot rozdělených na koncích řádků. Pokud je určen styl uvozovek, mohou být znaky konců řádků uzavřeny do uvozovek. Pokud má parametr includeLineSeparators hodnotu True, jsou znaky konců řádků zahrnuty do textu.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Převede textovou hodnotu na seznam textových hodnot rozdělených na koncích řádků. Pokud má parametr includeLineSeparators hodnotu True, jsou znaky konců řádků zahrnuté do textu.",
        "Documentation.LongDescription": "Převede textovou hodnotu na seznam textových hodnot rozdělených na koncích řádků. Pokud má parametr includeLineSeparators hodnotu True, jsou znaky konců řádků zahrnuté do textu.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> Nejsou potřebné žádné uvozovky (výchozí).</li>\r\n            <li><code>QuoteStyle.Csv:</code> Uvozovky jsou jako v CSV. Pomocí znaku dvojité uvozovky se oddělují oblasti a pár znaků dvojité uvozovky označuje jeden znak dvojité uvozovky uvnitř oblasti. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Převede seznam textových hodnot na binární hodnoty pomocí určeného kódování a hodnoty lineSeparator. Ke každému řádku je připojena zadaná hodnota lineSeparator. Pokud není tato hodnota určena, jsou použity znaky návratu na začátek řádku a odřádkování.",
        "Documentation.LongDescription": "Převede seznam textových hodnot na binární hodnoty pomocí určeného kódování a hodnoty lineSeparator. Ke každému řádku je připojena zadaná hodnota lineSeparator. Pokud není tato hodnota určena, jsou použity znaky návratu na začátek řádku a odřádkování.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Převede seznam textových hodnot na jedinou textovou hodnotu. Ke každému řádku je připojena zadaná hodnota lineSeparator. Pokud není tato hodnota určena, jsou použity znaky návratu na začátek řádku a odřádkování.",
        "Documentation.LongDescription": "Převede seznam textových hodnot na jedinou textovou hodnotu. Ke každému řádku je připojena zadaná hodnota lineSeparator. Pokud není tato hodnota určena, jsou použity znaky návratu na začátek řádku a odřádkování.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Vrátí hodnotu True, pokud mají všechny výrazy hodnotu True.",
        "Documentation.LongDescription": "Vrátí hodnotu True, pokud mají všechny výrazy v seznamu <code>list</code> hodnotu True.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda mají všechny výrazy v seznamu {true, true, 2 > 0} hodnotu True.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Určí, zda mají všechny výrazy v seznamu {true, true, 2 < 0} hodnotu True.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Vrátí hodnotu True, pokud má jakýkoliv výraz hodnotu True.",
        "Documentation.LongDescription": "Vrátí hodnotu True, pokud má některý výraz v seznamu <code>list</code> hodnotu True.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Určí, zda má některý výraz v seznamu {true, false, 2 > 0} hodnotu True.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Určí, zda má některý výraz v seznamu {2 = 0, false, 2 < 0} hodnotu True.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Vrátí průměrnou hodnotu hodnot. Pracuje s hodnotami number, date, datetime, datetimezone a duration.",
        "Documentation.LongDescription": "Vrátí průměrnou hodnotu položek v seznamu <code>list</code>. Výsledek je stejného datového typu jako hodnoty v seznamu. Pracuje pouze s hodnotami typu number, date, time, datetime, datetimezone a duration.\r\n    Pokud je seznam prázdný, vrátí prázdnou hodnotu null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá průměrnou hodnotu seznamu čísel <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Vyhledá průměrnou hodnotu hodnot date January 1, 2011, January 2, 2011 a January 3, 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Uloží seznam do vyrovnávací paměti.",
        "Documentation.LongDescription": "Uloží seznam <code>list</code> do vyrovnávací paměti. Výsledkem tohoto volání je stabilní seznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří stabilní kopii seznamu {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Vrátí jediný seznam spojující více seznamů.",
        "Documentation.LongDescription": "Přebere seznam seznamů <code>lists</code> a sloučí je do jediného nového seznamu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Spojí dva jednoduché seznamy {1, 2} a {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Spojí dva seznamy {1, 2} a {3, {4, 5}} z nichž jeden obsahuje vnořený seznam.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Vrátí počet položek seznamu.",
        "Documentation.LongDescription": "Vrátí počet položek seznamu <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí počet hodnot v seznamu {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Vrátí seznam hodnot s odebranými duplicitními hodnotami.",
        "Documentation.LongDescription": "Vrátí tabulku, která obsahuje všechny hodnoty v seznamu <code>list</code> s odebranými duplikáty. Pokud je seznam prázdný, výsledkem je prázdný seznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Odebere duplicitní hodnoty ze seznamu {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Vrátí první hodnotu ze seznamu, nebo určenou výchozí hodnotu, pokud je seznam prázdný.",
        "Documentation.LongDescription": "Vrátí první položku v seznamu <code>list</code> nebo volitelnou výchozí hodnotu <code>defaultValue</code>, pokud je seznam prázdný.\r\n    Pokud je seznam prázdný a není určena výchozí hodnota, funkce vrátí hodnotu <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zjistí první hodnotu v seznamu {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Zjistí první hodnotu v seznamu {}. Pokud je seznam prázdný, vrátí -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Vrátí průnik hodnot seznamu nalezených ve vstupu.",
        "Documentation.LongDescription": "Vrátí průnik hodnot seznamu nalezených ve vstupním seznamu <code>lists</code>. Lze určit volitelný parametr <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Zjistí průnik seznamů {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Značí, zda seznam obsahuje duplicitní hodnoty.",
        "Documentation.LongDescription": "Vrátí logickou hodnotu, která značí, zda seznam obsahuje duplicitní hodnoty <code>list</code>. Pokud seznam obsahuje pouze jedinečné hodnoty, vrátí hodnotu <code>true</code>. Pokud seznam obsahuje duplicitní hodnoty, vrátí hodnotu <code>false</code>. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda seznam {1, 2, 3} obsahuje pouze jedinečné hodnoty (tj., zda neobsahuje žádné duplikáty).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda seznam {1, 2, 3, 3} obsahuje pouze jedinečné hodnoty (tj., zda neobsahuje žádné duplikáty).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Vrátí hodnotu True, pokud je seznam prázdný.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>true</code>, pokud seznam <code>list</code> neobsahuje žádné hodnoty (má délku 0). Pokud seznam obsahuje hodnoty (má délku větší než 0), vrátí <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda je seznam {} prázdný.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda je seznam {1, 2} prázdný.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Vrátí poslední hodnotu ze seznamu nebo určenou výchozí hodnotu, pokud je seznam prázdný.",
        "Documentation.LongDescription": "Vrátí poslední položku v seznamu <code>list</code> nebo volitelnou výchozí hodnotu <code>defaultValue</code>, pokud je seznam prázdný.\r\n    Pokud je seznam prázdný a není určena výchozí hodnota, funkce vrátí hodnotu <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá poslední hodnotu v seznamu {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Vyhledá poslední hodnotu v seznamu {} nebo vrátí hodnotu -1, pokud je seznam prázdný.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Vrátí poslední hodnotu v seznamu.  Volitelně lze určit, kolik hodnot se má vrátit, nebo kvalifikující podmínku.",
        "Documentation.LongDescription": "Vrátí poslední hodnotu v seznamu <code>list</code>. Pokud je seznam prázdný, vyvolá se výjimka.\r\n Tato funkce přebírá volitelný parametr <code>countOrCondition</code>, jehož pomocí podporuje shromažďování víc položek nebo filtrování položek. Hodnota <code>countOrCondition</code> se dá zadat třemi různými způsoby.\r\n <ul>\r\n  <li>Pokud je zadané číslo, vrátí sadu položek obsahující maximálně tolik položek, kolik určuje toto číslo. </li>\r\n  <li>Pokud je zadaná podmínka, vrátí všechny položky, které podmínku splňují, počínaje od konce seznamu. Pokud jakákoliv položka podmínku nesplňuje, už se další položky po této položce nezpracují. </li>\r\n  <li>Pokud má tento parametr hodnotu null, vrátí se poslední položka v seznamu.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá poslední hodnotu v seznamu {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Vyhledá v seznamu {3, 4, 5, -1, 7, 8, 2} poslední hodnoty, které jsou větší než 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Vrátí maximální hodnotu nebo výchozí hodnotu, pokud je seznam prázdný.",
        "Documentation.LongDescription": "Vrátí nejvyšší položku v seznamu <code>list</code> nebo volitelnou výchozí hodnotu <code>default</code>, pokud je seznam prázdný.\r\n    Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> a určit její pomocí způsob porovnání položek v seznamu. Pokud má parametr hodnotu null, použije se výchozí porovnávač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá nejvyšší hodnotu v seznamu {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Vyhledá nejvyšší hodnotu v seznamu {} nebo vrátí hodnotu -1, pokud je seznam prázdný. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Vrátí střední hodnotu v seznamu.",
        "Documentation.LongDescription": "Vrátí položku mediánu ze seznamu <code>list</code>. Pokud seznam neobsahuje žádné hodnoty, které nejsou <code>null</code>, vrátí funkce hodnotu <code>null</code>.\r\n Pokud seznam obsahuje sudý počet položek, funkce vybere menší ze dvou položek mediánu (pokud se seznam\r\n    neskládá výhradně z kalendářních dat a časů, dob trvání, čísel nebo časů – v takovém případě funkce vrátí průměrnou hodnotu těchto dvou položek).",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá střední hodnotu v seznamu <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Vrátí minimální hodnotu nebo výchozí hodnotu, pokud je seznam prázdný.",
        "Documentation.LongDescription": "Vrátí nejnižší položku v seznamu <code>list</code> nebo volitelnou výchozí hodnotu <code>default</code>, pokud je seznam prázdný.\r\n    Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> a určit její pomocí způsob porovnání položek v seznamu. Pokud má parametr hodnotu null, použije se výchozí porovnávač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá nejnižší hodnotu v seznamu {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Vyhledá nejnižší hodnotu v seznamu {} nebo vrátí hodnotu -1, pokud je seznam prázdný. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Vrátí nejčastěji se vyskytující hodnotu v seznamu.",
        "Documentation.LongDescription": "Vrátí nejčastěji se vyskytující položku v seznamu <code>list</code>. Pokud je seznam prázdný, je vyvolána výjimka. Pokud seznam obsahuje více položek se stejným nejvyšším výskytem, je vybrána poslední z nich.\r\n    Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> <code>equationCriteria</code>, která ovládá testování rovnosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá nejčastěji se vyskytující položku v seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Vyhledá nejčastěji se vyskytující položku v seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Vrátí seznam nejčastěji se vyskytujících hodnot v seznamu.",
        "Documentation.LongDescription": "Vrátí nejčastěji se vyskytující položku v seznamu <code>list</code>. Pokud je seznam prázdný, je vyvolána výjimka. Pokud seznam obsahuje více položek se stejným nejvyšším výskytem, je vybrána poslední z nich.\r\n    Lze zadat volitelnou hodnotu <code>comparisonCriteria</code> <code>equationCriteria</code>, která ovládá testování rovnosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá nejčastěji se vyskytující položky v seznamu <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Vrátí počet položek seznamu, které nemají hodnotu null.",
        "Documentation.LongDescription": "Vrátí počet položek seznamu <code>list</code>, které nemají hodnotu null.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Vrátí seznam posunutí pro daný vstup.",
        "Documentation.LongDescription": "Vrátí seznam posunutí pro daný vstupní seznam <code>list</code>.\r\n    Při použití funkce List.Transform ke změně seznamu lze použít seznam pozic a poskytnout tak transformační funkci přístup k dané pozici.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zjistí posunutí hodnot v seznamu {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Vrátí součin čísel v seznamu.",
        "Documentation.LongDescription": "Vrátí součin číselných hodnot v seznamu <code>numbersList</code>, které nemají hodnotu null. Pokud seznam neobsahuje jiné hodnoty než null, vrátí hodnotu null.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Vrátí součin čísel v seznamu <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Vrátí seznam náhodných čísel.",
        "Documentation.LongDescription": "Vrátí seznam náhodných čísel od 0 do 1 na základě předaného počtu hodnot, které se mají vygenerovat, a volitelné počáteční hodnoty.\r\n<ul>\r\n   <li><code>count</code>: Počet náhodných hodnot, které se mají vygenerovat.</li>\r\n   <li><code>seed</code>: <i>[volitelné]</i> Číselná hodnota použitá jako počáteční hodnota generátoru náhodných čísel. Pokud se vynechá, vygeneruje se při každém volání funkce jedinečný seznam náhodných čísel. Pokud zadáte počáteční číselnou hodnotu, funkce při každém volání vygeneruje stejný seznam náhodných čísel.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam 3 náhodných čísel.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Vytvoří seznam 3 náhodných čísel za použití počáteční hodnoty.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Vrátí seznam s vynechaným určitým počtem prvků na začátku seznamu.",
        "Documentation.LongDescription": "Vrátí seznam, ze kterého je odebrán první prvek seznamu <code>list</code>. Pokud je seznam <code>list</code> prázdný, je vrácen prázdný seznam.\r\nTato funkce přebírá volitelný parametr <code>countOrCondition</code>, jehož pomocí podporuje odebrání více hodnot, viz níže.\r\n <ul>\r\n <li>Pokud je zadáno číslo, odebere až tolik položek, kolik je určeno tímto číslem. </li>\r\n <li>Pokud je zadána podmínka, vrácený seznam bude začínat prvním elementem seznamu <code>list</code>, který splňuje daná kritéria. Pokud jakákoliv položka podmínku nesplňuje, nejsou již další položky po této položce zpracovány. </li>\r\n <li>Pokud má parametr hodnotu null, použije se výchozí chování. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří ze seznamu {1, 2, 3, 4, 5} seznam bez prvních tří čísel.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Vytvoří ze seznamu {5, 4, 2, 6, 1} seznam, který začíná číslem menším než 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Vrátí seznam, ze kterého je odebrán určitý počet prvků na konci seznamu.",
        "Documentation.LongDescription": "Vrátí seznam, ze kterého je odebráno posledních <code>countOrCondition</code> určitý počet prvků na konci seznamu <code>list</code>. Pokud je seznam <code>list</code> obsahuje méně než <code>countOrCondition</code> prvků, je vrácen prázdný seznam.\r\n <ul>\r\n <li>Pokud je zadáno číslo, odebere až tolik položek, kolik je určeno tímto číslem. </li>\r\n <li>Pokud je zadána podmínka, vrácený seznam bude končit prvním prvek od konce seznamu <code>list</code>, který splňuje daná kritéria. Pokud jakákoliv položka podmínku nesplňuje, nejsou již další položky po této položce zpracovány. </li>\r\n <li>Pokud má parametr hodnotu null, bude vrácena pouze jedna položka. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří ze seznamu {1, 2, 3, 4, 5} seznam bez posledních tří čísel.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Vytvoří ze seznamu {5, 4, 2, 6, 4} seznam, který končí číslem menším než 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Odebere ze zadaného seznamu všechny hodnoty null.",
        "Documentation.LongDescription": "Odebere všechny výskyty hodnot null ze seznamu <code>list</code>. Pokud seznam neobsahuje žádné hodnoty null, je vrácen původní seznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odebere ze seznamu {1, 2, 3, null, 4, 5, null, 6} všechny hodnoty null.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Obrátí pořadí hodnot v seznamu.",
        "Documentation.LongDescription": "Vrátí seznam hodnot v seznamu <code>list</code> v obráceném pořadí.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří ze seznamu {1..10} seznam s obráceným pořadím hodnot.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Vrátí jednu položku seznamu pro seznam o délce 1. Jinak vyvolá výjimku.",
        "Documentation.LongDescription": "Pokud seznam <code>list</code> obsahuje pouze jedinou položku, vrátí tuto položku.\r\n    Pokud seznam obsahuje více než jednu položku nebo je prázdný, funkce vyvolá výjimku.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá jednu hodnotu v seznamu {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Vyhledá jednu hodnotu v seznamu {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Vrátí jednu položku seznamu pro seznam o délce 1 a výchozí hodnotu pro prázdný seznam.",
        "Documentation.LongDescription": "Pokud seznam <code>list</code> obsahuje pouze jedinou položku, vrátí tuto položku.\r\n    Pokud je seznam prázdný a není určena volitelná hodnota <code>default</code>, funkce vrátí hodnotu null. Pokud seznam obsahuje více než jednu položku, funkce vrátí chybu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá jednu hodnotu v seznamu {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Vyhledá jednu hodnotu v seznamu {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Vyhledá jednu hodnotu v seznamu {}. Pokud je prázdný, vrátí hodnotu -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Vrátí seznam s vynechaným určitým počtem prvků na začátku seznamu.",
        "Documentation.LongDescription": "Vrátí seznam, který neobsahuje první prvek seznamu <code>list</code>. Pokud je seznam <code>list</code> prázdný, je vrácen prázdný seznam.\r\nTato funkce přebírá volitelný parametr <code>countOrCondition</code>, jehož pomocí podporuje přeskočení více hodnot, viz níže.\r\n <ul>\r\n <li>Pokud je zadáno číslo, přeskočí až tolik položek, kolik je určeno tímto číslem. </li>\r\n <li>Pokud je zadána podmínka, vrácený seznam bude začínat prvním elementem seznamu <code>list</code>, který splňuje daná kritéria. Pokud jakákoliv položka podmínku nesplňuje, nejsou již další položky po této položce zpracovány. </li>\r\n <li>Pokud má parametr hodnotu null, použije se výchozí chování. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří ze seznamu {1, 2, 3, 4, 5} seznam bez prvních tří čísel.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Vytvoří ze seznamu {5, 4, 2, 6, 1} seznam, který začíná číslem menším než 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Seřadí seznam dat podle zadaných kritérií.",
        "Documentation.LongDescription": "Seřadí seznam dat <code>list</code> podle zadaných volitelných kritérií.\r\n    Jako kritérium porovnání se dá zadat volitelný parametr <code>comparisonCriteria</code>. Ten může mít tyto hodnoty:\r\n    <ul>\r\n    <li> K určení pořadí může být kritérium porovnání hodnota výčtu Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> K vypočítání klíče, který bude použit k řazení, se dá použít funkce s jedním argumentem. </li>\r\n    <li> K výběru klíče a určení pořadí se dá jako kritérium porovnání zadat seznam obsahující klíč a pořadí (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> K úplné kontrole porovnání se dá použít funkce se dvěma argumenty. Této funkci se předají dvě položky ze seznamu (libovolné dvě položky v libovolném pořadí). Funkce by měla vrátit jednu z následujících hodnot:\r\n        <ul>\r\n            <li> <code>-1</code>: První položka je menší než druhá položka.</li>\r\n            <li> <code>0</code>: Položky jsou shodné.</li>\r\n            <li> <code>1</code>: První položka je větší než druhá položka.</li>\r\n        </ul>\r\n        Value.Compare je metoda, která se dá použít k delegování této logiky. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Seřadí seznam {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Seřadí seznam {2, 3, 1} v sestupném pořadí.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Seřadí seznam {2, 3, 1} v sestupném pořadí pomocí metody Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Vrátí odhad směrodatné odchylky založený na vzorku.",
        "Documentation.LongDescription": "Vrátí odhad směrodatné odchylky hodnot v seznamu <code>numbersList</code> založený na vzorku.\r\n    Pokud je <code>numbersList</code> seznam čísel, vrátí se číslo.\r\n    Pokud se předá prázdný seznam nebo seznam položek, který není typu <code>number</code>, vyvolá se výjimka.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Určí směrodatnou odchylku čísel od 1 do 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Vrátí součet položek v seznamu.",
        "Documentation.LongDescription": "Vrátí součet položek v seznamu <code>list</code>, které nemají hodnotu null.  Pokud seznam neobsahuje jiné hodnoty než null, vrátí hodnotu null.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Vrátí součet čísel v seznamu <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Vrátí sjednocení hodnot seznamu nalezených ve vstupu.",
        "Documentation.LongDescription": "Přebírá seznam seznamů <code>lists</code>, sjednotí položky jednotlivých seznamů a vrátí je ve výstupním seznamu. Vrácený výsledný seznam obsahuje všechny položky ve všech vstupních seznamech.\r\n    Tato operace se řídí tradiční bag sémantikou, a duplicitní hodnoty jsou tedy porovnávány jako součást spojení.\r\n    K řízení testování rovnosti lze zadat volitelnou hodnotu kritérií rovnice <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří sjednocení seznamu {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Vrátí seznam seznamů kombinací položek na stejné pozici ve více seznamech.",
        "Documentation.LongDescription": "Vezme seznam seznamů <code>lists</code> a vrátí seznam seznamů kombinující položky na stejné pozici.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zazipuje dva jednoduché seznamy {1, 2} a {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Zazipuje dva jednoduché seznamy o různých délkách {1, 2} a {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Vytvoří logickou hodnotu z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>logical</code> z předané hodnoty <code>value</code>. Pokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Logical.From</code> vrátí hodnotu <code>null</code>.  Pokud je předaná hodnota <code>value</code> typu <code>logical</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>logical</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>logical</code> z textové hodnoty, buď <code>\"true\"</code>, nebo <code>\"false\"</code>. Další informace naleznete v popisu funkce <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code>, pokud se hodnota <code>value</code> rovná <code>0</code>, jinak <code>true</code>.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>2</code> na hodnotu <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Vytvoří logickou hodnotu z textových hodnot True a False.",
        "Documentation.LongDescription": "Vytvoří logickou hodnotu z textové hodnoty <code>text</code> – buď True, nebo False. Pokud hodnota <code>text</code> obsahuje jiný řetězec, je vyvolána výjimka. U textové hodnoty <code>text</code> se rozlišují velká a malá písmena.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří logickou hodnotu z textového řetězce True.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Vytvoří logickou hodnotu z textového řetězce a.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Vrátí textovou hodnotu True nebo False na základě předané logické hodnoty.",
        "Documentation.LongDescription": "Vytvoří textovou hodnotu z logické hodnoty <code>logicalValue</code> – buď <code>true</code>, nebo <code>false</code>. Pokud hodnota <code>logicalValue</code> není logická, je vyvolána výjimka.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří textovou hodnotu z logické hodnoty <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Vrátí absolutní hodnotu čísla.",
        "Documentation.LongDescription": "Vrátí absolutní hodnotu čísla <code>number</code>. Pokud je hodnota <code>number</code> null, funkce <code>Number.Abs</code> vrátí hodnotu null.\r\n    <ul>\r\n        <li><code>number</code>: Hodnota <code>number</code>, jejíž absolutní hodnota se vypočítá.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Absolutní hodnota čísla -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Vrátí arkus kosinus čísla.",
        "Documentation.LongDescription": "Vrátí arkus kosinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Vrátí arkus sinus čísla.",
        "Documentation.LongDescription": "Vrátí arkus sinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Vrátí arkus tangens čísla.",
        "Documentation.LongDescription": "Vrátí arkus tangens hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Vrátí bajt, ve kterém je každý bit protikladem vstupního bitu.",
        "Documentation.LongDescription": "Vrátí výsledek provedení bitové operace Not s hodnotou <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Vrátí kosinus čísla.",
        "Documentation.LongDescription": "Vrátí kosinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Vrátí cosinus úhlu o velikosti 0 stupňů.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Vrací hyperbolický kosinus čísla.",
        "Documentation.LongDescription": "Vrátí hyperbolický kosinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Umocní konstantu e daným exponentem.",
        "Documentation.LongDescription": "Vrátí výsledek umocnění čísla konstanty e exponentem <code>number</code> (exponenciální funkce).\r\n      <ul>\r\n        <li><code>number</code>: Hodnota <code>number</code>, pro kterou bude vypočtena exponenciální funkce. Pokud je hodnota <code>number</code> null, funkce <code>Number.Exp</code> vrátí hodnotu null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Umocní konstantu e exponentem 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Vrátí faktoriál čísla.",
        "Documentation.LongDescription": "Vrátí faktoriál čísla <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí faktoriál čísla 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Vytvoří číslo z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>number</code> z předané hodnoty <code>value</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).\r\nd je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Number.From</code> vrátí hodnotu <code>null</code>.  Pokud je předaná hodnota <code>value</code> typu <code>number</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>number</code> lze převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>number</code> z textové reprezentace. Lze zpracovat běžné textové formáty („15“, „3423,10“, „5,0E-10“). Další informace naleznete v popisu funkce <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 pro hodnotu <code>true</code>, 0 pro hodnotu <code>false</code>.</li>\r\n        <li><code>datetime</code>: Číslo s plovoucí desetinnou čárkou obsahující ekvivalent data OLE Automation.</li>\r\n        <li><code>datetimezone</code>: Číslo s plovoucí desetinnou čárkou obsahující ekvivalent data a času OLE Automation <code>value</code>.</li>\r\n        <li><code>date</code>: Číslo s plovoucí desetinnou čárkou obsahující ekvivalent data OLE Automation.</li>\r\n        <li><code>time</code>: Vyjádřeno ve zlomcích dnů.</li>\r\n        <li><code>duration</code>: Vyjádřeno v celých dnech a zlomcích dnů.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získá hodnotu <code>number</code> hodnoty <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získá hodnotu <code>number</code> hodnoty <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Získá hodnotu typu <code>number</code> pro <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Vytvoří čísla z běžných textových formátů (15, 3 423,10, 5,0E-10).",
        "Documentation.LongDescription": "Vrátí hodnotu <code>čísla</code> z dané textové hodnoty <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Textová reprezentace číselné hodnoty. Reprezentace musí být v běžném číselném formátu, třeba 15, 5,0E-10 nebo 3423,10.</li>\r\n <li><code>culture</code>: Nepovinná jazyková verze, která určuje, jak se <code>text</code> interpretuje (např. en-US)</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získá hodnotu number hodnoty <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získá číselnou hodnotu hodnoty <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Značí, zda je hodnota sudá.",
        "Documentation.LongDescription": "Značí, zda je hodnota <code>number</code> sudá. Pokud ano, vrátí hodnotu <code>true</code>, jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda je číslo 625 sudé.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Zjistí, zda je číslo 82 sudé.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Značí, zda je hodnota typu NaN (není číslo).",
        "Documentation.LongDescription": "Značí, zda je hodnota typu NaN (není číslo). Pokud hodnota <code>number</code> odpovídá výsledku volání funkce <code>Number.IsNaN</code>, vrátí hodnotu <code>true</code>. Jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda je výsledkem dělení hodnoty 0 hodnotou 0 hodnota typu NaN (není číslo).",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda je výsledkem dělení hodnoty 1 hodnotou 0 hodnota typu NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Značí, zda je hodnota lichá.",
        "Documentation.LongDescription": "Značí, zda je hodnota lichá. Pokud je hodnota <code>number</code> liché číslo, vrátí hodnotu <code>true</code>. Jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, zda je číslo 625 liché.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Zjistí, zda je číslo 82 liché.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Vrátí přirozený logaritmus čísla.",
        "Documentation.LongDescription": "Vrátí přirozený logaritmus čísla <code>number</code>. Pokud je hodnota <code>number</code> null, funkce <code>Number.Ln</code> vrátí hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí přirozený logaritmus čísla 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Vrátí logaritmus čísla o zadaném základu (výchozí hodnotu e).",
        "Documentation.LongDescription": "Vrátí logaritmus čísla <code>number</code> o zadaném základu <code>base</code>. Pokud není zadána hodnota <code>base</code>, použije se výchozí hodnota Number.E.\r\n    Pokud je hodnota <code>number</code> null, funkce <code>Number.Log</code> vrátí hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí dekadický logaritmus (se základem 10) čísla 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Vrátí logaritmus se základem e čísla 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Vrátí dekadický logaritmus (se základem 10) čísla.",
        "Documentation.LongDescription": "Vrátí dekadický logaritmus (se základem 10) čísla <code>number</code>. Pokud je hodnota <code>number</code> null, funkce <code>Number.Log10</code> vrátí hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí dekadický logaritmus (se základem 10) čísla 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Vrátí zaokrouhlené číslo. Lze zadat počet číslic a režim zaokrouhlení.",
        "Documentation.LongDescription": "Vrátí výsledek zaokrouhlení <code>number</code> na nejbližší číslo. Pokud <code>number</code> má hodnotu null, <code>Number.Round</code> vrátí hodnotu null.<br>\r\n      <br>\r\n      Ve výchozím nastavení se <code>number</code> zaokrouhlí na nejbližší celé číslo a vazby se rozdělí zaokrouhlením na nejbližší sudé číslo (pomocí <code>RoundingMode.ToEven</code>, který je známý také jako \rstatistické zaokrouhlování“).<br>\n\r      <br>\n\r      Tyto výchozí hodnoty však mohou být přepsány pomocí následujících volitelných parametrů.\n\r      <ul>\n<code>digits</code>        <li><code>number</code>: Způsobí, že se \r zaokrouhlí na zadaný počet desetinných míst.</li>\n<code>roundingMode</code>        <li><code>number</code>: Přepíše výchozí chování při rušení vazeb, když je \r na středním bodu mezi dvěma možnými zaokrouhlenými hodnotami\n\r      (možné hodnoty najdete u příkazu <code>RoundingMode.Type</code>).</li>\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrouhlí číslo 1,234 na nejbližší celé číslo.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrouhlí číslo 1,56 na nejbližší celé číslo.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Zaokrouhlí číslo 1,2345 na číslo se dvěma desetinnými místy.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Zaokrouhlí číslo 1,2345 na číslo se třemi desetinnými místy (směrem nahoru).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Zaokrouhlí číslo 1,2345 na číslo se třemi desetinnými místy (směrem dolů.",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Vrátí výsledek zaokrouhlení kladných čísel nahoru a záporných čísel dolů. Dá se zadat počet číslic.",
        "Documentation.LongDescription": "Vrátí výsledek zaokrouhlení hodnoty <code>number</code> na základě znaménka čísla. Tato funkce zaokrouhlí kladná čísla nahoru a záporná čísla dolů.\r\n    Pokud se zadá <code>digits</code>, <code>number</code> se zaokrouhlí na tento počet desetinných číslic: <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrouhlí číslo -1,2 směrem od nuly.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Zaokrouhlí číslo 1,2 směrem od nuly.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Zaokrouhlete číslo -1,234 na dvě desetinná místa od nuly.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Vrátí předchozí nejvyšší číslo. Dá se zadat počet číslic.",
        "Documentation.LongDescription": "Vrátí výsledek zaokrouhlení hodnoty <code>number</code> dolů na nejbližší předchozí celé číslo. Pokud má <code>number</code> hodnotu null, vrátí tato funkce hodnotu null.\r\n\r\n    Pokud se zadá <code>digits</code>, <code>number</code> se zaokrouhlí na zadaný počet desetinných číslic.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrouhlí číslo 1,234 dolů na celé číslo.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrouhlí číslo 1,999 dolů na celé číslo.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Zaokrouhlete číslo 1,999 dolů na dvě desetinná místa.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Vrátí výsledek zaokrouhlení kladných čísel dolů a záporných čísel nahoru. Dá se zadat počet číslic.",
        "Documentation.LongDescription": "Vrátí výsledek zaokrouhlení hodnoty <code>number</code> na základě znaménka čísla. Tato funkce zaokrouhlí kladná čísla dolů a záporná čísla nahoru.\r\n    Pokud se zadá <code>digits</code>, <code>number</code> se zaokrouhlí na tento počet desetinných číslic: <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrouhlí číslo -1,2 směrem k nule.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Zaokrouhlí číslo 1,2 směrem k nule.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Zaokrouhlete číslo -1,234 na dvě desetinná místa k nule.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Vrátí následující nejvyšší číslo. Dá se zadat počet číslic.",
        "Documentation.LongDescription": "Vrátí výsledek zaokrouhlení hodnoty <code>number</code> nahoru na nejbližší následující celé číslo. Pokud má <code>number</code> hodnotu null, vrátí tato funkce hodnotu null.\r\n    Pokud se zadá <code>digits</code>, <code>number</code> se zaokrouhlí na zadaný počet desetinných číslic.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrouhlí číslo 1,234 nahoru na celé číslo.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Zaokrouhlí číslo 1,999 nahoru na celé číslo.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Zaokrouhlete číslo 1,234 nahoru na dvě desetinná místa.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Pokud je číslo kladné, vrátí hodnotu 1. Pokud je číslo záporné, vrátí hodnotu -1. Pokud je číslo rovno 0, vrátí hodnotu 0.",
        "Documentation.LongDescription": "Pokud je hodnota <code>number</code> kladná, vrátí hodnotu 1. Pokud je hodnota záporná, vrátí hodnotu -1. Pokud je hodnota rovna 0, vrátí hodnotu 0.\r\n    Pokud je hodnota <code>number</code> null, funkce <code>Number.Sign</code> vrátí hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Určí znaménko čísla 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Určí znaménko čísla -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Určí znaménko čísla 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Vrátí sinus čísla.",
        "Documentation.LongDescription": "Vrátí sinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Vrátí sinus úhlu 0 stupňů.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Vrací hyperbolický sinus čísla.",
        "Documentation.LongDescription": "Vrátí hyperbolický sinus hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Vrátí druhou odmocninu čísla.",
        "Documentation.LongDescription": "Vrátí druhou odmocninu hodnoty <code>number</code>.\r\n    Pokud je hodnota <code>number</code> null, funkce <code>Number.Sqrt</code> vrátí hodnotu null. Pokud je hodnota záporná, funkce vrátí hodnotu <code>Number.NaN</code> (není číslo).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí druhou odmocninu čísla 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Vrátí druhou odmocninu čísla 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Vrátí tangens čísla.",
        "Documentation.LongDescription": "Vrátí tangens hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tangens úhlu o velikosti 1 stupeň.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Vrací hyperbolický tangens čísla.",
        "Documentation.LongDescription": "Vrátí hyperbolický tangens hodnoty <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Převede dané číslo na text.",
        "Documentation.LongDescription": "Převede číselnou hodnotu <code>number</code> na textovou hodnotu ve formátu určeném <code>format</code>.<br>\r\n    <br>\r\n    Formát je textová hodnota určující, jak má být číslo převedeno. Další podrobnosti o podporovaných hodnotách formátu najdete: na https://go.microsoft.com/fwlink/?linkid=2241210 a https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Může se zadat i nepovinný <code>culture</code> (například en-US), který řídí chování <code>format</code> závislé na jazykové verzi.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje převést číslo na text bez zadání formátu.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Převede číslo na exponenciální formát.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Umožňuje převést číslo na procentuální formát pouze s jedním desetinným místem.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Vrátí tabulku datových kanálů OData nabízených službou OData.",
        "Documentation.LongDescription": "Vrátí tabulku kanálů OData nabízených službou OData z URI <code>serviceUri</code> s hlavičkami <code>headers</code>. Je možné zadat logickou hodnotu, která určuje, jestli se pro určení následujících možností mají používat souběžná připojení, nebo volitelný parametr záznamu <code>options</code>:\r\n    <ul>\r\n    <li><code>Query</code>: Programově přidá parametry dotazu do adresy URL, aniž byste se museli starat o zadávání řídicích znaků. </li>\r\n    <li> <code>Headers</code>: Zadáním této hodnoty jako záznamu přidáte do požadavku HTTP další hlavičky.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Zadáním této hodnoty jako seznamu zabráníte těmto klíčům hlavičky http, aby byly součástí výpočtu pro ukládání dat do mezipaměti.</li>\r\n    <li> <code>ApiKeyName</code>: Pokud cílový web zná klíč rozhraní API, je možné pomocí tohoto parametru zadat název (nikoliv hodnotu) parametru klíče, který musí být použitý v adrese URL. Skutečná hodnota klíče se zadává v přihlašovacích údajích.</li>\r\n    <li> <code>Timeout</code>: Zadáním této hodnoty jako doby trvání změníte časový limit pro požadavek HTTP. Výchozí hodnota je 600 sekund.</li>\r\n    <li> <code>EnableBatch</code>: Logická hodnota (true/false), která určuje, jestli se má povolit generování žádosti OData $batch, pokud se překročí hodnota MaxUriLength (výchozí hodnota je false).</li>\r\n    <li> <code>MaxUriLength</code>: Číslo, které udává maximální délku povoleného URI posílaného službě OData. Pokud se délka překročí a parametr EnableBatch bude mít hodnotu true, pak se iniciuje žádost na koncový bod OData $batch, jinak dojde k chybě (výchozí hodnota je 2048).</li>\r\n    <li> <code>Concurrent</code>: Logická hodnota (true/false). Pokud je nastavená hodnota true, budou se požadavky na službu zadávat souběžně. Pokud má hodnotu false, budou se požadavky zadávat sekvenčně. Pokud hodnota není zadaná, určí se podle zápisu AsynchronousRequestsSupported služby. Pokud služba nespecifikuje, jestli se podporuje zápis AsynchronousRequestsSupported, budou se požadavky zadávat sekvenčně.</li>\r\n    <li> <code>ODataVersion</code>: Číslo (3 nebo 4). To určuje verzi protokolu OData, která se má používat pro tuto službu OData. Pokud není hodnota zadaná, budou se požadovat všechny podporované verze. Verze služby se určí podle hlavičky OData-Version vrácené službou.</li>\r\n    <li> <code>FunctionOverloads</code>: Logická hodnota (true/false). Pokud je nastavená hodnota true, budou se přetížení při importu funkce v navigátoru uvádět jako samostatné položky, pokud je nastavená hodnota false, budou se přetížení při importu funkce v navigátoru uvádět jako jedna sjednocovací funkce. Výchozí hodnota pro V3: false. Výchozí hodnota pro V4: true.</li>\r\n    <li> <code>MoreColumns</code>: Logická hodnota (true/false). Pokud je true, přidá sloupec „More Columns“ ke každému informačnímu kanálu entity, který obsahuje otevřené a polymorfní typy. Ten bude obsahovat pole nedeklarovaná v základním typu. Je-li false, toto pole se nepřidá. Výchozí hodnota je false.</li>\r\n    <li> <code>IncludeAnnotations</code>: Čárkou oddělený seznam oborem názvů kvalifikovaných názvů termínů nebo vzorů, které obsahují znak * jako zástupný znak. Standardně není zahrnuta žádná anotace.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: Čárkou oddělený seznam oborem názvů kvalifikovaných názvů termínů nebo vzorů, které budou zahrnuty v požadavcích dokumentu metadat a obsahují znak * jako zástupný znak. Standardně obsahují stejné anotace jako IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: Umožňuje službě OData nezapisovat do odpovědí určité hodnoty. Pokud je potvrzeno, hodnoty z vynechaných polí odvodíme. Možnosti:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: Umožňuje službě OData vynechat hodnoty null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementace</code>: Určuje implementaci konektoru OData, která se má použít. Platné hodnoty jsou 2.0 nebo null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Připojte se ke službě TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Vrací výsledek pokusu dovodit možnosti SQL pro ovladač ODBC.",
        "Documentation.LongDescription": "Vrací výsledek pokusu dovodit možnosti SQL s připojovacím řetězcem <code>connectionString</code> s použitím ODBC. <code>connectionString</code> může být text nebo záznam párů hodnot vlastností. Hodnoty vlastností můžou být text nebo číslo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vrátí odvozené funkce SQL pro připojovací řetězec.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Vrátí obsah dokumentu Parquet jako tabulku.",
        "Documentation.LongDescription": "Vrátí obsah dokumentu Parquet jako tabulku. Mezi možnosti patří:\n    <ul>\n    <li> <code>TypeMapping</code>: Textová hodnota, která řídí výchozí mapování typů při čtení a zápisu souborů. Výchozí hodnota je null a pokusí se zachovat co nejvíce věrnosti původního typu. Hodnota „Sql“ vytvoří výsledky, které jsou nejvíce kompatibilní se SQL Serverem.</li>\n    </ul>",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Vrátí procentní hodnotu ze zadané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu typu <code>percentage</code> ze zadaného parametru <code>value</code>. Pokud jako <code>value</code> zadáte <code>null</code>, <code>Percentage.From</code> vrátí <code>null</code>. Pokud jako <code>value</code> zadáte <code>text</code> se symbolem procent na konci, vrátí se převedené desítkové číslo. Jinak se hodnota převede pomocí <code>Number.From</code> na typ <code>number</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnotu typu <code>percentage</code> z <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Vrací záznam datových rámců ze souboru RData.",
        "Documentation.LongDescription": "Vrací záznam datových rámců ze souboru RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Zkombinuje záznamy v předaném seznamu.",
        "Documentation.LongDescription": "Zkombinuje záznamy v předaném seznamu <code>records</code>. Pokud seznam <code>records</code> obsahuje jiné hodnoty než záznamy, vrátí chybu.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří kombinovaný záznam ze záznamů.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Vrátí počet polí záznamu.",
        "Documentation.LongDescription": "Vrátí počet polí záznamu <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Vrátí počet polí záznamu.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Vrátí názvy polí.",
        "Documentation.LongDescription": "Vrátí názvy polí v záznamu <code>record</code> jako text.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vrátí názvy polí záznamu.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Vrátí seznam hodnot polí.",
        "Documentation.LongDescription": "Vrátí seznam hodnot polí záznamu <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vrátí hodnoty polí záznamu.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Vytvoří z tabulky záznam ve formátu {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Vrátí záznam z tabulky záznamů <code>table</code> obsahující názvy polí a názvy hodnot <code>{[Name = name, Value = value]}</code>. Pokud nejsou názvy polí jedinečné, vrhne výjimku.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří z tabulky záznam ve formátu Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Vrátí seznam hodnot obsahující hodnoty polí vstupního záznamu.",
        "Documentation.LongDescription": "Vrátí seznam hodnot obsahující hodnoty polí ze vstupu <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extrahuje hodnoty polí ze záznamu.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Vrátí strom abstraktní syntaxe (AST), který představuje přístup ke sloupci řádku v rámci výrazu řádku.",
        "Documentation.LongDescription": "Vrátí strom abstraktní syntaxe (AST), který představuje přístup ke sloupci řádku (<code>columnName</code>) v rámci výrazu řádku.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří AST reprezentující přístup ke sloupci NázevZákazníka.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Vrátí strom abstraktní syntaxe (AST) pro tělo funkce.",
        "Documentation.LongDescription": "<p>Vrátí strom abstraktní syntaxe (AST) pro tělo funkce <code>function</code> normalizované do <i>výrazu řádku</i>:\r\n<ul>\r\n  <li>Funkce musí být lambda s jedním argumentem.</li>\r\n  <li>Všechny reference na parametr funkce se nahradí za <code>RowExpression.Row</code>.</li>\r\n  <li>Všechny reference na sloupce se nahradí za <code>RowExpression.Column(<i>názevSloupce</i>)</code>.</li>\r\n  <li>AST bude zjednodušený a bude obsahovat jenom uzly těchto druhů:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Pokud pro tělo <code>function</code> nejde vrátit strom abstraktní syntaxe výrazu řádku, vyvolá se chyba.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vrátí AST pro tělo funkce <code>each [IDzákazníka] = \"ALFKI\"</code>.",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Vytvoří z dané hodnoty hodnotu Single.",
        "Documentation.LongDescription": "Vrátí hodnotu Single <code>number</code> z dané hodnoty <code>value</code>. Pokud je daná hodnota <code>value</code> <code>null</code>, příkaz <code>Single.From</code> vrátí <code>null</code>. Pokud je daná hodnota <code>value</code> <code>number</code> v rozsahu Single, vrátí se <code>value</code>, jinak se vrátí chyba. Pokud má daná hodnota <code>value</code> jakýkoli jiný typ, bude nejprve pomocí <code>Number.FromText</code> převedena na typ <code>number</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Načte hodnotu Single hodnoty <code>number</code> <code>\"1,5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Vrátí tabulku dat z koncového bodu indexu Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Provede volání rozhraní Smartsheet 2.0 REST API v určeném koncovém bodě a převede vrácený datový element na tabulku.",
        "Documentation.Examples": [
          {
            "Description": "Vrátí tabulku s informacemi o uživatelích z rozhraní Smartsheet API.",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Tabulka s informacemi o uživatelích vrácená rozhraním Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě všech zadaných oddělovačů.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě všech zadaných oddělovačů.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup čárkou nebo středníkem, přičemž uvozovky a oddělovače v uvozovkách se ignorují a začínají začátkem vstupu.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Rozdělte vstup čárkou nebo středníkem, přičemž uvozovky a oddělovače v uvozovkách se ignorují a začínají od konce vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě zadaného oddělovače.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě zadaného oddělovače.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup čárkou a ignoruje čárky v uvozovkách.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých oddělovačů zadaných v sekvenci.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých oddělovačů zadaných v sekvenci.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup čárkou a pak středníkem počínaje začátkem vstupu.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Rozdělte vstup čárkou, pak středníkem, zpracovávat uvozovky jako jakýkoli jiný znak a od konce vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých zadaných délek.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých zadaných délek.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup na první dva znaky následované dalšími třemi znaky počínaje začátkem vstupu.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Rozdělte vstup na první tři znaky následované dalšími dvěma znaky počínaje koncem vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých zadaných pozic.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě jednotlivých zadaných pozic.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup na zadaných pozicích počínaje začátkem vstupu.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Rozdělte vstup na zadaných pozicích počínaje koncem vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě zadaných odsazení a délek.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textu podle zadaných posunů a délek. Délka null označuje, že by měly být zahrnuty všechny zbývající vstupy.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdělte vstup podle zadaných párů pozice a délky počínaje začátkem vstupu. Všimněte si, že se rozsahy v tomto příkladu překrývají.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Rozdělí vstup podle zadaných párů pozice a délky počínaje koncem vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Rozdělte vstup na PSČ s pevnou délkou následovaný názvem města s proměnlivou délkou.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě zadané délky, která je použita opakovaně.",
        "Documentation.LongDescription": "Vrátí funkci, která rozdělí text na seznam textových hodnot na základě zadané délky, která je použita opakovaně.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Vstup se opakovaně rozděluje na bloky tří znaků začínající od začátku vstupu.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Vstup se opakovaně rozděluje na bloky tří znaků začínající koncem vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Vrátí přibližný počet řádků v tabulce.",
        "Documentation.LongDescription": "Vrátí přibližný počet řádků v <code>table</code> nebo chybu, pokud zdroj dat nepodporuje aproximaci.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Odhadněte počet různých kombinací města a státu ve velké tabulce, kterou lze použít jako odhad mohutnosti pro sloupce. Odhady mohutnosti jsou natolik důležité, že různé zdroje dat (jako je SQL Server) podporují tuto konkrétní aproximaci, často pomocí algoritmu zvaného HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Vrátí počet sloupců v tabulce.",
        "Documentation.LongDescription": "Vrátí počet sloupců v tabulce <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nalezne počet sloupců v tabulce.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Vrátí názvy sloupců jako seznam.",
        "Documentation.LongDescription": "Vrátí názvy sloupců v tabulce <code>table</code> jako seznam textu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Najde názvy sloupců v tabulce.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Vrátí první řádek nebo zadanou výchozí hodnotu.",
        "Documentation.LongDescription": "Vrátí první řádek tabulky <code>table</code> nebo volitelnou výchozí hodnotu <code>default</code>, pokud je tabulka prázdná.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Najde první řádek tabulky.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Najde první řádek tabulky <code>({})</code> nebo vrátí řádek [a = 0, b = 0], pokud je tabulka prázdná.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Vrátí první sloupec prvního řádku tabulky nebo zadanou výchozí hodnotu.",
        "Documentation.LongDescription": "Vrátí první sloupec prvního řádku tabulky <code>table</code> nebo zadanou výchozí hodnotu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Určuje, jestli tabulka obsahuje pouze jedinečné sloupce (žádné duplikáty).",
        "Documentation.LongDescription": "Určuje, jestli tabulka <code>table</code> obsahuje pouze jedinečné sloupce (žádné duplikáty). Vrátí hodnotu <code>true</code>, pokud jsou řádky jedinečné, jinak vrátí hodnotu <code>false</code>.\r\n    Volitelný parametr <code>comparisonCriteria</code>, který určuje, u kterých sloupců tabulky je testována duplicita. Pokud parametr <code>comparisonCriteria</code> není zadán, jsou testovány všechny sloupce.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli je tabulka jedinečná.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určí, jestli je tabulka jedinečná ve sloupci.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Určuje, jestli tabulka obsahuje řádky.",
        "Documentation.LongDescription": "Určuje, jestli tabulka <code>table</code> obsahuje řádky. Vrátí hodnotu <code>true</code>, pokud nejsou zjištěné žádné řádky (pokud je například tabulka prázdná), jinak vrátí hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli je tabulka prázdná.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určí, zda je tabulka <code>({})</code> prázdná.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Vrátí klíče zadané tabulky.",
        "Documentation.LongDescription": "Vrátí klíče zadané tabulky.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Načte seznam klíčů pro tabulku.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Vrátí poslední řádek nebo zadanou výchozí hodnotu.",
        "Documentation.LongDescription": "Vrátí poslední řádek tabulky <code>table</code> nebo volitelnou výchozí hodnotu <code>default</code>, pokud je tabulka prázdná.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Najde poslední řádek tabulky.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Najde poslední řádek tabulky <code>({})</code> nebo vrátí řádek [a = 0, b = 0], pokud je tabulka prázdná.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Vrátí počet řádků v tabulce.",
        "Documentation.LongDescription": "Vrátí počet řádků v tabulce <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nalezne počet řádků v tabulce.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Vrátí jeden řádek v tabulce.",
        "Documentation.LongDescription": "Vrátí jeden řádek v jednořádkové tabulce <code>table</code>. Pokud má tabulka <code>table</code> více než jeden řádek, je vyvolána výjimka.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí jeden řádek v tabulce.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Vytvoří z tabulky seznam vnořených seznamů hodnot sloupců.",
        "Documentation.LongDescription": "Vytvoří z tabulky <code>table</code> seznam vnořených seznamů.  Jednotlivé položky seznamu představují vnitřní seznam obsahující hodnoty sloupců.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří z tabulky seznam hodnot sloupců.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Převede tabulku na seznam použitím zadané kombinační funkce na každý řádek hodnot tabulky.",
        "Documentation.LongDescription": "Převede tabulku na seznam použitím zadané kombinační funkce na každý řádek hodnot tabulky.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Sloučí text každého řádku s použitím čárky.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Převede tabulku na seznam záznamů.",
        "Documentation.LongDescription": "Převede tabulku <code>table</code> na seznam záznamů.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Převede tabulku na seznam záznamů.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Vytvoří z tabulky seznam vnořených seznamů hodnot řádků.",
        "Documentation.LongDescription": "Vytvoří z tabulky <code>table</code> seznam vnořených seznamů.  Jednotlivé položky seznamu představují vnitřní seznam obsahující hodnoty řádků.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří z tabulky seznam hodnot řádků.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Vytvoří upravený záznam o chybě, který při vyvolání obslužnou rutinou definovanou v zobrazení (přes Table.View) neaktivuje náhradní řešení.",
        "Documentation.LongDescription": "Z <code>errorRecord</code> vytvoří upravený záznam o chybě, který při vyvolání obslužnou rutinou definovanou v zobrazení (přes Table.View) neaktivuje náhradní řešení.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Vytvoří funkci, do které může zasahovat obslužná rutina definovaná na zobrazení (prostřednictvím Table.View).",
        "Documentation.LongDescription": "<p>Vytvoří funkci zobrazení založenou na <code>function</code>, se kterou lze pracovat v zobrazení vytvořeném pomocí funkce <code>Table.View</code>.</p>\r\n<p>K definování obslužné rutiny pro tuto funkci zobrazení jde použít obslužnou rutinu <code>OnInvoke</code> funkce <code>Table.View</code>.</p>\r\n<p>Stejně jako u obslužných rutin pro vestavěné operace platí, že pokud není zadána žádná obslužná rutina <code>OnInvoke</code> nebo pokud tato rutina neobsluhuje danou funkci zobrazení nebo pokud tato obslužná rutina vrátí chybu, přes zobrazení se aplikuje <code>function</code>.</p>\r\n<p>Kompletnější popis funkcí <code>Table.View</code> a vlastních funkcí zobrazení najdete v publikované dokumentaci k vlastnímu konektoru Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Vrátí textovou hodnotu s odebranými řídicími znaky.",
        "Documentation.LongDescription": "Vrátí textovou hodnotu s odebranými řídicími znaky (<code>text</code>).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odebere z textové hodnoty odřádkování a další řídicí znaky.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Zřetězí seznam textových hodnot do jedné textové hodnoty.",
        "Documentation.LongDescription": "Vrátí výsledek kombinování seznamu textových hodnot, <code>texts</code>, do jedné textové hodnoty. Všechny hodnoty <code>null</code> přítomné v <code>texts</code> se ignorují.\r\n    Je možné zadat volitelnou položku <code>separator</code> použitou v konečném kombinovaném textu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Spojí textové hodnoty „Seattle“ a „WA“.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Spojí textové hodnoty „Seattle“ a „WA“ oddělené čárkou a mezerou.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Zkombinujte hodnoty Seattle, <code>null</code> a WA oddělené čárkou a mezerou. (Všimněte si, že <code>null</code> se ignoruje.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Vytvoří z dané hodnoty textovou hodnotu.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci řetězce <code>value</code>. Řetězcem <code>value</code> může být hodnota typu <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> nebo <code>binary</code>.\r\n    Pokud je danou hodnotou null, funkce <code>Text.From</code> vrátí hodnotu null. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří textovou hodnotu z čísla 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dekóduje data binárního formátu na text.",
        "Documentation.LongDescription": "Dekóduje data (<code>binary</code>) z binární hodnoty na textovou hodnotu pomocí typu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Odvodí podrobný typ čísla (Int64.Type, Double.Type atd.) zakódovaného v textu.",
        "Documentation.LongDescription": "Vyvodí přesný typ čísla (Int64.Type, Double.Type atd.) pro <code>text</code>. Pokud <code>text</code> není číslo, vyvolá se chyba. Volitelně je možné zadat i <code>culture</code> (např. „en-US“).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Vrátí počet znaků.",
        "Documentation.LongDescription": "Vrátí počet znaků v textu <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Zjistí, kolik znaků se nachází v textu „Hello World“.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Převede všechny znaky z velkých písmen na malá.",
        "Documentation.LongDescription": "Vrátí výsledek převodu všech znaků v <code>text</code> na malá písmena. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí řetězec „AbCd“ převedený na malá písmena.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Změní první písmena jednotlivých slov na velká.",
        "Documentation.LongDescription": "Vrátí výsledek změny pouze prvních písmen jednotlivých slov v textové hodnotě <code>text</code> na velká. Všechna ostatní písmena jsou vrácena jako malá. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Použije funkci <code>Text.Proper</code> na jednoduchou větu.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Revertuje zadané <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Revertovat text \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Zakóduje text do binárního formátu.",
        "Documentation.LongDescription": "Zakóduje předanou textovou hodnotu <code>text</code> do binární hodnoty pomocí konkrétního objektu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Vrací seznam znakových hodnot z předané textové hodnoty.",
        "Documentation.LongDescription": "Vrací seznam znakových hodnot z předané textové hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří seznam znakových hodnot z textu Hello World.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Odebere všechny úvodní a koncové mezery.",
        "Documentation.LongDescription": "Vrátí výsledek odebrání všech úvodních a koncových mezer z textové hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odebere úvodní a koncové mezery z hodnoty „     a b c d    “.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Odebere všechny koncové mezery.",
        "Documentation.LongDescription": "Vrátí výsledek odebrání všech koncových mezer z textové hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odebere koncové mezery z hodnoty „     a b c d    “.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Odebere všechny úvodní mezery.",
        "Documentation.LongDescription": "Vrátí výsledek odebrání všech úvodních mezer z textové hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odebere úvodní mezery z hodnoty „     a b c d    “.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Převede všechny znaky z malých písmen na velká.",
        "Documentation.LongDescription": "Vrátí výsledek převodu všech znaků v <code>text</code> na velká písmena. Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vrátí řetězec aBcD převedený na velká písmena.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Vrátí konec hodiny.",
        "Documentation.LongDescription": "Vrátí konec hodiny, který představuje <code>dateTime</code> včetně zlomkových sekund. Informace o časovém pásmu se zachovají.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>time</code>, <code>datetime</code> nebo <code>datetimezone</code>, ze které se počítá konec hodiny.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vrátí konec hodiny pro hodnotu 5/14/2011 05:00:00 PM.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Vrátí konec hodiny pro hodnotu 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Vytvoří časovou hodnotu z předané hodnoty.",
        "Documentation.LongDescription": "Vrátí hodnotu <code>time</code> z předané hodnoty <code>value</code>. Volitelně je možné zadat i <code>culture</code> (např. en-US).\r\nPokud je předaná hodnota <code>value</code> <code>null</code>, funkce <code>Time.From</code> vrátí hodnotu <code>null</code>.  Pokud je předaná hodnota <code>value</code> typu <code>time</code>, vrátí se hodnota <code>value</code>. Na hodnoty <code>time</code> jde převést hodnoty následujících typů:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>time</code> z textové reprezentace Další informace naleznete v popisu funkce <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: Časová komponenta hodnoty <code>value</code></li>\r\n        <li><code>datetimezone</code>: Časová komponenta místního ekvivalentu hodnoty <code>value</code></li>\r\n<li><code>number</code>: Hodnota <code>time</code> odpovídající počtu zlomků dnů vyjádřených výrazem <code>value</code>. Pokud je hodnota <code>value</code> záporná nebo větší nebo rovna 1, je vrácena chyba.</li>\r\n      </ul>\r\nPokud je hodnota <code>value</code> jakéhokoli jiného typu, je vrácena chyba.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>0.7575</code> na hodnotu <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Převede hodnotu <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na hodnotu <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Vytvoří časovou hodnotu z místního, univerzálního a vlastního časového formátu.",
        "Documentation.LongDescription": "Vytvoří hodnotu <code>time</code> z textové reprezentace <code>text</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Podrobnosti najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum čas podle nejvhodnějšího postupu.</li>\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"tt\"</code> hodnotu <code>\"AM\" nebo \"PM\"</code>, zatímco u <code>\"ar-EG\"</code> má <code>\"tt\"</code> hodnotu <code>\"ص\" nebo \"م\"</code>. Když má hodnota <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, jazyková verze <code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, může být <code>options</code> také textová hodnota. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = null, Culture= <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>\"10:12:31am\"</code> na hodnotu Time.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Převést řetězec <code>\"1012\"</code> na hodnotu Time",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Převést řetězec <code>\"10\"</code> na hodnotu Time",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Vrátí komponentu hodin.",
        "Documentation.LongDescription": "Vrátí komponentu hodin předané hodnoty <code>time</code>, <code>datetime</code> nebo <code>datetimezone</code> <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá hodiny v hodnotě #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Vrátí komponentu minut.",
        "Documentation.LongDescription": "Vrátí komponentu minut předané hodnoty <code>time</code>, <code>datetime</code> nebo <code>datetimezone</code> <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá minuty v hodnotě #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Vrátí komponentu sekund.",
        "Documentation.LongDescription": "Vrátí komponentu sekund předané hodnoty <code>time</code>, <code>datetime</code> nebo <code>datetimezone</code> <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Vyhledá sekundy v hodnotě data a času.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Vrátí začátek hodiny.",
        "Documentation.LongDescription": "Vrátí začátek hodiny, který představuje <code>dateTime</code>.\r\n    <code>dateTime</code> musí být hodnota <code>time</code>, <code>datetime</code> nebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Najděte začátek hodiny pro 10. října 2011, 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Vrátí záznam obsahující části hodnoty time.",
        "Documentation.LongDescription": "Vrátí záznam obsahující části předané hodnoty time <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: Hodnota <code>time</code>, ze které bude vypočítán záznam jejích částí.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Převede hodnotu <code>#time(11, 56, 2)</code> na záznam obsahující hodnoty time.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Vrátí textovou reprezentaci hodnoty času.",
        "Documentation.LongDescription": "Vrátí textovou reprezentaci <code>time</code>. Pro upřesnění dalších vlastností můžete zadat volitelný parametr <code>record</code>, <code>options</code>. <code>culture</code> se používá pouze pro starší pracovní postupy.<code>Record</code> může obsahovat následující pole:\r\n<ul>\r\n   <li><code>Format</code>: Hodnota typu <code>text</code> udávající formát, který se má použít. Podrobnosti najdete na https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechání tohoto pole nebo zadání hodnoty <code>null</code> způsobí, že se datum naformátuje výchozí hodnotou definovanou jazykovou verzí <code>Culture</code></li>.\r\n   <li><code>Culture</code>: Pokud nemá <code>Format</code> hodnotu null, řídí některé specifikátory formátu jazyková verze <code>Culture</code>. Například u <code>\"en-US\"</code> má <code>\"tt\"</code> hodnotu <code>\"AM\" nebo \"PM\"</code>, zatímco u <code>\"ar-EG\"</code> má <code>\"tt\"</code> hodnotu <code>\"ص\" nebo \"م\"</code>. Když má <code>Format</code> hodnotu <code>null</code>, řídí výchozí formát, který se má použít, hodnota<code>Culture</code>. Když má <code>Culture</code> hodnotu <code>null</code> nebo není zadaná, použije se <code>Culture.Current</code>.</li>\r\n</ul>\r\nPokud chcete podporovat starší pracovní postupy, můžou být <code>options</code> a <code>culture</code> také textové hodnoty. Chování bude stejné jako kdyby se <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Převede řetězec <code>#time(01, 30, 25)</code> na hodnotu <code>text</code>. <i>Výsledný výstup se může lišit v závislosti na aktuální jazykové verzi.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Umožňuje převod pomocí vlastního formátu a německé jazykové verze.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Převod pomocí standardního formátu času.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Vrátí uzavřenou verzi daného typu záznamu (nebo stejného typu, pokud už je uzavřený).",
        "Documentation.LongDescription": "Vrátí uzavřenou verzi daného záznamu (<code>record</code>) <code>type</code> (nebo stejného typu, pokud už je uzavřený).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří uzavřenou verzi pro <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Vrátí omezující vlastnosti typu.",
        "Documentation.LongDescription": "Vrací záznam obsahující omezující vlastnosti pro: <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Vrátí záznam s hodnotami pole nastavenými na název parametrů typu funkce a jejich hodnotami nastavenými na jejich odpovídající typy.",
        "Documentation.LongDescription": "Vrátí záznamy s hodnotami pole nastavenými na název parametrů <code>type</code> a jejich hodnotami nastavenými na jejich odpovídající typy.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít typy parametrů pro funkci <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Vrátí číslo určující minimální počet parametrů požadovaných pro vyvolání typu funkce.",
        "Documentation.LongDescription": "Vrátí číslo určující minimální počet parametrů požadovaných pro vyvolání vstupu <code>type</code> funkce.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít počet parametrů požadovaných pro funkci <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Vrátí typ vrácený typem funkce.",
        "Documentation.LongDescription": "Vrátí typ vrácený funkcí <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít návratový typ pro <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Vrací hodnotu true, pokud jde o typ, který může mít hodnotu null (může být nullable); jinak vrací hodnotu false.",
        "Documentation.LongDescription": "Vrací hodnotu <code>true</code>, pokud jde o typ, který může mít hodnotu null (může být <code>nullable</code>); jinak vrací hodnotu <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli číslo (<code>number</code>) může mít hodnotu null (může být nullable).",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Určí, jestli číslo, které může mít typ s hodnotou null (<code>type nullable number</code>), může mít hodnotu null (nullable).",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Vrátí informace o tom, jestli je záznam otevřeného typu.",
        "Documentation.LongDescription": "Vrátí logickou hodnotu (<code>logical</code>) označující, jestli je záznam <code>type</code> otevřený.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Určí, jestli je záznam <code>type [ A = number, ...]</code> otevřený.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Vrátí typ položky z typu seznamu.",
        "Documentation.LongDescription": "Vrátí typ položky ze seznamu <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít typ položky ze seznamu <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Vrací z typu typ, který nemůže mít hodnotu null (není nullable).",
        "Documentation.LongDescription": "Vrací z: <code>type</code> typ, který nemůže mít hodnotu null (není <code>nullable</code>).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrací typ, který nemůže mít hodnotu null (není nullable), čísla, které může mít typ s hodnotou null (<code>type nullable number</code>).",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Vrátí otevřenou verzi daného typu záznamu (nebo stejného typu, pokud už je otevřený).",
        "Documentation.LongDescription": "Vrátí otevřenou verzi daného záznamu (<code>record</code>) <code>type</code> (nebo stejného typu, pokud už je otevřený).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvoří otevřenou verzi pro <code>type [ A = number,…]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Vrátí záznam popisující pole typu záznamu, kde každé pole vráceného typu záznamu má odpovídající název a hodnotu.",
        "Documentation.LongDescription": "Vrátí záznam popisující pole záznamu <code>type</code>. Každé pole vráceného typu záznamu má odpovídající název a hodnotu v podobě záznamu <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Umožňuje najít název a hodnotu záznamu <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Vrátí seznam klíčů pro daný typ tabulky, který může být prázdný.",
        "Documentation.LongDescription": "Vrátí pravděpodobně prázdný seznam klíčů pro daný typ tabulky.<br>\r\n    <br>\r\n    Každý klíč je definován pomocí záznamu v následujícím formátu:\r\n    <ul>\r\n      <li>\r\n        <code>Sloupce</code>: seznam názvů sloupců, které definují klíč\r\n      </li>\r\n      <li>\r\n        <code>Primární</code>: <code>true</code> pokud je klíč primárním klíčem tabulky; jinak <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrátí informace o klíči pro typ tabulky.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Vrátí typ řádku typu tabulky.",
        "Documentation.LongDescription": "Vrátí typ řádku zadaného typu tabulky. Výsledkem bude vždy typ záznamu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrátí informace o typu řádku pro jednoduchou tabulku.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Vrátí sjednocení seznamu typů.",
        "Documentation.LongDescription": "Vrátí sjednocení seznamu typů <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Sestavte záznam do řetězce dotazu URI.",
        "Documentation.LongDescription": "Sestavte záznam <code>query</code> do řetězce dotazu URI, přičemž podle potřeby použijte uvozovací znaky.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Zakódujte řetězec dotazu, který obsahuje některé speciální znaky.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Kóduje speciální znaky podle RFC 3986.",
        "Documentation.LongDescription": "Kóduje speciální znaky ve vstupu <code>data</code> podle pravidel RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kóduje speciální znaky v řetězci \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Vrátí části absolutního identifikátoru URI vstupu jako záznam.",
        "Documentation.LongDescription": "Vrátí části identifikátoru <code>absoluteUri</code> vstupu jako záznam, který obsahuje hodnoty jako například Scheme, Host, Port, Path, Query, Fragment, UserName a Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Vrátí části absolutního identifikátoru URI www.adventure-works.com.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekóduje procentuálně zakódovaný řetězec.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Zadejte URL vaší služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Vrátí obsah stažený z adresy URL Azure DevOps Analytics Service jako binární hodnotu. Tato funkce používá různé přihlašovací údaje pro různé organizace."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Zadejte URL vaší služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Vrátí obsah stažený z adresy URL Azure DevOps Analytics Service jako binární hodnotu. Tato funkce používá globální přihlašovací údaje pro všechny přístupné organizace."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Vyjadřuje alternativní plány dotazů.",
        "Documentation.LongDescription": "Vyjadřuje alternativní plány dotazů v rámci výrazu plánu dotazů získaného pomocí Value.Expression(Value.Optimize(...)). Není určené pro jiná použití.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Vrátí strom abstraktní syntaxe (AST), který představuje výraz hodnoty.",
        "Documentation.LongDescription": "Vrátí strom abstraktní syntaxe (AST), který představuje výraz hodnoty",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Vytvoří z textové reprezentace hodnotu silného typu.",
        "Documentation.LongDescription": "Dekóduje hodnotu z textové reprezentace <code>text</code> a interpretuje ji jako hodnotu s příslušným typem.\r\n    Funkce <code>Value.FromText</code> přebere textovou hodnotu a vrátí číslo, logickou hodnotu, hodnotu null, datetime, duration nebo textovou hodnotu. Prázdná textová hodnota je interpretována jako hodnota null.\r\n    Volitelně je možné zadat i <code>culture</code> (např. en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Vrátí záznam obsahující metadata vstupu.",
        "Documentation.LongDescription": "Vrátí záznam obsahující metadata vstupu.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Signalizuje, že Value.Expression vrátí optimalizovaný výraz pro hodnotu.",
        "Documentation.LongDescription": "Pokud <code>value</code> představuje dotaz, který by se dá optimalizovat, při použití s Value.Expression tato funkce indikuje, že se má vrátit optimalizovaný výraz. Jinak se <code>value</code> předá bez efektu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Odebere ze vstupu metadata.",
        "Documentation.LongDescription": "Odebere ze vstupu metadata.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Vrátí typ předané hodnoty.",
        "Documentation.LongDescription": "Vrátí typ předané hodnoty.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.LongDescription": "Tato funkce je určená jenom pro interní použití.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Vrátí kód HTML pro zadanou adresu URL, jak je zobrazeno webovým prohlížečem.",
        "Documentation.LongDescription": "Vrátí kód HTML pro zadaný <code>url</code>, jak ho vidí webový prohlížeč. Může být zadán volitelný parametr záznamu <code>options</code> obsahující další vlastnosti. Záznam může obsahovat následující pole:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Pokud má cílový web potuchu o klíči rozhraní API, tento parametr lze použít k zadání názvu (nikoli hodnoty) parametru klíče, který musí být použit v adrese URL. Skutečná hodnota klíče je předána v přihlašovacím údaji.</li>\r\n        <li><code>WaitFor</code>: Určuje podmínku, na kterou se má čekat před stažením kódu HTML, kromě čekání na načtení stránky (což se děje vždycky). Může být záznam obsahující pole Timeout nebo Selector. Pokud je zadáno jenom Timeout, funkce bude před stažením kódu HTML čekat po zadanou dobou. Pokud je zadáno Selector i Timeout a dojde k vypršení časového limitu před ukončením selektoru, bude vyvolána chyba. Pokud je zadáno jenom Selector, žádné Timeout, uplatní se výchozí časový limit 30 s.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Přístup k datům",
        "Documentation.Examples": [
          {
            "Description": "Vrátí kód HTML pro web https://microsoft.com.",
            "Code": "Web.BrowserContents (\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrátí kód HTML pro web https://microsoft.com po vyčkání na existenci selektoru šablon stylů CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrátí kód HTML pro web https://microsoft.com po uplynutí deseti sekund.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vrátí kód HTML pro web https://microsoft.com po až desetisekundovém vyčkání na existenci selektoru šablon stylů CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Vrátí obsah stažený z adresy URL jako binární hodnotu.",
        "Documentation.LongDescription": "Vrátí obsah stažený z <code>url</code> jako binární. Může se zadat volitelný parametr záznamu <code>options</code>, aby se určily další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>Query</code> : Přidejte parametry dotazu k URL programově bez nutnosti starat se o uvozovac&#237; znaky</li>\r\n<li><code>ApiKeyName</code> : Pokud c&#237;lov&#253; web obsahuje z&#225;pis kl&#237;če rozhran&#237; API, jde tento parametr použ&#237;t k určen&#237; n&#225;zvu (nikoli hodnoty) parametru kl&#237;če, kter&#253; se mus&#237; použ&#237;t v adrese URL. Skutečn&#225; hodnota kl&#237;če je uveden&#225; v referenci.</li>\r\n<li><code>Headers</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako z&#225;znamu dopln&#237;te do požadavku HTTP dalš&#237; z&#225;hlav&#237;.</li>\r\n<li><code>Timeout</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako doby trv&#225;n&#237; se změn&#237; časov&#253; limit požadavku HTTP. V&#253;choz&#237; hodnota je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu vylouč&#237;te tyto kl&#237;če z&#225;hlav&#237; protokolu HTTP jako souč&#225;st v&#253;počtu pro ukl&#225;d&#225;n&#237; dat do mezipaměti.</li>\r\n<li><code>IsRetry</code> : Po zad&#225;n&#237; t&#233;to logick&#233; hodnoty jako true se budou při nač&#237;t&#225;n&#237; dat ignorovat všechny existuj&#237;c&#237; odpovědi v mezipaměti.</li>\r\n<li><code>ManualStatusHandling</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu zabr&#225;n&#237;te všem integrovan&#253;m zpracov&#225;n&#237;m požadavků HTTP, jejichž odpověď obsahuje jeden z těchto stavov&#253;ch k&#243;dů.</li>\r\n<li><code>RelativePath</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako textu ji před vytvořen&#237;m ž&#225;dosti připoj&#237;te k b&#225;zi URL.</li>\r\n<li><code>Content</code> : Po zad&#225;n&#237; t&#233;to hodnoty se změn&#237; webov&#253; požadavek z GET na POST, kter&#253; jako obsah POST použije hodnotu možnosti.</li>\r\n</ul>\r\n\r\n    Žádosti HTTP se provádí jako GET (pokud není zadán žádný obsah) nebo POST (pokud existuje obsah). Žádosti POST jdou provádět jen anonymně.\r\n    <br>\r\n    Hlavičky odpovědi HTTP jsou k dispozici jako metadata binárního výsledku. Mimo kontext vlastního datového konektoru je k dispozici jen podmnožina hlaviček odpovědí (z bezpečnostních důvodů).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Načtěte obsah <code>\"https://bing.com/search?q=Power+Query\"</code> pomocí možností RelativePath a Query. Tyto možnosti se dají použít k dynamickému dotazování na statickou základní adresu URL.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Proveďte příkaz POST s adresou URL a předejte binární datovou část JSON a analyzuje odpověď jako JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Připojení k zabezpečené adrese URL, která přijímá ověřovací klíč jako součást řetězce dotazu. Namísto pevného kódování tajného klíče v M (což by představovalo bezpečnostní riziko) \r\n    lze klíč bezpečně poskytnout tak, že zadát jeho název (nikoli hodnotu) v M, zvolíte ověřování webového rozhraní API a zadáte hodnotu klíče jako součástpřihlašovacích údajů webového rozhraní API.\r\n    Při použití tohoto způsobu bude následující příklad generovat požadavek na <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Vrátí hlavičky HTTP stažené z adresy URL jako hodnotu záznamu.",
        "Documentation.LongDescription": "Vrátí hlavičky stažené z <code>url</code> jako záznam. Může se zadat volitelný parametr záznamu <code>options</code>, aby se určily další vlastnosti. Záznam může obsahovat následující pole:\r\n    <ul>\r\n<li><code>Query</code> : Přidejte parametry dotazu k URL programově bez nutnosti starat se o uvozovac&#237; znaky</li>\r\n<li><code>ApiKeyName</code> : Pokud c&#237;lov&#253; web obsahuje z&#225;pis kl&#237;če rozhran&#237; API, jde tento parametr použ&#237;t k určen&#237; n&#225;zvu (nikoli hodnoty) parametru kl&#237;če, kter&#253; se mus&#237; použ&#237;t v adrese URL. Skutečn&#225; hodnota kl&#237;če je uveden&#225; v referenci.</li>\r\n<li><code>Headers</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako z&#225;znamu dopln&#237;te do požadavku HTTP dalš&#237; z&#225;hlav&#237;.</li>\r\n<li><code>Timeout</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako doby trv&#225;n&#237; se změn&#237; časov&#253; limit požadavku HTTP. V&#253;choz&#237; hodnota je 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu vylouč&#237;te tyto kl&#237;če z&#225;hlav&#237; protokolu HTTP jako souč&#225;st v&#253;počtu pro ukl&#225;d&#225;n&#237; dat do mezipaměti.</li>\r\n<li><code>IsRetry</code> : Po zad&#225;n&#237; t&#233;to logick&#233; hodnoty jako true se budou při nač&#237;t&#225;n&#237; dat ignorovat všechny existuj&#237;c&#237; odpovědi v mezipaměti.</li>\r\n<li><code>ManualStatusHandling</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako seznamu zabr&#225;n&#237;te všem integrovan&#253;m zpracov&#225;n&#237;m požadavků HTTP, jejichž odpověď obsahuje jeden z těchto stavov&#253;ch k&#243;dů.</li>\r\n<li><code>RelativePath</code> : Po zad&#225;n&#237; t&#233;to hodnoty jako textu ji před vytvořen&#237;m ž&#225;dosti připoj&#237;te k b&#225;zi URL.</li>\r\n</ul>\r\n\r\n    Žádost HTTP se provádí metodou HEAD. Mimo kontext vlastního datového konektoru je k dispozici jen podmnožina hlaviček odpovědí (z bezpečnostních důvodů).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pomocí možností RelativePath a Query načtěte hlavičky HTTP pro <code>\"https://bing.com/search?q=Power+Query\"</code>.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Autorizační kontext, vůči kterému je podmínka položky řízení přístupu (ACE) vyhodnocena.",
        "Documentation.LongDescription": "Autorizační kontext, vůči kterému je podmínka položky řízení přístupu (ACE) vyhodnocena.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabulka položek řízení přístupu (ACE).",
        "Documentation.LongDescription": "Uspořádaná tabulka položek řízení přístupu (ACE) představujících pravidla autorizace. Řádky jsou v daném pořadí vyhodnocovány pro aktuální kontext autorizace a první řádek, pro který výraz <code>Condition</code> vrátí hodnotu true, určuje pravidlo, které se použije. Sloupec <code>Action</code> představuje druh akce, na kterou se pravidlo použije. Sloupec <code>AccessControlKind</code>určuje, jestli má být pro tuto akci přístup povolen nebo odepřen.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Určuje typ řízení přístupu.",
        "Documentation.LongDescription": "Určuje typ řízení přístupu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny hodnoty",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny hodnoty",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny binární hodnoty.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny binární hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Určuje typ binárního kódování.",
        "Documentation.LongDescription": "Určuje typ binárního kódování.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Určuje, kolikrát by se položka podle očekávání měla objevit ve skupině.",
        "Documentation.LongDescription": "Určuje, kolikrát by se položka podle očekávání měla objevit ve skupině.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Popisuje druh uložení do vyrovnávací paměti, ke kterému má dojít.",
        "Documentation.LongDescription": "Popisuje druh uložení do vyrovnávací paměti, ke kterému má dojít.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny bajty.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny bajty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Určuje pořadí bajtů.",
        "Documentation.LongDescription": "Určuje pořadí bajtů.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny znaky.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny znaky.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Určuje typ komprese.",
        "Documentation.LongDescription": "Určuje typ komprese.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Určuje význam uvozovek v dokumentech CSV.",
        "Documentation.LongDescription": "Určuje význam uvozovek v dokumentech CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Typ, který představuje hodnotu měny",
        "Documentation.LongDescription": "Typ, který představuje hodnotu měny",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny hodnoty date.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny hodnoty date.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny hodnoty data a času bez přiřazeného časového pásma.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny hodnoty data a času bez přiřazeného časového pásma.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny hodnoty data a času relativně k časovému pásmu.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny hodnoty data a času relativně k časovému pásmu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Určuje den týdne.",
        "Documentation.LongDescription": "Určuje den týdne.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Typ, který představuje desetinné číslo s pevnou desetinnou čárkou",
        "Documentation.LongDescription": "Typ, který představuje desetinné číslo s pevnou desetinnou čárkou",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Typ, který představuje číslo s plovoucí desetinnou čárkou a dvojitou přesností.",
        "Documentation.LongDescription": "Typ, který představuje číslo s plovoucí desetinnou čárkou a dvojitou přesností.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny hodnoty doby trvání.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny hodnoty doby trvání.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Určuje očekávanou akci pro nadbytečné hodnoty v řádku, který obsahuje víc sloupců, než se očekávalo.",
        "Documentation.LongDescription": "Určuje očekávanou akci pro nadbytečné hodnoty v řádku, který obsahuje víc sloupců, než se očekávalo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny funkce.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny funkce.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Určuje typ seskupení.",
        "Documentation.LongDescription": "Pro danou hodnotu klíče může být vytvořeno více místních skupin se stejnou hodnotou klíče, ale pro danou hodnotu klíče je vytvořena pouze jedna globální skupina.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Typ, který reprezentuje hodnotu GUID.",
        "Documentation.LongDescription": "Typ, který reprezentuje hodnotu GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identita představuje uživatele, skupinu, zařízení nebo jinou identifikovatelnou věc.",
        "Documentation.LongDescription": "Identita představuje uživatele, skupinu, zařízení nebo jinou identifikovatelnou věc.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Určuje obor, ve kterém jsou identity vytvářeny a porovnávány.",
        "Documentation.LongDescription": "Určuje obor, ve kterém jsou identity vytvářeny a porovnávány.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Typ, který představuje 16bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Typ, který představuje 16bitové celé číslo se znaménkem",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Typ, který představuje 32bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Typ, který představuje 32bitové celé číslo se znaménkem",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Typ, který představuje 64bitové celé číslo se znaménkem",
        "Documentation.LongDescription": "Typ, který představuje 64bitové celé číslo se znaménkem",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Typ, který představuje 8bitové celé číslo se znaménkem.",
        "Documentation.LongDescription": "Typ, který představuje 8bitové celé číslo se znaménkem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Určuje spojovací algoritmus, který se má použít při operaci spojení.",
        "Documentation.LongDescription": "Určuje spojovací algoritmus, který se má použít při operaci spojení.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Určuje typ operace spojení.",
        "Documentation.LongDescription": "Určuje typ operace spojení.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Určuje levou nebo pravou tabulku spojení.",
        "Documentation.LongDescription": "Určuje levou nebo pravou tabulku spojení.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Popisuje typ klauzule limitu podporované dialektem SQL používaným tímto zdrojem dat.",
        "Documentation.LongDescription": "Popisuje typ klauzule limitu podporované dialektem SQL používaným tímto zdrojem dat.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny seznamy.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny seznamy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny logické hodnoty.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny logické hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Určuje očekávanou akci pro chybějící hodnoty v řádku, který obsahuje míň sloupců, než se očekávalo.",
        "Documentation.LongDescription": "Určuje očekávanou akci pro chybějící hodnoty v řádku, který obsahuje míň sloupců, než se očekávalo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Typ, který reprezentuje hodnotu null",
        "Documentation.LongDescription": "Typ, který reprezentuje hodnotu null",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Typ, který reprezentuje všechna čísla.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechna čísla.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Určuje typy hodnot, které může služba OData vynechat.",
        "Documentation.LongDescription": "Určuje typy hodnot, které může služba OData vynechat.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Určuje výskyt prvku v sekvenci.",
        "Documentation.LongDescription": "Určuje výskyt prvku v sekvenci.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Určuje směr řazení.",
        "Documentation.LongDescription": "Určuje směr řazení.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Typ, který reprezentuje textové heslo.",
        "Documentation.LongDescription": "Typ, který reprezentuje textové heslo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Typ, který reprezentuje procentní hodnotu.",
        "Documentation.LongDescription": "Typ, který reprezentuje procentní hodnotu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Určuje typ režimu percentilu.",
        "Documentation.LongDescription": "Určuje typ režimu percentilu.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Určuje přesnost porovnání.",
        "Documentation.LongDescription": "Určuje přesnost porovnání.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Určuje styl uvozovek.",
        "Documentation.LongDescription": "Určuje styl uvozovek.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Určuje typ řazení.",
        "Documentation.LongDescription": "Určuje typ řazení.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny záznamy.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny záznamy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Označuje, jestli se má pořadí počítat od začátku nebo od konce vstupu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Určuje směr zaokrouhlení, když by se dalo o stejný zlomek zaokrouhlit na dvě čísla.",
        "Documentation.LongDescription": "Určuje směr zaokrouhlení, když by se dalo o stejný zlomek zaokrouhlit na dvě čísla.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Platné možnosti pro možnost režimu provádění SAP Business Warehouse.",
        "Documentation.LongDescription": "Platné možnosti pro možnost režimu provádění SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Platné možnosti pro možnost distribuce SAP HANA.",
        "Documentation.LongDescription": "Platné možnosti pro možnost distribuce SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operátor rozsahu pro vstupní parametry rozsahu SAP HANA",
        "Documentation.LongDescription": "Operátor rozsahu pro vstupní parametry rozsahu SAP HANA",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Typ, který představuje číslo s plovoucí desetinnou čárkou a jednoduchou přesností.",
        "Documentation.LongDescription": "Typ, který představuje číslo s plovoucí desetinnou čárkou a jednoduchou přesností.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokol bude použit při připojování k instanci Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny tabulky",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny tabulky",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny textové hodnoty.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny textové hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Určuje typ kódování textu.",
        "Documentation.LongDescription": "Určuje typ kódování textu.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Jedná se o typ, který reprezentuje všechny časové hodnoty.",
        "Documentation.LongDescription": "Jedná se o typ, který reprezentuje všechny časové hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Určuje úroveň trasování.",
        "Documentation.LongDescription": "Určuje úroveň trasování.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Typ, který reprezentuje všechny typy.",
        "Documentation.LongDescription": "Typ, který reprezentuje všechny typy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Typ, který reprezentuje textový identifikátor URI.",
        "Documentation.LongDescription": "Typ, který reprezentuje textový identifikátor URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Určuje metodu HTTP.",
        "Documentation.LongDescription": "Určuje metodu HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
